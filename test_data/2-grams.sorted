38900
the //	1
the function	94
the if	3
the code	126
the compiler	117
the time	48
the use	12
the more	2
the memory	16
the data	34
the program	79
the vector	15
the different	12
the same	158
the functions	13
the only	4
the CPU	54
the other	17
the instruction	8
the point	2
the loop	60
the one	5
the cache	20
the integer	11
the set	1
the class	11
the floating	13
the example	2
the compilers	11
the most	39
the double	1
the size	28
the Intel	23
the pointer	9
the library	17
the multiple	3
the two	14
the object	27
the number	39
the static	6
the 64-bit	7
the C++	9
the array	17
the many	2
the possible	1
the clock	12
the version	3
the value	47
the objects	8
the variable	22
the variables	2
the return	2
the table	17
the performance	24
the very	1
the software	12
the order	14
the long	1
the 32-bit	3
the branch	9
the member	7
the way	8
the elements	9
the const	4
the called	2
the address	26
the 4	1
the critical	36
the call	6
the 8	1
the bit	2
the operating	23
the unsigned	1
the first	33
the register	5
the optimization	7
the libraries	1
the code.	15
the time.	3
the template	10
the registers	1
the need	4
the pointers	1
the test	4
the new	8
the user	22
the even	1
the method	3
the access	2
the SSE2	23
the following	26
the system	5
the 32	1
the file	6
the programming	2
the dynamic	3
the part	1
the bits	3
the type	10
the case	12
the cases	2
the short	1
the &	4
the simple	3
the instructions	1
the processors	2
the available	4
the constant	8
the error	5
the stack	18
the Gnu	17
the function.	11
the extra	5
the assembly	4
the large	2
the while	4
the arrays	10
the work	7
the Windows	3
the calls	2
the calculations	6
the execution	8
the result	22
the processor	7
the compiled	4
the big	1
the threads	5
the best	19
the necessary	7
the speed	9
the specific	4
the virtual	8
the common	2
the thread	5
the exception	6
the allocated	3
the overflow	3
the integers	1
the option	11
the power	4
the matrix	8
the AVX	13
the line	3
the optimized	4
the manual	2
the calculated	2
the calculation	18
the uses	1
the four	7
the parameters	4
the check	2
the problem	8
the solution	3
the container	5
the advantage	3
the supported	1
the operators	1
the few	1
the list	4
the likely	1
the structure	6
the inline	1
the standard	9
the hardware	6
the values	8
the sign	16
the copy	2
the memory.	3
the well	1
the information	2
the addresses	6
the shared	6
the program.	12
the intermediate	5
the allocation	1
the write	1
the above	15
the programs	1
the problems	5
the optimal	12
the space	1
the dispatching	2
the particular	1
the microprocessor	16
the next	17
the branches	1
the Mac	1
the multiplication	7
the application	12
the caching	1
the expression	8
the complicated	1
the dependency	1
the members	2
the Boolean	5
the cache.	4
the intrinsic	2
the methods	2
the development	2
the mathematical	1
the block	1
the name	4
the systems.	1
the needs	1
the conversion	4
the various	1
the disadvantage	4
the high	4
the zero	1
the Microsoft	4
the parameter	2
the division	1
the source	6
the cost	6
the resources	1
the induction	3
the reason	4
the dispatcher	7
the string	1
the programmer	18
the three	1
the keyword	6
the end	16
the &&	1
the |	2
the examples	3
the difference	7
the data.	4
the runtime	4
the last	7
the parts	2
the optimizations	1
the graphics	1
the framework	2
the numbers	3
the dispatch	6
the calling	2
the XMM	5
the second	11
the higher	1
the vectors	2
the AVX2	1
the piece	2
the x86	6
the binary	3
the advantages	4
the results	2
the storage	2
the old	8
the options	2
the feature	2
the link	1
the appropriate	11
the constructor	1
the function,	2
the operands	9
the innermost	11
the compiler.	7
the advanced	4
the range	2
the start	2
the modules	3
the smaller	2
the core	2
the relevant	2
the negative	1
the reductions	2
the example:	1
the contentions	1
the main	8
the positive	1
the loop.	9
the computer	8
the overhead	4
the pointer.	1
the C	1
the global	1
the conversions	3
the statement	1
the relative	1
the installation	3
the syntax	4
the cases.	1
the choice	5
the STL	7
the profiler	2
the index	2
the inlining	1
the size.	2
the network	3
the slow	1
the desired	12
the #pragma	2
the whole	7
the inefficient	1
the level-2	10
the response	6
the hot	4
the code,	5
the instance	1
the fact	1
the position-independent	2
the out-of-order	4
the output	2
the level-1	10
the resources.	1
the task	1
the local	3
the costs	6
the inlined	3
the class.	4
the database	1
the constants	2
the frame	2
the special	1
the destructor	6
the preceding	12
the safe	1
the Pentium	1
the efficiency	2
the repeat	5
the unroll	3
the algorithm	2
the sum	1
the strings	2
the exponent	4
the possibility	9
the discussion	1
the maximum	4
the alignment	3
the right	11
the offset	7
the compatibility	1
the macro	1
the object.	4
the library.	3
the calculations.	2
the operand	2
the final	12
the sake	13
the tasks	1
the effect	1
the amount	6
the variable.	2
the time,	1
the copying	1
the performance.	1
the processing	1
the so-called	7
the total	9
the child	2
the priority	1
the disk	1
the iteration	1
the counters	1
the stack.	9
the full	5
the thread.	1
the RAM	1
the rows	4
the least	3
the algebraic	1
the logical	3
the bitwise	3
the handle	1
the heap	6
the target	4
the entire	10
the executable	5
the subexpression	1
the nontemporal	2
the bounds	1
the SSE	4
the updates	1
the loading	2
the reading	2
the directly	1
the simplest	7
the situation	3
the message	1
the condition	3
the resource	1
the PathScale	1
the previous	10
the vector.	2
the program,	6
the loops	1
the SSE4.1	2
the chapter	1
the risk	3
the header	3
the future	2
the fraction	2
the sequence	4
the compiler,	2
the CPU.	4
the length	6
the module	1
the beginning	10
the alternative	1
the current	5
the 'this'	1
the problem.	1
the row	1
the declaration	2
the series	1
the features	1
the user.	5
the chosen	3
the device	1
the subsequent	5
the low	1
the latter	7
the default	2
the time-consuming	1
the diagonal	7
the logic	2
the Microsoft,	2
the hard	2
the typical	1
the derived	4
the overflow.	1
the fully	1
the factorial	1
the OpenMP	2
the parent	1
the value.	1
the memcpy	2
the procedure	1
the parallelism	2
the prediction	1
the polymorphic	2
the graphical	1
the lower	2
the label	1
the iterations	1
the misprediction	2
the background	2
the chain	1
the PLT	2
the heavy	2
the additions	1
the system.	1
the inputs	2
the interrupt	2
the fastest	4
the DLL	2
the factors	2
the Gnu,	5
the arrays.	2
the branch.	1
the required	2
the GOT	2
the array.	2
the general	3
the preferred	2
the software.	2
the interpreted	1
the vectors.	1
the YMM	2
the purpose	1
the -fpic	1
the D	1
the sections	1
the carry	6
the debugging	1
the table.	2
the object,	1
the trick	1
the disadvantages	2
the update	2
the body	2
the Java	1
the memory,	1
the system,	2
the absolute	3
the machine	1
the CPUID	6
the saved	1
the changes	1
the processor.	3
the linker	5
the measurements	1
the representation	1
the factor	2
the core.	1
the rules	2
the smallest	7
the responsibility	7
the Borland	3
the sense	6
the latest	6
the reciprocal	4
the log	1
the thousand	1
the break	2
the Common	1
the scope	5
the principle	1
the throughput	4
the expected	1
the application.	3
the largest	3
the dispatched	1
the normal	1
the portability	1
the availability	5
the .NET	2
the newest	5
the B	1
the debugger	3
the ^	1
the base	1
the result.	1
the compilation	1
the behavior	3
the 7	1
the form	3
the worst	4
the job	4
the biggest	4
the users	1
the structure.	1
the requirements	3
the profiler.	1
the __fastcall	1
the increment	1
the method.	1
the remote	1
the future.	4
the swapping	1
the AVX512	1
the memset	1
the rest	5
the Digital	1
the third	1
the CISC	1
the effort	2
the reduction	2
the strict	2
the event	3
the select	1
the actual	4
the console	1
the advice	3
the pow	1
the recommendation	1
the physical	1
the pitfalls	1
the equivalent	1
the command	1
the relatively	1
the guidelines	1
the excessive	1
the latency	4
the larger	2
the project	2
the 107	1
the upper	1
the key	1
the combined	2
the ever	1
the division.	1
the present	2
the strlen	2
the divisor	2
the bit-mask:	1
the highest	2
the eight-element	4
the obstacles	1
the asmlib	2
the modulo	1
the loader	3
the SVML	1
the "Intel	2
the drawbacks	3
the commercial	1
the x86-64	1
the pipeline	3
the flush-to-zero	2
the dispatcher.	1
the queue	1
the {}	1
the appendix	1
the empty	1
the C-style	2
the bottleneck	2
the directive	1
the lrint	2
the user's	3
the area	1
the consequence	1
the assumption	2
the double.	1
the image	1
the worst-case	1
the individual	1
the diagonal.	4
the original	3
the mirror	1
the functionality	1
the counts.	1
the unit-test	2
the implicit	1
the interval	3
the 33	1
the considerations	1
the selected	2
the techniques	2
the resolution	1
the advices	1
the 49	1
the wrong	2
the compiler-generated	1
the combination	1
the distance	1
the C/C++	1
the 124	1
the basis	1
the contents	2
the unfortunate	1
the parameter,	1
the time-	1
the divisions	1
the dividend	3
the stack,	3
the residual	3
the operations:	1
the operands.	1
the nearest	2
the 145	1
the correct	2
the contrary,	3
the Internet	2
the easiest	1
the track	1
the ReadTSC	1
the same.	3
the technical	1
the specified	2
the history	1
the microprocessor.	2
the micro-op	1
the linker.	2
the terminating	2
the numerically	2
the AVX-512	1
the market	1
the logarithm	3
the services	1
the product	1
the $B1$2	1
the flags	1
the past	1
the object's	2
the context.	1
the goal	1
the screen.	2
the market.	2
the dangers	1
the external	1
the CPU-specific	1
the mouse.	2
the relocations	1
the early	1
the heap.	1
the FDIV	1
the decimal	1
the hint	1
the loop,	1
the loop:	1
the minimum	1
the destination	1
the CPU,	1
the answers	1
the Standard	1
the const_cast	1
the resulting	1
the programmer.	1
the unsafe	1
the movements	1
the executable.	1
the lowest	1
the parentheses	1
the exponent,	2
the cross-platform	1
the comments	1
the conflicting	1
the 61	1
the sampling	1
the theoretical	1
the file,	1
the question	1
the denormals-are-zero	1
the branching	1
the caller	2
the G	1
the creation	1
the vectorclass	1
the delay.	1
the server.	1
the array,	1
the "override"	1
the "worst	2
the first-in-last-out	1
the alignment.	1
the template.	1
the container,	1
the container.	2
the inverted	2
the index,	1
the time-consumers	1
the recursion	1
the planning	1
the R	1
the fraction.	2
the ones	2
the trivial	1
the symbolic	1
the ability	2
the bottlenecks	1
the FMA4	1
the processor).	2
the corresponding	2
the generic	1
the reader	2
the low-level	1
the book	1
the word	1
the obstacle	1
the IDE	1
the factorials	1
the subroutine	1
the time-critical	1
the "best	1
the effort.	2
the overall	2
the factorials,	1
the reinstallation	1
the 512-bit	1
the disassembly	1
the FAQ	1
the Xnu	1
the rows,	1
the LLVM	1
the importance	1
the Boost	1
the tolerance	1
the transformation	1
the transitions	1
the stack).	1
the worst-	1
the initial	1
the workload	1
the remaining	1
the formula:	1
the usual	1
the performance,	1
the profile.	1
the IDE,	1
the IEEE	1
the arrays:	1
the capability	1
the programmers'	1
the processor)	1
the CPU-type	1
the even-numbered	1
the __assume_aligned	1
the lifetime	1
the "generate	1
the evaluation	1
the bias	1
the MKL	1
the majority	1
the wheel.	1
the self-explaining	1
the resource-hungry	1
the weekdays.	1
the loader.	1
the strongest	1
the sizeof	1
the GetTickCount	1
the original,	1
the .exe	1
the burdensome	1
the scarcity	1
the other,	1
the rightmost	1
the insertion	1
the hint,	1
the spell	1
the likelihood	1
the preprocessor	1
the Professional	1
the responsi-	1
the "FDIV	1
the reciprocal:	1
the post-increment	1
the oldest	1
the grandparent	1
the integer-to-float	1
the BTB	1
the label.	1
the framework,	1
the end.	1
the STL.	1
the user-written	1
the following:	1
the difference,	1
the truth	1
the ADX	1
the producer	1
the iterator	1
the standards	1
the broader	1
the EXCLUSIVE	1
the representation,	1
the computational	1
the next.	1
the if-branch	1
the "Macro	1
the possibilities	1
the <,	1
the non-reduced	1
the startup	1
the exponent:	1
the conversion.	1
the sign,	1
the GOT,	1
the fundamental	1
the design	1
the texts	1
the dimensions	1
the best-case	1
the destructor,	1
the wires	1
the _mm_clflush	1
the SelectAddMul	1
the beginning.	1
the former	1
the pipeline.	1
the sign-bit	1
the devirtualization	1
the attention	1
the level-	1
the opposite:	1
the for-loop:	1
the complication	1
the std::unexpected()	1
the strictness	1
the application,	1
the essential	1
the series:	1
the pros	1
the leftmost	1
the DelayFiveSeconds	1
the occurrence	1
the exact	1
the circumstances	1
the Pentium-II	1
the device.	1
the single-thread	1
the newsgroup	1
the C99	1
the columns.	1
the Active	1
the resultant	1
the sequence,	1
the kind:	1
the unit-	1
the granularity	1
the BIOS	1
the task-specific	1
is the	63
is a	136
is of	4
is to	52
is and	1
is in	3
is for	3
is that	50
is //	1
is it	1
is by	1
is on	2
is as	5
is not	112
is an	20
is time	1
is more	41
is then	2
is memory	1
is data	1
is different	1
is because	8
is only	14
is other	2
is all	2
is used	33
is one	5
is no	52
is set	2
is floating	1
is most	4
is using	2
is double	1
is float	1
is two	1
is number	1
is also	23
is efficient	2
is many	1
is possible	31
is clock	1
is so	10
is 2	1
is very	17
is long	2
is branch	1
is member	1
is faster	32
is stored	13
is called	29
is 4	1
is critical	1
is 8	1
is less	17
is unsigned	1
is often	20
is how	1
is template	1
is useful	13
is even	1
is sure	2
is always	8
is 16	1
is out	3
is 32	2
is file	1
is part	2
is 0	2
is short	1
is available	10
is constant	1
is important	20
is accessed	9
is large	3
is compiled	11
is big	4
is best	3
is necessary	13
is specific	1
is much	7
is common	4
is exception	1
is allocated	4
is small	6
is good	4
is done	11
is therefore	14
is optimized	3
is inside	2
is explained	2
is calculated	12
is 128	2
is four	1
is another	1
is advantageous	13
is implemented	8
is known	14
is supported	11
is eight	1
is likely	22
is doing	3
is 1	1
is simply	12
is able	3
is certain	3
is shared	1
is quite	8
is used.	10
is recommended	21
is fast	3
is optimal	6
is typically	6
is preferably	1
is automatically	1
is implementation	1
is never	6
is high	2
is zero	3
is Microsoft	2
is running	5
is n	1
is better	2
is too	6
is needed	5
is difficult	7
is transferred	4
is longer	1
is aligned	1
is actually	5
is later	1
is calling	1
is declared	2
is higher	1
is bigger	3
is divisible	6
is 512	2
is usually	11
is called.	10
is based	3
is made	3
is just	4
is smaller	3
is relevant	3
is replaced	3
is negative	1
is predicted	3
is loaded	4
is compatible	4
is 1.	1
is intended	10
is avoided	1
is slow	3
is inefficient	5
is described	2
is particularly	4
is given	2
is outside	2
is limited	5
is sometimes	2
is inlined	1
is still	3
is safe	2
is further	1
is clear	2
is obtained	7
is possibly	1
is overloaded	1
is possible.	1
is OS	1
is needed.	5
is changed	2
is true	3
is initialized	4
is discussed	5
is copied	4
is defined	3
is Visual	1
is rarely	6
is easier	3
is identical	2
is similar	2
is significant	1
is something	1
is invalid	1
is within	1
is used,	5
is organized	2
is added	5
is approximately	3
is easy	3
is chosen	3
is slightly	3
is independent	2
is low	1
is enabled.	9
is near	1
is provided	3
is inefficient.	1
is critical.	3
is available.	3
is brand	1
is executed.	6
is faster.	1
is pure	2
is fully	2
is mispredicted	4
is standardized	1
is included	3
is 12	1
is now	1
is lower	1
is converted	3
is equally	2
is designed	2
is fragmented	1
is fast.	2
is fastest	2
is required	2
is almost	4
is preferred	3
is interpreted	3
is exactly	2
is determined	3
is resolved	3
is poorly	3
is important.	5
is allowed	1
is distributed	3
is generally	2
is called,	5
is free	1
is far	1
is hardly	3
is waiting	2
is available,	1
is measured	3
is Intel's	1
is equal	3
is compact	1
is spent	2
is 15	1
is expected	1
is convenient	1
is costly	2
is efficient,	1
is poor	1
is evaluated	1
is deallocated	1
is permissible	1
is 4.	1
is obvious	1
is swapped	2
is portable	1
is becoming	1
is executed	3
is finished.	4
is split	1
is created	2
is already	3
is nothing	2
is increased	1
is nonzero	1
is equivalent	1
is relatively	1
is inefficient,	3
is necessarily	1
is safer	2
is larger	1
is unfortunately	1
is divided	1
is valid	1
is seen	1
is contiguous	2
is necessary.	1
is increasing	1
is AND'ed	4
is definitely	1
is doubled.	3
is true,	4
is __asm	1
is currently	2
is better.	1
is preferable	2
is enabled	2
is sufficiently	1
is bad	1
is said	2
is declared.	4
is true.	1
is running.	2
is serial	2
is guaranteed	2
is commonly	1
is extended	1
is contained	1
is going	1
is cached.	1
is unsigned.	1
is treated	2
is prevented	2
is seldom	1
is double.	1
is 50%	1
is illustrated	2
is optimized.	1
is coded	2
is represented	1
is kept	1
is selected	1
is multiplied	1
is inferior	1
is unable	2
is finished	1
is run.	3
is simpler	2
is deleted	2
is slow,	3
is performed	2
is removed	1
is unfortunate	1
is loaded.	1
is implemented.	2
is annoying	1
is elsewhere	1
is filled	1
is supplied	1
is translated	2
is correct	1
is stored.	1
is inlined.	1
is probably	1
is beyond	3
is infinity	1
is false,	1
is negligible	2
is best.	2
is odd	1
is handled	2
is implicitly	1
is valid.	3
is slow.	2
is limited.	2
is ported	1
is big.	1
is extremely	3
is certainly	3
is indeed	2
is sufficient	2
is evicted	1
is impossible	1
is mostly	1
is type-casted	1
is 1024	1
is 400	1
is freed	1
is biased	1
is reused	1
is compiled.	2
is volatile.	1
is supported.	1
is pure.	1
is bypassed	1
is -0	1
is achieved	1
is inserted	1
is specified.	1
is overwritten,	1
is false.	1
is small.	1
is unsafe	1
is concentrated	2
is capable	1
is worthwhile	1
is eliminated.	1
is profitable	1
is unstable	1
is required.	2
is 8192	1
is lost.	1
is obviously	1
is allowed.	1
is (columns	1
is defined.	1
is known.	2
is restarted	1
is dividing	1
is fed	1
is relocated	1
is consistent	1
is created.	1
is started.	1
is deleted.	1
is needed:	2
is loaded,	2
is 0.	1
is rolled	1
is busy	2
is updated.	1
is wasted	2
is stronger	1
is fast,	1
is somewhat	1
is invalid.	1
is heavily	1
is available:	2
is closed.	2
is avoided.	1
is 95	1
is repeated	1
is accessed,	2
is inherently	1
is safer.	1
is 102	1
is terminated.	1
is moved,	1
is saturated.	1
is incremented.	1
is insufficient.	1
is unacceptable	1
is unchanged	1
is compiling.	1
is enabled:	1
is over.	1
is dead	1
is InstructionSet().The	1
is correlated	1
is ecx+eax*4.	1
is system-independent,	1
is occupied	1
is referencing	1
is unreasonably	1
is maintained	1
is aiming	1
is pushed	1
is requested.	1
is delayed	1
is assumed	1
is (int)(&list[100])	1
is mirrored	1
is closest	1
is utilized	1
is developing	1
is supposed	1
is copyrighted	1
is acceptable.	1
is unnecessarily	1
is caught	1
is checked	1
is happening.	1
is OK,	1
is opposite).	1
is reset	1
is unchanged,	1
is reserved	1
is ambiguous	1
is counting	1
is provoked	1
is repetitive.	1
is artificially	1
is advisable	1
is inexact	1
is exact.	1
is created,	1
is organized.	1
is reflected,	1
is terminated	1
is returned.	1
is pipelined,	1
is taken.	1
is taken,	1
is clearly	1
is destroyed.	1
is shut	1
is re-allocated	1
is signed,	1
is 83	1
is virtually	1
is expanded	1
is fastest.	1
is distributed.	1
is unrealistic	1
is deprecated.	1
is strongly	1
is obvious.	1
is obvious,	1
is servicing.	1
is inferior.	1
is cached,	1
is rare.	1
is "undefined".	1
is admittedly	1
is 8*1024/64	1
is stored?	1
is Borland's	1
is Perl.	1
is wrong,	1
is rebooted.	1
is unlikely	1
is profitable.	1
is considerable.	1
is costless.	1
is responsible	1
is tempting	1
is minimized.	1
is minimized	1
is re-loaded	1
is incurred	1
a is	4
a a	4
a to	9
a and	19
a in	1
a =	65
a function	68
a code	5
a -	12
a compiler	10
a x	1
a time	8
a use	1
a more	5
a will	2
a memory	11
a data	4
a program	29
a vector	17
a make	2
a different	19
a only	1
a CPU	7
a loop	28
a one	1
a cache	10
a set	2
a class	18
a floating	13
a double	6
a pointer	35
a +	14
a library	4
a float	4
a multiple	9
a number	5
a static	6
a 64-bit	6
a C++	3
a *	11
a possible	2
a clock	6
a version	1
a value	4
a variable	20
a 2	1
a table	13
a performance	2
a very	18
a software	9
a long	13
a 32-bit	4
a branch	11
a <	1
a member	13
a way	7
a faster	1
a const	4
a critical	5
a call	2
a register	11
a 64	1
a rather	1
a time.	4
a template	10
a test	4
a new	27
a user	2
a useful	2
a system	2
a file	6
a programming	1
a dynamic	4
a part	2
a short	2
a &	11
a simple	17
a constant	17
a stack	2
a function.	2
a large	9
a must	1
a ;	3
a Windows	2
a result	3
a processor	2
a big	7
a language	1
a specific	15
a much	1
a single	25
a virtual	6
a common	8
a thread	6
a small	8
a +=	2
a good	14
a power	28
a matrix	12
a Linux	1
a precision	1
a line	2
a manual	1
a /	1
a 128	3
a check	1
a problem	4
a known	1
a solution	1
a container	9
a few	22
a list	6
a structure	6
a standard	2
a hardware	6
a :	2
a store	3
a copy	2
a well	1
a certain	3
a counter	2
a shared	7
a program.	5
a was	1
a space	1
a lot	26
a particular	24
a microprocessor	3
a multiplication	2
a complicated	3
a dependency	2
a Boolean	2
a signed	3
a model	1
a separate	16
a block	1
a needs	1
a disadvantage	4
a high	8
a parameter	3
a reference	3
a string	4
a programmer	1
a better	5
a lookup	6
a &&	7
a |	7
a difference	1
a mechanism	1
a runtime	2
a means	1
a ||	5
a >	1
a longer	1
a graphics	7
a public	3
a framework	2
a linked	8
a platform	1
a dispatch	1
a second	3
a higher	6
a piece	10
a binary	4
a 512	2
a union	2
a feature	3
a link	1
a constructor	1
a compiler.	2
a #define	1
a switch	4
a smaller	2
a negative	4
a positive	5
a loop.	1
a computer	2
a pointer.	6
a change	1
a global	5
a relative	2
a syntax	1
a profiler	5
a Windows,	1
a modern	1
a network	2
a slow	3
a whole	2
a level-2	2
a response	1
a hot	3
a given	2
a level-1	1
a task	3
a limited	4
a local	2
a database	2
a bool	1
a frame	2
a special	3
a shift	4
a destructor	5
a safe	2
a Pentium	4
a further	1
a sum	1
a discussion	2
a non-Intel	1
a maximum	1
a macro	3
a reduced	1
a variable.	2
a time,	1
a processing	1
a so-called	1
a total	2
a 128-bit	4
a full	1
a thread.	1
a square	1
a little	5
a logical	1
a smart	5
a subexpression	1
a bounds	1
a message	1
a condition	1
a parallel	1
a ?	2
a previous	1
a vector.	2
a program,	1
a similar	1
a risk	2
a garbage	1
a header	1
a future	1
a newer	2
a sequence	3
a significant	3
a linear	8
a penalty	1
a module	1
a 'this'	2
a problem.	1
a row	1
a matter	8
a series	6
a waste	6
a map	1
a 256-bit	1
a device	1
a non-static	2
a low	3
a default	1
a hard	4
a typical	4
a usability	1
a pure	2
a derived	4
a fully	1
a standardized	1
a parent	2
a false	2
a temporary	4
a procedure	3
a PC	2
a frequent	2
a prediction	1
a polymorphic	4
a register.	2
a kind	2
a graphical	3
a lower	2
a misprediction	2
a just-in-time	1
a try	1
a background	1
a PLT	1
a heavy	1
a hash	3
a profiling	1
a DLL	3
a branch.	1
a GOT	2
a fixed	3
a non-sequential	6
a jump	1
a random	1
a measure	1
a poorly	1
a vector,	1
a suitable	4
a serious	2
a far	1
a collection	1
a composite	4
a highly	1
a debug	2
a factor	2
a reliable	2
a thousand	4
a compile-time	1
a constant.	1
a complex	1
a dispatched	1
a normal	1
a convenient	1
a portability	1
a reference,	1
a self-relative	1
a Core	1
a debugger	1
a ^	4
a base	2
a leaf	3
a six	1
a structure.	2
a profiler.	2
a loss	1
a remote	1
a considerable	4
a third	1
a multidimensional	2
a strict	1
a portable	1
a computer.	2
a list,	1
a realistic	3
a console	2
a hundred	4
a loop-carried	1
a compromise	2
a nonzero	1
a command	3
a relatively	1
a latency	1
a larger	1
a project	1
a valid	2
a loop-invariant	2
a key	2
a bit-mask:	2
a type.	1
a place	1
a bad	1
a mouse	1
a non-inlined	3
a round	1
a pipeline	1
a Taylor	1
a dispatcher.	1
a class,	1
a queue	1
a protected	2
a dramatic	1
a contained	1
a bottleneck	1
a directive	1
a scarce	3
a suboptimal	3
a float,	1
a detailed	1
a dedicated	4
a breakpoint	1
a unit-test	1
a virus	1
a pointer,	2
a soft	2
a hyperthreading	1
a reasonable	2
a well-defined	3
a wrong	1
a combination	1
a hidden	1
a speed-critical	1
a high-level	1
a multithreaded	1
a parameter,	1
a circular	3
a register,	1
a natural	2
a sorted	3
a negligible	1
a well-structured	1
a micro-op	1
a CPU-	1
a backup	1
a nearby	1
a pivot	1
a float.	1
a built-in	1
a complete	1
a variable,	2
a viable	2
a debugger.	2
a computationally	1
a subexpression.	1
a chip	1
a biased	1
a minor	1
a non-member	1
a decimal	1
a PC.	2
a hint	1
a case:	1
a GOT.	1
a string.	1
a 90%	1
a proxy	1
a floppy	1
a variable-size	1
a buffer.	1
a name.	1
a third-party	1
a null	2
a constructor,	1
a physics	1
a re-	1
a programmable	1
a time-consumer	1
a high-priority	1
a FIFO	2
a discussion.	1
a cheap	1
a division,	1
a first-in-last-out	1
a coprocessor	1
a systematic	2
a ^a	2
a release	2
a distinction	1
a symbolic	1
a parenthesis	2
a bitfield	2
a slight	1
a generic	1
a word	1
a matrix.	1
a universal	1
a non-virtual	1
a niche	1
a "move	1
a typo	1
a user-defined	1
a union:	1
a macro,	1
a macro.	1
a precious	1
a not-too-big	1
a basic	1
a "function".	1
a plug-in	1
a hand-	1
a low-priority	1
a monotonically	1
a top-of-stack	1
a button	1
a minimal	1
a blend	1
a wealth	1
a zigzag	1
a constructor.	1
a number).	1
a sensible	1
a compelling	1
a vector).	1
a formalism.	1
a narrow	1
a multitasking	1
a valuable	1
a learning	1
a 50-50	1
a double:	1
a First-In-Last-	1
a non-const	1
a key?	1
a password.	1
a year	1
a lineage	1
a server	1
a staircase	1
a 2'nd	1
a conditional	1
a polynomial.	1
a ready-made	1
a discrete	1
a disassembly,	1
a tag	1
a balanced	1
a First-In-First-	1
a fixed-size	1
a lookup-table	1
a DLL.	1
a request	1
a #define,	1
a plain	1
a genuine	1
a thread-like	1
a non-recursing	1
a thorough	1
a zero-terminated	1
a polymorphous	1
a technological	1
a bottleneck.	1
a temp1	1
a XOR	1
a stand	1
a zip	1
a reply	1
a graceful	1
a FILO	1
a driver	1
a Gauss	1
a funda-	1
a column-wise	1
a website.	1
a scalar	1
a higher-priority	1
a destructor.	1
a bit-mask	1
a pre-calculated	1
a printer	1
a union,	1
a square.	1
a strategy	1
a million	1
a minute	1
a textbook	1
a level-3	1
a unique	1
a couple	1
a template:	1
a ^0	1
a menu	1
a subset,	1
a BSF	1
a queue.	1
a constant:	1
a quadratic	1
of the	423
of a	117
of that	1
of it	1
of function	10
of code	25
of an	22
of compiler	5
of x	5
of this	19
of time	6
of when	2
of A	4
of memory	19
of data	13
of program	5
of vector	5
of different	19
of functions	4
of only	1
of CPU	5
of other	2
of instruction	2
of loop	4
of which	7
of all	5
of one	2
of cache	11
of integer	2
of class	1
of floating	9
of each	18
of example	3
of most	1
of using	22
of Intel	4
of b	4
of library	1
of i	9
of float	1
of two	4
of object	6
of static	4
of 64-bit	4
of C++	8
of such	3
of efficient	1
of array	5
of possible	5
of clock	1
of objects	8
of variable	5
of any	2
of some	3
of variables	1
of return	1
of 2	28
of table	1
of performance	3
of software	8
of order	3
of 32-bit	1
of branch	3
of member	1
of elements	18
of const	1
of 4	2
of call	1
of 8	4
of operating	2
of unsigned	1
of register	5
of 64	3
of optimization	4
of how	8
of code.	4
of time.	3
of template	1
of registers	4
of pointers	5
of test	4
of user	5
of these	18
of 16	2
of system	2
of 32	1
of programming	12
of dynamic	7
of bits	1
of operations	2
of type	3
of short	1
of simple	1
of instructions	1
of processors	4
of available	1
of error	3
of making	8
of times	4
of stack	2
of its	8
of CPUs	4
of extra	2
of assembly	1
of large	2
of arrays	4
of work	1
of calls	1
of calculations	3
of execution	2
of processor	2
of bytes	1
of big	1
of threads	2
of necessary	1
of element	1
of specific	2
of virtual	2
of several	1
of common	1
of exception	1
of allocated	1
of small	1
of overflow	4
of integers	3
of good	1
of Linux	1
of classes	1
of precision	2
of four	5
of parameters	1
of known	1
of container	2
of eight	2
of whether	2
of list	1
of structure	3
of doing	6
of every	2
of standard	2
of hardware	4
of optimizing	3
of memory.	3
of information	1
of intermediate	1
of both	1
of programs	1
of problems	1
of space	1
of microprocessor	2
of branches	4
of typically	1
of complicated	1
of handling	2
of dependency	1
of their	4
of Boolean	3
of 256	1
of intrinsic	1
of signed	1
of development	1
of mathematical	3
of separate	1
of #include	2
of various	1
of zero	1
of parameter	3
of induction	1
of n	2
of string	1
of end	1
of &&	1
of data.	7
of runtime	1
of ||	1
of expressions	2
of longer	1
of optimizations	2
of graphics	2
of public	1
of Intel,	9
of microprocessors	2
of platform	1
of your	1
of bigger	1
of <<	1
of binary	1
of storage	2
of 10	3
of CPUs.	2
of a[i]	1
of advanced	3
of points	1
of range	5
of modules	1
of smaller	1
of things	2
of main	1
of my	1
of errors	2
of unused	2
of columns	4
of dynamically	1
of consecutive	1
of modern	5
of 2.	6
of variables.	1
of lines	1
of position-independent	1
of out-of-order	2
of resources.	2
of task	1
of costs	1
of S1	2
of math	1
of temp	1
of inlined	1
of constants	2
of bool	1
of special	1
of algorithm	1
of sum	1
of Linux,	1
of registers.	2
of alignment	1
of compatibility	5
of macro	1
of 100	3
of reduced	1
of operations.	1
of time,	1
of copying	2
of optimization.	1
of containers	1
of disk	1
of unknown	1
of counters	1
of 2,	1
of full	1
of N	3
of RAM	3
of rows	2
of compiling	2
of precision.	1
of algebraic	1
of structures	2
of logical	2
of heap	1
of smart	1
of nontemporal	1
of bounds	1
of resource	1
of cores	3
of parallel	1
of calculating	1
of ebx	1
of e.g.	1
of sizes	2
of list[i]	1
of statements	1
of course	8
of templates	2
of CriticalFunction	1
of seconds	1
of CPU.	1
of f	2
of F1	1
of setting	1
of added	1
of approximately	1
of order.	2
of situations	1
of 256-bit	1
of finding	1
of purposes	1
of usability	1
of overflow.	2
of storage.	1
of addition,	1
of everything	2
of (or	1
of parent	3
of temporary	1
of procedure	1
of iterations	1
of background	1
of CPUs,	1
of additions	2
of j	1
of fastest	1
of devices	1
of branch.	1
of zero.	1
of multiplying	1
of software.	1
of jump	1
of vectors.	1
of lazy	2
of 1,	1
of vector,	3
of algebra	2
of suitable	1
of Java	2
of optimizations.	1
of exceptions	1
of machine	1
of changes	1
of storing	2
of 2:	2
of composite	1
of bits.	2
of speed.	1
of thousand	1
of Intel's	1
of course,	5
of scope	1
of Func	2
of c1	1
of portability	1
of comparing	1
of computers	1
of B	1
of five	3
of poor	1
of self-relative	1
of truncation	1
of powerful	1
of C++,	2
of mixed	1
of branches.	1
of communication	1
of inheritance	1
of backwards	2
of memset	1
of context	2
of reducing	1
of development,	1
of abc	3
of 250	1
of computing	1
of pointers,	1
of physical	1
of nonzero	1
of unacceptably	1
of n!	1
of Basic	2
of valid	1
of CPU-intensive	2
of manuals.	1
of 18	1
of two.	1
of ebx.	2
of m	1
of bad	1
of resources,	1
of declaring	1
of defining	1
of precision,	2
of u.f	1
of overflow,	1
of modifications	1
of efficiency.	2
of transferring	1
of structured	2
of going	1
of float,	1
of alloca	1
of unit-testing	2
of sequential	1
of error.	1
of abstraction	3
of code).	1
of aligning	1
of numbers:	1
of calculations:	1
of calculations,	1
of xxn	1
of int.	1
of position-	1
of C++.	1
of A,	1
of text	1
of Pascal	1
of overflow:	1
of coefficients	1
of longjmp	1
of competing	1
of efficiency,	1
of bookkeeping	1
of technical	1
of organizing	1
of measuring	1
of (0,0,0,0,0,0,0,0)	3
of microprocessor.	1
of returning	1
of security.	1
of (2n	1
of vectors,	1
of truncation.	1
of double,	1
of mispredictions	1
of allocations	1
of n.	1
of interpreting	2
of jumping	1
of x.	1
of (2,2,2,2,2,2,2,2)	3
of accumulators	1
of interpretation	1
of expressions,	1
of jobs.	1
of c+b	1
of CriticalFunction.	1
of keeping	2
of dangers	1
of semaphores,	1
of course.	2
of it,	1
of range";	2
of range.	2
of programming.	2
of starting	1
of underflow.	1
of predefined	1
of ArraySize	1
of experiments	1
of irrelevant	1
of cross-platform	1
of iterations.	1
of Numerically	2
of sharing	1
of digital	1
of received	1
of matrix[j][0]	1
of squares:	1
of sources.	1
of algebra,	1
of factorials:	2
of coprocessors	1
of removing	1
of relieving	1
of b+c	1
of convenience	1
of B.	1
of sets).	1
of strange	1
of sets)	1
of frustration	1
of algebra.	1
of cc[i]+2	1
of titles.	1
of 64.	1
of fine-tuning,	1
of Mathcad	1
of simultaneous	1
of view.	1
of 0x800	1
of switching	1
of i&15	1
of if.	1
of solving	1
of (a+b).	1
of underflow:	1
of it).	1
of randomness	1
of &list[100]	1
of it)	1
of doubles	1
of verifying,	1
of downloaded	1
of structures:	1
of multithreading.	1
of 1/n!	1
of N:	1
of profiling.	1
of modularity.	1
of yesterday's	1
of identifier	1
of attack	1
of security,	1
of matrices.	1
of Denmark.	1
of temp.	1
of ADC	1
of synchronizing	1
of habit,	1
of CPU-time	1
of DLLs,	1
of redesign.	1
of -fpic.	1
of research	1
of rows/columns	1
of inte-	1
of sum.	1
of managing	1
of people.	1
of jumps,	1
of RAM,	1
of data",	1
of rounding,	1
of losing	1
of pending	1
of usability.	1
of ways).	1
of range");	1
of activating	1
of occupying	1
to the	148
to is	4
to a	69
to and	1
to be	92
to are	1
to can	2
to function	1
to by	2
to code	1
to an	12
to int	2
to x	1
to have	10
to this	10
to use	73
to memory	2
to at	1
to data	3
to make	97
to different	3
to functions	1
to CPU	1
to other	3
to point	1
to all	6
to one	5
to cache	1
to integer	5
to set	6
to class	1
to floating	8
to each	6
to do	57
to example	1
to using	9
to double	3
to b	2
to i	1
to float	3
to multiple	2
to static	1
to 64-bit	1
to such	2
to efficient	1
to array	1
to many	2
to any	3
to some	4
to return	3
to 2	2
to very	1
to software	1
to 32-bit	1
to const	1
to 4	1
to call	13
to unsigned	4
to first	2
to 64	1
to take	12
to optimization	8
to test	15
to systems	2
to user	1
to these	1
to even	1
to always	3
to access	11
to 16	2
to 32	1
to 0	3
to type	1
to &	1
to simple	2
to error	1
to stack	3
to its	4
to assembly	1
to ;	1
to arrays	2
to work	7
to (see	1
to execution	1
to avoid	23
to speed	2
to c	1
to single	1
to virtual	2
to compile	5
to exception	1
to small	1
to integers	2
to matrix	1
to Linux	1
to cause	3
to four	1
to another	3
to get	12
to check	10
to support	1
to list	1
to run	7
to calculate	19
to inline	5
to hardware	1
to add	5
to store	17
to copy	3
to certain	1
to addresses	2
to count	2
to program.	1
to write	8
to optimize	15
to problems	1
to replace	8
to automatically	1
to see	13
to their	1
to signed	3
to put	10
to zero	11
to Microsoft	2
to what	1
to end	1
to read	5
to give	4
to look	2
to actually	1
to load	11
to control	2
to assume	4
to dispatch	1
to your	1
to improve	5
to binary	1
to know	7
to generate	6
to reduce	6
to 10	1
to choose	4
to link	1
to just	1
to a[i]	1
to require	1
to switch	1
to start	6
to around	1
to 5	3
to go	4
to change	1
to p	2
to become	4
to turn	8
to network	1
to desired	1
to code,	1
to find	12
to rely	2
to produce	3
to out-of-order	1
to platforms	1
to temp	1
to frame	2
to prevent	6
to save	5
to tell	11
to repeat	1
to unroll	5
to exponent	1
to it.	2
to optimization.	1
to accessing	1
to divide	8
to mix	7
to fit	7
to predict	9
to 128-bit	1
to execute	7
to square	1
to fail	1
to convert	3
to handle	6
to insert	5
to consider	1
to reading	1
to enable	5
to e.g.	1
to keep	8
to align	4
to BSD	1
to come	1
to SSE4.1	1
to CriticalFunction	1
to swap	3
to modify	2
to F1	1
to gain	4
to apply	1
to allocate	7
to metaprogramming	1
to define	4
to implement	7
to 256-bit	1
to contain	1
to integers.	2
to help	2
to transfer	2
to multiply	1
to share	1
to default	1
to vectorize	4
to include	2
to fully	1
to care	1
to memcpy	1
to lower	1
to try	1
to account	1
to heavy	1
to general	1
to zero.	3
to measure	4
to delete	2
to disk.	3
to update	1
to integer.	1
to hold	3
to 120	1
to eliminate	2
to 127	1
to debug	1
to vectorization.	1
to do.	3
to remove	4
to transpose	6
to wait	4
to break	2
to increase	2
to identify	6
to call.	1
to declare	3
to dispatched	2
to detect	1
to normal	1
to show	1
to evaluate	5
to five	1
to poor	1
to prefetch	1
to truncation	1
to base	1
to completely	1
to roll	5
to anything	1
to increment	2
to economize	4
to seven	1
to overcome	4
to maintain.	4
to fourteen	3
to 122	1
to remote	1
to memset	1
to install	3
to consume	2
to select	1
to recover	5
to split	2
to limit	1
to follow	1
to compromise	1
to understand	3
to specify	2
to compare	3
to valid	1
to CPU-intensive	1
to wrap	3
to sum1	1
to 15.1c	3
to recommend	2
to lead	1
to place	1
to overlap	2
to obtain	2
to ebx.	1
to modulo	1
to round	1
to protected	2
to distinguish	4
to clean	2
to contained	1
to unsigned.	1
to sum2	1
to suboptimal	1
to uncached	1
to individual	1
to begin	1
to another.	2
to recognize	1
to mirror	1
to force	1
to virus	1
to alias	1
to well-tested	1
to zero,	1
to reload	3
to 12.	1
to optimization,	1
to ignore	1
to manipulate	2
to study	2
to 0x273F	3
to int.	1
to nearest	1
to justify	2
to cover	2
to focus	1
to issue	1
to solve	2
to utilize	2
to top	1
to decide	1
to security.	2
to decrement	1
to determine	3
to 3-dimensional	1
to a.	1
to post-increment.	1
to invest	2
to 1024	1
to override	2
to CriticalFunction.	1
to exit	1
to emulate	1
to C1::f	1
to worry	2
to 15.	1
to develop	2
to non-AVX	2
to -56	1
to assembly:	2
to construct	1
to 15.1c.	1
to join	2
to note	1
to creating	1
to reorder	1
to windows,	1
to pressing	1
to date.	2
to test,	1
to isolate	1
to 12.1a.	1
to use.	1
to use,	1
to read.	2
to lock	1
to load.	1
to push	1
to verify	1
to draw	2
to 155	1
to distribute	2
to reserve	2
to 11.1b	1
to test.	1
to respond	1
to provoke	1
to interrupts	1
to do,	1
to organize	2
to log,	1
to low-level	1
to fix	2
to keyboard	2
to obey	2
to 99	1
to flip	1
to me.	1
to a[i+2]	1
to answer	1
to C1::Disp()	1
to resume	1
to zero:	1
to seek	1
to mind.	1
to finish.	1
to NULL.	1
to be.	1
to x?"	1
to re-use	1
to +127.	1
to relocate,	1
to diagnose.	1
to 15.1c).	1
to thank	1
to trace	1
to experience.	1
to _endthread()	1
to fine-	1
to date):	1
to pool	1
to Eclipse	1
to print	1
to obtain,	1
to come.	1
to weigh	1
to truly	1
to express	1
to restart	1
to vectorize,	1
to remember	1
to translate	1
to query	1
to compose	1
to compensate	1
to exchange	1
to fetch	1
to facilitate	1
to perform	1
to T+6,	1
to OMF	1
to calculate.	1
to localize	1
to optimize,	1
to T+5,	1
to reinvent	1
to combine	1
to pass	1
to reinstall	1
to 36.	1
to temporarily	1
to advertise	1
to realize	1
to objects)	1
to great	1
to port	1
to controversies	1
to deallocate	1
to catching	1
to Func1,	1
to receive	1
to 12.8b	1
to ignore,	1
to consult	1
to minimize	1
to reflect	1
to refresh	1
to adhere	1
to feed	1
to 15.1c,	1
to a*b*c*2.	1
to x^0/0!	1
to collect	1
to fake	1
to develop.	1
to 15.1c?	1
to relax	1
to Object1.Hello(),	1
to 151	1
to vectorize.	1
to multithreading	1
to C0::f	1
to 100000000.	1
to mimic	1
to adapt	1
and the	94
and is	6
and a	21
and to	7
and in	5
and for	6
and that	5
and are	3
and can	2
and it	16
and function	6
and if	2
and by	4
and on	1
and code	2
and not	4
and an	3
and compiler	1
and may	2
and you	13
and have	2
and this	5
and time	1
and use	5
and more	8
and will	1
and then	11
and memory	1
and data	12
and vector	2
and make	12
and different	2
and functions	1
and only	5
and CPU	1
and other	23
and instruction	1
and which	4
and all	4
and used	1
and one	7
and cache	2
and integer	2
and no	4
and page	1
and class	2
and floating	5
and each	2
and most	2
and using	3
and double	8
and size	1
and Intel	5
and pointer	1
and b	16
and i	1
and static	3
and 64-bit	15
and there	6
and C++	2
and also	1
and efficient	1
and array	1
and where	1
and possible	1
and objects	8
and takes	1
and variable	2
and any	1
and we	2
and some	4
and so	1
and return	3
and table	2
and very	2
and software	2
and long	2
and between	1
and 32-bit	3
and branch	3
and member	1
and makes	2
and before	2
and stored	2
and call	2
and 8	2
and less	1
and operating	11
and unsigned	6
and 64	2
and take	1
and often	2
and how	4
and test	1
and new	1
and user	1
and these	2
and they	5
and without	3
and even	1
and always	2
and SSE2	1
and system	4
and 32	1
and dynamic	2
and type	1
and short	1
and simple	1
and constant	3
and error	2
and I	1
and making	1
and stack	1
and want	1
and Gnu	3
and its	2
and accessed	1
and assembly	2
and while	1
and arrays	2
and Windows	5
and calls	1
and execution	2
and avoid	1
and compiled	1
and big	1
and doesn't	1
and necessary	1
and c	5
and much	2
and virtual	2
and several	1
and AMD	2
and compile	2
and exception	1
and small	1
and integers	2
and Linux	1
and cause	4
and classes	1
and done	1
and therefore	10
and works	1
and optimized	1
and manual	2
and uses	1
and another	1
and get	1
and known	1
and supported	2
and operators	3
and whether	1
and doing	1
and run	1
and calculate	2
and 1	2
and add	2
and store	4
and copy	3
and optimizing	1
and well	1
and simply	1
and addresses	1
and shared	1
and intermediate	2
and write	2
and optimize	1
and programs	1
and microprocessor	1
and branches	1
and Mac	8
and multiplication	4
and see	1
and caching	1
and sets	1
and complicated	1
and their	1
and don't	1
and model	5
and development	3
and mathematical	4
and put	3
and various	2
and zero	1
and Microsoft	1
and what	1
and parameter	2
and division	1
and automatic	6
and resources	2
and induction	1
and string	3
and three	1
and better	2
and |	1
and last	2
and ||	1
and types	1
and difficult	2
and after	4
and read	1
and give	2
and directives	1
and public	2
and microprocessors	1
and assume	1
and later	7
and calling	1
and interface	1
and 512	1
and generate	2
and r	2
and b,	1
and reduce	1
and 10	1
and choose	3
and link	1
and advanced	1
and switch	3
and start	1
and replaced	1
and negative	2
and go	1
and tested	1
and references	4
and loaded	1
and VIA	15
and C	1
and global	1
and my	1
and off	1
and columns	2
and 1.	2
and turn	2
and inlining	1
and network	2
and >=	1
and desired	1
and hot	1
and position-independent	2
and output	1
and task	1
and sometimes	2
and local	1
and frame	1
and prevent	2
and shift	4
and prevents	1
and d	2
and Linux,	1
and compatibility	2
and writing	2
and copying	1
and causes	1
and divide	1
and 16-bit	1
and child	3
and disk	2
and possibly	2
and overloaded	2
and classes.	1
and %	1
and precision.	1
and algebraic	1
and handle	2
and initialized	1
and insert	4
and reading	2
and message	1
and enable	1
and keep	1
and PathScale	5
and BSD	1
and rarely	1
and easier	1
and 20	1
and expect	1
and references.	2
and similar	2
and back	4
and garbage	4
and templates	1
and header	1
and swap	1
and sets.	1
and invalid	2
and setting	1
and checks	1
and current	1
and 3	1
and waste	1
and map	1
and easy	2
and 256-bit	1
and scattered	1
and writes	1
and device	1
and destructors	4
and stores	2
and search	1
and usability	2
and vectorize	1
and derived	1
and standardized	1
and memcpy	1
and c2	1
and misprediction	1
and just-in-time	2
and algorithms	1
and PLT	4
and profiling	1
and fragmented	1
and who	1
and fixed	2
and interpreted	1
and YMM	2
and measure	1
and lazy	2
and delete	5
and distributed	1
and generally	1
and Linux.	2
and Open	1
and free	1
and rounding	1
and far	1
and 120	1
and highly	1
and again	1
and Clang	1
and log	1
and compile-time	1
and wait	1
and 15	1
and declare	1
and normal	1
and show	2
and c1	1
and efficient,	1
and again.	1
and deallocated	2
and edx	2
and soon	1
and edx,	1
and branches.	1
and internal	1
and loss	1
and Fortran	2
and drivers	1
and economize	1
and maintain.	1
and fourteen	2
and bc	1
and Digital	1
and CISC	1
and 22	1
and searching	1
and _WIN64	1
and pow	1
and computing	1
and 90	1
and understand	1
and returns	1
and frameworks	1
and compare	1
and manuals.	1
and loop-invariant	2
and jumps	1
and 13	1
and written	1
and BSD,	1
and sixteen	2
and enables	1
and databases	1
and loader	1
and objects.	1
and mouse	1
and subtraction	1
and ownership	1
and drawbacks	1
and x86-64	2
and Watcom	1
and 14.9	1
and maintenance	4
and underflow	2
and splitting	1
and video	1
and sum2	1
and avoids	1
and image	1
and interfaces	1
and aliasing.	1
and changing	1
and smaller.	1
and structures.	1
and reproducible	2
and operators.	1
and (set)	1
and fine-grained	1
and compact.	1
and FPGA	1
and earlier	1
and 119	1
and compiler-generated	1
and perhaps	2
and main()	1
and 14.30	1
and keywords	1
and divisions	1
and trigonometric	1
and 64,	1
and copies	1
and 135	1
and leave	2
and c[i]	2
and ZMM	2
and logarithms	1
and pop	1
and s3	1
and open	1
and measuring	1
and read-only	2
and well-structured	1
and multiplications.	1
and market	1
and frameworks,	1
and truncation.	2
and deallocation	2
and decrement	2
and free.	2
and references,	1
and LIBM	1
and complexity	1
and memcpy,	1
and Sum3	2
and lack	1
and mostly	1
and resolve	2
and discovered	1
and scientific	1
and throw.	1
and that's	1
and GOT.	1
and destination	1
and 72	1
and 0x4700.	1
and 14.13b	1
and underflow.	1
and web	1
and p2	1
and maintaining	2
and sound	1
and servers	1
and MOVNTDQ	1
and 64-bit.	2
and isolate	1
and v.f	1
and afterwards	1
and denormals-are-zero	1
and machines	1
and debugging.	1
and synchronization	2
and high-priority	1
and verify	1
and searching,	1
and restarted	1
and IDE's	1
and fine-tuned	1
and redo	2
and deleting	2
and flexible,	1
and Gnu.	1
and Mac.	2
and subtracting	1
and reusable	1
and stop	2
and attempts	1
and recovering	1
and direct	1
and studying	1
and press	1
and involve	1
and statistics,	1
and later.	1
and 9.	1
and "best	1
and delete,	2
and BSD.	2
and executables.	1
and clumsy,	1
and repagination	1
and esp+12	1
and "More	1
and IA-32	1
and C#	1
and FuncB,	1
and Newton-Raphson	1
and |)	1
and object-oriented	1
and Adolfy	1
and destructors.	1
and de-allocation	1
and off.	1
and unexpected	1
and flexibility	1
and A.	1
and matrixes.	1
and uninstallation	1
and temp++	1
and 2B.	1
and lrint.	1
and communicating	1
and USB	1
and finally	1
and analyzing	1
and disadvantages.	1
and fence	1
and 12.4c	1
and shared_ptr.	1
and databases.	1
and Fortran.	1
and investigated	1
and error-prone.	1
and reorganize:	1
and convoluted	1
and create	1
and popped	1
and delete).	1
and classes............................................................................................	1
and decoded	1
and 3B.	1
and ||).	1
and animations	1
and cons	1
and "Integrated	1
and UNIX	1
and '$'	1
and FPGAs.	1
and cryptography	1
and Itanium	1
and Z.	1
and correspondingly	1
and hence	1
and systematization	1
and memcpy:	1
and parsing	1
and 137,	1
and reorganize	1
and micro-operation	1
and _mm_free.	1
and non-constant	1
and irregular	1
and temp2.	1
and stopping	1
and double.....................................................................................	1
and operators...............................................................................	1
and tedious.	1
and free)	1
and Sum3.	1
and bb[i]*cc[i]	1
and semicolons	1
and intelligible	1
and b.	1
and VIA.	1
and SVML.	1
and Enterprise	1
and fffff	1
and closer	1
and foremost,	1
and list[i].b.	1
and flexibility,	1
and 3A	1
and shifts	1
and y?"	1
and suggestions	1
and increment.	1
and restoring	1
and newsgroups	1
and non-recoverable	1
and concentrate	1
and down.	1
and modular.	1
and WritePrivateProfileString	1
and invoked	1
and Func2	1
and maintainability	1
and relational	1
and decreased	1
and publish	1
and mirroring	1
and Gnu).	1
and suggests	1
and mainframes,	1
and ease	1
and recompile	1
and planned	1
and API's.	1
and shuffling	1
and closes	1
and well-	1
and similarly	1
and clarity	1
and __intel_new_strlen	1
and ARM	1
and getting	1
and replaces	1
in the	305
in a	154
in code	1
in an	15
in compiler	1
in this	29
in more	3
in memory	9
in program	3
in vector	5
in different	8
in only	1
in other	7
in which	14
in all	5
in one	12
in integer	1
in set	1
in floating	2
in each	6
in example	43
in most	14
in using	1
in Intel	6
in b	2
in library	3
in multiple	7
in two	6
in static	5
in 64-bit	27
in C++	7
in such	3
in array	1
in many	5
in any	2
in some	20
in so	1
in table	7
in performance	5
in software	2
in order	47
in between	1
in 32-bit	25
in member	2
in critical	1
in 64	6
in registers	14
in test	1
in systems	1
in these	1
in system	2
in 32	3
in programming	1
in case	17
in cases	5
in simple	4
in stack	1
in Gnu	3
in its	2
in assembly	8
in large	4
in Windows	2
in compiled	3
in big	1
in speed	5
in several	1
in small	1
in matrix	3
in Linux	4
in classes	1
in optimized	1
in manual	11
in another	3
in eight	4
in list	1
in hardware	1
in optimizing	2
in memory.	9
in shared	1
in both	7
in programs	4
in microprocessor	1
in Mac	2
in multiplication	1
in mathematical	1
in separate	2
in various	1
in applications	2
in addition	2
in your	2
in XMM	1
in vectors	1
in x86	1
in binary	2
in just	2
in main	3
in computer	2
in C	1
in my	5
in STL	2
in dynamically	1
in Windows,	1
in turn	1
in fact	9
in vectorized	1
in special	2
in Linux,	2
in registers.	2
in performance.	4
in 16-bit	5
in x,	1
in full	1
in RAM	1
in parallel	1
in either	1
in ebx	1
in BSD	2
in chapter	4
in newer	1
in sequence	1
in linear	1
in row	1
in Windows.	1
in situations	4
in device	1
in terms	8
in addition,	1
in PC	1
in almost	2
in interpreted	2
in vectors.	1
in random	2
in Linux.	2
in memory,	3
in details.	1
in thousand	1
in Intel's	1
in registers,	4
in dispatched	1
in column	2
in embedded	2
in 32-	1
in edx	1
in one.	1
in edx,	1
in Fortran	1
in list,	1
in ever	1
in b[i]	1
in regular	1
in parallel.	4
in advance	4
in efficiency.	1
in aa:	4
in C,	1
in sequential	1
in www.agner.org/optimize/cppexamples.zip.	2
in tests	1
in detail	2
in advance.	3
in character	1
in Windows).	2
in comparisons,	1
in kernel	1
in Unix-like	2
in vectors,	1
in Day	1
in x.	1
in a.	1
in Sum2	1
in ASCII	1
in scientific	1
in stdint.h	1
in non-	1
in itself,	1
in 36	1
in p1	1
in question.	2
in doubt	1
in use.	1
in question	1
in develop-	1
in C++:	2
in loops.	1
in Wikipedia	1
in Java,	1
in reusable	1
in time-critical	1
in exclusive	1
in precompiled	1
in eax.	1
in popularity	1
in y.	1
in duration	1
in interactive	1
in relation	1
in edx.	1
in general.	1
in scope.	1
in advance,	1
in two:	1
in 2015	1
in nn	1
in Microsoft's	1
in F1?	1
in connection	1
in mind,	1
in parts,	1
in all,	1
in applying	1
in 2010.	1
in a[]	1
in disguise.	1
in question:	1
in Windows)	1
in isolation	1
in parallel:	1
in green.	1
in favor	1
in a[i].	1
in Linux).	1
in nature,	1
in meaningless	1
The function	10
The if	2
The code	24
The compiler	42
The this	1
The time	17
The use	4
The }	1
The memory	3
The data	5
The program	13
The vector	3
The different	4
The same	11
The functions	2
The only	3
The CPU	12
The other	1
The instruction	2
The loop	13
The cache	3
The integer	4
The floating	1
The example	1
The compilers	5
The most	16
The size	10
The Intel	10
The pointer	1
The library	2
The float	1
The multiple	1
The two	2
The object	3
The number	7
The static	5
The 64-bit	2
The C++	5
The clock	4
The version	2
The value	4
The objects	2
The return	1
The table	5
The performance	5
The order	3
The branch	2
The member	1
The way	2
The elements	1
The const	1
The address	2
The critical	3
The operating	3
The unsigned	1
The first	12
The register	3
The 64	2
The libraries	1
The template	1
The need	1
The test	3
The user	3
The method	8
The access	1
The SSE2	3
The following	28
The system	1
The file	2
The dynamic	1
The type	4
The &	1
The instructions	1
The constant	2
The stack	4
The Gnu	9
The extra	1
The assembly	2
The Windows	2
The calculations	1
The execution	2
The result	5
The threads	1
The best	10
The speed	5
The c	1
The virtual	1
The common	1
The AMD	1
The exception	2
The allocated	2
The AVX	2
The optimized	2
The calculation	6
The parameters	1
The problem	4
The solution	1
The container	1
The advantage	8
The operators	2
The few	1
The standard	3
The hardware	1
The values	3
The sign	1
The copy	3
The intermediate	3
The allocation	2
The above	5
The optimal	1
The space	1
The dispatching	2
The next	7
The branches	1
The multiplication	2
The application	2
The expression	3
The Boolean	2
The intrinsic	1
The development	2
The name	2
The conversion	4
The disadvantage	7
The high	2
The Microsoft	2
The division	1
The source	1
The cost	4
The automatic	2
The reason	11
The dispatcher	2
The string	2
The programmer	3
The three	2
The keyword	5
The examples	3
The difference	3
The mechanism	2
The last	1
The load	1
The calling	1
The XMM	1
The second	4
The bigger	1
The AVX2	1
The x86	1
The process	1
The 512	1
The advantages	9
The results	3
The storage	2
The old	1
The union	1
The link	2
The appropriate	1
The constructor	2
The operands	1
The range	1
The smaller	1
The core	2
The negative	1
The main	3
The positive	1
The overhead	4
The change	1
The installation	3
The syntax	3
The choice	5
The profiler	6
The modern	1
The network	1
The level-2	1
The fact	4
The output	1
The vectorized	1
The costs	3
The preceding	1
The safe	1
The Pentium	2
The efficiency	4
The exponent	2
The conditions	1
The maximum	5
The alignment	1
The offset	1
The effect	5
The so-called	3
The total	1
The child	2
The containers	1
The counters	1
The 128-bit	2
The names	2
The details	2
The square	1
The bitwise	4
The heap	5
The target	2
The nontemporal	1
The simplest	4
The situation	1
The delay	3
The newer	1
The sequence	1
The length	2
The penalty	1
The reasons	1
The alternative	1
The 'this'	1
The gain	2
The declaration	1
The map	2
The microarchitecture	1
The 256-bit	1
The subsequent	3
The transfer	1
The latter	2
The search	1
The logic	1
The Microsoft,	1
The typical	1
The usability	1
The procedure	1
The frequent	1
The algorithms	1
The PLT	1
The inputs	1
The fastest	1
The Gnu,	1
The preferred	1
The volatile	2
The YMM	1
The purpose	4
The D	1
The carry	1
The trick	5
The disadvantages	1
The update	1
The developers	1
The profilers	1
The linker	1
The representation	1
The Clang	2
The measured	2
The factor	1
The rules	1
The latest	1
The log	1
The CodeGear	1
The principle	2
The availability	1
The .NET	2
The newest	1
The prefetch	1
The debugger	1
The behavior	1
The 32-	1
The worst	2
The biggest	1
The third	1
The CISC	2
The AND	1
The context	1
The live	1
The OR	1
The advice	1
The pow	1
The pitfalls	2
The equivalent	1
The Codeplay	1
The present	1
The highest	2
The "Intel	1
The pre-increment	1
The older	1
The 17	1
The empty	1
The missing	1
The powN	2
The lengths	1
The splitting	2
The consequence	2
The original	1
The returned	1
The existing	1
The explicit	1
The MOVNTQ	2
The implicit	1
The tests	1
The conclusion	3
The C/C++	1
The Intel-based	1
The updating	1
The exponential	1
The generality	1
The initialization	1
The -fpie	1
The easiest	2
The history	1
The CPU-	1
The InstructionSet()	1
The unrolled	1
The built-in	1
The symbol	1
The fastcall	1
The preprocessing	1
The formats	1
The FDIV	1
The dynamic_cast	1
The opposite	2
The proxy	1
The const_cast	1
The resulting	1
The DLLs	1
The renaming	1
The indirect	1
The theoretical	1
The pragmas	1
The branching	1
The creation	1
The integrated	1
The recursion	1
The insight	1
The funny	1
The clumsy	1
The procedures	1
The []	1
The similarity	1
The vulnerability	1
The 16-byte	1
The dot	1
The Core2	1
The benchmark	1
The recommendations	1
The radical	1
The absence	1
The fallacy	1
The benefits	1
The allocation,	1
The ?:	1
The lesson	1
The FactorialTable	1
The CodeGear,	1
The ultimate	1
The official	1
The reinterpret_cast	1
The characters	1
The undocumented	1
The static_cast	1
The IPP	1
The distinctions	1
The inequality	1
The i<20	1
The compactness	1
The loop-branch	1
The advise	1
The sin	1
The MASM	1
for the	119
for is	1
for a	32
for //	1
for function	2
for code	3
for an	13
for x	1
for this	10
for use	1
for more	5
for vector	3
for different	21
for functions	1
for CPU	2
for other	9
for all	15
for one	2
for integer	4
for class	1
for floating	5
for each	25
for example	9
for compilers	1
for most	1
for using	3
for double	2
for size	2
for Intel	2
for pointer	1
for library	1
for float	1
for multiple	3
for 64-bit	4
for C++	1
for such	3
for array	5
for many	10
for objects	2
for any	3
for some	4
for variables	2
for performance	1
for very	3
for software	3
for 32-bit	10
for branch	2
for member	1
for elements	2
for address	1
for critical	1
for less	1
for example,	6
for register	3
for how	7
for test	2
for user	5
for these	3
for even	1
for sure	1
for SSE2	2
for system	1
for file	1
for dynamic	1
for simple	4
for making	6
for CPUs	2
for assembly	3
for large	2
for arrays	1
for Windows	5
for execution	1
for big	1
for threads	1
for best	1
for speed	3
for specific	2
for single	1
for several	5
for common	1
for AMD	3
for exception	1
for small	3
for overflow	6
for good	1
for matrix	1
for Linux	3
for AVX	1
for another	1
for (i	29
for support	1
for doing	3
for inline	1
for every	3
for standard	1
for sign	1
for copy	1
for optimizing	2
for information	1
for certain	1
for intermediate	1
for fast	5
for (int	14
for programs	2
for Mac	1
for multiplication	1
for handling	1
for Boolean	1
for intrinsic	4
for mathematical	1
for high	2
for source	1
for running	1
for automatic	2
for string	1
for better	1
for applications	1
for examples	3
for char	2
for runtime	1
for actually	1
for Intel,	1
for later	1
for calling	1
for your	2
for XMM	1
for vectors	1
for AVX2	1
for x86	1
for old	1
for advanced	1
for switch	2
for things	1
for negative	1
for example:	1
for positive	2
for my	2
for relative	1
for installation	1
for Windows,	4
for inlining	1
for network	1
for whole	2
for level-2	1
for response	1
for vectorization	1
for checking	3
for level-1	1
for vectorized	2
for local	3
for constants	1
for special	2
for further	7
for discussion	2
for testing	2
for tasks	1
for optimization.	1
for accessing	5
for adding	1
for 16-bit	1
for disk	1
for classes.	1
for N	3
for details	3
for containing	1
for initialized	1
for improved	1
for updates	3
for parallel	1
for calculating	7
for SSE4.1	1
for garbage	1
for buffer	1
for future	1
for unaligned	1
for significant	1
for reasons	6
for setting	1
for 'this'	1
for Windows.	1
for approximately	1
for finding	7
for hard	1
for usability	1
for overflow.	2
for false	1
for temporary	1
for prediction	1
for background	2
for interrupt	1
for general	2
for multiplying	1
for random	1
for D	1
for debugging	2
for Linux.	2
for Java	1
for executing	1
for free	1
for (	1
for exceptions	1
for storing	3
for powers	1
for polymorphism	1
for details.	6
for speed.	1
for giving	2
for converting	2
for specifying	1
for self-relative	1
for 32-	2
for security	1
for communication	2
for avoiding	2
for internal	3
for reducing	1
for strict	1
for (c	4
for lists	1
for computing	2
for Basic	1
for CPU-intensive	1
for present	1
for turning	1
for regular	1
for true.	1
for defining	1
for restrictions	1
for overflow,	1
for transferring	2
for saving	3
for (b	1
for mixing	2
for (r	4
for detailed	1
for application-specific	1
for virus	1
for constants.	1
for prefetching	1
for aligning	1
for assuming	1
for speed-critical	2
for calculations:	1
for multi-core	1
for generality	1
for (i=0;	3
for implementing	2
for cleaning	1
for improving	2
for organizing	1
for metaprogramming,	1
for InstructionSet()	2
for (x	3
for free.	1
for interpreting	1
for jumping	1
for modifying	1
for vacant	1
for supporting	2
for uninitialized	1
for putting	1
for preventing	1
for creating	1
for Unix	1
for audio	1
for updating.	1
for (c2	2
for marketing	1
for verifying	1
for WTL	1
for millisecond	1
for "assume	1
for manipulating	2
for parallelization	1
for AVX.	2
for Tuesday,	1
for dealing	1
for trivial	1
for recovering	1
for studying	1
for statistics,	1
for exclusive	1
for assigning	1
for relieving	1
for shared_ptr	1
for (r2	2
for exploiting	1
for IA-32/Intel64,	1
for transposition	1
for issuing	1
for incrementing	1
for Linux)	1
for those	1
for investigating	1
for vectorization.............................................................	1
for detecting	1
for transposing	1
for foreground	1
for minimizing	1
for (j	1
for auto_ptr.	1
for response.	1
for vectors........................................................................	1
for holding	1
for (c1	1
for signifying	1
for demonstration	1
for SSE2,	1
for hackers.	1
for (row	1
for (r1	1
for pow(x,N)	1
for both,	1
for combining	1
for (temp	1
for correctness	1
for vectorizing	1
for Nerds	1
for everything,	1
for analysis.	1
for fetching	1
for Basic.	1
for details).	1
for educational	1
for correctness.	1
for RTTI	1
for 80x86	1
for speeding	1
for "standard	1
for AVX2,	1
for "function	1
for raising	1
for NOT.	1
for discussions.	1
for (column	1
for reserving	1
for identifying	1
for distinguishing	1
that the	139
that is	55
that a	27
that of	1
that for	1
that are	52
that can	30
that it	54
that if	4
that code	1
that an	2
that compiler	1
that x	1
that may	6
that you	21
that have	12
that this	3
that use	6
that memory	1
that data	1
that has	6
that make	8
that different	1
that functions	1
that only	1
that all	11
that one	2
that should	2
that no	4
that floating	1
that each	6
that do	6
that most	3
that double	1
that pointer	1
that b	1
that i	1
that two	1
that static	1
that there	12
that C++	1
that also	1
that such	3
that many	2
that takes	6
that we	13
that some	4
that variables	1
that software	3
that branch	1
that makes	2
that take	4
that need	5
that pointers	3
that these	4
that they	5
that always	1
that access	2
that I	2
that does	4
that must	1
that work	1
that calls	5
that processor	2
that big	1
that doesn't	7
that threads	1
that several	1
that exception	1
that overflow	2
that cause	1
that works	5
that uses	5
that container	1
that support	5
that supported	2
that contains	3
that would	1
that run	3
that every	1
that standard	1
that add	1
that simply	1
that certain	2
that count	1
that was	3
that particular	1
that branches	1
that typically	2
that automatically	1
that caching	1
that allows	6
that don't	1
that signed	1
that model	2
that needs	4
that what	1
that source	1
that n	1
that string	1
that requires	2
that your	1
that generate	1
that r	2
that goes	3
that 10	1
that were	6
that require	1
that depends	1
that supports	2
that my	1
that p	2
that index	1
that modern	1
that gives	3
that comes	2
that rely	3
that produce	2
that macro	1
that variable.	1
that fit	2
that includes	1
that allow	1
that come	3
that similar	1
that future	1
that seconds	1
that something	2
that F1	1
that checks	1
that programmers	1
that current	1
that contain	1
that could	1
that everything	1
that branch.	1
that jump	1
that volatile	1
that measurements	1
that reads	1
that fits	2
that follows	1
that computers	1
that depend	1
that communication	1
that memset	1
that specifies	1
that select	2
that created	1
that already	1
that relies	1
that runs	3
that belong	1
that performs	1
that produces	2
that u.f	1
that *p+2	2
that chooses	2
that 150	1
that avoids	1
that seldom	1
that begin	1
that N1	1
that appears	1
that behaves	2
that consumes	1
that reflects	1
that lies	1
that copies	1
that allocates	1
that scans	2
that delays	1
that holds	1
that a+b	1
that decide	1
that measures	2
that accesses	2
that thrown	1
that treats	1
that loads	1
that waits	1
that covered	1
that begins	1
that previously	1
that CParent::Hello()	1
that owns	1
that limits	1
that transfers	1
that looses	1
that hackers	1
that dates	1
that u	1
that connect	1
that "we	1
that draws	1
that violate	1
that (b*c)	1
that saves	1
that r+i/2	1
that crashes	1
that doesn’t.	1
that discriminates	1
that destroys	1
that relate	1
that shares	1
that detects	1
that matters	1
be the	4
be a	31
be of	2
be to	1
be in	3
be as	2
be an	10
be time	1
be more	4
be at	1
be different	2
be because	1
be only	2
be used	38
be cache	1
be no	2
be set	2
be two	1
be efficient	1
be possible	6
be so	2
be 2	1
be very	7
be faster	4
be stored	18
be called	7
be 8	1
be less	5
be 64	1
be useful	19
be even	1
be sure	2
be 0	2
be cases	2
be available	1
be important	1
be accessed	6
be while	1
be compiled	3
be necessary	4
be allocated	6
be done	13
be optimized	4
be inside	1
be calculated	15
be advantageous	11
be implemented	15
be known	1
be 1	1
be able	13
be certain	1
be shared	1
be quite	5
be used.	3
be fast	1
be both	1
be optimal	3
be signed	1
be separate	1
be put	2
be three	1
be better	4
be too	3
be needed	2
be difficult	3
be transferred	5
be longer	1
be read	3
be aligned	3
be linked	4
be declared	5
be higher	1
be bigger	1
be divisible	2
be called.	1
be based	1
be made	7
be just	1
be smaller	1
be relevant	1
be replaced	9
be negative	1
be tested	5
be predicted	8
be loaded	8
be C	1
be compatible	3
be dynamically	1
be avoided	15
be 2.	1
be particularly	1
be given	2
be limited	1
be vectorized	5
be inlined	3
be safe	2
be further	1
be reduced	3
be clear	1
be obtained	4
be overloaded	1
be possible.	1
be changed	7
be true	1
be initialized	3
be improved	10
be loading	1
be below	1
be copied	3
be invalid	3
be used,	2
be organized	4
be enough	1
be added	2
be situations	1
be chosen	1
be scattered	2
be applied	4
be critical.	2
be mentioned	1
be mispredicted	5
be standardized	1
be false	1
be converted	4
be designed	1
be fragmented	1
be 8,	1
be preferred	1
be interpreted	1
be determined	4
be easily	1
be allowed	1
be distributed	2
be called,	2
be slower	2
be expensive	1
be saved	3
be aware	6
be available,	1
be measured	1
be equal	1
be expected	3
be convenient	2
be poor	1
be static,	1
be evaluated	2
be completely	2
be permissible	1
be mixed	1
be turned	1
be overcome	1
be worth	2
be obvious	2
be swapped	1
be portable	1
be executed	2
be split	1
be increased	2
be divided	2
be seen	1
be necessary.	1
be updated	2
be combined	1
be written	1
be preferable	1
be said	1
be true.	1
be needed,	1
be extended	1
be expressed	4
be cleaned	2
be cached.	1
be prevented	2
be eliminated	4
be illustrated	1
be returned	2
be found	3
be coded	1
be represented	2
be identified	1
be kept	2
be selected	1
be multiplied	2
be obsolete.	2
be unable	2
be modified	2
be carried	1
be hidden	1
be performed	1
be removed	1
be considered	2
be spaced	2
be filled	2
be expected.	1
be solved	2
be stored.	1
be inlined.	2
be infinity	1
be taken	3
be handled	1
be moved	2
be joined	3
be placed	3
be sufficient	1
be evicted	2
be manipulated	1
be freed	1
be justified	2
be vectorized,	2
be disabled	1
be ruled	2
be reused	1
be pure.	1
be bypassed	1
be achieved	1
be visible	1
be overwritten,	1
be annoyingly	1
be controlled.	2
be worthwhile	1
be irrelevant	1
be careful	1
be profitable	1
be negative.	2
be defined.	1
be obtained.	2
be predicted.	2
be fed	1
be cached	1
be shared.	2
be optional	1
be deleted.	1
be left	1
be wrapped	1
be slower.	1
be optimally	1
be fetched	1
be avoided,	2
be avoided.	1
be misleading	1
be repeated	1
be moved.	1
be installed.	1
be mispredicted,	1
be tolerated.	1
be regarded	1
be obeyed.	1
be restored	1
be undesired.	1
be passed	1
be broken	1
be arranged	1
be cross-	1
be combined.	1
be improved.	1
be rounded	1
be straightforward.	1
be prepared	1
be non-zero,	1
be saved.	1
be programmed	1
be reached	1
be renewed.	1
be weighed	1
be reduced.	1
be recycled?	1
be postponed	1
be omitted,	1
be considered.	1
be speeded	1
be used:	1
be added.	1
be adjusted	1
be platform-independent	1
be made)	1
be reloaded	1
be evicted.	1
be mitigated	1
be signed.	1
be emphasized	1
be noticeable	1
be reinstalled	1
be ameliorated	1
be scheduled	1
be followed	1
be caused	1
be wired	1
be responded	1
be ignored	1
be re-calculated	1
be accomplished	1
be mainstream	1
be resized	1
be overridden	1
be huge).	1
be reversed	1
be propagated	1
be annoying.	1
be accessed.	1
are the	5
are a	8
are of	1
are in	6
are for	1
are that	1
are as	2
are not	42
are time	1
are more	6
are then	3
are different	3
are only	4
are other	2
are used	26
are one	1
are integer	1
are no	9
are set	1
are floating	1
are most	3
are using	12
are double	1
are two	7
are there	1
are also	13
are efficient	1
are many	6
are possible	1
are objects	1
are some	2
are so	5
are variables	1
are very	5
are 32-bit	1
are faster	2
are stored	18
are called	6
are critical	2
are less	8
are first	1
are 64	1
are often	11
are useful	8
are sure	8
are always	5
are out	1
are part	1
are cases	1
are available	13
are up	1
are making	3
are accessed	22
are compiled	2
are best	1
are necessary	1
are specific	1
are much	1
are single	1
are several	6
are allocated	4
are integers	1
are good	2
are done	6
are therefore	2
are optimized	2
are explained	3
are calculated	2
are four	1
are advantageous	1
are implemented	5
are supported	3
are eight	1
are likely	1
are doing	4
are simply	2
are able	8
are certain	3
are shared	1
are quite	1
are used.	8
are fast	1
are both	1
are cases,	1
are particular	1
are typically	3
are preferably	1
are members	2
are intrinsic	1
are never	4
are various	11
are running	3
are three	2
are better	1
are too	3
are needed	2
are difficult	2
are transferred	10
are aligned	4
are actually	4
are linked	1
are declared	4
are higher	1
are bigger	1
are usually	3
are called.	4
are based	8
are just	1
are core	1
are replaced	1
are negative	1
are predicted	3
are loaded	2
are relative	1
are intended	2
are slow	1
are inefficient	1
are described	1
are including	1
are particularly	5
are given	4
are sometimes	2
are inlined	1
are special	1
are further	1
are testing	1
are 100	1
are writing	1
are adding	1
are containers	1
are discussed	4
are reading	1
are defined	2
are identical	2
are used,	2
are not.	1
are organized	2
are approximately	1
are situations	1
are scattered	4
are independent	1
are provided	3
are 6	1
are inefficient.	1
are search	1
are executed.	1
are usability	1
are pure	1
are mentioned	1
are fully	1
are included	1
are temporary	1
are frequent	2
are now	1
are equally	5
are designed	2
are listed	5
are preferred	1
are zero.	1
are exactly	2
are resolved	1
are poorly	1
are allowed	2
are serious	1
are disadvantages	1
are generally	2
are instances	1
are hardly	1
are saved	1
are integers,	1
are highly	4
are waiting	1
are available,	1
are powers	1
are constant.	1
are expected	1
are converting	1
are costly	1
are evaluated	2
are deallocated	1
are permissible	1
are swapping	1
are swapped	1
are becoming	3
are finished.	1
are generated	1
are equivalent	1
are relatively	2
are frameworks	1
are safer	1
are combined	1
are currently	1
are sufficiently	2
are needed,	3
are running.	1
are optimal.	1
are guaranteed	1
are missing	2
are extended	1
are cleaned	1
are image	1
are uncached	1
are returned	1
are coded	1
are smaller.	1
are identified	2
are kept	1
are incompatible	2
are normally	1
are inferior	1
are auto_ptr	1
are modified	1
are satisfied	2
are assuming	1
are long.	1
are implemented.	1
are spaced	1
are comparisons,	1
are separated	2
are annoying	1
are supplied	1
are overriding	2
are stored.	1
are competing	1
are read-only	1
are indeed	1
are impossible	1
are type-casted	1
are aligned.	1
are disabled	1
are CPU-specific	1
are inherent	1
are uninitialized	1
are summarized	2
are smarter	2
are capable	1
are eliminated.	1
are unstable	1
are lost.	1
are mutually	2
are properly	1
are fine-tuned	1
are sharing	1
are cached	1
are relocated	1
are dealing	1
are created.	1
are covered	1
are overdetermined	2
are unnecessary	1
are produced	2
are lots	1
are wrapped	1
are fetched	1
are accessible	1
are primitive	1
are inherently	1
are common,	1
are constructed.	1
are prone	1
are wrapper	1
are sufficient,	1
are advised	1
are seeing	1
are doing.	1
are among	1
are cumbersome	1
are dominating	1
are instantiated	1
are universal,	1
are undocumented.	1
are aligned,	1
are offering	1
are areas	1
are unavoidable.	1
are indexed	1
are feeding	1
are unacceptable.	1
are hundreds	1
are modified,	1
are compiler-specific.	1
are dominating.	1
are short.	1
are met:	1
are cheap,	1
are costless	1
are obscured	1
are different.	1
are risking	1
are confined	1
are satisfied.	1
are satisfied:	1
are breaking	1
are CPLDs	1
are relying	1
are uninitialized,	1
are removed,	1
are incremental	1
are limiting	1
are unrelated	1
can in	1
can be	254
can not	2
can you	1
can have	5
can use	19
can then	3
can make	12
can only	5
can set	2
can do	21
can double	1
can also	14
can return	1
can call	3
can take	14
can often	6
can test	1
can even	1
can access	1
can avoid	8
can cause	14
can therefore	4
can get	3
can check	3
can run	4
can calculate	6
can store	1
can optimize	2
can replace	4
can automatically	3
can see	3
can never	2
can block	1
can read	1
can give	1
can look	1
can actually	1
can assume	4
can improve	7
can reduce	7
can start	1
can go	1
can change	5
can become	3
can turn	1
can rely	2
can produce	1
can sometimes	5
can still	4
can prevent	1
can shift	1
can save	3
can tell	2
can divide	1
can clear	1
can predict	2
can possibly	5
can execute	3
can convert	2
can handle	1
can occur	3
can insert	1
can align	1
can expect	2
can modify	2
can not.	1
can happen	4
can define	1
can contain	1
can help	1
can multiply	2
can share	3
can now	1
can easily	4
can spend	1
can generally	2
can hold	4
can eliminate	4
can increase	1
can detect	1
can prefetch	1
can benefit	2
can consume	2
can lead	3
can overlap	1
can obtain	2
can move	2
can disable	2
can begin	1
can force	1
can run.	1
can skip	1
can probably	1
can open	1
can bypass	2
can compute	1
can proceed	1
can emulate	1
can throw.	1
can occur,	1
can influence	1
can add,	1
can see,	1
can be,	1
can subtract	1
can roughly	1
can build	1
can steal	1
can incur	1
can surely	1
can toggle	1
can handle.	1
can learn	1
can safely	1
can overwrite	1
can exceed	1
// of	2
// The	2
// or	1
// function	4
// if	2
// This	8
// this	1
// will	1
// It	1
// Example	188
// vector	1
// make	1
// CPU	1
// loop	5
// If	1
// used	1
// set	4
// do	1
// number	3
// C++	1
// return	3
// 2	3
// You	1
// table	1
// 32-bit	2
// makes	1
// 4	4
// call	2
// 8	2
// For	1
// test	2
// always	1
// SSE2	5
// constant	1
// Gnu	1
// Windows	1
// result	2
// Use	4
// specific	1
// Linux	1
// AVX	4
// get	1
// check	1
// Function	12
// add	4
// sign	1
// copy	2
// ...	2
// next	1
// n	1
// Make	11
// Table	5
// Floating	1
// AVX2	1
// constructor	2
// go	1
// Loop	7
// No	2
// sum	1
// exponent	3
// Define	12
// square	1
// Any	1
// align	2
// SSE4.1	1
// header	1
// swap	2
// Store	5
// f	2
// define	4
// Load	8
// multiply	1
// 6	1
// default	1
// Time	3
// everything	2
// parent	1
// Virtual	2
// Template	1
// Cache	1
// Now	2
// Add	2
// Number	1
// SSE3	1
// Set	4
// INSTRSET	1
// Roll	5
// Critical	2
// AND	2
// SIZE	1
// OR	1
// Array	3
// Calculate	1
// Only	1
// Division	1
// n!	2
// s	1
// Writes	4
// x^4	3
// Multiply	2
// u.f	1
// Header	2
// C-style	1
// Bounds	1
// Same	1
// MOVNTQ	1
// Still	4
// Faster	2
// After	2
// Return	3
// fractional	3
// Index	1
// At	1
// Get	3
// sum,	1
// Check	2
// Call	3
// Structure	1
// 400	1
// x^2	2
// Full	2
// (N	1
// Enable	1
// Lowest	2
// Initialize	2
// x^n	1
// (time	1
// Volatile	1
// x^10	1
// _controlfp(0,	2
// Polynomial	2
// Increment	1
// Overflow	1
// General	1
// ipow	1
// (This	1
// Returns	2
// Portability	1
// Catch	2
// Update	2
// Mixing	1
// Or	1
// EMMS	1
// Approximate	2
// initialize	1
// Remove	1
// Compare	2
// flip	1
// incremented	1
// Repeat	1
// Prevent	1
// Dispatcher	1
// Re-do	1
// x^8	1
// Non-polymorphic	1
// Error:	1
// Safe	1
// Output	1
// Generic	1
// polynomial(x)	1
// u.d	1
// Called	1
// Round	1
// versions:	1
// Entry	1
// Truncation	1
// Implicit	1
// Constructor	1
// Modulo	1
// Branch/loop	1
// Detect	1
// Place	1
// Print	1
// x,y	1
// Reset	1
// x^1,	1
// Serialize	1
// Convert	1
// Find	1
// Faster,	1
// continue	1
// erroneously	1
// Read	1
// Dispatcher.	1
// Constructor-style	1
// 2-dimensional	1
// Partial	1
// instrset_detect	1
// Rounding	1
// Prototype	1
// abs(u.f)	1
// Main	1
// (Some	1
// Default	1
= a	41
= int	2
= x	3
= {	2
= A	3
= point	1
= double	2
= b	24
= i	3
= float	4
= 2	1
= 4	1
= 0;	64
= 8	1
= 64	1
= 16	1
= 0	14
= &	1
= c	1
= i;	2
= a,	5
= b;	3
= 1;	9
= 256	1
= y	3
= c;	1
= char	2
= x;	1
= 100;	7
= r	3
= 0,	9
= 2;	4
= a[i]	1
= a;	2
= p	1
= 1.	2
= temp	3
= shift	1
= d	2
= divide	1
= 2,	1
= true	2
= temp;	2
= u;	1
= row	1
= 3;	1
= multiply	3
= *p	3
= false	1
= 4,	2
= -1	3
= 8,	1
= (unsigned	5
= 10;	2
= 1,	1
= 256;	1
= (a	2
= Induction	1
= int64_t	2
= log	1
= 16;	1
= x-	1
= (float	1
= 1.0;	5
= 250	1
= a[i];	1
= ~a	1
= b[i]	1
= C;	2
= 1000;	4
= parabola	1
= 2.0;	4
= s;	1
= 0x2710	1
= (n	1
= (b	1
= Induction;	4
= 100,	4
= LoadVector(cc	3
= LoadVector(bb	3
= r;	1
= 100.	1
= x2	1
= 28.	2
= b;}	1
= 8;	2
= (number	1
= false,	2
= 1024;	3
= r1;	2
= a*b	1
= ReadTSC()	1
= *(p++)	1
= 0x1C.	1
= _mm_set1_epi16(2);	2
= a2	2
= a1	2
= ((a*x+b)*x+c)*x+d	1
= (a+b)+(c+d)	2
= cos(x);	2
= a+(b+c)	2
= N&(N-1)	1
= 3.3;	2
= 2.0f;	1
= {1,	2
= StringLength;	1
= 32.	1
= string;	2
= &Object1;	2
= a*(b+c)	2
= (bb[i]	1
= order(i);	2
= 2048	1
= InstructionSet();	2
= ((x2)	2
= 512;	2
= 20,	2
= bb[i]	1
= (memory	1
= log(b[i])	2
= _mm_set1_epi16(0);	2
= a&&(b||c)	2
= (a&b)	1
= 8192	1
= _mm_cmpgt_epi16(b,	2
= (double)(signed	2
= &CriticalFunction_386;	1
= select(b	2
= sin(x);	2
= 1.f;	2
= A;	1
= _mm_add_epi16(c,	2
= 2.2,	2
= &CriticalFunction_SSE2;	1
= 1.23456.	1
= 1.1,	2
= &Object2;	2
= 80.	1
= c1;	1
= 0x40	1
= !(a	1
= _mm_mullo_epi16	2
= (a<b	1
= B;	1
= 1.0f	1
= b*a	2
= &CriticalFunction_AVX;	1
= (a+1)	2
= a&(b|c)	2
= 10,	1
= b+a	1
= x8*x2;	1
= 128.	1
= i+1;	1
= -abs(x);.	1
= b.y	1
= sin(0.8);	1
= x∙xn-1,	1
= 6.0f;	1
= a1/b1	1
= &SelectAddMul_AVX2;	1
= 64;	1
= list[j].b	1
= 1.23456,	1
= x2*x2;	1
= -100,	1
= {2.6f,	1
= (int)n	1
= a[i].u[1]	1
= 110;	1
= lookup[b];	1
= pow(x,n)	1
= 2.5*x^2	1
= a<<(b+c)	1
= {1.1,	1
= A*x*x	1
= 1.0E8,	1
= (short	1
= (s0+s1)+(s2+s3);	1
= &SelectAddMul_dispatch;	1
= (a&b)&(c&d)	1
= n∙(n-1)!.	1
= (total	1
= _mm_or_si128(c2,	1
= (a1*b2	1
= OneOrTwo5[b!=0];	1
= b[r][c];	1
= *(++p)	1
= array[++i]	1
= (10000	1
= {1.0f,	1
= (int)d;	1
= absvalue;	1
= _mm_andnot_si128(mask,	1
= 0x20,	1
= instrset_detect();	1
= (b*c)/d,	1
= Y;	1
= Func1(2);	1
= &list[0];	1
= a|(b&c)	1
= 32;	1
= WhateverFunction(i);	1
= array[i++]	1
= 100000001.23456.	1
= Func(a[i]);	1
= -1.0E8,	1
= 0x10,	1
= y.d	1
= y.a	1
= y.b	1
= y.c	1
= (float)i;	1
= 0.0;	1
= &CriticalFunction_Dispatch;	1
= 5.0f;	1
= lrint(d);	1
= 123;	1
= OneOrTwo5[b	1
= MAX(f(x),	1
= Func(ab[i].a);	1
= log(2.0);	1
= 50;	1
= (int)(&list[0])	1
= MultiplyBy<8>(10);	1
= &SelectAddMul_SSE2;	1
= b+a,	1
= _mm_blendv_epi8(bc,	1
= CriticalFunction(b,	1
= _mm_hadd_ps(x,	1
= r1+1;	1
= 10000,	1
= (A	1
= !a;	1
= __rdtsc();	1
= b++;	1
= a*4	1
= float(i);	1
= ++b;	1
= (*CriticalFunction)(b,	1
= Multiply(10,8);	1
= b.x	1
= select_gt(b,	1
= (0x2710	1
= x4*x4;	1
= _mm_hadd_ps(s,	1
= ((x2)2)2	1
= ReadTSC();	1
= FactorialTable[b];	1
= static_cast<float>(i);	1
= a&&b	1
= 18,	1
= 1.6;	1
= &SelectAddMul_SSE41;	1
= _mm_and_si128(c2,	1
= dummy[0];	1
= a+1;	1
or the	10
or a	20
or to	2
or in	4
or for	3
or function	3
or if	18
or by	8
or with	3
or code	1
or as	1
or not	2
or an	5
or int	2
or you	1
or use	2
or more	15
or when	5
or from	2
or memory	1
or at	1
or data	2
or program	1
or vector	2
or make	1
or because	1
or CPU	1
or other	6
or one	1
or cache	1
or no	4
or class	12
or floating	1
or each	1
or do	2
or double	8
or Intel	1
or pointer	1
or library	2
or multiple	3
or two	4
or object	4
or static	2
or 64-bit	3
or C++	3
or array	1
or variable	2
or any	3
or performance	1
or long	1
or between	1
or member	2
or const	1
or cannot	1
or See	1
or critical	1
or less	1
or unsigned	4
or first	1
or libraries	1
or pointers	1
or they	1
or without	1
or even	4
or method	1
or always	1
or 16	3
or SSE2	1
or out	1
or 32	2
or dynamic	2
or error	1
or Gnu	1
or accessed	1
or does	1
or assembly	2
or threads	1
or specific	1
or common	1
or thread	2
or small	1
or line	1
or optimized	1
or four	2
or another	1
or get	1
or container	2
or eight	1
or structure	5
or every	1
or 1	3
or add	1
or simply	1
or addresses	1
or shared	1
or write	2
or replace	1
or operator	1
or Mac	1
or cache.	1
or 256	1
or model	1
or mathematical	1
or Microsoft	1
or what	1
or reference	12
or three	1
or too	1
or transferred	1
or after	1
or give	1
or graphics	1
or assume	1
or later	8
or higher	1
or goes	1
or union	1
or require	3
or #define	1
or switch	1
or modules	1
or references	1
or VIA	1
or global	2
or 1.	4
or turn	1
or size.	1
or network	1
or #pragma	2
or hot	1
or comes	1
or limited	1
or class.	2
or database	1
or strings	1
or writing	6
or accessing	1
or until	1
or full	1
or overloaded	1
or models	1
or fail	1
or compiling	1
or structures	1
or logical	2
or subexpression	1
or reading	1
or resource	1
or enable	1
or PathScale	1
or references.	1
or come	1
or modify	2
or setting	1
or input	1
or not.	7
or approximately	1
or easy	1
or writes	2
or non-static	1
or false	1
or 8,	1
or __restrict	1
or 1,	1
or update	1
or int64_t	1
or log	1
or compile-time	1
or remove	1
or constant.	1
or reads	1
or reference,	4
or compilation	1
or completely	1
or structure.	2
or loss	1
or multidimensional	2
or lists	1
or created	1
or key	2
or malloc	3
or division.	1
or __asm	1
or two.	1
or sixteen	1
or estimate	1
or mouse	2
or *.so).	2
or video	1
or unsigned.	1
or another.	1
or mask	1
or structures.	1
or otherwise	1
or uint64_t	1
or API	1
or multi-core	1
or manipulate	1
or bypassing	1
or C++.	1
or (requires	1
or moving	2
or infinity	1
or reference.	1
or micro-op	1
or moved	1
or bypass	1
or typedef	1
or inline.	1
or modified.	2
or 3-dimensional	2
or post-increment.	1
or interpretation	1
or send	1
or ten	1
or four,	1
or NAN	2
or -0	1
or namespaces.	1
or microseconds	1
or re-	1
or column.	1
or integrated	1
or -Ofast	1
or Friday	1
or x64	1
or 0x40	1
or later.	1
or better,	1
or circumvent	1
or CString	1
or she	1
or .a),	1
or more.	1
or QueryPerformanceCounter	1
or decrementing	1
or __debugbreak();.	1
or "frame	1
or -axAVX.	1
or bitmap	1
or double)	1
or network.	1
or clearing	1
or PSDK).	1
or friend	1
or g(x)	1
or seemingly	1
or remotely.	1
or -fno-strict-overflow.	1
or while-loop	1
or animation.	1
or Espresso)	1
or "__attribute__((visibility	1
or inttypes.h	1
or __attribute__((fastcall)).	1
or C1::f.	1
or C2::Disp()	1
or hide	1
or p->member	1
or /Ox	1
or intranet	1
or PathScale.	1
or 2016.	1
or NAN.	1
or tiling.	1
or *.so)	1
or modifies	1
or __attribute__((aligned(16))).	1
or bottleneck,	1
or memory-intensive	1
or CString.	1
or "how	1
or removable	1
or glitches	1
or (5)	1
or First-In-Last-Out	1
or aliasing,	1
or void.	1
or references:	1
or /Fa	1
or Verilog.	1
or sizes?	1
or iterative	1
or malloc.	1
or malloc)	1
or __restrict__,	1
or vice	1
or C2,	1
or .so).	1
or YMM)	1
or -fsource-asm).	1
or makefile.	1
or __declspec(thread).	1
or malloc/free	1
it the	1
it is	177
it a	2
it to	7
it and	1
it in	4
it for	2
it can	34
it by	2
it with	4
it as	1
it may	28
it this	1
it more	1
it will	14
it from	3
it at	2
it has	18
it only	1
it point	1
it used	1
it should	2
it into	1
it also	1
it possible	8
it takes	31
it some	1
it so	1
it makes	7
it cannot	5
it less	1
it often	2
it does	5
it must	1
it work	1
it Use	1
it doesn't	11
it necessary	1
it works	1
it inside	1
it uses	1
it would	2
it count	1
it was	4
it allows	2
it needs	5
it becomes	2
it requires	3
it actually	1
it goes	3
it points	3
it off	1
it gives	1
it comes	2
it still	1
it prevents	3
it calls.	2
it rarely	1
it easier	2
it might	2
it checks	2
it returns.	1
it writes	1
it to.	1
it could	1
it involves	3
it had	1
it is.	1
it fits	1
it follows	1
it defines	1
it adds	1
it gets	1
it jumps	1
it avoids	1
it is,	2
it appears	1
it opens	1
it takes.	2
it explicitly.	1
it optimizes	1
it occurs,	2
it allocates	1
it unusual	1
it took	1
it expects	1
it locally	1
it increases	1
it handles	1
it obviously	1
it decides	1
it attempts	1
it sees	1
it compares	1
it exits.	1
it unwise	1
it uses.	1
it fills	1
it twice.	1
it lacks	1
it (&ArraySize)	1
it feeds	1
it matters:	1
it says.	1
it changes.	1
it understands	1
it has.	1
it supports.	1
it directly.	1
function is	65
function a	5
function of	8
function to	10
function and	8
function in	17
function for	8
function that	19
function are	4
function can	7
function //	2
function or	14
function if	2
function by	3
function with	4
function on	2
function code	1
function as	1
function may	3
function when	2
function will	4
function }	1
function then	1
function from	2
function at	1
function has	2
function because	5
function which	6
function but	1
function should	4
function using	1
function pointer	13
function into	2
function library	15
function also	1
function such	1
function In	1
function where	1
function many	1
function version	2
function we	1
function so	1
function return	3
function cannot	4
function called	2
function address	1
function call	12
function libraries	24
function template	1
function pointers	3
function they	1
function type	3
function does	1
function must	2
function calls	16
function through	3
function uses	2
function parameters	3
function was	1
function name	5
function parameter	2
function means	1
function instead	1
function dispatch	2
function calling	4
function goes	1
function feature	1
function just	1
function #define	1
function go	1
function relative	1
function inlining	4
function #pragma	1
function calls.	10
function library.	3
function libraries.	4
function names	5
function directly	1
function modify	1
function F1	1
function returns.	9
function writes	1
function stores	2
function could	1
function parameter.	1
function body	1
function call.	3
function __fastcall	1
function names.	1
function 250	1
function library,	1
function adds	1
function returns	1
function _mm256_zeroupper()	1
function opens	1
function parameters,	2
function libraries,	1
function parameter,	1
function looks	1
function scans	1
function definition.	1
function longjmp	1
function ReadTSC	1
function F2	1
function argument	1
function implicitly	1
function Size	1
function inline.	2
function ten	1
function construct	1
function prototype	1
function declaration.	1
function decides	1
function swapd(a[r][c],	1
function body.	1
function libraries........................................................................................	1
function local:	1
function __intel_cpu_features_init_x()	1
function calls,	1
function inlining,	1
function prototype:	1
function billions	1
function rounds	1
function F1.	1
function add_horizontal)	1
function prototypes	1
function bodies	1
function (n!)	1
function __intel_cpu_features_init()	1
function vectorized:	1
function inlining.	1
function tables.	1
function scanf.	1
function calling.	1
if the	148
if is	1
if a	22
if and	1
if it	36
if an	5
if you	32
if this	5
if time	1
if memory	1
if data	2
if different	1
if because	1
if functions	2
if only	1
if other	1
if instruction	1
if all	6
if one	1
if no	3
if each	2
if pointer	1
if b	4
if i	1
if multiple	2
if static	1
if there	20
if such	2
if possible	1
if any	2
if we	5
if branch	2
if elements	2
if unsigned	4
if pointers	1
if they	10
if SSE2	1
if out	1
if dynamic	1
if I	1
if its	2
if speed	1
if c	1
if a,	1
if AVX	1
if implemented	1
if (i	5
if supported	2
if certain	2
if intermediate	1
if above	2
if both	2
if else	3
if their	1
if your	2
if XMM	2
if statement	2
if level-2	1
if possible.	7
if true	1
if N	1
if condition	1
if statements	1
if F1	2
if alternative	1
if organized	1
if available.	1
if required	1
if (b)	7
if exceptions	1
if (a	4
if possible,	5
if portability	1
if protection	1
if ((unsigned	5
if nonzero	2
if pieces	1
if b[i]	1
if divisor	2
if (u.i	4
if powN	1
if unsigned.	1
if (n	2
if (b	2
if (level	4
if necessary,	3
if (Day	2
if (y)	2
if appropriate.	1
if any,	2
if (handle	1
if (true)	1
if (absvalue	1
if (u.i[1]	1
if (SIZE	1
if our	1
by the	73
by is	1
by a	38
by //	6
by not	1
by -	1
by an	5
by compiler	2
by more	2
by memory	1
by at	1
by vector	1
by only	1
by CPU	2
by other	1
by all	3
by one	2
by cache	1
by each	1
by most	1
by using	34
by Intel	2
by multiple	2
by two	3
by many	1
by value	1
by any	4
by some	2
by 2	3
by 4	2
by 8	2
by template	1
by pointers	1
by 16	6
by 32	1
by constant	4
by making	15
by its	1
by calls	1
by element	1
by several	1
by exception	1
by line	1
by another	4
by eight	4
by doing	1
by optimizing	2
by both	1
by preferably	1
by their	4
by n	2
by better	1
by means	2
by calling	3
by piece	1
by r	1
by storage	1
by my	1
by columns	1
by p	1
by consecutive	1
by inlining	4
by 2.	3
by including	1
by checking	1
by testing	2
by 100	1
by copying	5
by adding	7
by compiling	2
by unrolling	2
by F1	1
by setting	5
by default	3
by *p	1
by Microsoft,	1
by OpenMP	1
by multiplying	1
by random	1
by executing	1
by storing	2
by 16.	5
by giving	1
by Agner	2
by specifying	1
by comparing	2
by avoiding	3
by type-casting	3
by physical	1
by unacceptably	1
by increasing	1
by 16,	2
by 8.	4
by itself.	1
by turning	3
by one,	1
by declaring	3
by defining	2
by choosing	2
by modifications	1
by transferring	1
by default,	4
by 2n	2
by individual	1
by unit-testing	1
by me	1
by changing	2
by considerations	1
by reordering	1
by well-tested	1
by step.	1
by 64,	1
by bypassing	1
by F2	1
by organizing	1
by measuring	1
by returning	1
by joining	3
by modifying	1
by four,	1
by rolling	2
by invoking	1
by putting	1
by TILESIZE	1
by S.	1
by __fastcall.	1
by looking	1
by default.	2
by consistent	1
by performing	1
by extending	2
by subtracting	1
by 3,	1
by replacing	2
by removing	1
by assigning	1
by writing:	2
by ignoring	1
by (partial)	1
by x<<3,	1
by assignment,	1
by assignment.	1
by u[0].	1
by requesting	1
by emulating	1
by controlling	1
by inverting	1
by initializing	1
by dropping	1
by keys	1
by commas.	1
by hand	1
by constructing	1
by wrapping	1
by summing	1
by selecting	1
by fetching,	1
by causing	1
by XOR'ing	1
by semicolons,	1
by AND'ing	1
by CPU.............................................................................81	1
by xx-xx--x-	1
by allowing	1
by 5-10%	1
by thousands	1
with the	68
with a	56
with and	2
with in	2
with that	1
with or	1
with code	1
with an	8
with this	5
with more	2
with memory	1
with vector	6
with different	8
with only	4
with CPU	2
with other	8
with all	11
with integer	1
with floating	3
with each	2
with compilers	1
with most	2
with Intel	2
with multiple	7
with two	2
with many	11
with any	2
with some	3
with long	2
with branch	2
with member	2
with unsigned	2
with 64	1
with template	2
with pointers	1
with new	6
with SSE2	1
with system	1
with dynamic	1
with short	1
with making	1
with its	2
with CPUs	1
with large	1
with execution	2
with element	2
with single	1
with virtual	2
with option	3
with AVX	2
with line	1
with four	2
with another	4
with few	1
with 1	1
with sign	1
with both	1
with programs	1
with sets	1
with members	1
with Boolean	1
with intrinsic	1
with signed	1
with Microsoft	2
with automatic	4
with induction	2
with end	1
with old	4
with just	1
with #define	1
with C	2
with Windows,	1
with network	1
with slow	1
with desired	1
with out-of-order	3
with limited	1
with preceding	1
with non-Intel	1
with alignment	1
with 100	2
with reduced	1
with accessing	1
with 16-bit	1
with full	1
with N	1
with little	1
with bitwise	1
with bounds	3
with reading	1
with references.	1
with SSE4.1	1
with templates	2
with invalid	1
with destructors	1
with low	2
with Microsoft,	1
with lower	2
with heavy	1
with profiling	1
with j	1
with fixed	3
with non-sequential	1
with -fpic	1
with hardly	1
with profilers	1
with compile-time	1
with Intel's	1
with normal	1
with column	1
with embedded	1
with internal	1
with CISC	1
with contiguous	1
with macros	1
with older	1
with 1:	1
with structured	1
with pointers.	1
with 2n	1
with existing	1
with sequential	1
with fine-grained	1
with earlier	1
with big-endian	3
with character	1
with external	1
with 14.14b	1
with suffixes	1
with coarse-grained	1
with debugging.	1
with millisecond	1
with alloca.	1
with Gnu.	1
with lots	1
with legacy	1
with certainty	2
with interpretation.	1
with x87	1
with -mcmodel=large,	1
with C++0x	1
with segmented	1
with _mm.	1
with real	1
with zero-bits	1
with enum,	1
with First-In-First-Out	1
with profiling,	1
with carry)	1
with full-size	1
with alloca:	1
with alloca,	1
with #)	1
with _finite())	1
with nagging	1
with double's.	1
with u.i[1]	1
with widely	1
with IsPowerOf2	1
with massively	1
with truncation,	1
with these.	1
on the	95
on is	1
on a	32
on and	1
on that	2
on function	1
on with	1
on code	1
on an	4
on compiler	2
on x	1
on this	4
on when	1
on program	1
on different	3
on only	1
on CPU	2
on other	1
on instruction	1
on which	5
on all	13
on one	1
on integer	4
on page	30
on floating	3
on compilers	1
on most	4
on using	3
on Intel	6
on b	1
on multiple	1
on static	1
on C++	2
on such	4
on any	1
on some	4
on variables	1
on table	1
on very	1
on software	1
on branch	1
on first	3
on optimization	3
on how	4
on test	1
on these	1
on instructions	1
on processors	4
on stack	1
on its	3
on important	1
on CPUs	3
on large	1
on Windows	1
on calculations	1
on processor	1
on big	1
on several	1
on AMD	6
on exception	1
on small	1
on overflow	1
on Linux	1
on another	1
on whether	1
on every	3
on hardware	1
on certain	1
on intermediate	2
on Mac	1
on complicated	1
on signed	1
on mathematical	1
on what	4
on automatic	2
on n	1
on runtime	1
on compilers.	1
on bigger	1
on vectors	2
on process	2
on old	1
on advanced	1
on my	2
on network	2
on Pentium	1
on non-Intel	8
on it.	1
on alignment	1
on until	1
on performance.	1
on access.	2
on bounds	1
on reading	1
on future	3
on newer	1
on input	1
on current	1
on PC	1
on just-in-time	1
on algorithms	1
on lazy	1
on executing	2
on registers,	1
on CodeGear	2
on deciding	1
on completely	1
on anything	1
on seven	2
on remote	1
on BSD,	1
on n,	1
on older	1
on structured	1
on mixing	1
on multi-core	1
on contemporary	2
on longjmp	1
on improving	1
on x.	1
on hacks	1
on non-	1
on servers	1
on usability,	1
on publicly	1
on system-specific	1
on arranging	1
on Intel/x86-compatible	1
on redesigning	1
on correction	1
code the	1
code is	51
code of	1
code to	14
code and	22
code in	22
code for	12
code that	26
code are	4
code can	14
code or	3
code if	3
code by	3
code with	5
code as	1
code may	2
code you	2
code have	1
code more	7
code when	2
code will	10
code then	3
code from	3
code at	2
code has	6
code because	3
code which	1
code one	1
code cache	9
code should	3
code size	3
code into	1
code where	1
code version	5
code takes	1
code so	2
code performance	1
code branch	3
code faster	1
code makes	2
code cannot	1
code address	1
code less	1
code 64	1
code often	1
code rather	2
code optimization	1
code 16	1
code up	1
code must	1
code versions	2
code compiled	4
code big	1
code works	1
code inside	1
code uses	1
code Function	1
code contains	2
code memory.	1
code branches	2
code automatically	2
code caching	4
code implementation	1
code like	1
code cache.	2
code examples	2
code difficult	1
code instead	1
code becomes	8
code together	1
code goes	1
code smaller	1
code section	8
code gives	1
code size.	1
code still	1
code prevent	1
code further	1
code Assume	1
code optimization.	1
code execute	2
code containing	1
code version.	1
code to:	1
code could	1
code involves	1
code once	1
code explicitly	1
code line.	1
code itself	1
code Shared	1
code automatically.	1
code Static	1
code generated	2
code relies	1
code addresses.	1
code itself.	1
code flag	1
code lines.	1
code incompatible	1
code cache,	1
code only.	1
code motion	3
code explicitly.	1
code looks	1
code caching.	1
code took	1
code carefully	1
code .......................................................	1
code everywhere	1
code (option	1
code generality.	1
code bloat	1
code mixes	1
code (release	1
code slower,	1
code optimization",	1
code (byte	1
code motion.	1
code section,	1
as the	19
as is	2
as a	55
as to	2
as in	7
as for	2
as it	4
as function	3
as if	2
as an	15
as you	6
as this	1
as when	1
as memory	2
as vector	2
as different	1
as loop	1
as cache	1
as integer	1
as floating	1
as example	3
as most	1
as using	1
as i	1
as multiple	1
as two	2
as object	1
as static	3
as C++	2
as efficient	7
as many	1
as possible	4
as any	1
as very	1
as long	8
as 32-bit	1
as code.	1
as template	3
as pointers	2
as 32	1
as part	1
as simple	1
as constant	1
as error	1
as important	1
as much	2
as single	1
as common	1
as AMD	1
as small	1
as good	4
as explained	25
as parameters	1
as supported	1
as few	1
as inline	1
as well	11
as fast	6
as their	1
as Boolean	1
as string	1
as three	1
as last	2
as calling	1
as bigger	1
as binary	1
as p	1
as intended	1
as dynamically	1
as index	1
as described	5
as position-independent	1
as given	1
as output	1
as task	1
as writing	1
as copying	1
as accessing	1
as possible.	3
as little	1
as discussed	1
as directly	1
as e.g.	1
as well.	2
as input	2
as integers.	1
as mentioned	1
as addition,	1
as standardized	1
as heavy	1
as Gnu,	1
as listed	1
as xn	1
as follows:	7
as machine	1
as powers	1
as possible,	1
as follows	2
as soon	1
as int,	1
as list,	1
as -(-a)	1
as n!	1
as true,	1
as macros	1
as well,	1
as Taylor	1
as alternatives	1
as illustrated	1
as 8-bit	1
as entry	1
as Intel-based	1
as character	1
as expected.	1
as DOS	1
as logarithms	1
as C#,	1
as pivot	1
as memcpy,	1
as shown	2
as semaphores,	1
as floppy	1
as arguments	1
as price,	1
as pragmas	1
as _mm_empty()	1
as logarithms,	2
as additions.	2
as command-line	1
as Java,	1
as 0/a	1
as accurate	1
as sorting	1
as coprocessors	1
as sqrt	1
as b*(2.0/3.0)	1
as C-	1
as 2eee	1
as (int)&matrix[0][0]	1
as eliminating	1
as buffers	1
as spell-checking	1
as GetPrivateProfileString	1
as sorting,	1
as strcpy,	1
as x4∙xn-4.	1
as (critical	1
as VHDL	1
as recursive	1
as versatile.	1
as flush	1
as pow,	1
as email	1
as required,	1
as <.	1
as (b*2.0)/3.0	1
as ((a+b)+c)+d.	1
as replacements	1
as integers:	1
as ReadB	1
as gates,	1
as 'this'.	1
as OneOrTwo5[(b!=0)	1
as follows.	1
as reflecting	1
as AQtime,	1
as intended,	1
not the	6
not a	8
not to	2
not in	7
not for	1
not be	22
not if	4
not by	1
not with	2
not on	4
not as	1
not not	1
not an	4
not have	8
not use	11
not at	1
not make	5
not only	6
not all	1
not used	2
not do	2
not using	1
not i	1
not possible	6
not any	1
not very	1
not long	1
not stored	1
not call	1
not less	1
not take	1
not need	5
not even	2
not sure	1
not always	14
not out	1
not dynamic	1
not part	1
not up	1
not making	1
not accessed	2
not work	2
not necessary	6
not thread	1
not good	1
not been	5
not optimized	1
not get	2
not check	2
not advantageous	5
not known	6
not support	3
not supported	2
not doing	1
not add	1
not well	1
not able	2
not certain	1
not shared	1
not quite	1
not used.	1
not recommended	5
not optimize	2
not optimal	4
not cost	1
not efficient.	1
not needed	5
not read	1
not give	1
not look	1
not load	1
not declared	1
not improve	1
not divisible	2
not know	1
not appropriate	1
not require	1
not negative	1
not predicted	1
not compatible	3
not intended	1
not turn	1
not produce	3
not safe	1
not clear	1
not mix	1
not fit	1
not needed.	3
not copied	1
not allow	1
not expect	1
not swap	1
not significant	1
not enough	1
not apply	2
not allocate	1
not critical.	1
not vectorize	1
not include	1
not fully	1
not standardized	1
not included	1
not easily	1
not resolved	1
not allowed	2
not suitable	1
not spend	1
not free	1
not do.	1
not evaluated	1
not edx	1
not permissible	3
not overlap.	4
not backwards	1
not portable	1
not _WIN64	2
not necessarily	4
not divided	1
not seen	1
not wrap	1
not necessary.	1
not all.	1
not doubled.	1
not present	1
not overlap	1
not optimal.	2
not guaranteed	1
not expensive.	1
not going	1
not __INTEL_COMPILER	1
not cached.	2
not optimized.	1
not normally	1
not satisfied	1
not alias	2
not separated	1
not cover	1
not unusual	2
not solve	1
not occur.	2
not _WIN32	1
not throw	1
not modified.	1
not overlapping	1
not computationally	1
not vacant	1
not suited	1
not supported.	1
not visible	1
not allowed.	1
not testing.	1
not uncommon	2
not 123	1
not accessible	1
not noticed	1
not recognized	1
not human	1
not yet	1
not referenced	1
not selected.	1
not evaluated,	1
not detected	1
not supported");	1
not safe,	1
not standardized.	1
not affected	1
not aliased	1
not backwards.	1
not traditionally	1
not used).	1
not satisfactory.	1
not met	1
not alias,	1
not reproducible.	1
This is	92
This can	32
This function	6
This code	4
This compiler	2
This may	11
This time	1
This will	11
This memory	1
This data	1
This has	10
This instruction	3
This loop	2
This should	1
This example	1
This pointer	1
This library	5
This also	2
This makes	21
This new	1
This method	17
This extra	2
This does	2
This large	1
This processor	1
This option	2
This works	3
This manual	5
This calculation	1
This check	1
This problem	2
This solution	2
This advantage	1
This would	3
This structure	1
This standard	1
This information	1
This above	1
This typically	2
This allows	4
This expression	1
This implementation	1
This needs	1
This conversion	1
This cost	1
This mechanism	1
This means	7
This requires	3
This framework	1
This results	1
This feature	2
This section	1
This index	1
This gives	1
This operation	1
This task	1
This prevents	5
This alignment	1
This effect	1
This so-called	2
This includes	4
This delay	1
This chapter	1
This garbage	1
This penalty	1
This gain	1
This series	1
This applies	2
This tool	2
This principle	1
This happens	1
This tells	1
This enables	3
This non-inlined	1
This unit-testing	1
This normally	1
This reordering	1
This removed	1
This wasteful	1
This reflects	1
This reduces	1
This safety	1
This worked	1
This technique	1
This dilemma	1
This fragmentation	1
This ends	1
This corresponds	1
This closely	1
This behaviour	1
This requires,	1
This triangle	1
This '1'	1
- a	6
- to	1
- in	1
- -	131
- x	65
- no	1
- n.a.	64
- there	1
- 2	1
- 4	1
- 8	1
- 64	1
- they	1
- 16	1
- Integer	1
- preferably	1
- 1;	2
- Table	1
- 10	1
- 5	1
- 100	1
- 2,	1
- 20	2
- 6	1
- reciprocal	1
- x-xxxx--x	1
- 80	2
- xxxxxxxxx	1
- -(-a)	1
- 5.	1
- 45	2
- a-a	1
- Divide	1
- 30	1
- -----	1
- 25	1
- a*0	1
- a*1	1
- time1;	1
- a+0	1
- (time	1
- vectorclass	1
- a*b+a*c	1
- 0/a	1
- (a&b)|(a&c)	1
- masm=intel	1
- a<<b<<c	1
- x-xxx	1
- min)	1
- a/1	1
- a+b+c	1
- xx	1
- x-xx----x	1
- andnot(a,a)	1
- xx(-)x-	1
- 2014.	1
- 8*x	1
- 76	1
- min))	1
- 8.0f)	1
an int	3
an instruction	2
an integer	24
an example	4
an Intel	6
an object	19
an efficient	3
an array	17
an address	6
an operating	2
an unsigned	4
an even	1
an error	14
an important	2
an extra	10
an assembly	3
an execution	1
an element	1
an exception	7
an overflow	3
an option	7
an optimized	1
an advantage	6
an inline	2
an optimizing	5
an intermediate	8
an optimal	1
an application	2
an expression	3
an induction	3
an &&	1
an addition	2
an ||	1
an Intel,	2
an old	1
an appropriate	1
an advanced	2
an unused	2
an STL	2
an index	2
an inefficient	1
an instance	1
an output	1
an inlined	2
an algorithm	1
an offset	1
an operand	1
an unknown	1
an overloaded	3
an entire	1
an executable	1
an input	1
an explanation	6
an integer,	5
an interrupt	2
an arithmetic	1
an array.	1
an update	1
an integer.	4
an equal	1
an 9	1
an int,	1
an obvious	1
an excessive	3
an increasing	2
an explanation.	3
an exception.	3
an additional	2
an example.	3
an appendix	2
an empty	2
an IDE.	2
an extended	1
an underflow	1
an assumption	1
an uncached	1
an existing	2
an explicit	2
an implicit	2
an 8-bit	2
an inferior	1
an arbitrary	3
an FPGA	2
an error.	1
an addition.	2
an unfortunate	1
an approximate	1
an annoying	1
an up-to-date	2
an initialization	2
an issue	1
an odd	1
an insufficient	1
an import	2
an anonymous	2
an infinite	1
an immediate	1
an array,	1
an interpreter	2
an EMMS	1
an obstacle	1
an IDE	1
an update,	1
an acceptable	1
an over-	1
an integral	1
an MFC	1
an attribute	1
an imported	1
an ordinary	1
an if-else	1
an estimated	1
an illegal	1
an hour.	1
an unrecoverable	1
an antivirus	1
an n'th	1
an integer).	1
an interrupt,	1
an error;	1
int is	3
int a	1
int in	6
int or	1
int if	1
int int	1
int x	2
int one	1
int size	12
int i	1
int *	2
int before	1
int 4	2
int 8	2
int unsigned	2
int 64	4
int 16	5
int 32	5
int &	2
int i;	37
int a,	9
int 128	4
int uses	1
int b;	6
int sign	3
int 256	1
int c;	3
int instead	1
int x;	3
int b,	1
int i,	14
int a;	5
int d;	2
int exponent	3
int rows	3
int level	2
int u;	3
int CriticalFunction	1
int fraction	3
int declaration	1
int 3;	1
int n;	5
int factorial	2
int bb[],	9
int aa[],	9
int cc[])	8
int a[100];	2
int Induction	1
int parm2)	7
int int64_t	1
int SomeFunction	5
int SIZE	3
int a[size],	2
int list[300];	4
int Multiply	1
int n)	1
int s;	2
int lrint	2
int N>	2
int r,	4
int b;};	1
int main()	2
int list[100];	1
int A,	2
int (16	1
int CriticalFunction_386(int	2
int a[2];	1
int b:2;	2
int MultiplyBy	1
int c:2;	2
int TILESIZE	1
int Func(int);	2
int a[1000];	2
int CriticalFunction_SSE2(int	2
int lrintf	1
int ArraySize	1
int ABC	1
int parm2);	1
int NumberOfTests	1
int min	1
int Func2()	1
int order(int	2
int a:4;	2
int ARRAYSIZE	1
int FactorialTable[13]	2
int CriticalFunction_AVX(int	2
int matrix[NUMROWS][NUMCOLUMNS];	1
int CriticalFunctionType(int	1
int Sum2(S3	1
int c;};	1
int dummy;	1
int row,	1
int Sum3(S3	1
int r1,	1
int BigArray[1024]	1
int FuncRow(int);	1
int bb[size]	1
int NUMROWS	1
int UnusedFiller;	1
int List[ArraySize];	1
int Func1(int	1
int absvalue,	1
int BigArray[1024];	1
int cc[size]	1
int u[2]}	1
int m)	1
int arraysize	1
int CriticalFunction_Dispatch(int	1
int x[])	1
int DontSkip;	1
int list[301];	1
int c1::*MemberPointer;	1
int Size()	1
int ReadB()	1
int iset	1
int aa[size]	1
int 832	1
int Sum1()	1
int i[2];	1
int dummy[4];	1
int FuncCol(int);	1
int seconds;	1
int cc[]);	1
than the	51
than a	23
than to	12
than in	14
than for	3
than it	7
than if	3
than by	9
than with	2
than on	7
than code	1
than as	2
than an	3
than x	3
than when	3
than from	2
than memory	1
than at	2
than CPU	1
than other	5
than one	6
than integer	1
than floating	2
than each	2
than example	1
than most	1
than using	1
than double	2
than two	2
than static	2
than 64-bit	1
than there	2
than any	1
than 2	2
than 32-bit	1
than pointers	3
than 16	1
than 32	1
than dynamic	1
than 0	7
than type	1
than short	1
than making	3
than its	3
than processor	1
than single	1
than done	1
than 128	1
than four	1
than functions.	1
than doing	1
than standard	1
than optimizing	1
than Boolean	1
than signed	2
than division	2
than end	1
than addition	1
than needed	1
than last	1
than linked	1
than calling	1
than references	1
than C	1
than intended	1
than frame	1
than accessing	2
than processing	1
than needed.	1
than mov	1
than reading	2
than calculating	1
than future	1
than seconds	1
than 65	1
than finding	1
than addition,	2
than once	1
than 8,	1
than multiplying	1
than random	1
than rounding	1
than 127	1
than speed.	1
than normal	1
than half	2
than comparing	2
than truncation	1
than anything	1
than third	1
than pow	1
than 250	1
than necessary.	1
than two.	1
than 2n	1
than another.	1
than RISC	1
than moving	1
than allocating	2
than "what	1
than post-increment.	1
than Sum2	1
than generating	1
than rounding.	1
than PCs.	1
than loops,	1
than 1.23456.	1
than 99%	1
than normal.	2
than relocation,	1
than sequences	1
than non-virtual	1
than 231.	1
than 1/50	1
than 2-20,	1
than ARRAYSIZE.	1
than 1%	1
than 20.	1
than investing	1
than nine,	1
than 200.	1
than rendering	1
than looping	1
than log)	1
than others.	1
than -156.	1
than 33%	1
than non-object	1
than 15.1b,	1
than isolating	1
than self-styled	1
than normally.	1
than doubled	1
compiler is	20
compiler to	25
compiler and	3
compiler in	3
compiler for	13
compiler that	8
compiler can	27
compiler //	1
compiler if	1
compiler by	1
compiler with	4
compiler on	1
compiler not	1
compiler may	23
compiler you	2
compiler have	1
compiler when	1
compiler A	1
compiler will	17
compiler from	8
compiler at	1
compiler has	11
compiler because	1
compiler which	1
compiler should	1
compiler Intel	2
compiler There	2
compiler takes	2
compiler makes	1
compiler cannot	5
compiler often	1
compiler optimization	1
compiler I	1
compiler does	8
compiler must	2
compiler (see	1
compiler Windows	6
compiler versions	2
compiler doesn't	9
compiler option	5
compiler Linux	5
compiler works	1
compiler manual	2
compiler uses	2
compiler would	2
compiler optimize	1
compiler allows	2
compiler needs	2
compiler mechanism	1
compiler optimizations	1
compiler options	2
compiler #define	1
compiler supports	4
compiler comes	1
compiler output	1
compiler sometimes	1
compiler reduced	2
compiler optimization.	1
compiler includes	1
compiler e.g.	1
compiler might	1
compiler explicitly	1
compiler itself	1
compiler generates	4
compiler manual.	1
compiler ..........................................................................................	1
compiler combined	1
compiler additional	1
compiler 8.1	1
compiler documentation	2
compiler inserts	1
compiler optimizes	1
compiler bypassing	1
compiler packages	1
compiler .........................................................................	2
compiler became	1
compiler ....................................................................................................	1
compiler warning	1
compiler sees	1
compiler treat	1
compiler interpret	1
compiler recognizes	1
compiler technology,	1
compiler price	1
compiler puts	1
compiler options.......................................................................................	1
compiler (parallel	1
compiler .......................................................................	1
compiler knows	1
compiler makers	1
compiler makers.	1
x is	2
x to	4
x and	1
x in	1
x The	1
x for	1
x can	1
x //	3
x =	9
x by	1
x as	1
x -	73
x x	156
x when	1
x +	3
x n.a.	5
x *	5
x so	1
x <	2
x must	1
x >	1
x Loop	1
x *=	1
x <=	1
x x-	4
x 43	1
x x--	2
x -----	1
x (x)	3
x ((a*x+b)*x+c)*x+d	1
x 74	1
x --	1
x *const_cast<int*>(&x)	1
x *x;	1
x ---	1
may of	1
may in	5
may be	92
may as	2
may not	19
may have	9
may use	9
may make	4
may also	4
may some	1
may return	1
may very	1
may call	1
may take	6
may need	7
may even	3
may want	2
may work	1
may avoid	3
may cause	6
may therefore	1
may get	2
may run	3
may calculate	1
may add	2
may store	2
may write	2
may replace	6
may typically	1
may preferably	2
may put	1
may read	1
may give	1
may look	3
may actually	2
may improve	5
may reduce	2
may choose	7
may require	2
may start	1
may go	2
may change	2
may slow	2
may produce	1
may save	2
may possibly	1
may fail	2
may occur	2
may insert	1
may consider	5
may enable	1
may come	1
may happen	1
may apply	2
may define	1
may contain	1
may try	1
may remove	1
may declare	1
may detect	1
may prefer	2
may move	1
may think	1
may mirror	1
may behave	1
may catch	1
may seem	2
may ignore	1
may skip	1
may decide	1
may reorder	1
may report	1
may interfere	1
may involve	1
may reuse	1
may sample	1
may fill	1
may interleave	1
may actively	1
may occasionally	1
may deviate	1
may view	1
may write:	1
may neverthe-	1
may argue	1
may supply	1
may vary	1
you to	5
you are	31
you can	44
you may	30
you have	18
you use	2
you will	9
you make	3
you only	1
you should	14
you do	1
you cannot	12
you take	1
you need	5
you access	3
you want	32
you must	5
you avoid	2
you compile	3
you optimized	1
you get	1
you would	1
you run	1
you write	1
you see	1
you don't	9
you put	1
you read	1
you look	3
you assume	1
you know	2
you choose	1
you just	1
you start	3
you change	1
you turn	1
you unroll	1
you divide	2
you consider	1
you expect	2
you gain	2
you could	1
you had	1
you measure	1
you spend	1
you declare	1
you follow	1
you specify	1
you prefer	1
you forget	2
you know).	1
you discover	1
you analyze	1
you activate	1
{ a	10
{ The	1
{ for	8
{ //	53
{ if	10
{ int	15
{ has	1
{ double	4
{ float	11
{ static	2
{ return	26
{ const	2
{ unsigned	3
{ case	1
{ short	1
{ c	1
{ ...	7
{ y	4
{ public:	18
{ r	1
{ union	1
{ a[i]	8
{ S1	1
{ temp	1
{ d	1
{ sum	1
{ struct	1
{ list[i]	2
{ cout	8
{ seconds	1
{ *p	2
{ try	1
{ j	2
{ C1	3
{ sum1	1
{ b[i]	1
{ __declspec(align(16))	1
{ CChild1	1
{ 89	1
{ _mm_storeu_si128((__m128i	3
{ Vec16s	1
{ (iset	1
{ __m128	1
{ F2(b);	1
{ aa[i]	2
{ FuncA(i);	2
{ s0	1
{ F1(a);	1
{ goto	2
{ DoThisThreeTimesAWeek();	2
{ list[i].a	1
{ swapd(a[r2][c2],a[c2][r2]);	2
{ memset(a,	1
{ Sunday,	1
{ largest_abs	1
{ Table[x]	2
{ b.load(bb+i);	1
{ Sunday	1
{ time1	1
{ protected:	1
{ FuncB(i);	1
{ CFALSE:	1
{ DTRUE:	1
{ "Alpha",	1
{ __declspec(__align(64))	1
{ ab[i].b	1
{ _mm_store_si128((__m128i	1
{ F1();	1
{ StoreNTD(&a[c][r],	1
{ temp->a	1
{ a[c][r]	1
{ _mm_stream_pi((__m64*)dest,	1
{ 92	1
have the	10
have a	25
have to	44
have as	1
have not	1
have an	11
have this	2
have more	3
have memory	1
have vector	1
have functions	1
have only	2
have CPU	1
have other	3
have used	2
have one	3
have no	14
have floating	1
have each	1
have multiple	2
have two	4
have such	2
have efficient	1
have many	3
have variable	1
have any	2
have some	1
have very	3
have long	1
have less	1
have even	1
have access	1
have its	2
have execution	1
have big	4
have much	1
have several	2
have been	13
have done	2
have four	1
have implemented	2
have support	2
have eight	1
have values	1
have information	1
have certain	1
have addresses	1
have quite	1
have fast	1
have Boolean	1
have separate	1
have put	1
have various	2
have three	1
have public	1
have made	1
have just	1
have tested	6
have become	2
have inefficient	1
have described	1
have particularly	1
have special	1
have names	2
have little	1
have similar	1
have features	1
have added	1
have provided	1
have #if	1
have family	1
have exactly	1
have spent	1
have powerful	1
have mixed	2
have constructors	1
have unacceptably	1
have seen	1
have AND'ed	1
have ever	1
have facilities	1
have finished	1
have (set)	1
have supplied	1
have undesired	1
have discovered	1
have developed	1
have extern	1
have inherent	1
have got	2
have inserted	1
have difficulties	2
have worked	1
have Booleans	1
have occurred.	1
have ample	1
have studied	1
have confirmed	1
have sent	1
have little-endian	1
have exploited.	1
have gone	1
have tested.	1
have tried.	1
this the	3
this is	23
this to	3
this in	2
this for	1
this can	3
this or	1
this function	5
this by	12
this with	2
this code	4
this may	2
this time	2
this will	3
this memory	1
this only	1
this instruction	3
this loop	2
this example	8
this pointer	2
this library	2
this number	2
this value	2
this table	1
this way	2
this makes	1
this address	1
this example,	6
this bit	1
this first	1
this optimization	2
this code.	1
this method	8
this part	2
this case	9
this error	2
this important	1
this extra	1
this does	1
this work	1
this result	1
this language	1
this option	1
this line	1
this works	2
this manual	4
this calculation	1
this problem	7
this solution	3
this would	2
this every	1
this information	1
this multiplication	1
this complicated	1
this requires	1
this feature	3
this function,	1
this range	1
this section	3
this example:	1
this statement	1
this hot	1
this fact	1
this task	1
this shift	1
this prevents	1
this efficiency	1
this discussion	1
this alignment	1
this effect	1
this time,	1
this optimization.	1
this address.	1
this might	1
this problem.	5
this series	1
this to:	5
this brand	1
this involves	1
this unit	1
this kind	3
this jump	1
this case.	4
this polynomial	1
this principle	1
this method.	1
this manual.	2
this case,	1
this example.	1
this option.	3
this appears	1
this unit-test	1
this manually.	1
this format.	1
this reordering	1
this distance	1
this wasteful	1
this purpose.	1
this condition.	1
this bookkeeping	1
this argument	1
this problem:	2
this purpose,	1
this column.	1
this "override"	1
this initialization,	1
this manual,	2
this limitation).	1
this interval,	1
this did	1
this works,	1
this topic,	1
this rule.	1
this delaying	1
this limitation	1
this block:	1
this chapter.	1
this loop?	1
this reason.	1
this reason,	1
this mask,	1
this place.	1
this respect.	1
this capability:	1
this chapter,	1
time the	17
time is	14
time a	8
time of	4
time to	15
time and	9
time in	6
time for	4
time that	2
time can	1
time or	2
time it	31
time if	2
time on	5
time as	2
time an	1
time int	1
time than	14
time may	1
time you	3
time when	5
time then	3
time at	1
time has	1
time because	5
time which	1
time but	1
time used	2
time each	1
time we	1
time so	2
time You	1
time before	2
time rather	2
time they	1
time Some	1
time while	1
time doing	1
time both	1
time unless	1
time too	1
time goes	1
time loading	1
time delay	1
time under	1
time loops	1
time unit	1
time applications.	1
time stamp	7
time consuming	4
time T	1
time measurements	2
time waiting	2
time spent	2
time Func	2
time here.	1
time regardless	1
time consuming.	4
time searching	1
time consumption	4
time slices	4
time cleaning	1
time compared	1
time consumers	2
time intervals	1
time MemberPointer	1
time consumer	2
time T+1	1
time slices.	1
time consumers.	1
time consuming,	1
time intervals.	1
time packed	1
time lag.	1
time measurement.	1
time slice	1
time measure.	1
time measurements:	1
use the	52
use is	1
use a	32
use of	22
use and	2
use in	3
use for	4
use that	1
use can	1
use it	2
use on	1
use as	1
use an	5
use than	2
use this	8
use time	1
use more	2
use vector	6
use different	3
use only	3
use one	2
use integer	1
use double	1
use Intel	1
use float	1
use multiple	3
use static	2
use 64-bit	3
use such	1
use any	1
use 32-bit	1
use unsigned	1
use 64	1
use rather	1
use pointers	1
use these	1
use 32	1
use dynamic	6
use assembly	2
use large	1
use big	1
use single	2
use AMD	1
use exception	1
use AVX	1
use inline	1
use standard	2
use intrinsic	1
use induction	1
use string	1
use lookup	1
use runtime	1
use linked	1
use later	1
use binary	1
use depends	1
use STL	1
use #pragma	1
use position-independent	2
use vectorized	1
use it.	1
use full	1
use algebraic	1
use situation	1
use alternative	1
use standardized	1
use #if	1
use just-in-time	2
use GOT	1
use absolute	1
use truncation	1
use excessive	1
use pre-increment	1
use hyperthreading	1
use branches,	1
use relocation.	1
use internet	1
use denormal	1
use hexadecimal	1
use ~	1
use thread-safe	1
use objconv	1
use SafeArray:	1
use inappropriate	1
use segmentation	1
use try,	1
more of	1
more and	1
more by	2
more on	1
more than	23
more time	15
more then	1
more memory	2
more data	1
more vector	1
more CPU	1
more cache	1
more integer	3
more efficient	43
more clock	1
more performance	2
more time.	1
more template	1
more useful	1
more dynamic	1
more bits	1
more error	2
more important	4
more versions	2
more threads	2
more common	1
more advantageous	2
more likely	1
more information	1
more space	3
more complicated	11
more resources	5
more efficient.	7
more examples	1
more difficult	2
more advanced	1
more relevant	1
more reductions	1
more references	1
more syntax	1
more safe	2
more discussion	1
more clear	5
more efficiently	4
more details	1
more RAM	2
more time-consuming	1
more frequent	1
more iterations	1
more fragmented	1
more general	1
more random	1
more important.	1
more serious	1
more expensive	2
more reliable	3
more predictable	2
more compact	5
more complex	4
more convenient	2
more efficient,	1
more powerful	3
more popular	1
more realistic	1
more jobs	1
more resources,	1
more cores,	1
more dramatic	1
more detailed	1
more reproducible	1
more constants.	1
more detail	1
more compact.	1
more (128	1
more focus	1
more readable	2
more well-structured	1
more difficult.	2
more complex,	2
more efforts	1
more efficiently.	1
more distant	1
more efficient:	1
more primitive,	1
more complicated.	1
more heuristic	1
more manageable	1
more powerful.	1
when the	74
when a	12
when in	1
when it	16
when code	3
when not	1
when an	1
when you	8
when data	2
when CPU	1
when instruction	1
when all	1
when used	2
when no	2
when using	1
when Intel	1
when b	4
when i	2
when static	1
when there	2
when C++	1
when objects	3
when we	2
when performance	1
when software	1
when long	1
when elements	1
when called	3
when they	4
when I	1
when accessed	1
when arrays	1
when compiled	2
when speed	2
when several	1
when doing	2
when optimizing	1
when shared	1
when their	1
when running	4
when n	2
when parts	1
when AVX2	1
when r	1
when just	1
when contentions	3
when columns	1
when efficiency	1
when testing	2
when alignment	1
when compatibility	1
when copying	1
when accessing	1
when needed.	1
when compiling	7
when calculating	1
when applied	5
when converted	1
when multiplying	1
when portability	1
when converting	1
when deciding	5
when type-casting	1
when swapping	1
when running.	1
when choosing	1
when going	1
when mixing	1
when alloca	1
when interprocedural	1
when returning	1
when none	1
when CriticalInnerFunction	1
when false.	1
when bb[i]	1
when activated	1
when exiting	1
A is	3
A and	1
A =	2
A function	5
A code	3
A compiler	5
A more	6
A program	1
A CPU	2
A loop	3
A cache	2
A class	2
A floating	1
A double	1
A pointer	3
A +	2
A static	3
A C++	1
A possible	1
A clock	1
A variable	6
A performance	1
A very	1
A software	1
A long	1
A branch	8
A const	3
A critical	1
A call	2
A register	1
A template	5
A test	1
A user	1
A method	1
A dynamic	3
A part	1
A short	1
A simple	5
A constant	1
A large	2
A big	1
A language	1
A much	1
A virtual	2
A common	1
A thread	1
A good	6
A matrix	2
A calculation	1
A problem	1
A few	2
A list	1
A structure	1
A copy	2
A shared	2
A lot	2
A microprocessor	2
A dependency	1
A model	1
A conversion	1
A disadvantage	3
A reference	1
A dispatcher	1
A better	1
A |	1
A runtime	1
A longer	1
A look	1
A linked	2
A higher	1
A process	1
A binary	2
A union	3
A feature	1
A constructor	1
A switch	2
A negative	2
A positive	1
A computer	1
A profiler	1
A particularly	1
A limited	2
A database	1
A frame	2
A destructor	1
A Pentium	1
A further	1
A discussion	1
A non-Intel	1
A macro	2
A little	1
A smart	2
A situation	1
A similar	1
A newer	1
A metaprogramming	1
A default	1
A typical	1
A pure	1
A graphical	1
A hash	4
A collection	1
A complex	1
A debugger	1
A leaf	2
A 32-	1
A mixed	1
A considerable	1
A popular	1
A context	1
A multidimensional	1
A realistic	1
A console	2
A command	1
A safer	1
A commercial	1
A queue	1
A missing	1
A redesign	1
A competing	1
A complete	1
A for-loop	2
A GNU	1
A programmable	1
A WTL	1
A command-line	1
A thread-safe	1
A Number)	1
A sourcebook	1
A little-known	1
A light-weight	1
A Pragmatic	1
will be	43
will not	11
will have	6
will use	5
will then	1
will make	13
will point	1
will do	3
will most	1
will also	1
will return	1
will call	1
will take	4
will often	3
will always	3
will work	2
will cause	4
will therefore	2
will get	4
will support	1
will run	5
will calculate	2
will store	1
will optimize	1
will both	1
will replace	2
will typically	2
will automatically	2
will see	2
will never	3
will read	1
will give	2
will look	1
will load	1
will generate	8
will usually	1
will reduce	1
will choose	1
will start	2
will go	2
will change	2
will become	1
will produce	1
will still	1
will prevent	1
will shift	1
will save	1
will unroll	1
will fail	3
will convert	3
will occur	1
will consider	1
will delay	1
will enable	2
will align	2
will allow	1
will happen	1
will vectorize	2
will try	1
will wait	1
will break	1
will notice	2
will detect	1
will soon	2
will benefit	1
will appear	1
will prefer	1
will recognize	3
will catch	1
will evict	3
will remain	1
will invalidate	1
will conclude	1
will crash	2
will provoke	1
will interfere	1
will contend	1
will crash.	1
will stay	1
will dominate	1
will trigger	1
will grow	1
will cut	1
will propagate	1
will occur:	1
} The	25
} //	17
} if	3
} This	12
} int	3
} A	4
} }	40
} It	2
} Example	3
} If	1
} double	1
} In	3
} There	1
} return	4
} You	1
} const	1
} void	4
} An	1
} These	1
} };	11
} else	20
} Using	1
} We	1
} x;	1
} Here,	6
} Loop	1
} Assume	1
} sum	1
} u;	6
} Obviously,	1
} Here	1
} #if	1
} Induction	1
} T	1
} polynomial	1
} #endif	1
} Can	1
} z	1
} catch	1
} 135	1
} 73	1
} Microprocessors	1
} FuncC(i);	1
} u,	2
} By	1
} 109	1
} Transposing	1
} 34	1
} module2.cpp	1
} 59	1
} printf("\nResults:");	1
} 68	1
} 70	1
} 152	1
} 138	1
} 115	1
} 111	1
} 112	1
} list[300]	1
then the	45
then a	4
then be	2
then it	40
then an	1
then you	34
then this	3
then use	8
then make	4
then all	2
then each	2
then there	10
then many	1
then we	7
then stored	1
then call	4
then its	1
then calls	2
then c	1
then check	1
then run	1
then add	2
then both	1
then replace	1
then sets	1
then put	3
then transferred	1
then linked	1
then become	1
then turn	1
then output	1
then tell	1
then convert	2
then handle	1
then f	1
then F1	1
then try	1
then measurements	1
then follow	1
then think	1
then B,	1
then N&(N-1)	1
then sizeof(S1)	1
then interpret	1
then 0+1.23456	1
then de-referenced	1
then merge	1
then FuncC.	1
then d+e,	1
It is	141
It can	10
It may	18
It will	4
It has	3
It should	4
It also	2
It takes	3
It makes	1
It does	3
It must	1
It doesn't	1
It works	1
It uses	2
It simply	1
It requires	1
It just	1
It supports	1
It comes	1
It might	1
It reveals	1
It compares	1
Example 13.1	1
Example 16.2	1
Example 14.9	1
Example 14.8	1
Example 12.4b	2
Example 16.1	1
Example 9.3	1
Example 8.26a	2
Example 12.2	1
Example 14.6	1
Example 14.28	1
Example 14.30	2
Example 7.2	1
Example 7.1	1
Example 7.8	1
Example 14.10	1
Example 14.11	1
Example 8.4	1
Example 8.7	1
Example 7.21	1
Example 9.6b.	1
Example 9.5a	1
Example 7.7	1
Example 7.11	1
Example 7.12	1
Example 11.3	1
Example 7.22	1
Example 7.23	1
Example 7.20	1
Example 7.27	1
Example 7.24	1
Example 7.25	1
Example 7.28	1
Example 9.4	1
Example 7.14	1
Example 7.16	1
Example 7.17	1
Example 7.13	1
Example 7.19	1
Example 7.18	1
Example 12.5.	1
Example 8.26b	2
Example 14.12b	1
Example 14.14b	1
Example 15.1c.	1
Example 14.14a	1
Example 8.15a	1
Example 14.13b	1
Example 9.6a	2
Example 12.1a.	1
Example 14.19	1
Example 14.1c	1
Example 14.23b	2
Example 11.2b	1
Example 11.1a	1
Example 11.1b	1
Example 7.15b	1
Example 15.1b.	1
Example 14.26	2
Example 14.27	2
Example 14.23	1
Example 8.21	2
Example 14.5b	1
Example 14.5a	1
Example 7.6.	1
Example 9.5b	1
Example 13.2.	1
Example 7.40a	1
Example 7.40b	1
Example 7.40c	1
Example 14.3a	1
Example 14.3b	1
Example 11.2a	1
Example 12.4a.	1
Example 8.9b	1
Example 8.9a	1
Example 8.23b.	1
Example 14.1b	1
Example 14.1a	1
Example 8.3a	1
Example 12.4c.	1
Example 12.6.	1
Example 7.29b	1
Example 7.29a	1
Example 7.34a.	1
Example 14.13c	1
Example 14.13a	1
Example 8.15b	1
Example 7.10b	1
Example 7.10a	1
Example 12.4e.	1
Example 8.5b	1
Example 8.5a	1
Example 7.31b	1
Example 7.31a	1
Example 7.43b.	1
Example 14.4b	1
Example 15.1a.	1
Example 8.13a	1
Example 8.13b	1
Example 14.15b	1
Example 9.1a	1
Example 9.1b	1
Example 7.33b	1
Example 8.11b	1
Example 8.11a	1
Example 7.38b.	1
Example 8.1b	1
Example 8.1a	1
Example 12.9b.	1
Example 8.16	1
Example 8.17	1
Example 8.18	1
Example 7.43	1
Example 7.42	1
Example 7.45	1
Example 7.44	1
Example 7.4.	1
Example 12.8a.	1
Example 7.35b	1
Example 7.35a	1
Example 9.6b	1
Example 8.23a.	1
Example 12.8b.	1
Example 14.18c	1
Example 8.2a	1
Example 8.2b	1
Example 14.7b.	1
Example 7.9b	1
Example 7.9a	1
Example 8.25	1
Example 8.20	1
Example 8.22	1
Example 12.9a.	1
Example 8.3b	1
Example 7.38a.	1
Example 7.43a.	1
Example 14.21.	1
Example 7.32a	1
Example 14.22b	1
Example 14.22a	1
Example 15.1d.	1
Example 14.18a	1
Example 14.18b	1
Example 9.2b	1
Example 9.2a	1
Example 8.24.	1
Example 7.32b	1
Example 8.6a	1
Example 8.6b	1
Example 7.15a.	1
Example 7.5.	1
Example 14.17b	1
Example 14.7a.	1
Example 14.16a	1
Example 7.26b	1
Example 7.26a	1
Example 8.19.	1
Example 8.10b	1
Example 8.10a	1
Example 7.30b	1
Example 7.30a	1
Example 7.3.	1
Example 7.39	1
Example 7.37	1
Example 7.36	1
Example 12.1b.	1
Example 8.12a	1
Example 8.12b	1
Example 12.4b.	1
Example 12.4d.	1
Example 14.12a	1
Example 8.14b	1
Example 8.14a	1
Example 7.33a	1
Example 8.8b	1
Example 8.8a	1
Example 12.7.	1
Example 7.34b.	1
Example 14.16b	1
Example 14.17a	1
Example 14.15a	1
Example 14.2a	1
Example 14.2b	1
Example 14.29	1
Example 14.24	1
Example 14.25	1
Example 14.20	1
Example 14.4a	1
Example 7.41a	1
Example 7.41b	1
from the	39
from a	16
from this	2
from time	2
from memory	4
from different	2
from same	2
from functions	1
from only	1
from other	3
from one	5
from integer	2
from set	1
from floating	4
from each	1
from example	6
from compilers	1
from using	1
from Intel	2
from library	1
from float	2
from multiple	1
from static	5
from 64-bit	1
from array	4
from many	1
from any	3
from address	4
from register	1
from programming	1
from 0	2
from error	1
from making	5
from stack	1
from its	1
from single	1
from AVX	2
from another	2
from operators	1
from doing	4
from addresses	1
from both	1
from string	1
from Intel,	1
from main	1
from unknown	1
from RAM	2
from loading	1
from 20	1
from setting	1
from within	1
from row	1
from Microsoft,	1
from fully	1
from disk.	1
from Func	1
from poor	1
from www.agner.org/optimize/asmlib.zip.	2
from mispredictions.	1
from cc	4
from optimal.	1
from seldom	1
from Intel:	1
from bb	4
from errors.	2
from aligning	1
from assuming	1
from exceptions.	1
from -128	2
from cleaning	1
from 0x2700	2
from overlapping	1
from 0x4700.	1
from testing.	1
from www.intel.com.	2
from me.	1
from www.agner.org/optimize.	1
from everybody.	1
from main,	1
from attempting	1
from Intel.	1
from scratch.	1
from www.agner.org/optimize/testp.zip.	1
from www.agner.org/optimize/testp.zip	1
from knowing	1
from a=a*2;	1
memory is	4
memory a	2
memory to	8
memory and	8
memory in	2
memory for	2
memory that	1
memory can	2
memory or	3
memory if	3
memory by	1
memory with	1
memory on	1
memory may	2
memory when	2
memory will	2
memory then	1
memory at	1
memory which	1
memory used	2
memory page	1
memory each	1
memory into	1
memory takes	2
memory called	1
memory address	8
memory rather	2
memory without	1
memory even	1
memory access	6
memory inside	1
memory store	1
memory addresses	2
memory used.	1
memory allocation	21
memory space	9
memory model	3
memory block	14
memory resources	1
memory needed	1
memory pointer.	1
memory outside	1
memory access.	3
memory buffer	1
memory address.	1
memory allocation.	8
memory blocks	3
memory block.	4
memory required	1
memory space.	2
memory Memory	1
memory plus	1
memory swapping	1
memory addresses.	1
memory pool.	4
memory area	2
memory blocks,	3
memory space,	1
memory caching.	1
memory allocations	1
memory heap.	1
memory footprint	2
memory area.	2
memory spaces	1
memory management	1
memory leaks	2
memory leak.	1
memory blocks.	1
memory areas.	1
memory areas,	1
memory pool,	1
memory re-allocation	1
memory block,	1
memory economy	1
memory fragmentation.	1
memory economy,	1
memory bus	1
memory footprint.	1
memory ports,	1
memory caches.	1
memory released	1
memory pooling.	1
memory leaks.	1
memory requirement.	1
at the	40
at a	19
at to	1
at an	6
at this	1
at more	1
at different	3
at CPU	1
at which	1
at all	4
at page	1
at each	2
at any	1
at address	2
at less	1
at its	1
at specific	1
at compile	30
at doing	1
at run	1
at every	2
at 1	1
at optimizing	1
at certain	1
at their	1
at what	1
at runtime	3
at load	2
at 0,	3
at installation	1
at least	9
at once	1
at 8,	2
at random	1
at 19	1
at vectorization.	1
at compile-time	1
at 15	1
at half	1
at 7	1
at reducing	1
at www.agner.org/optimize/asmlib.zip.	2
at 16,	1
at all.	3
at 13	1
at 11	1
at initialization.	2
at regular	1
at round	2
at inconvenient	3
at www.agner.org/optimize/cppexamples.zip	3
at www.agner.org/optimize/cppexamples.zip.	1
at Exception	1
at runtime.	3
at unpredictable	2
at compile-	1
at 12,	1
at once...................................	1
at hand.	1
at runtime).	1
at 403	1
at www.agner.org/optimize/asmlib.zip	1
at Wikibooks.	1
at explaining	1
at 400,	1
at runtime,	1
at 399	1
data is	4
data to	2
data and	4
data in	10
data The	1
data for	4
data that	3
data are	14
data can	2
data //	1
data or	1
data with	1
data as	2
data than	1
data have	2
data more	2
data A	2
data from	3
data memory	1
data because	1
data used	1
data cache	7
data should	1
data set	1
data size	1
data into	5
data object	2
data member	6
data elements	2
data without	1
data access	1
data file	1
data through	1
data structure	2
data files	2
data automatically	1
data caching	10
data sets	1
data members	13
data cache.	6
data block	1
data conversion	1
data instead	1
data storage	2
data section	3
data fit	2
data structures	8
data sets.	2
data within	1
data explicitly	1
data sections	1
data members.	5
data base	1
data files.	1
data area	1
data ......................................................................................................	1
data .........................................................................................	1
data structures.	2
data cache,	2
data sequentially	2
data processing.	1
data manipulation	1
data flow	1
data types:	2
data shuffling,	1
data compression	2
data decomposition.	2
data exceeds	1
data segment	1
data together.	1
data #ifdef	1
data (low	1
data optimally,	1
data locally.	1
data decomposition,	1
data elements,	1
data bases,	1
data object:	1
data Loading	1
data structure,	1
data conversion,	1
program is	29
program of	1
program to	4
program and	2
program in	3
program for	1
program that	11
program are	4
program can	2
program or	3
program if	1
program by	2
program with	2
program on	1
program code	5
program as	2
program -	1
program than	2
program may	4
program you	1
program have	1
program more	1
program when	1
program will	5
program then	2
program has	9
program should	3
program do	1
program where	1
program takes	1
program performance	2
program makes	1
program before	2
program less	1
program optimization	5
program without	1
program must	1
program execution	2
program exception	1
program uses	4
program contains	4
program structure	1
program memory.	2
program their	1
program development	1
program errors	1
program efficiency	1
program optimization.	2
program performance.	1
program updates	1
program loading	1
program under	3
program happen	1
program logic	3
program (or	1
program had	1
program itself	2
program size,	1
program reads	1
program structure.	1
program development,	1
program package	1
program relies	1
program itself.	1
program appear	1
program runs	1
program repeats	1
program chooses	1
program starts	2
program execution,	1
program optimization,	1
program 81	1
program 153	1
program flow	2
program flow.	2
program afterwards	1
program loads	1
program slower.	1
program saying	1
program starts.	2
program compactness,	1
program executable:	1
program logic.	1
program creates	1
program /Qipo	1
program dictates	1
has the	16
has a	22
has to	19
has not	3
has an	6
has at	1
has only	4
has one	3
has no	10
has most	1
has i	1
has multiple	1
has two	2
has many	7
has some	2
has const	1
has its	4
has several	4
has allocated	1
has been	20
has done	1
has calculated	1
has four	1
has support	2
has hardware	3
has both	1
has problems	1
has high	1
has three	3
has too	1
has higher	1
has advantages	1
has made	2
has replaced	1
has become	4
has reduced	3
has full	1
has changed	2
has defined	1
has something	1
has enough	1
has chosen	2
has hardly	1
has saved	1
has already	1
has nothing	1
has finished	2
has solved	1
has insufficient	1
has preprocessing	1
has disadvantages:	2
has hyperthreading.	1
has hyperthreading,	1
has changed.	1
has influence	1
has occurred.	1
has side	1
has excellent	1
has occurred	1
has incomplete	1
vector of	11
vector in	4
vector can	2
vector or	1
vector function	1
vector as	1
vector {	1
vector from	4
vector functions	1
vector integer	1
vector class	11
vector size	4
vector into	4
vector library	1
vector objects	3
vector so	1
vector register	7
vector libraries	1
vector registers	8
vector method	1
vector always	3
vector operations	15
vector instructions	5
vector processors	1
vector element	2
vector c	2
vector a,	1
vector classes	14
vector parameters	1
vector operator	1
vector implementation	1
vector data.	1
vector aligned	3
vector processors.	1
vector goes	1
vector just	1
vector depends	1
vector size.	3
vector math	6
vector registers.	3
vector operations.	4
vector processing	2
vector libraries.	1
vector classes.	1
vector containing	1
vector access.	1
vector nontemporal	3
vector stores	1
vector c2	1
vector register.	2
vector simultaneously.	1
vector algebra	1
vector Type	1
vector turned	1
vector bc	1
vector library,	2
vector elements.	1
vector division.	1
vector 56	1
vector c:	4
vector b:	4
vector operations,	2
vector register,	2
vector classes,	1
vector operations...............................................................................................	1
vector classes):	1
vector operands:	1
vector intrinsics	1
vector classes:	1
vector (1,2,3,4),	1
vector intrinsics,	1
vector intrinsics.	1
make the	32
make a	32
make and	1
make it	6
make function	2
make code	1
make an	3
make this	4
make use	1
make more	1
make different	1
make only	1
make all	1
make one	2
make floating	3
make multiple	3
make two	2
make such	1
make any	2
make some	1
make variables	1
make table	1
make software	2
make member	3
make register	1
make pointers	1
make sure	27
make 32	1
make dynamic	1
make up	1
make arrays	1
make overflow	2
make container	1
make support	1
make certain	1
make shared	1
make files	1
make their	1
make separate	1
make induction	1
make dispatcher	1
make better	1
make applications	1
make parts	1
make aligned	1
make your	3
make appropriate	1
make position-independent	1
make vectorization	2
make temp	1
make special	1
make 16-bit	1
make algebraic	1
make profiling	1
make exactly	1
make developers	1
make measurements	1
make two.	1
make explicit	1
make CPU-	1
make thread-specific	1
make Sum1	1
make utility.	2
make thread-local	1
make log2	1
make memory-hungry	1
different in	1
different for	3
different function	2
different code	1
different compiler	1
different memory	3
different functions	2
different CPU	1
different instruction	3
different cache	1
different integer	2
different set	1
different floating	1
different compilers	4
different size	2
different Intel	1
different object	1
different C++	11
different value	1
different objects	2
different so	1
different way	1
different operating	1
different libraries	1
different test	1
different user	1
different system	1
different type	2
different cases	1
different instructions	1
different processors	2
different CPUs	2
different arrays	1
different versions	10
different execution	2
different threads	3
different matrix	2
different functions.	1
different addresses	1
different implementation	1
different intrinsic	1
different methods	1
different name	1
different source	1
different parts	4
different types	8
different compilers.	3
different processors.	1
different platform	1
different ways	3
different CPUs.	4
different compiler.	1
different dynamically	1
different platforms	2
different registers.	1
different tasks	2
different priority	1
different thread.	1
different kinds	5
different purposes.	3
different cores	1
different implementations	2
different sizes	3
different way.	1
different address.	1
different module	1
different brands	3
different purposes	1
different kind	1
different algorithms	2
different profiling	1
different factors	1
different array.	1
different applications.	1
different places	2
different ways.	1
different microprocessors.	1
different modules.	1
different platforms,	2
different threads,	1
different type.	1
different lengths	1
different tasks.	1
different strides.	1
different screen	2
different priorities	2
different precisions	1
different executables.	1
different meaning.	1
different alignments	1
different targets	1
different speeds.	1
different places).	1
different meaning	1
different compilers.............................................................................	1
different browsers,	1
different types.	1
different sizes,	1
different times:	1
different opinions	1
different microprocessors,	1
because the	59
because a	4
because of	15
because in	3
because it	36
because an	1
because you	3
because this	7
because all	3
because integer	1
because each	2
because b	1
because static	1
because there	3
because we	4
because registers	1
because these	2
because they	7
because optimizing	1
because both	1
because their	3
because various	1
because switch	1
because relative	2
because modern	1
because testing	1
because algebraic	1
because #if	1
because serious	1
because computers	1
because truncation	1
because communication	1
because nothing	1
because partial	1
same in	2
same for	1
same can	2
same or	1
same function	4
same code	4
same as	10
same compiler	1
same time	5
same memory	8
same data	1
same instruction	1
same cache	6
same set	1
same class	2
same example	1
same size	1
same object	1
same array	1
same version	1
same member	1
same way	4
same address	1
same critical	1
same register	5
same time.	5
same without	1
same method	1
same dynamic	2
same part	3
same bits	2
same type	1
same result	1
same processor	4
same thread	1
same precision	2
same few	1
same structure	1
same inline	1
same shared	1
same space	1
same cache.	1
same name	3
same source	3
same induction	1
same reason	1
same after	1
same piece	2
same function,	1
same compiler.	1
same range	1
same core	1
same errors	1
same variables.	1
same operation	2
same level-1	1
same resources.	1
same class.	1
same object.	1
same time,	1
same priority	2
same thing	4
same logical	1
same subexpression	1
same resource	1
same generation	1
same address.	1
same module	4
same features	1
same applies	2
same value.	1
same unit	1
same register.	1
same DLL	1
same object,	1
same core.	1
same rules	1
same constant.	1
same principle	1
same regardless	1
same result.	1
same advice	1
same resources,	1
same cache,	1
same brand.	1
same way,	1
same argument	1
same chip	1
same name.	1
same arguments	1
same executable.	1
same machine.	1
same thing.	2
same template.	1
same chip.	1
same effect.	1
same class).	1
same computer,	1
same name,	1
same coding	1
same algorithm,	1
same directory	1
same divisor.	1
same queue,	1
functions is	4
functions of	3
functions and	11
functions in	7
functions The	3
functions for	13
functions that	17
functions are	22
functions can	3
functions //	2
functions or	4
functions if	2
functions by	1
functions with	1
functions as	1
functions than	1
functions may	1
functions have	9
functions A	2
functions then	4
functions It	1
functions because	1
functions only	1
functions which	1
functions should	1
functions class	1
functions static	2
functions such	8
functions You	1
functions faster	1
functions called	2
functions take	3
functions often	1
functions without	1
functions Some	1
functions must	2
functions An	1
functions Use	1
functions inline	1
functions like	2
functions separate	1
functions look	1
functions linked	1
functions go	1
functions local	1
functions (e.g.	1
functions counts	1
functions scattered	1
functions Virtual	1
functions (i.e.	1
functions memset	1
functions consume	1
functions malloc	1
functions ..............................................................................................	1
functions .......................................................................................	1
functions lrintf	1
functions ........................................................................................	2
functions (methods)	1
functions /Gr	1
functions Sum1,	1
functions directly:	1
functions Encryption,	1
functions (methods).........................................................................	1
only the	13
only a	8
only to	2
only in	3
only for	10
only be	5
only if	9
only with	1
only on	8
only an	3
only you	1
only have	1
only when	14
only from	3
only used	1
only one	20
only compilers	1
only 64-bit	1
only possible	2
only 32-bit	2
only way	2
only makes	1
only called	1
only first	1
only need	1
only simple	1
only available	2
only calculated	2
only four	3
only known	1
only supported	1
only few	1
only run	1
only calculate	1
only 256	1
only after	2
only read	2
only improve	1
only 5	1
only constants	1
only safe	1
only until	1
only situation	1
only within	1
only slightly	3
only once	1
only allowed	1
only CPUID	1
only show	1
only half	3
only occurs	1
only happens	1
only six	1
only one,	1
only 50%	1
only reasonable	1
only once.	2
only if,	1
only once,	1
only hope	2
only self-	1
only 10%	1
only 2-3	1
only SSE).	1
only _mm_permutevar_ps	1
CPU is	2
CPU of	2
CPU to	4
CPU and	5
CPU that	1
CPU can	2
CPU or	1
CPU it	1
CPU by	1
CPU with	3
CPU than	1
CPU may	1
CPU time	2
CPU use	1
CPU will	1
CPU from	3
CPU has	3
CPU which	1
CPU used	1
CPU cache	1
CPU clock	4
CPU time.	2
CPU access	1
CPU doesn't	1
CPU doing	1
CPU was	1
CPU dispatching	20
CPU model	4
CPU dispatcher	12
CPU dispatch	9
CPU based	1
CPU feature	1
CPU core	4
CPU supports	3
CPU efficiency	1
CPU (See	2
CPU time,	1
CPU models	1
CPU cores	4
CPU dispatching.	10
CPU Modern	1
CPU brands	2
CPU brand	3
CPU detection	8
CPU family	2
CPU core.	1
CPU cores.	4
CPU development,	1
CPU cores,	1
CPU dispatcher.	2
CPU brand.	2
CPU market	1
CPU dispatchers	2
CPU chip.	1
CPU only)	2
CPU core).	1
CPU dispatching:	1
CPU dispatching,	1
CPU core,	1
CPU models.	1
CPU brands,	1
CPU hardware.	1
CPU vendors	1
CPU model,	1
CPU cores:	1
CPU supports,	1
other is	2
other in	4
other are	2
other function	1
other with	1
other code	1
other than	4
other then	1
other data	2
other functions	3
other cache	1
other integer	1
other compilers	6
other possible	1
other value	3
other objects	1
other variable	1
other variables	1
other member	1
other way	3
other address	1
other less	1
other libraries	1
other systems	1
other access	1
other programming	4
other bits	1
other error	2
other CPUs	1
other function.	2
other extra	1
other work	1
other calculations	1
other compiled	1
other big	1
other threads	2
other virtual	1
other common	1
other thread	1
other allocated	1
other container	1
other hardware	2
other values	5
other cases,	1
other methods	1
other resources	2
other applications	1
other parts	2
other types	1
other compilers.	2
other optimizations	2
other advantages	1
other ways	1
other modules	2
other things	1
other languages	2
other STL	1
other platforms	3
other resources.	1
other local	1
other constants	1
other tasks	1
other thread.	1
other kinds	1
other details	1
other purposes.	2
other resource	2
other way.	1
other module	1
other processors,	1
other features	1
other device	1
other brands	1
other purposes	2
other CPUs,	1
other optimizations.	1
other number.	1
other form	1
other protection	1
other branches.	1
other cleanup	1
other processes	1
other hand,	5
other factor.	1
other microprocessors.	2
other modules.	3
other words,	4
other languages.	1
other module.	1
other programs,	1
other input/output	1
other way,	1
other nearby	2
other (not	1
other resource,	1
other exceptions:	1
other ways,	1
other complications	1
other compilers).	1
other processes.	1
other reasons,	1
other hardware-related	1
other situations:	1
other optimizations,	1
other constructors.	1
other system-	1
other flaws	1
other odd-sized	1
other subtasks	1
other abuse	1
other volumes	1
instruction is	1
instruction to	1
instruction and	2
instruction for	2
instruction that	2
instruction can	1
instruction if	1
instruction set	83
instruction takes	1
instruction cannot	1
instruction before	1
instruction code.	1
instruction must	1
instruction doesn't	1
instruction add	2
instruction was	1
instruction sets	14
instruction set.	21
instruction prevents	1
instruction mov	1
instruction sets.	6
instruction set,	10
instruction xor	1
instruction sets,	1
instruction sets...........................	1
instruction latencies	1
instruction latencies,	1
instruction set:	1
instruction timing,	1
instruction set?".	1
instruction directly,	1
point is	4
point of	2
point to	12
point and	1
point in	1
point if	1
point code	4
point library	1
point number	6
point where	1
point value	1
point variable	1
point variables	8
point register	6
point code.	3
point registers	4
point operations	6
point constant	1
point stack	3
point calculations	9
point execution	1
point overflow	2
point precision	2
point parameters	2
point counter	1
point multiplication	2
point division	5
point induction	2
point addition	8
point expressions	3
point numbers	8
point XMM	1
point operands	1
point operation	2
point constants	2
point library.	1
point calculations.	1
point operations.	1
point precision.	1
point instructions.	2
point expressions.	4
point addition,	1
point variables,	1
point Conversion	1
point vectors.	1
point algebra	1
point rounding	1
point capabilities	1
point representation	1
point number.	1
point comparisons	4
point numbers.	2
point division.	1
point underflow	1
point constants,	2
point format	1
point addition.	1
point multiplication,	1
point numbers:	1
point comparisons,	1
point overflow:	1
point expressions,	1
point extern	1
point precisions	1
point status:	1
point comparison.	1
point variable:	1
point multiply-and-add	1
point -ffast-math	1
point exceptions,	1
loop is	7
loop of	4
loop and	5
loop in	9
loop for	3
loop that	4
loop are	1
loop can	3
loop or	3
loop if	8
loop by	12
loop with	4
loop A	1
loop will	4
loop then	1
loop because	1
loop should	1
loop double	1
loop where	2
loop takes	1
loop branch	2
loop without	1
loop does	1
loop ;	3
loop through	2
loop contains	1
loop would	1
loop doing	1
loop counter	13
loop count	9
loop automatically	1
loop needs	1
loop becomes	1
loop control	12
loop bigger	1
loop depends	1
loop columns	2
loop further	1
loop unroll	2
loop condition	1
loop buffer	1
loop unrolling	3
loop iterations	1
loop body	3
loop is.	1
loop counter.	2
loop increment	1
loop repeats	2
loop index.	1
loop counters,	2
loop manually	1
loop unrolled	1
loop calculates	1
loop counter,	2
loop count.	1
loop predictor.	1
loop exits,	1
loop counter:	1
loop overhead.	1
loop initialisation	1
If the	60
If a	17
If it	3
If an	1
If you	27
If this	2
If time	1
If different	1
If one	2
If each	1
If i	1
If two	2
If there	5
If objects	3
If any	2
If we	4
If part	1
If I	1
If arrays	1
If c	1
If virtual	1
If several	1
If exception	1
If caching	1
If Microsoft	1
If n	1
If your	1
If columns	1
If N	1
If seconds	1
If F1	1
If search	2
If frequent	1
If not,	2
If hyperthreading	1
If Func1	1
If MultiplyBy	1
If so,	1
which the	7
which is	38
which a	2
which of	2
which in	1
which are	7
which can	9
which it	2
which function	1
which code	1
which compiler	1
which may	4
which this	1
which will	4
which then	1
which data	1
which functions	1
which instruction	3
which one	3
which set	1
which version	5
which we	1
which variables	1
which software	1
which way	1
which makes	4
which cannot	1
which they	6
which method	3
which programming	1
which part	1
which does	1
which processor	2
which solution	1
which few	1
which contains	1
which would	1
which quite	1
which allows	1
which implementation	1
which resources	1
which optimizations	2
which range	1
which reductions	2
which gives	1
which comes	1
which platforms	1
which prevents	1
which causes	1
which not.	1
which counts	1
which happens	1
which returns	1
which gets	1
which alloca	1
which otherwise	1
which opens	1
which consumes	1
which initially	1
which can't	1
which calculates	1
which determines	1
which transposes	1
which redirects	1
which affects	1
which supposedly	1
which interprets	1
which imprecisions	1
all the	26
all is	1
all of	2
all to	1
all be	1
all on	1
all code	4
all use	1
all data	4
all because	1
all functions	3
all other	2
all but	1
all class	1
all floating	1
all compilers	1
all static	1
all 64-bit	1
all C++	1
all possible	1
all objects	3
all variables	1
all software	1
all elements	3
all libraries	1
all pointers	1
all systems	1
all these	2
all dynamic	1
all bits	2
all CPUs	1
all threads	1
all allocated	2
all good	1
all done	1
all operators	1
all information	2
all files	2
all cases,	1
all branches	1
all source	1
all resources	1
all three	1
all runtime	1
all means	1
all compilers.	2
all optimizations	2
all public	1
all x86	5
all operands	1
all modules	1
all relevant	4
all conversions	1
all platforms.	1
all installation	1
all modern	3
all variables.	1
all platforms	1
all local	1
all strings	2
all unknown	1
all kinds	1
all sizes	1
all newer	2
all writes	1
all non-static	2
all subsequent	1
all destructors	3
all brands	1
all applications.	1
all suitable	1
all instances	2
all five	1
all cleanup	1
all .cpp	1
all belong	1
all objects.	1
all caches	1
all Unix-like	1
all 0's	2
all major	2
all disturbing	1
all squares:	1
all respects	1
all 1's	2
all zeroes.	1
all intrin.h	1
all occurrences	1
but the	18
but is	4
but in	5
but for	2
but are	1
but it	24
but if	1
but on	1
but as	1
but not	14
but may	1
but you	4
but this	13
but will	1
but has	1
but only	5
but other	1
but no	3
but there	4
but also	8
but such	1
but any	1
but 32-bit	1
but less	1
but these	2
but they	2
but part	1
but I	1
but its	1
but must	1
but several	1
but eight	1
but operators	1
but quite	1
but don't	1
but read	1
but slow	1
but outside	1
but possibly	1
but rarely	1
but risk	1
but who	1
but expensive	1
but efficient,	1
but unfortunately	4
but avoids	1
but none	2
but that's	1
but waits	1
but neither	1
but i*12,	1
but risky.	1
but event-counters	1
used the	1
used is	1
used to	4
used and	3
used in	24
used for	41
used that	1
used or	1
used if	5
used by	9
used with	2
used on	2
used as	9
used an	1
used more	1
used when	3
used at	3
used data	1
used functions	1
used only	5
used cache	1
used set	1
used most	1
used where	1
used many	1
used variables	2
used without	1
used inside	1
used simply	1
used above	1
used branches	1
used members	1
used intrinsic	1
used methods	1
used char	1
used data.	1
used parts	1
used together	6
used here	1
used functions,	1
used during	1
used near	1
used here.	1
used twice	1
used most.	1
used freely	1
one is	4
one of	12
one and	1
one in	1
one for	7
one that	9
one or	10
one it	1
one function	3
one if	1
one by	3
one time	1
one more	1
one from	2
one memory	2
one CPU	2
one other	1
one set	1
one class	1
one floating	1
one object	1
one array	1
one clock	5
one version	1
one variable	1
one way	5
one makes	1
one call	3
one register	1
one constant	1
one (see	1
one big	3
one element	1
one virtual	1
one thread	3
one line	2
one works	1
one container	1
one :	1
one operator	1
one division	1
one source	1
one addition	2
one byte	1
one function,	1
one computer	1
one global	1
one statement	1
one operation	1
one instance	7
one operand	2
one iteration	4
one thread.	1
one square	1
one thing	1
one logical	1
one vector.	1
one fraction	1
one 256-bit	1
one parameter.	1
one unit	1
one register.	1
one vector,	2
one free	1
one operation.	2
one contiguous	1
one place	2
one auto_ptr	1
one way,	1
one instance.	2
one segment	1
one tread	1
one local,	1
cache is	9
cache of	3
cache to	1
cache and	6
cache in	2
cache for	2
cache that	1
cache are	3
cache or	1
cache if	1
cache as	1
cache may	1
cache use	2
cache will	2
cache then	1
cache from	2
cache because	1
cache size	1
cache so	1
cache between	1
cache cannot	1
cache called	1
cache always	1
cache access	1
cache (see	2
cache line	15
cache works	4
cache space	4
cache control	3
cache contentions	6
cache size.	4
cache lines	9
cache efficiency	1
cache (e.g.	1
cache problems.	1
cache space.	4
cache line.	6
cache misses	5
cache size,	1
cache effects	1
cache lines.	2
cache size)	1
cache MOVNTQ	1
cache organization	1
cache level,	1
cache space,	1
cache sizes.	1
cache misses,	3
cache efficiency,	1
cache miss	2
cache MOVNTDQ	1
cache MOVNTPD	1
cache contentions.	2
cache (en.wikipedia.org/wiki/L2_cache).	1
cache evictions	1
cache MOVNTPS	1
cache MOVNTI	1
cache line:	1
cache line,	1
cache contention.	1
cache contentions,	1
cache miss.	1
should of	1
should be	65
should by	1
should not	5
should have	3
should use	3
should then	1
should only	1
should do	1
should also	3
should take	1
should test	1
should always	2
should work	1
should avoid	4
should therefore	6
should get	1
should run	1
should preferably	15
should automatically	1
should never	4
should give	1
should look	1
should choose	1
should rely	1
should produce	1
should save	1
should allow	1
should apply	2
should contain	1
should multiply	1
should include	1
should depend	1
should definitely	3
should disable	1
should leave	1
integer is	5
integer of	1
integer to	7
integer and	4
integer in	5
integer that	1
integer can	2
integer if	3
integer with	2
integer int	1
integer may	1
integer will	1
integer has	2
integer vector	10
integer because	1
integer size	9
integer value	1
integer takes	3
integer variable	1
integer register	1
integer rather	1
integer code.	1
integer registers	3
integer without	1
integer operations	8
integer type	1
integer constant	1
integer calculations	1
integer doesn't	1
integer overflow	3
integer power	1
integer parameters	3
integer known	1
integer counter	1
integer multiplication	2
integer expression	1
integer conversion	1
integer parameter	1
integer division	3
integer types	3
integer expressions	5
integer vectors	1
integer variables.	1
integer registers.	1
integer calculations.	2
integer operations.	1
integer expressions.	1
integer overflow.	1
integer addition,	2
integer factorial	1
integer arithmetic	1
integer vectors.	1
integer parameters.	1
integer representation	1
integer constant.	1
integer Common	1
integer Register	1
integer counter.	2
integer division.	1
integer type.	1
integer overflow,	1
integer constants.	1
integer units,	1
integer operations,	1
integer variable,	1
integer comparison	1
integer comparison,	1
integer According	1
integer power,	1
integer division:	1
integer representations	1
integer constant,	1
integer comparisons.	1
no function	1
no compiler	1
no more	4
no other	8
no instruction	1
no loop	1
no cache	2
no pointer	8
no object	1
no such	1
no variable	1
no performance	2
no long	1
no branch	1
no way	3
no operating	1
no need	8
no instructions	1
no extra	9
no calls	1
no big	2
no specific	3
no virtual	1
no exception	2
no overflow	1
no AVX	1
no check	4
no problem	1
no advantage	1
no copy	2
no information	1
no certain	1
no branches	1
no caching	1
no cost	4
no automatic	1
no induction	1
no reason	5
no difference	8
no longer	3
no graphics	1
no negative	1
no overhead	1
no checking	2
no out-of-order	1
no destructor	1
no offset	1
no clear	1
no risk	3
no penalty	1
no checks	1
no easy	2
no explanation	1
no try	1
no heavy	1
no absolute	1
no loop-carried	1
no 51	1
no modification	1
no idea	1
no reasonable	1
no compile-	1
no multiplications.	1
no doubt	1
no warning	1
no effect.	1
no attempt	1
no native	1
no guarantee	1
no side-effects	1
no yes	1
page and	1
page size	1
page 8	1
page 16	1
page 32	1
page 128	1
page 3	1
page 130	4
page 120	1
page 16.	1
page 87	2
page 122	2
page 80	1
page 90	1
page 107	1
page 103	1
page 51	1
page 43	2
page 88	1
page 134	2
page 150	1
page 146	2
page 26	1
page 29	1
page 31	1
page 49	2
page 101	1
page 93	1
page 164	1
page 81	1
page 89	2
page 137	1
page 136	1
page 153	1
page 145	1
page 140	1
page 141	1
page 78	2
page 107).	2
page 16)	1
page 71).	2
page 131.	2
page 127.	1
page 15.	1
page 52.	2
page 73	1
page 73).	2
page 39	1
page 105.	2
page 93.	2
page 26.	2
page 78).	2
page 137).	2
page 80.	1
page 43).	1
page 122.	2
page 87).	1
page 58	1
page 105).	2
page 140).	2
page 72.	2
page 95	1
page 51).	1
page 119).	1
page 22.	1
page 153.	1
page 27).	1
page 107.	1
page 78.	1
page 60.	1
page 103)	1
page 107),	1
page 122)	1
page 62.	1
page 96.	1
page 141.	1
page 53).	1
page 93).	1
page 44.	1
page 143.	1
page 96).	1
page 134.	1
page 103),	1
page 34.	1
page 142).	1
page 54.	1
page 81).	1
page 90.	1
page 84).	1
page 53.	1
page 45.	1
page 134)	1
page 135).	1
page 140.	1
page 132.	1
page 87.	1
page 38).	1
page 87)	1
page 130.	1
page 72).	1
page 61.	1
page 158.	1
page 150.	1
page 73)	1
page 73.	1
page 70).	1
page 27.	1
set the	3
set is	34
set a	3
set of	12
set to	2
set and	7
set in	3
set for	2
set that	2
set are	1
set can	3
set or	1
set it	1
set if	2
set by	1
set not	1
set an	1
set int	1
set than	1
set may	1
set when	2
set then	2
set has	3
set into	1
set multiple	1
set number	2
set also	1
set where	1
set makes	2
set SSE2	2
set up	3
set AVX	1
set values	1
set sign	2
set was	1
set char	1
set needed	1
set control	1
set supports	2
set gives	1
set Automatic	1
set SSE4.1	1
set seconds	1
set (or	1
set #if	1
set available,	1
set Header	1
set opens	1
set (requires	1
set (128	2
set 0x1C.	1
set specified.	1
set (called	1
set Suppl.	1
set extensions.	1
set Prefetch	1
set (/arch:SSE2,	1
set Important	1
class is	10
class of	2
class to	1
class and	3
class in	2
class for	1
class that	4
class are	5
class can	1
class or	8
class by	1
class with	3
class code	1
class will	1
class data	2
class has	2
class vector	1
class which	1
class should	1
class into	1
class library	9
class objects	4
class member	4
class libraries	2
class template	1
class need	1
class must	1
class (see	1
class doesn't	1
class through	3
class members	1
class name	2
class library.	1
class Variables	1
class containing	2
class templates	2
class declaration	1
class D	2
class C1	4
class members.	1
class c1	2
class library,	1
class gets	1
class separately	1
class elements.	1
class objects.	1
class powN	1
class CChild1	2
class CHello	1
class C0	1
class Vec16s	1
class definition.	2
class CChild2	1
class templates,	1
class B1;	2
class CParent	1
class CGrandParent	1
class declaration.	1
class C2	1
class c1;	1
class SafeArray	1
class B2;	2
class powN<true,0>	1
class powN<true,N>	1
class S2	1
class S3	1
class (also	1
class (CGrandParent)	1
class library).	1
class C1,	1
class powN<true,1>	1
class (CParent<>)	1
floating point	124
floating point.	3
floating 26	1
floating point:	1
floating point-to-integer	1
floating point).	1
each of	2
each function	6
each compiler	1
each time	6
each vector	4
each different	1
each CPU	2
each other	8
each instruction	1
each integer	1
each set	1
each floating	1
each object	4
each array	2
each version	3
each value	6
each table	1
each member	1
each address	1
each call	1
each bit	4
each time.	1
each test	1
each new	2
each part	3
each type	1
each constant	1
each processor	1
each compiled	1
each element	8
each thread	4
each allocated	1
each line	1
each optimized	1
each calculation	2
each run	1
each particular	1
each their	2
each intrinsic	1
each string	1
each addition	2
each set.	1
each process	1
each statement	1
each instance	1
each task	1
each object.	1
each iteration	3
each thread.	5
each access.	1
each version.	1
each row	2
each label	1
each case.	1
each factor	1
each core.	1
each step	1
each process.	2
each other.	3
each carefully	1
each element,	2
each calculation.	1
each method,	1
each other's	1
each pixel	1
each call,	1
each clause	1
do the	15
do is	2
do a	5
do to	2
do and	2
do it	1
do function	1
do with	1
do as	2
do not	29
do an	2
do have	2
do this	6
do use	1
do more	3
do when	1
do different	1
do because	1
do other	1
do integer	1
do multiple	1
do two	2
do such	3
do any	1
do some	1
do so	5
do operations	1
do simple	2
do must	1
do while	1
do calculations	3
do much	1
do four	1
do another	1
do mathematical	1
do automatic	1
do optimizations	1
do things	3
do whole	1
do out-of-order	1
do something	2
do arithmetic	1
do this:	1
do this.	1
do nothing	1
do so.	3
do manually.	1
do interprocedural	1
do experiments	1
do immediately	1
do so).	1
do cross-module	1
do searches	1
example is	6
example of	4
example to	1
example in	1
example can	2
example if	2
example with	2
example on	1
example may	1
example use	1
example when	2
example has	1
example only	1
example should	1
example using	1
example i	1
example so	1
example 32	1
example container	1
example every	1
example sets	1
example shows	12
example containers	1
example below	1
example 15.1b	7
example 13.1	3
example 16.2	2
example 15.1c	1
example 14.8	1
example 12.4b	2
example 16.1	1
example 9.5	2
example illustrates	4
example 8.26a	2
example 15.1a	2
example 14.28	2
example 7.4	1
example 9.6b.	2
example 9.5a	2
example 11.3	2
example explains	1
example 14.12b	1
example 14.14a	1
example 12.4a	2
example 8.15a	1
example 14.19	1
example 14.1c	1
example 11.2b	1
example transposes	1
example 11.1a	1
example 7.15b	1
example 15.1b.	1
example 14.23	1
example (12.4e)	1
example 14.7b	1
example 12.4a,	1
example 7.32b.	1
example 8.15b.	1
example 8.21,	1
example 16.2.	1
example 12.2,	1
example 8.23b	1
example 15.1d	1
example 14.7b,	1
example 8.24	1
example 12.1a,	1
example 12.1b	1
example 8.26b:	1
example 16.1.	1
example 12.8a	1
example 7.35	1
example converts	1
example 12.1b,	1
example 9.5a:	1
example 12.4b,	1
example 7.22.	1
example 9.5b.	1
example 12.3a,	1
example 13.1,	1
example 7.43b	1
example 14.21	1
example 9.1b.	1
example 7.30b.	1
compilers is	1
compilers to	2
compilers and	12
compilers The	2
compilers for	2
compilers that	5
compilers are	13
compilers can	11
compilers or	1
compilers may	3
compilers you	1
compilers have	14
compilers use	2
compilers will	18
compilers then	1
compilers from	1
compilers at	1
compilers has	1
compilers make	1
compilers do	2
compilers also	1
compilers such	1
compilers cannot	2
compilers need	1
compilers without	1
compilers I	7
compilers optimize	2
compilers don't	1
compilers Intel,	1
compilers produce	1
compilers unroll	1
compilers reduced	1
compilers allow	1
compilers include	1
compilers available,	1
compilers due	1
compilers work.	1
compilers behave	1
compilers offer	3
compilers (Microsoft,	1
compilers www.agner.org/	1
compilers succeeded	1
compilers exist	1
most of	13
most for	1
most function	1
most other	2
most used	2
most cache	1
most compilers	3
most library	1
most C++	1
most efficient	13
most variables	1
most software	1
most critical	11
most often	4
most libraries	1
most time.	1
most useful	1
most cases	7
most simple	1
most processors	1
most important	7
most CPUs	1
most common	9
most likely	1
most cases,	9
most complicated	1
most development	1
most appropriate	1
most advanced	1
most compatible	1
most cases.	3
most modern	1
most efficiently	4
most newer	1
most significant	1
most critical.	1
most time-consuming	2
most purposes	1
most systems,	1
most frequent	1
most serious	1
most reliable	1
most predictable	1
most popular	1
most microprocessors.	1
most commonly	2
most clean	1
most up-to-date	1
most cases:	1
most sorting	1
most distributions	1
using the	27
using a	16
using and	1
using function	1
using an	5
using this	1
using vector	2
using different	1
using functions	1
using only	1
using CPU	2
using loop	1
using one	2
using each	1
using example	1
using Intel	1
using static	3
using such	1
using template	1
using registers	1
using pointers	2
using new	1
using dynamic	1
using short	1
using &	1
using assembly	3
using single	1
using exception	1
using integers	1
using intrinsic	1
using signed	1
using vectors	1
using advanced	2
using references	2
using position-independent	1
using overloaded	2
using classes.	1
using bitwise	1
using smart	1
using nontemporal	1
using references.	1
using templates	1
using rounding	1
using exceptions	1
using powers	3
using Agner	1
using Agner's	1
using asmlib	2
using 8-bit	1
using exceptions.	1
using templates.	2
using namespaces.	1
using __fastcall.	1
using hyperthreading.	1
using hyperthreading,	1
using multiplications	1
using alloca.	1
using ready	1
using InstructionSet():	1
using indexes,	1
using new.	1
using new/delete	1
using memset:	1
using unions	1
using inheritance.	1
double the	2
double is	3
double a	1
double to	3
double and	2
double if	1
double by	1
double A	2
double because	1
double which	1
double Intel	1
double In	1
double There	1
double takes	2
double 2	1
double const	1
double before	1
double 4	1
double 8	1
double 64	3
double take	1
double without	1
double 32	1
double (see	1
double a,	4
double precision	17
double 128	1
double uses	1
double b;	3
double 256	1
double y	1
double c;	1
double vectors	2
double Floating	1
double d;	4
double d	1
double x,	4
double precision.	4
double temp;	3
double 8,	1
double plus	1
double p(double	4
double precision,	2
double y,	2
double xpow10(double	4
double a1,	2
double Y	1
double format.	1
double b;};	2
double x2	1
double reflects	1
double Z	1
double x4	1
double Table[100];	2
double ipow	1
double log2	1
double b[SIZE][SIZE])	2
double precision:	1
double A2	1
double x10	1
double x8	1
double Func2(double	1
double a[arraysize],	1
double Func1(double)	1
double matrix[SIZE][SIZE];	1
double IntegerPower	1
size is	11
size a	1
size of	36
size to	1
size and	2
size in	3
size for	1
size that	5
size are	1
size can	2
size //	1
size =	12
size or	1
size if	1
size by	1
size with	1
size on	1
size as	2
size may	1
size have	1
size when	1
size then	1
size has	1
size only	1
size other	1
size should	1
size array	1
size cannot	1
size often	1
size arrays	1
size execution	1
size doesn't	1
size known	2
size conversion	2
size parameter	2
size needed	1
size divisible	1
size comes	1
size right	1
size causes	2
size vector.	1
size Time	1
size (in	2
size Total	1
size Alignd	1
size (16	1
size matrices,	2
size grows	1
size (typically	1
size (4096).	1
Intel and	8
Intel The	1
Intel or	3
Intel function	4
Intel compiler	28
Intel have	1
Intel vector	6
Intel CPU	2
Intel but	1
Intel compilers	6
Intel library	2
Intel C++	7
Intel before	1
Intel libraries	2
Intel short	1
Intel processors	2
Intel CPUs	4
Intel mechanism	1
Intel compilers.	1
Intel processors.	4
Intel microprocessors	1
Intel CPUs.	2
Intel compiler.	2
Intel math	1
Intel Pentium	1
Intel libraries.	1
Intel header	1
Intel compiler,	1
Intel CPU.	1
Intel Vector	1
Intel CPUs,	2
Intel Math	1
Intel processor.	1
Intel Borland	1
Intel CodeGear	1
Intel Performance	1
Intel Agner	1
Intel Core	4
Intel SVML	3
Intel Architecture	2
Intel CPUs:	1
Intel Technology	1
Intel VTune,	1
Intel VTune	1
Intel CPU’s.	1
Intel Atom	1
pointer is	12
pointer a	1
pointer of	1
pointer to	21
pointer and	1
pointer in	4
pointer can	3
pointer or	22
pointer it	1
pointer if	1
pointer not	1
pointer may	1
pointer then	2
pointer at	1
pointer has	5
pointer which	3
pointer set	1
pointer takes	1
pointer stored	1
pointer type	1
pointer does	3
pointer (see	1
pointer known	1
pointer well	1
pointer simply	1
pointer typically	1
pointer actually	1
pointer points	2
pointer p	1
pointer No	1
pointer alignment	1
pointer eax	1
pointer aliasing	5
pointer arithmetic	1
pointer follows	1
pointer aliasing.	3
pointer initially	1
pointer aliasing"	2
pointer refers	1
pointer -fomit-	1
pointer serves	1
pointer conversions.	1
pointer arithmetics	1
b is	11
b to	2
b and	5
b in	2
b for	1
b are	3
b can	1
b =	16
b if	2
b with	3
b as	1
b than	1
b have	2
b when	1
b will	2
b from	1
b has	1
b different	1
b because	3
b should	1
b double	1
b into	1
b +	12
b *	16
b member	1
b take	1
b &	1
b through	1
b /	5
b :	2
b needs	1
b &&	1
b >	2
b %	3
b ?	3
b overlap.	1
b ---xx----	1
b Bit	1
b memcpy(b,	1
into the	23
into a	25
into an	5
into memory	2
into vector	8
into one	6
into each	1
into multiple	10
into two	2
into C++	1
into array	4
into many	1
into threads	1
into small	1
into classes	1
into eight	1
into memory.	2
into separate	1
into three	1
into smaller	1
into lines	1
into registers.	1
into account	7
into ecx	1
into vectors.	1
into machine	1
into force	1
into projects	1
into sub-vectors	1
into sleep	1
into groups	1
into account.	1
+ b	7
+ 2	4
+ c	2
+ i;	1
+ 1	1
+ 1;	10
+ c;	3
+ i,	3
+ 2;	5
+ a;	1
+ b)	1
+ d;	2
+ d	2
+ 2,	2
+ f;	1
+ 3;	1
+ j	1
+ 2)	1
+ i);	6
+ 1.;	5
+ (c	1
+ C;	1
+ 1.0f;	1
+ esp	3
+ b;}	1
+ 1.0f;}	3
+ a.	1
+ c*x	2
+ b*x*x	2
+ 2.0f;	1
+ 2.0	1
+ 3.5;	1
+ c)	1
+ column;	1
+ A;	1
+ 2;}	1
+ B;	1
+ a2*b1)	1
+ (vector	1
+ log(c[i]);	1
+ e	1
+ d);	1
+ list[j].c;	1
+ FuncCol(i))	1
+ 0.666666666666666666667;	1
+ i/2;	1
+ d.y;	1
+ B*x	1
+ a.x,	1
+ b[i];	1
+ r.b;}	1
+ 0x3FF	1
+ 0x3FFF	1
+ two,	1
+ sign(i)	1
+ 4.;	1
+ a.y);}	1
+ a2/b2;	1
+ d.x;	1
+ 2.;	1
+ 0x7F	1
+ 100*16,	1
+ 3.;	1
+ ia32intrin.h	1
+ c.x	1
+ c.y	1
+ p->b;}	1
+ log(c[i]);.	1
n.a. -	47
n.a. x	9
n.a. n.a.	36
n.a. Floating	1
n.a. -(-a)	1
n.a. MS	1
n.a. Constant	1
n.a. a-a	1
n.a. x*x*x*x*x*x*x*x	1
n.a. a+b	1
n.a. _MSC_VER	1
n.a. a*0	1
n.a. a*1	1
n.a. a+0	1
n.a. a*b+a*c	1
n.a. !(a	1
n.a. __unix__	1
n.a. 1.00	2
n.a. 2.23	1
n.a. (-a)*(-b)	1
n.a. (a+b)+c	1
n.a. a+a+a+a	1
library is	6
library of	1
library and	3
library for	2
library that	5
library can	6
library or	2
library function	6
library if	1
library with	5
library int	2
library than	1
library may	1
library have	1
library will	1
library then	1
library at	4
library has	9
library because	1
library functions	9
library other	1
library which	1
library Intel	1
library into	1
library makes	1
library file	1
library function.	1
library does	1
library versions	1
library through	1
library functions.	4
library contains	4
library files	1
library #include	1
library made	1
library function,	1
library modules	1
library functions,	1
library (or	1
library files.	1
library www.agner.org/optimize/asmlib.zip.	1
library exp	1
library (*.dll	2
library (STL)	2
library requiring	1
library (DLL)	1
library asmlib,	1
library libircmt.lib.	1
library (SVML).	1
library asmlib..	1
library (VML,	1
library libmmt.lib	1
i is	4
i to	4
i and	2
i in	1
i can	1
i =	17
i by	3
i with	1
i an	1
i will	1
i which	2
i but	1
i into	1
i +	1
i *	1
i <	43
i must	1
i ;	1
i +=	9
i /	1
i >	1
i instead	1
i >=	3
i %	1
i <=	2
i modulo	1
float a	1
float to	1
float and	5
float in	1
float or	8
float *	1
float 4	2
float 8	1
float register	1
float rather	1
float 32	3
float type	1
float a,	7
float 128	1
float uses	1
float 256	1
float conversion	1
float expressions	1
float instead	1
float x;	3
float vectors	1
float a;	4
float conversions	1
float b)	1
float sum	2
float variable.	1
float x,	2
float square	1
float f;	9
float additions	1
float xn	1
float a[100];	4
float SomeFunction	1
float Register	1
float a[size],	3
float parabola	3
float x2	1
float matrix[rows][columns];	3
float list[100];	1
float 140	1
float x4	1
float Exp(float	2
float nfac	1
float list[size];	1
float list[size],	2
float Live	1
float s0	1
float b[1000];	2
float OneOrTwo5[2]	1
float coef[16]	1
float add_elements(__m128	1
float vectors)	1
float lookup[2]	1
float list[16];	1
float i2;	1
float list[]	1
float list[ARRAYSIZE];	1
multiple of	9
multiple //	1
multiple function	1
multiple code	1
multiple memory	2
multiple data	2
multiple CPU	5
multiple variables	1
multiple operating	1
multiple pointers	1
multiple programming	1
multiple dynamic	1
multiple bits	3
multiple times	1
multiple CPUs	3
multiple calculations	3
multiple versions	9
multiple processor	1
multiple threads	10
multiple functions.	1
multiple values	2
multiple smaller	1
multiple things	1
multiple platforms	1
multiple conditions	3
multiple overloaded	1
multiple purposes.	2
multiple cores	1
multiple statements	1
multiple blocks	1
multiple parent	1
multiple instances	1
multiple threads.	5
multiple cores.	1
multiple inheritance	3
multiple processes	2
multiple threads,	3
multiple .cpp	3
multiple cores,	1
multiple versions.	1
multiple layers	1
multiple counters,	1
multiple accumulators	1
multiple applications,	1
multiple processes.	1
multiple configurations	1
multiple versions,	1
multiple streams	1
multiple elements?	1
multiple logically	1
multiple inheritance,	1
two and	1
two =	2
two or	9
two then	1
two data	1
two different	7
two functions	2
two other	1
two integer	1
two floating	3
two double	1
two 64-bit	1
two array	1
two clock	3
two 32-bit	2
two operating	1
two libraries	1
two pointers	3
two simple	1
two instructions	1
two times	2
two versions	3
two threads	6
two integers	2
two functions.	1
two values	1
two branches	1
two induction	2
two types	1
two expressions	1
two modules	1
two things	1
two main	1
two positive	1
two gives	1
two constants	2
two 128-bit	2
two kinds	1
two loops	2
two iterations	1
two additions	2
two comparisons	2
two AND	1
two ways.	2
two loop-carried	1
two jobs	1
two commonly	1
two versions.	1
two double.	1
two books	1
two arrays,	1
two elements:	1
two parentheses	1
two (three	1
two suggested	1
two decimals,	1
two formulas	1
two steps.	1
two entries.	1
two branches:	1
two names,	1
two 128-	1
two summation	1
two gives:	1
object is	17
object of	11
object to	3
object in	3
object for	2
object that	3
object are	1
object can	3
object or	2
object it	1
object by	1
object with	1
object on	1
object as	1
object x	1
object then	1
object It	1
object has	3
object because	1
object which	1
object should	1
object static	1
object where	1
object takes	1
object cannot	1
object rather	1
object without	2
object file	5
object does	1
object must	1
object compiled	1
object doesn't	1
object through	3
object files	3
object instead	1
object after	1
object made	1
object p	1
object defined	1
object oriented	7
object file.	3
object pointed	3
object separately	1
object (except	1
object belongs	1
object owns.	1
number is	2
number of	75
number to	4
number and	2
number in	1
number by	1
number when	2
number then	1
number one	1
number we	1
number 16	1
number simply	1
number 1.	1
number 2,	1
number (e.g.	1
number information.	1
number 28.	1
number 0x1C.	1
number i.	1
number (the	1
number 6!	1
number generators.	1
static is	1
static to	2
static and	3
static or	4
static if	1
static then	1
static memory	8
static data	3
static has	1
static double	4
static float	1
static object	1
static static	3
static where	1
static version	1
static variables	1
static member	3
static const	6
static libraries	1
static part	1
static arrays	2
static inline	15
static memory.	3
static keyword	4
static char	1
static data.	1
static linking	8
static storage	1
static link	4
static here	1
static variables.	1
static Assume	1
static library.	1
static libraries.	1
static buffer	1
static declaration	1
static variables,	1
static library,	1
static modifier	1
static linking.	1
static data,	1
static if),	1
static linking,	1
static keyword:	1
static keyword,	1
64-bit code	1
64-bit vector	1
64-bit instruction	1
64-bit integer	2
64-bit compilers	1
64-bit double	2
64-bit version	2
64-bit operating	3
64-bit code.	1
64-bit systems	6
64-bit operations	1
64-bit CPUs	1
64-bit Windows	7
64-bit execution	1
64-bit integers	3
64-bit Linux	7
64-bit mode	11
64-bit addresses	1
64-bit shared	2
64-bit programs	1
64-bit Mac	1
64-bit systems.	9
64-bit vectors	1
64-bit Windows,	2
64-bit Linux,	3
64-bit mode.	5
64-bit Windows.	4
64-bit device	1
64-bit integers.	2
64-bit systems,	2
64-bit integer,	1
64-bit mode,	2
64-bit Linux.	1
64-bit integers,	2
64-bit MMX	1
64-bit versions.	1
64-bit Windows).	1
64-bit Linux:	2
64-bit double,	1
64-bit Unix	1
64-bit software,	1
64-bit systems).	1
64-bit extension	1
there is	55
there are	37
there may	4
there when	1
there will	1
there between	1
there was	1
there is,	1
C++ is	8
C++ and	4
C++ for	2
C++ or	2
C++ as	1
C++ compiler	5
C++ program	3
C++ has	1
C++ but	1
C++ should	1
C++ compilers	16
C++ takes	1
C++ so	1
C++ way	1
C++ faster	1
C++ take	1
C++ code.	1
C++ template	2
C++ file	1
C++ programming	1
C++ An	1
C++ language	6
C++ exception	1
C++ classes	1
C++ program.	1
C++ programs	1
C++ implementation	1
C++ compilers.	3
C++ based	1
C++ compiler.	1
C++ syntax	2
C++ v.	3
C++ program,	1
C++ compiler,	2
C++ Compiler	4
C++ casting	1
C++ Performance	1
C++ programming,	1
C++ programs.	1
C++ projects	1
C++ language,	1
C++ constructs	1
C++ relates	1
C++ constructs........................................................................	1
C++ imple-	1
C++ builder.	1
C++ 5.82	1
C++ builder	1
C++ language......................................................	1
C++ Builder	1
C++ Performance".	1
also the	2
also a	6
also be	16
also have	4
also time	1
also use	1
also when	1
also has	3
also other	2
also used	3
also page	1
also possible	2
also very	1
also makes	3
also stored	4
also called	4
also 4	1
also less	1
also useful	3
also available	2
also work	1
also works	1
also likely	1
also quite	1
also recommended	1
also see	1
also allows	1
also look	1
also 512	1
also relevant	1
also supports	1
also find	1
also costs	1
also prevents	1
also occur	1
also includes	1
also discussed	1
also situations	1
also applies	3
also available.	1
also involves	1
also eliminate	1
also available,	1
also deallocated	1
also repeats	1
also inconvenient	1
also treated	1
also deallocated.	1
also proceed	1
also third-party	1
also treat	1
also safer.	1
also de-allocated.	1
also work,	1
also included.	1
also tends	1
such a	10
such code	1
such as	53
such an	3
such systems	1
such processors	1
such small	2
such container	1
such advantage	1
such programs	1
such cases,	1
such dependency	1
such methods	1
such applications	1
such runtime	1
such expressions	1
such optimizations	2
such feature	1
such contentions	1
such errors	3
such cases.	1
such loops	1
such checks	1
such devices	1
such applications.	1
such obvious	1
such errors.	1
such applications,	1
such contrived	1
such checks.	1
efficient the	1
efficient to	14
efficient and	2
efficient in	5
efficient for	2
efficient if	5
efficient code	1
efficient as	6
efficient than	21
efficient use	1
efficient when	4
efficient memory	1
efficient vector	1
efficient because	5
efficient functions	1
efficient loop	1
efficient integer	1
efficient library	1
efficient way	3
efficient (see	1
efficient solution	6
efficient container	3
efficient whether	1
efficient code,	1
efficient solution.	3
efficient thanks	1
efficient alternatives	1
efficient today	1
efficient because,	1
efficient alternative.	1
efficient table-based	1
In the	13
In a	1
In this	13
In other	6
In example	5
In most	8
In 64-bit	6
In C++	1
In such	1
In many	3
In any	1
In some	14
In order	3
In 32-bit	1
In these	1
In cases	1
In simple	1
In large	1
In Linux	1
In difficult	1
In Windows,	1
In general,	6
In C++,	1
In 50	1
In multithreaded	1
In fact,	3
* x	4
* b	2
* 2	1
* const	1
* 4	1
* 8	1
* 32	1
* c	1
* c;	2
* x;	1
* 2;	5
* 5	2
* p	1
* 100	1
* temp;	2
* CriticalFunction	1
* 3;	4
* p)	8
* __restrict	2
* 2)	1
* c);	3
* d,	4
* 9	1
* SelectAddMul_pointer	1
* reciprocal_divisor;	2
* 2.5	1
* (2n	1
* CriticalFunctionDispatch(void)	2
* p;	2
* 3.5;	1
* 1.2;	2
* (columns	1
* Func1(x)	1
* m;}	2
* b2);	1
* p1;	1
* powN<true,N/2>::p(x);	1
* cc[i]);	1
* c[i]);	1
* powN<true,N-N1>::p(x);	1
* sizeof(float));	1
* sizeof(float)).	1
* a;}	1
* _mm_load_ps(coef+i);	1
* 17is	1
* 1.5f;	1
* 16is	1
* 5;	1
* b2	1
* b1	1
* (a+1);	1
* 5).	1
* sizeof(float))	1
* dest,	1
* sizeof(float)	1
* DynamicArray	1
* (1.	1
* x2;	1
* 0.5	1
* p2;	1
* 1.2f;	1
* 2.5;	1
There is	38
There are	47
There may	6
There will	1
There should	2
array is	8
array a	1
array of	5
array to	3
array and	1
array for	2
array can	4
array or	5
array with	3
array may	1
array will	1
array should	2
array using	1
array size	2
array pointer	1
array into	1
array static	8
array elements	4
array before	1
array address	1
array rather	1
array must	1
array ;	2
array element	6
array overflow	1
array after	1
array index	5
array initialized	1
array bounds	4
array sizes	1
array cout	1
array element.	3
array elements.	2
array index.	1
array sequentially.	1
array elements:	1
array indices	1
array grows	1
array i)	1
array 800	1
array initializer	1
array coincides	1
where the	30
where is	1
where a	11
where it	10
where code	1
where you	3
where data	1
where only	1
where one	1
where cache	1
where each	5
where most	1
where static	1
where there	2
where we	1
where template	1
where they	2
where dynamic	1
where instructions	1
where execution	1
where necessary	1
where speed	2
where automatic	1
where n	1
where r	1
where 10	1
where operands	1
where N	1
where RAM	1
where current	1
where everything	1
where almost	1
where security	1
where necessary.	1
where pre-increment	1
where appropriate.	1
many of	5
many function	3
many different	7
many functions	4
many such	1
many objects	2
many variables	1
many software	1
many branch	1
many elements	1
many bit	1
many optimization	1
many useful	1
many file	1
many cases	2
many times	9
many calls	1
many common	2
many small	2
many good	1
many standard	2
many files	1
many programs	1
many cases,	2
many branches	2
many Boolean	1
many applications	1
many examples	1
many advantages	1
many advanced	1
many reductions	1
many computer	1
many cases.	2
many unknown	1
many programmers	2
many processors,	1
many hard	1
many instances	1
many rules	1
many users	2
many branches.	1
many processes	1
many platforms,	1
many features,	2
many commercial	1
many years	1
many keywords	1
many labels	1
many allocations	1
many users.	1
many branches):	2
many respects	1
many tips	1
many renamed	1
many encryption	1
many decimals.	1
many people	1
many strings.	1
possible to	52
possible and	1
possible in	2
possible for	4
possible or	1
possible if	3
possible on	1
possible when	1
possible memory	1
possible at	1
possible vector	1
possible because	1
possible only	1
possible instruction	1
possible point	1
possible pointer	1
possible into	1
possible version	1
possible branch	1
possible user	1
possible access	1
possible case	1
possible cases	1
possible exception	1
possible overflow	1
possible implementation	1
possible ways	1
possible negative	1
possible performance.	1
possible version.	1
possible inputs	1
possible alternatives	1
possible minor	1
possible inputs.	1
possible workaround.	1
possible remedies	1
clock =	1
clock by	1
clock cycles	30
clock count	1
clock cycles.	13
clock frequency	12
clock counts	3
clock cycle	9
clock cycles,	8
clock cycle.	5
clock counts.	1
clock frequency.	2
clock cycle?	2
clock frequency,	1
clock pulses	1
clock cycles).	1
clock period	1
version is	5
version of	36
version to	1
version and	1
version in	2
version for	5
version that	5
version //	1
version if	1
version with	2
version on	2
version int	5
version because	1
version return	4
version without	1
version void	1
version control	1
version causes	1
version CriticalFunction	1
version changes	1
version 127	1
version on,	2
version performs	2
version CriticalFunctionType	1
version (May	2
version FuncType	2
version 2.11	1
version 2.20	1
version satisfies	1
version 2.20,	1
version 2.6.30	1
value is	7
value of	38
value to	1
value and	1
value in	6
value that	6
value it	1
value by	1
value as	2
value than	4
value will	1
value from	5
value at	1
value has	1
value each	1
value before	1
value 0	1
value 10	1
value depends	2
value maximum	1
value pointed	2
value xn	1
value wrap	1
value written	1
value 1000.	1
value -100+100+100	1
value infinity,	1
value 0x2C	1
objects is	4
objects of	5
objects to	1
objects and	4
objects in	13
objects for	1
objects that	2
objects are	14
objects can	5
objects //	1
objects if	1
objects with	1
objects on	1
objects as	1
objects have	5
objects will	1
objects should	3
objects stored	4
objects they	2
objects without	1
objects even	1
objects accessed	2
objects inside	1
objects together	2
objects declared	4
objects come	1
objects share	1
objects Conversions	1
objects simultaneously.	1
objects identified	1
objects Vec8s	1
objects (memory	1
objects (*.dll,	2
objects numbered	1
objects (rather	1
takes the	1
takes a	5
takes to	24
takes time	1
takes more	5
takes memory	2
takes only	4
takes one	1
takes no	5
takes some	1
takes between	1
takes before	1
takes 4	2
takes 8	1
takes time.	1
takes up	2
takes extra	2
takes much	5
takes advantage	1
takes typically	1
takes zero	1
takes too	2
takes longer	4
takes 10	2
takes 5	2
takes little	1
takes 3	1
takes care	3
takes 14	1
takes six	1
takes 11	1
takes 50	1
takes 40	2
takes 40%	1
takes hours	1
variable is	10
variable to	1
variable in	12
variable for	2
variable that	3
variable can	3
variable or	4
variable if	1
variable by	1
variable with	1
variable as	3
variable from	2
variable at	1
variable because	2
variable which	1
variable size	1
variable two	1
variable number	2
variable where	1
variable cannot	1
variable even	1
variable method	1
variable always	1
variable through	1
variable inside	1
variable would	1
variable unless	1
variable members	1
variable means	2
variable storage	2
variable global	1
variable size.	1
variable outside	1
variable until	1
variable names	1
variable declaration	1
variable pointed	2
variable names.	1
variable produces	2
variable lengths	1
variable Y	1
variable Z	1
variable having	1
variable whose	1
variable Day.	1
variable storage.............................................................................	1
variable __intel_cpu_feature_indicator	1
variable __intel_cpu_feature_indicator_x.	1
variable 85	1
variable m.	1
variable (eax)	1
any of	8
any function	2
any code	1
any use	1
any memory	1
any other	16
any cache	1
any floating	2
any size	1
any pointer	2
any library	1
any objects	2
any performance	1
any branch	1
any member	1
any elements	1
any call	1
any part	1
any type	1
any function.	1
any extra	6
any processor	1
any necessary	1
any speed	1
any specific	3
any exception	1
any option	1
any known	1
any cost	1
any public	1
any higher	1
any hot	1
any particularly	1
any algorithm	1
any effect	1
any time,	1
any algebraic	1
any situation	1
any non-static	3
any brand	2
any compile-time	1
any loss	1
any constructors	1
any assumption	1
any non-polymorphic	1
any expression,	1
any function)	1
any answer.	1
any transition	1
any non-vector	1
any event,	1
any patch.	1
we are	14
we can	14
we may	5
we have	5
we use	1
we will	4
we used	1
we should	1
we do	3
we need	4
we want	5
we must	1
we compile	1
we get	2
we would	1
we add	1
we don't	5
we end	1
we read	1
we assume	2
we know	1
we change	1
we still	1
we expect	1
we modify	1
we try	1
we notice	2
we roll	1
we specify	1
we prefer	1
we forgot	1
we loose	1
we encounter	1
we have:	1
we reach	1
some of	8
some more	1
some other	2
some compilers	2
some very	2
some long	1
some operating	1
some systems	1
some cases	16
some processors	1
some extra	1
some calculations	1
some small	1
some support	1
some information	1
some cases,	8
some expression	1
some development	1
some systems.	1
some types	1
some compilers.	1
some processors.	1
some microprocessors	2
some things	1
some positive	1
some syntax	1
some cases.	3
some programmers	1
some help	1
some typical	1
some heavy	1
some disadvantages	1
some changes	1
some measurements	1
some embedded	1
some CPU-intensive	1
some tests	1
some programs,	1
some formula	1
some experience	1
some differences	1
some funny	1
some legacy	1
some tips	1
some caveats.	1
some situations,	1
some links.	1
some indication	1
some day	1
some examples:	1
some rare	1
so the	4
so is	2
so a	1
so in	1
so that	41
so it	1
so as	1
so you	3
so this	1
so will	1
so there	1
so many	2
so we	4
so long	1
so important	1
so large	1
so big	2
so much	1
so small	2
so fast	2
so unless	1
so complicated	1
so high	3
so expensive	1
so (i.e.	1
so on.	1
so kludgy	1
so 1.2	1
so complicated?	1
variables is	3
variables to	4
variables and	11
variables in	11
variables The	1
variables for	6
variables that	6
variables are	8
variables can	3
variables or	1
variables if	1
variables by	1
variables as	3
variables than	1
variables may	1
variables have	1
variables use	1
variables will	1
variables because	1
variables do	1
variables into	1
variables const	1
variables called	1
variables (see	1
variables An	1
variables declared	1
variables Floating	1
variables go	1
variables global	1
variables defined	1
variables might	1
variables happen	1
variables (i.e.	1
variables sum1	1
variables Compilers	1
variables Y	1
variables .........................	1
return the	1
return a	11
return to	1
return and	1
return with	1
return an	1
return x	4
return from	3
return value	1
return any	1
return address	1
return 0;	3
return operations	1
return 0	1
return type	1
return ;	1
return addresses	2
return y	1
return c;	1
return types	2
return x;	1
return f;	1
return y;	1
return value.	1
return 1.0;	1
return a[i];	1
return _mm_loadu_si128((__m128i	3
return sum;	1
return clock;	1
return &CriticalFunction_386;	1
return x^10	1
return &CriticalFunction_SSE2;	1
return (*SelectAddMul_pointer)(aa,	2
return Func1(x)	1
return &CriticalFunction_AVX;	1
return pow(x,10);	1
return x10;	1
return (2.5f	1
return IntegerPower<10>(x);	1
return powN<(N	1
return x*x	1
return n;}	1
return ipow(x,10);	1
return (*CriticalFunction)(parm1,	1
return powN<(N1&(N1-1))==0,N1>::p(x)	1
return powN<true,N/2>::p(x)	1
return _mm_load_si128((__m128i	1
return square(x)	1
return _mm_cvtss_si32(_mm_load_ss(&x));}	1
return list[x];	1
return a+1;.	1
return add_elements(s);	1
return N;	1
return _mm_cvtss_f32(s);	1
return FactorialTable[n];	1
return prediction).	1
return route.	1
return vector(x	1
return statement:	1
return _mm_cvtsd_si32(_mm_load_sd(&x));}	1
return *(T*)0;	1
2 is	1
2 to	3
2 and	2
2 in	3
2 can	1
2 //	3
2 or	1
2 if	6
2 by	2
2 -	1
2 int	1
2 when	1
2 then	3
2 double	1
2 In	1
2 *	1
2 clock	1
2 return	2
2 2	2
2 64	1
2 template	1
2 32	1
2 does	2
2 ;	1
2 128	2
2 :	2
2 Integer	1
2 >	1
2 AVX2	2
2 #define	1
2 unused	1
2 ==	1
2 (See	2
2 bytes.	2
2 applies	1
2 int64_t	1
2 (i.e.	1
2 int,	1
2 Choosing	2
2 63	1
2 uint64_t	1
2 0.12	1
2 23	1
2 13.4	1
2 GHz	2
2 a+a+a+a=a*4	1
2 12.6	1
2 52	1
2 thenaandbcannot	1
2 Gbytes.	1
2 gigabytes	1
2 Mbytes.	1
2 0.77	1
2 (be	1
2 GB,	1
2 GB.	1
2 0.63	1
You can	22
You may	33
You have	6
You will	1
You should	6
You cannot	10
You need	1
You can't	1
You may,	1
table is	5
table of	8
table to	3
table and	1
table in	3
table The	1
table for	1
table that	1
table are	1
table can	2
table //	2
table or	1
table if	1
table by	1
table with	1
table may	2
table from	1
table at	1
table has	1
table should	1
table takes	1
table before	1
table element	1
table inside	1
table values	1
table lookup	11
table instead	1
table shows	2
table 19	1
table lists	1
table 8.1	1
table 9.3	1
table lookups	1
table lookup.	3
table (PLT)	3
table 9.1	1
table static.	1
table lookup:	2
table increases	1
table 8.1.	1
table (PLT).	2
table 9.2.	1
table (GOT).	1
table (GOT)	1
table summarizes	1
table 9.2,	1
performance is	8
performance of	8
performance and	2
performance in	1
performance for	5
performance that	1
performance can	2
performance if	2
performance by	3
performance on	5
performance then	1
performance has	1
performance because	3
performance should	1
performance between	2
performance test	2
performance even	1
performance cost	1
performance costs	1
performance counters	1
performance during	1
performance monitor	11
performance under	1
performance penalty	4
performance problems.	2
performance over	1
performance reasons.	1
performance options.	1
performance measurement	1
performance tests	1
performance significantly	1
performance dramatically	1
performance bottlenecks	1
performance monitoring	1
performance somewhat.	1
performance costs.	1
very time	1
very different	1
very efficient	3
very long	4
very often	1
very user	1
very useful	5
very important	3
very large	7
very big	4
very much	1
very small	2
very good	4
very few	1
very likely	2
very well	1
very fast	1
very high	1
very efficient.	1
very difficult	1
very old	1
very inefficient	4
very little	1
very smart	1
very well.	1
very similar	1
very low	1
very inefficient.	1
very time-consuming	3
very fast.	4
very expensive	1
very dramatic	1
very expensive.	2
very time-	1
very limited.	1
very big.	1
very problematic	1
very contrived	1
very obscure	1
very common.	1
very kludgy.	1
very old-fashioned.	1
very smart.	1
very often,	1
very helpful	1
very stupid.	1
software is	2
software to	2
software in	4
software for	1
software that	4
software be	1
software are	1
software can	1
software with	1
software more	1
software because	1
software should	1
software into	1
software performance	1
software optimization	2
software programming	2
software uses	1
software contains	2
software was	2
software programs	1
software implementation	4
software development	6
software applications	2
software framework	1
software writing	1
software optimization.	1
software module	1
software programmers	1
software faster.	1
software developers	2
software users	1
software specifies	1
software development,	1
software package	4
software project	2
software runs	1
software layers	1
software projects	1
software packages	2
software product	1
software users.	1
software develop-	1
software development.	1
software companies	1
software installed,	1
software products	1
software development",	1
software engineering	1
software package,	1
software teachers	1
software design,	1
software project,	1
software developer	1
order is	2
order of	10
order to	50
order and	2
order in	8
order or	1
order but	1
order execution	2
order calculation	1
order polynomial:	1
order a[0],	1
long and	3
long that	1
long or	2
long on	1
long as	7
long int	3
long time	8
long vector	4
long because	1
long double	7
long long	10
long before	1
long 64	4
long time.	1
long 32	1
long does	1
long list	1
long dependency	8
long response	4
long time,	1
long sequence	1
long enough	2
long ReadTSC()	1
long clock;	1
long time1;	1
long delay.	1
long latencies.	1
long timediff[NumberOfTests];	1
long long,	1
between the	13
between a	3
between function	1
between x	1
between different	7
between CPU	3
between floating	2
between each	1
between using	1
between multiple	8
between two	5
between 2	1
between 32-bit	2
between 8	1
between these	1
between simple	1
between threads	2
between single	1
between several	1
between integers	3
between optimizing	1
between signed	2
between development	1
between 5	1
between rows	1
between c2	1
between rounding	2
between threads.	1
between 9	1
between leaf	1
between platforms,	1
between threads,	1
between float,	1
between RISC	1
between PC's	1
between efficiency,	1
between coarse-grained	1
between commas	1
between recoverable	1
32-bit and	13
32-bit or	1
32-bit integer	2
32-bit number	1
32-bit software	2
32-bit operating	2
32-bit systems	9
32-bit Windows	3
32-bit integers	3
32-bit Linux	4
32-bit mode	3
32-bit programs	1
32-bit Mac	5
32-bit systems.	1
32-bit Windows,	2
32-bit Linux,	1
32-bit mode.	5
32-bit version.	1
32-bit Windows.	4
32-bit systems,	2
32-bit mode,	2
32-bit integer.	1
32-bit case.	1
32-bit absolute	1
32-bit integers,	4
32-bit number.	1
32-bit -fno-builtin	1
32-bit counterparts.	1
32-bit (signed)	1
branch is	6
branch of	3
branch to	1
branch and	1
branch in	1
branch for	2
branch that	9
branch can	3
branch //	1
branch if	2
branch by	3
branch will	2
branch only	1
branch instruction	1
branch should	1
branch into	1
branch void	1
branch must	1
branch inside	4
branch depends	2
branch (e.g.	1
branch target	5
branch prediction	4
branch misprediction	3
branch prediction.	5
branch mispredictions.	4
branch pattern	1
branch tree	1
branch mispredictions	2
branch ahead	1
branch tree.	1
branch mispredictions,	2
branch misprediction,	1
branch predictions	1
< b	1
< 0	2
< 100;	13
< 2;	1
< b)	1
< 0)	1
< size;	11
< n;	1
< 256;	6
< SIZE;	7
< 4)	1
< 1000;	1
< 5)	2
< r;	2
< 100.	2
< r1;	1
< 2.0	1
< 20;	2
< 0.	1
< ARRAYSIZE	1
< r1+TILESIZE;	2
< rows;	2
< NumberOfTests;	2
< 10)	1
< 223	1
< arraysize;	1
< NUMROWS;	1
< NUMCOLUMNS;	1
< ArraySize;	1
< c1+TILESIZE;	1
< &list[100];	1
< arraysize)	1
< 231	1
< r2;	1
< list.Size();	1
< 13)	1
< columns;	1
member the	1
member is	2
member of	9
member or	1
member function	19
member by	1
member functions	18
member pointer	2
member variable	1
member pointers	5
member function.	5
member functions.	7
member function,	1
member pointer.	2
member relative	2
member functions,	1
member functions)	1
way the	3
way is	7
way a	2
way of	13
way to	25
way and	1
way in	2
way that	4
way or	3
way if	1
way by	1
way as	3
way than	1
way has	1
way most	1
way two	1
way member	1
way three	1
way microprocessors	1
way includes	1
way m	1
elements is	3
elements of	5
elements to	2
elements and	1
elements in	18
elements that	1
elements are	7
elements //	1
elements with	2
elements have	3
elements more	1
elements will	1
elements }	1
elements then	1
elements from	7
elements at	4
elements inside	1
elements };	1
elements were	1
elements per	3
elements Induction	1
elements are.	1
elements consecutively	1
elements Total	2
elements matrix[r][c]	1
elements Size	1
elements c.load(cc+i);	1
elements matrix[c][r]	1
elements b.load(bb+i);	1
faster the	1
faster to	9
faster and	4
faster in	3
faster //	2
faster if	10
faster by	1
faster with	1
faster than	32
faster when	2
faster at	1
faster because	3
faster way	1
faster vectorized	1
faster either	1
faster nor	1
faster despite	1
const in	1
const or	1
const function	1
const int	30
const double	4
const pointer	1
const float	3
const *	5
const variable	2
const member	1
const &	10
const x)	3
const reference	4
const keyword	2
const twice	1
const reference.	1
const restriction	2
const Greek[4]	1
const definitions	1
makes the	17
makes a	5
makes it	10
makes function	2
makes code	1
makes an	2
makes data	8
makes program	1
makes no	2
makes floating	3
makes code.	1
makes sure	9
makes operations	1
makes intermediate	1
makes dispatching	1
makes caching	2
makes various	1
makes inlining	1
makes testing	1
makes sense	1
makes detailed	1
makes position-	1
makes dynamic_cast	1
cannot be	26
cannot use	2
cannot make	4
cannot point	2
cannot set	1
cannot do	2
cannot always	1
cannot access	2
cannot avoid	2
cannot inline	1
cannot replace	2
cannot assume	2
cannot know	2
cannot reduce	1
cannot change	2
cannot find	1
cannot rely	3
cannot expect	4
cannot swap	3
cannot modify	1
cannot multiply	1
cannot easily	2
cannot do.	1
cannot increase	1
cannot prefetch	1
cannot rule	3
before the	28
before and	4
before it	9
before you	1
before all	1
before any	4
before we	1
before test	1
before they	1
before conversion	1
before running	1
before calling	2
before your	1
before p	1
before adding	1
before multiplying	3
before converting	1
before compilation.	1
before leaving	3
before terminating	1
before dividing	1
before MemberPointer	1
before coordination	1
before storing.	1
before trying	1
before you.	1
stored in	35
stored are	1
stored can	1
stored by	1
stored with	1
stored on	6
stored as	6
stored at	6
stored together	6
stored near	4
stored (or	1
stored sequentially	1
stored consecutively	1
stored contiguously	1
stored together......................................	1
called the	3
called a	3
called and	4
called in	3
called for	1
called by	3
called with	2
called on	1
called when	2
called from	11
called only	4
called CPU	1
called performance	1
called faster	1
called before	3
called register	1
called stack	2
called function.	2
called through	1
called every	1
called shared	2
called name	1
called core	1
called global	2
called whole	1
called square	1
called garbage	1
called whenever	1
called near	1
called procedure	1
called once	1
called once.	1
called CodeAnalyst.	1
called before.	1
called accumulators.	1
called Single-Instruction-Multiple-Data	1
called VTune;	1
called properties)	1
called from),	1
called "Gnu	1
address is	5
address a	1
address of	24
address and	3
address in	2
address that	2
address can	2
address by	2
address at	1
address which	2
address so	1
address cannot	1
address calculations	2
address through	1
address calculation	4
address space	1
address divisible	5
address range	2
address below	1
address might	1
address again	1
address is.	1
address plus	1
address 0x2710	3
address 0x2700	1
address [ecx+eax*4].	1
address esp+8	1
4 and	1
4 in	1
4 =	2
4 or	1
4 with	1
4 -	2
4 int	1
4 double	1
4 pointer	1
4 +	1
4 float	1
4 64-bit	1
4 clock	2
4 2	2
4 4	5
4 unsigned	3
4 64	3
4 32	1
4 short	1
4 ;	1
4 bytes	8
4 AVX	1
4 128	2
4 Most	1
4 256	2
4 AVX2	4
4 computer	1
4 unused	2
4 lines	1
4 bytes.	3
4 processors,	1
4 processor.	1
4 Performance	2
4 computer.	1
4 ways.	1
4 floats	2
4 ways,	1
4 PUBLIC	2
4 rows.	1
4 ?Func2@@YAXQAHAAH@Z	1
4 (NetBurst)	1
See the	10
See page	51
See Intel	1
See manual	1
See my	1
See chapter	1
See www.agner.org/optimize/cppexamples.zip	1
See www.agner.org/optimize/cppexamples.zip.	1
See ISO/IEC	1
See www.gnu.org/copyleft/fdl.html.	1
See www.agner.org/optimize	1
See www.openmp.org	1
critical function	8
critical code	5
critical time	1
critical when	1
critical because	1
critical functions	3
critical integer	1
critical code.	1
critical part	17
critical function.	3
critical dependency	2
critical applications	1
critical parts	5
critical piece	1
critical innermost	6
critical modules	1
critical resources.	1
critical stride	10
critical stride,	1
critical stride.	1
critical application-	1
call the	12
call is	1
call a	5
call of	1
call to	17
call and	2
call //	1
call or	1
call it	3
call if	1
call by	1
call with	1
call this	1
call from	1
call all	1
call any	2
call so	1
call makes	1
call method	1
call stack	1
call inline	1
call statement	2
call (e.g.	1
call polymorphic	1
call transpose	1
call method.	1
call _mm256_zeroupper()	3
call C1::f	1
call WriteFile	1
call p->f()	1
call (other	1
call __intel_cpu_features_init_x().	1
0; for	3
0; //	2
0; int	3
0; x	2
0; }	4
0; i	39
0; while	1
0; c	4
0; r	2
0; row	1
0; j	1
0; column	1
0; c1	1
0; 14.6	1
0; list[i+1]	1
0; r1	1
0; i--,	1
0; 35	1
0; i--)	1
8 and	1
8 in	1
8 =	2
8 or	2
8 -	1
8 floating	1
8 most	1
8 pointer	1
8 +	1
8 float	1
8 *	1
8 clock	1
8 long	1
8 8	6
8 bit	1
8 unsigned	2
8 64	3
8 rather	2
8 16	3
8 32	3
8 bits	1
8 0	1
8 short	1
8 bytes	9
8 128	1
8 256	2
8 below.	1
8 char	1
8 AVX2	3
8 512	2
8 #define	1
8 columns	1
8 bytes.	2
8 edx,	1
8 ways.	1
8 -128	1
8 2.5	1
8 kb	2
8 Optimizations	2
8 double's	1
less be	1
less than	14
less memory	1
less each	1
less efficient	14
less so	1
less critical	1
less user	1
less useful	1
less important	2
less advantageous	1
less likely	1
less optimal	1
less efficient.	12
less clear	1
less efficiently	3
less popular	1
less strict	1
less computing	1
less expensive.	1
less optimized.	1
less compact.	1
less intensive	1
less safe.	1
less favorable:	1
less efficiently.	1
less precise	1
less reliable.	1
less susceptible	1
less well-known	1
For this	1
For more	1
For example	1
For Intel	1
For example,	48
For these	1
For example:	12
For my	1
For unused	1
For example,a	1
For team	1
For one-man	1
example, the	10
example, a	11
example, to	3
example, in	5
example, for	1
example, that	1
example, it	2
example, if	9
example, x	2
example, you	5
example, this	1
example, use	1
example, when	1
example, then	1
example, only	1
example, which	1
example, all	1
example, but	1
example, one	1
example, compilers	1
example, using	2
example, many	1
example, we	1
example, some	1
example, a,	1
example, #define	1
example, vectorized	1
example, let's	1
example, f(x)	1
example, b*2.0/3.0	1
bit is	1
bit of	10
bit to	3
bit and	1
bit in	3
bit are	1
bit can	1
bit //	1
bit code	2
bit at	1
bit vector	4
bit instruction	1
bit which	1
bit integer	2
bit float	3
bit version	1
bit so	1
bit systems	2
bit operations	1
bit must	1
bit Windows	1
bit Linux	2
bit };	1
bit mode	4
bit platform	3
bit x86	1
bit mode.	2
bit mode,	2
bit scan	5
bit systems:	2
bit manipulation	1
bit -fno-builtin	1
bit offsets).	1
bit indicates	1
bit set).	1
operating systems	19
operating system	27
operating systems.	4
operating systems,	2
operating system.	6
operating system,	5
operating systems".	3
operating systems").	1
operating system.........................................................................................	1
operating systems"	1
unsigned in	1
unsigned The	1
unsigned for	1
unsigned //	2
unsigned if	1
unsigned int	26
unsigned integer	4
unsigned variable	1
unsigned 2	1
unsigned You	1
unsigned long	3
unsigned 4	1
unsigned 8	1
unsigned short	3
unsigned integers	10
unsigned 1	1
unsigned 256	2
unsigned conversion	1
unsigned char	4
unsigned variables.	1
unsigned integers.	1
unsigned __int64	1
unsigned Examples:	1
first the	1
first and	1
first in	2
first //	3
first time	6
first when	1
first data	1
first two	3
first object	1
first way	2
first call	5
first time.	1
first processors	3
first result	1
first compiled	1
first element	3
first 128	2
first four	1
first eight	2
first count	2
first program.	1
first application	1
first byte	7
first look	1
first algorithm	1
first operand	3
first convert	1
first thing	2
first generation	2
first call.	1
first six	1
first manual.	1
first PC's	1
first sum,	1
first sub-vector.	1
first dimension	1
register the	1
register is	3
register to	3
register and	1
register for	4
register that	1
register can	2
register if	1
register because	2
register which	1
register size	4
register into	1
register variable	2
register variables	6
register less	1
register rather	1
register available	1
register stack	5
register (see	1
register allocation	1
register keyword	2
register size.	2
register variables.	3
register temp	1
register variable.	2
register stack.	1
register containing	1
register sizes	1
register temp;	1
register except	1
register storage.	2
register variables,	1
register parameters.	1
register renaming	1
register use,	1
register left	1
register usage	1
register renaming.	1
register keyword.	1
register state.	1
64 and	1
64 or	1
64 If	1
64 2	5
64 4	5
64 8	2
64 bit	12
64 64	4
64 32	1
64 bits	7
64 0	1
64 bytes	1
64 matrix	2
64 1	2
64 consecutive	1
64 bytes.	2
64 bits.	2
64 MMX	4
64 bits,	1
64 Kbytes	1
64 Iu32vec2	1
64 -263	1
64 14.0	1
64 Iu8vec8	1
64 kbytes.	1
64 Is32vec2	1
64 Is8vec8	1
64 Is16vec4	1
64 kb.	1
64 Iu16vec4	1
64 I64vec1	1
take the	6
take a	5
take more	8
take memory	1
take only	4
take no	3
take most	1
take into	2
take any	1
take branch	1
take up	3
take extra	1
take much	1
take several	3
take advantage	8
take quite	2
take longer	4
take 10	1
take installation	1
take special	1
take maximum	1
take 3	1
take approximately	1
take care	4
take 1000	1
take microseconds	1
take precedence,	1
often the	1
often a	3
often be	4
often as	1
often an	1
often have	2
often use	1
often more	2
often because	1
often used	7
often possible	2
often takes	2
often faster	2
often take	1
often useful	1
often necessary	2
often much	1
often implemented	1
often contains	2
often write	1
often optimize	1
often replace	1
often requires	1
often gives	1
often inlined	1
often true	1
often fail	1
often easier	2
often happen	1
often inefficient.	1
often determined	1
often waiting	1
often belong	1
often preferable	1
often inserts	1
often suffer	1
often conflicting	1
often reveal	1
often mispredicted.	1
often underestimate	1
often reorganized	1
often seen,	1
often abusing	1
often fluctuating	1
often excessively	1
often unreliable.	1
often disturb	1
rather than	64
rather unconventional	1
optimization is	5
optimization of	4
optimization are	1
optimization can	1
optimization or	1
optimization it	1
optimization by	5
optimization than	1
optimization more	1
optimization cannot	1
optimization instructions	1
optimization Some	1
optimization option	1
optimization unless	1
optimization Integer	1
optimization automatically	1
optimization methods	1
optimization options	8
optimization features	2
optimization manuals	1
optimization capabilities	1
optimization effort	3
optimization manuals.	1
optimization MS	2
optimization options.	1
optimization are.	1
optimization guide	4
optimization Intel:	1
optimization explicitly.	1
optimization Whole	1
optimization topics	2
optimization report	1
optimization issue.	1
optimization efforts	1
optimization /GL	1
optimization hints	1
optimization /Og	1
optimization job.	1
libraries is	1
libraries of	1
libraries and	5
libraries in	1
libraries for	5
libraries that	3
libraries are	13
libraries can	2
libraries or	1
libraries it	1
libraries with	1
libraries have	4
libraries use	1
libraries when	1
libraries It	1
libraries do	2
libraries where	1
libraries need	1
libraries without	1
libraries available	1
libraries Some	1
libraries Function	1
libraries support	1
libraries available.	1
libraries included	1
libraries distributed	1
libraries slower	1
libraries Test	1
libraries (*.dll	1
libraries named	1
libraries (*.lib,	2
libraries contend	1
libraries 113	1
libraries (.dll	1
libraries (.lib	1
libraries published	1
how the	3
how a	2
how to	30
how you	2
how this	3
how compilers	2
how efficient	1
how many	4
how variables	1
how long	1
how often	1
how they	1
how big	1
how much	4
how advantageous	1
how well	3
how metaprogramming	1
how predictable	1
how caches	1
how tortuous	1
code. The	10
code. //	1
code. This	4
code. A	1
code. It	4
code. If	4
code. In	2
code. There	1
code. You	1
code. See	1
code. For	3
code. Example:	4
code. Some	1
code. An	1
code. But	1
code. These	1
code. All	1
code. However,	1
code. Most	1
code. Each	1
code. Many	1
code. Dynamic	2
code. #if	1
code. Register	1
code. Intrinsic	1
code. System	1
code. Compilers	1
code. Furthermore,	1
code. Metaprogramming	1
code. Let's	1
code. Storing	1
code. Sometimes	1
code. C#,	1
code. Let	1
code. 7.32	1
code. Inserting	1
code. Compiled	1
code. 147	1
code. (Compile	1
time. The	9
time. //	1
time. This	4
time. A	8
time. It	5
time. There	2
time. You	2
time. 4	2
time. For	2
time. Example:	1
time. Some	1
time. An	1
time. But	1
time. These	1
time. Integer	2
time. Therefore,	1
time. Each	1
time. Loop	1
time. No	2
time. Do	1
time. Optimizing	1
time. Another	1
time. Other	1
time. Shared	1
time. Templates	1
time. Dispatch	1
time. Are	1
time. Text	1
time. Single	1
time. Interpreted	1
time. Four	1
time. (Of	1
time. (Examples	1
time. Uses	1
time. Newer	1
template is	3
template to	1
template for	1
template function	2
template with	1
template has	1
template because	1
template class	4
template library	2
template rather	1
template template	1
template parameters	5
template parameter	4
template feature	1
template function,	1
template instance	1
template metaprogramming	4
template parameter.	7
template parameters.	1
template instances	1
template method.	1
template specialization	4
template parameters,	1
template <int	3
template metaprogramming.	1
template metaprogramming,	2
template <typename	3
template parameter:	2
template specialization.	1
template specialization,	1
template <bool	1
registers is	5
registers to	1
registers and	1
registers in	3
registers The	2
registers for	2
registers that	1
registers are	13
registers can	2
registers by	2
registers have	1
registers when	1
registers then	1
registers has	2
registers only	1
registers rather	5
registers available	2
registers (see	2
registers used.	1
registers instead	1
registers are:	1
registers organized	1
registers had	1
registers eax,	1
registers anyway.	1
registers named	1
registers .................................................................	1
registers (6	1
registers (8	1
registers ..........................................................	1
registers (XMM	1
need the	4
need a	4
need to	26
need for	3
need not	1
need an	1
need only	1
need any	2
need extra	1
need assembly	2
need separate	1
need induction	1
need better	2
need conversions	1
need it.	1
need initialization.	1
need modification	2
need updating	1
need metaprogramming.	2
need relocation.	1
need relocation,	1
need relocation	1
pointers is	1
pointers of	2
pointers to	11
pointers and	9
pointers in	1
pointers that	1
pointers are	4
pointers can	2
pointers or	4
pointers if	3
pointers may	2
pointers A	1
pointers It	1
pointers because	3
pointers do	1
pointers In	1
pointers so	1
pointers makes	1
pointers less	1
pointers rather	1
pointers unless	1
pointers requires	2
pointers are:	1
pointers efficient,	1
pointers ......................................................................................................	1
pointers Calling	1
pointers ..........................................................................................................	1
pointers /vms	1
test the	4
test a	1
test and	1
test in	1
test for	1
test that	1
test //	4
test or	1
test on	1
test this	1
test when	1
test data	3
test program	4
test because	1
test all	1
test but	1
test should	3
test each	1
test 16	1
test bits	1
test several	1
test run	1
test sign	1
test their	1
test data.	2
test feature	2
test loop.	1
test purposes.	2
test situations	1
test tool	5
test ()	3
test server.	1
test examples.	2
test setup	2
test theory.	1
test finishes	1
new and	9
new or	3
new compiler	1
new memory	2
new vector	1
new instruction	1
new cache	1
new floating	1
new object	2
new version	4
new value	2
new objects	1
new software	1
new branch	2
new register	2
new instructions	2
new function.	1
new versions	1
new processor	1
new element	1
new model	1
new addition	1
new bigger	3
new relevant	1
new instance	2
new generation	1
new features	1
new block.	1
new update	1
new one.	2
new physical	1
new features.	2
new context.	1
new today	1
new insight	1
systems and	9
systems that	3
systems are	5
systems can	2
systems or	1
systems if	1
systems by	1
systems with	4
systems than	1
systems may	1
systems you	1
systems have	3
systems use	2
systems when	1
systems will	1
systems because	1
systems should	1
systems do	1
systems also	2
systems we	1
systems often	1
systems need	1
systems available	1
systems unless	1
systems give	1
systems Windows,	1
systems gives	1
systems allow	3
systems normally	1
systems DOS	1
systems lack	1
systems .............................................................................	1
systems disappears	1
systems Microcontrollers	1
systems (but	1
user is	3
user to	2
user and	2
user can	1
user if	1
user may	1
user will	2
user has	3
user but	1
user access	1
user must	1
user never	1
user data.	1
user actually	1
user interface	15
user might	1
user input	4
user who	1
user gets	1
user input.	3
user interface.	4
user interfaces	2
user feedback	1
user expects	2
user settings	1
user friendly	1
user interface,	1
user friendly.	1
these and	1
these are	2
these time	1
these functions	3
these instruction	2
these cache	1
these integer	1
these example	1
these compilers	2
these two	4
these also	1
these variables	1
these table	1
these elements	1
these address	1
these operating	1
these libraries	1
these operations	1
these instructions	1
these eight	1
these addresses	1
these problems	2
these methods	4
these examples	2
these data.	1
these types	1
these directives	2
these languages	1
these variables.	1
these conditions	1
these calculations.	1
these classes.	1
these purposes.	2
these instructions.	1
these problems.	1
these disadvantages	1
these manuals	2
these guidelines	1
these obstacles	1
these methods.	1
these reasons,	1
these considerations.	1
these categories:	1
they are	33
they can	2
they may	1
they have	1
they point	2
they do	1
they cannot	5
they always	2
they must	1
they don't	1
they were	1
they fail	1
they come	1
they waste	1
they contain	1
they appear	2
they are.	2
they otherwise	1
without the	11
without an	2
without CPU	1
without cache	5
without using	4
without any	3
without SSE2	1
without dynamic	1
without AVX	3
without information	1
without problems	1
without caching	1
without position-independent	1
without checking	1
without adding	1
without loading	2
without help	1
without -fpic	4
without polymorphism	1
without specifying	1
without reducing	1
without invoking	1
without generating	1
without AVX,	1
without worrying	1
without restrictions.	1
without effectively	1
without jeopardizing	1
without taking	1
without paying	1
without returning.	1
without discriminating	1
useful to	10
useful in	9
useful for	22
useful if	2
useful on	1
useful when	4
useful because	1
useful performance	1
useful way	2
useful methods	1
useful mathematical	1
useful source	1
useful whenever	1
useful discussions	1
even the	2
even a	3
even of	1
even in	1
even for	4
even be	2
even if	11
even on	1
even have	2
even more	2
even when	8
even integer	1
even faster	2
even without	1
even add	1
even smaller	1
even compatible	1
even though	6
even allocate	1
even swapped	1
even worse,	1
even temporarily.	1
even telling	1
even matters,	1
even worse	1
sure the	11
sure to	7
sure that	27
sure it	3
sure not	1
sure you	3
sure its	1
sure allocated	1
sure whether	1
sure everything	1
method is	18
method of	6
method to	1
method in	2
method for	2
method that	3
method can	4
method if	1
method with	1
method may	2
method you	1
method only	1
method used	2
method should	1
method using	1
method also	1
method doesn't	1
method works	2
method Function	1
method requires	2
method described	1
method currently	1
method unfavorable,	1
always the	1
always to	2
always for	1
always be	1
always as	1
always use	3
always has	1
always possible	1
always takes	1
always stored	1
always 0	1
always available	1
always work	1
always calls	1
always calculated	1
always advantageous	1
always run	1
always 1	1
always able	1
always end	1
always transferred	1
always goes	1
always points	1
always #pragma	1
always rely	1
always position-independent	1
always inlined	1
always true	1
always keep	1
always apply	1
always fully	1
always resolved	2
always evaluate	1
always avoiding	1
always select	1
always belong	1
always enabled	1
always true.	1
always one,	1
always chooses	1
always work.	1
always behave	1
always Optimize	1
always accurate,	1
always comparable	1
always true/false	1
always sequential,	1
always compete	1
always false:	1
always normalized,	1
always optimal,	1
always happy	1
access the	4
access is	4
access a	5
access to	11
access and	4
access in	2
access are	1
access can	1
access or	1
access it	1
access by	1
access an	2
access x	1
access may	1
access any	2
access rather	1
access these	1
access part	1
access times	1
access Some	1
access non-sequential	1
access Reading	1
access Accessing	1
access internal	1
access .............................................................................................	1
access ......................................................................................................	1
access 9.1	1
access patterns	1
access rights.	1
access patterns.	1
void test	3
void SomeFunction	1
void Func	1
void SelectAddMul(short	6
void Disp()	4
void StoreVector(void	3
void Func1	1
void CriticalFunction();	1
void CriticalInnerFunction	1
void TransposeCopy(double	2
void transpose(double	2
void Plus2	1
void FuncA	1
void F1()	2
void f();	2
void Func(int	2
void Func2()	1
void Hello()	2
void Disp();	1
void NotPolymorphic();	2
void F3(bool	2
void FuncB	1
void g()	1
void F0()	1
void AddTwo(int	1
void SelectAddMul_dispatch(short	1
void F2(float	1
void StoreNTD(double	1
void StoreVectorA(void	1
void F1(int	1
void MathLoop()	1
void FUNCNAME(short	1
void FuncType(short	1
void xplus2()	1
void Func()	1
void DelayFiveSeconds()	1
16 is	2
16 to	2
16 in	1
16 for	2
16 or	1
16 will	1
16 float	1
16 clock	1
16 4	3
16 8	4
16 bit	1
16 unsigned	1
16 16	3
16 32	1
16 bits	4
16 0	1
16 (see	1
16 bytes	6
16 128	1
16 1	1
16 256	2
16 char	1
16 Table	1
16 512	2
16 lines	1
16 bytes.	1
16 Testing	2
16 __declspec(	1
16 SSSE3	1
16 3.2	1
16 3.3	1
16 3.1	1
16 -32768	1
16 XOP,	1
SSE2 is	3
SSE2 and	1
SSE2 //	1
SSE2 or	6
SSE2 not	1
SSE2 int	1
SSE2 instruction	24
SSE2 float	1
SSE2 version	3
SSE2 long	1
SSE2 short	1
SSE2 128	1
SSE2 supported	2
SSE2 typically	1
SSE2 intrinsic	1
SSE2 #include	1
SSE2 char	1
SSE2 Table	1
SSE2 Store	2
SSE2 (or	1
SSE2 emmintrin.h	1
out the	11
out a	2
out of	20
out to	2
out or	1
out if	1
out by	3
out with	1
out loop	5
out which	1
out multiple	1
out some	1
out whether	1
out sign	1
out results	1
out aliasing	1
out loop-invariant	1
out independently	1
following compiler	1
following example	18
following table	2
following example,	1
following assembly	2
following list	1
following methods	2
following examples	1
following example:	1
following algorithm	1
following conditions	2
following way.	3
following explanation	1
following sections	1
following table.	1
following disadvantages	1
following guidelines	1
following considerations	1
following techniques	1
following reasons:	3
following way:	3
following cases:	1
following alternatives:	1
following steps	1
following work-around	1
following features:	1
following sections.	1
following solutions,	1
system is	3
system to	3
system and	2
system for	1
system can	2
system or	1
system if	1
system with	1
system code	3
system may	4
system this	1
system has	1
system functions	1
system which	1
system performance	1
system makes	1
system call	1
system rather	1
system code.	3
system (see	1
system calls	1
system thread	1
system All	1
system running	1
system resources	2
system instead	1
system core	1
system database	1
system calls.	1
system devices	1
system programming,	1
system modules.	1
system API	1
system database,	1
system kernel	1
system color	1
system crash.	1
system forbids	1
system standards.	1
system dependent	1
system breakdown.	1
32 and	2
32 for	2
32 =	1
32 with	1
32 instruction	1
32 2	2
32 4	5
32 8	5
32 bit	9
32 64	1
32 16	2
32 bits	10
32 0	1
32 1	1
32 sets	2
32 256	1
32 char	1
32 results	1
32 bits.	1
32 bits,	1
32 7.4	1
32 AND-operations	1
32 bytes).	1
32 16.4	1
32 -231	1
file is	3
file of	1
file to	1
file and	5
file in	3
file for	5
file that	1
file can	1
file by	1
file on	1
file than	1
file when	1
file will	2
file from	1
file has	1
file access	4
file needs	1
file until	1
file containing	1
file includes	1
file input	1
file MMX	1
file tells	1
file format.	1
file format	2
file level,	1
file input/output	1
file stdint.h	1
file formats	1
file timingtest.h	1
file dvec.h	1
file mathimf.h	1
file stub.	1
file disassembler.	1
file http://www.agner.org/optimize/asmlib.zip	1
file level.	1
file /Fm	1
file formats.	1
programming is	1
programming are	1
programming can	1
programming as	1
programming will	1
programming without	1
programming error	1
programming work	1
programming language	11
programming are:	1
programming errors	2
programming languages	6
programming style	3
programming manuals	1
programming principles	1
programming ..........................................................................................	1
programming languages,	4
programming languages.	2
programming style.	4
programming error.	1
programming language,	1
programming questions	2
programming experience	1
programming constructs	1
programming textbooks	2
programming nowadays	1
programming practice,	1
programming Device	1
dynamic memory	19
dynamic library	8
dynamic array	1
dynamic libraries	8
dynamic allocation	1
dynamic linking	5
dynamic link	6
dynamic libraries.	1
dynamic allocation.	1
dynamic versions.	1
dynamic linker.	1
dynamic linking.	1
dynamic libraries............................................................................	1
part of	49
part can	1
part unsigned	2
part takes.	1
part 142	1
bits is	1
bits of	10
bits to	1
bits in	7
bits for	2
bits are	1
bits with	2
bits than	1
bits when	1
bits at	1
bits rather	1
bits 0	1
bits while	1
bits total	1
bits except	2
bits Vector	1
bits Instruction	1
bits Number	2
bits each,	3
bits represent	1
bits differently.	1
bits minimum	1
bits wide,	2
bits each.	1
bits (MMX),	1
bits (XMM),	1
bits (YMM),	1
bits 32-62.	1
bits (rarely	1
bits (YMM)	1
bits (ZMM).	1
bits (XMM)	1
operations is	1
operations of	1
operations to	1
operations and	3
operations in	2
operations for	3
operations are	10
operations can	2
operations with	3
operations on	4
operations than	1
operations use	2
operations when	2
operations do	1
operations into	1
operations such	1
operations where	1
operations so	1
operations take	1
operations without	1
operations An	1
operations automatically	1
operations require	1
operations slow	1
operations outside	1
operations mentioned	1
operations involves	2
operations (chapter	1
operations in-between	1
operations Today's	1
operations (addition,	1
0 is	1
0 a	2
0 to	2
0 and	6
0 in	1
0 for	2
0 that	1
0 //	2
0 =	3
0 or	8
0 if	1
0 -	11
0 because	1
0 rather	1
0 ||	1
0 ?	2
0 <=	1
0 n!	1
0 a+0=a	1
0 264-1	1
0 65535	1
0 255	1
0 232-1	1
type is	2
type of	11
type to	1
type and	2
type in	1
type that	1
type can	1
type by	1
type with	1
type has	1
type such	1
type short	1
type __m128i	1
type conversion	4
type conversions	1
type identification	7
type T	2
type casting	4
type int.	1
type holds	1
type typedef	1
type __m128	1
type size_t	1
type conversions:	1
type casting.	1
type casting,	1
type __m128d	1
case the	4
case is	4
case a	1
case of	16
case and	1
case in	1
case that	2
case it	3
case if	1
case with	1
case x	1
case you	1
case then	1
case memory	1
case there	1
case where	1
case we	2
case so	1
case situation	2
case 3:	1
case 2:	1
case conditions.	1
case 1:	1
case labels	1
case F2	1
case 0:	1
cases the	3
cases of	4
cases to	1
cases and	1
cases for	1
cases be	3
cases are	1
cases it	7
cases on	1
cases you	2
cases this	1
cases when	1
cases should	1
cases such	1
cases In	1
cases where	16
cases cannot	1
cases take	1
cases they	1
cases even	1
cases like	1
cases described	1
cases ignore	1
short in	1
short or	1
short int	41
short time	1
short vector	5
short int,	2
short int)	1
& a	1
& b	1
& 0	1
& a,	1
& b;	2
& 1	1
& unless	1
& operator	3
& x)	6
& later	1
& b)	1
& operation	1
& -1	2
& ~a	2
& enum	1
& r)	4
& earlier	1
& a)	1
& operator;	1
& (Tuesday	1
& 3)	2
& obj1;	1
& 0x7FFFFFFF)	2
& operation,	1
& N-1)==0	1
& source)	1
& operator[]	1
& 1)	1
& (N-1))	1
& 15]	1
& 0x7FFFFF)	1
& 0=	1
& 0x0F)	1
& a=	1
& N-1)==0,N>::p(x);	1
& 1];	1
simple to	1
simple in	1
simple function	2
simple integer	3
simple class	1
simple pointer	1
simple array	2
simple variables	1
simple way	1
simple test	1
simple type	1
simple cases	1
simple processors	1
simple solution	1
simple standard	1
simple cases,	2
simple types	2
simple constructor	1
simple function,	2
simple things	1
simple reductions	1
simple cases.	3
simple algorithm	1
simple tasks	1
simple variable.	2
simple algebraic	2
simple alternative	1
simple expressions.	1
simple variables,	2
simple method.	1
simple regular	1
simple index.	1
simple tasks.	1
simple periodic	3
simple type,	1
simple solution,	1
simple actions	1
instructions to	1
instructions in	1
instructions for	7
instructions that	7
instructions are	7
instructions can	1
instructions or	1
instructions than	1
instructions have	1
instructions at	1
instructions which	1
instructions where	1
instructions cannot	1
instructions rather	1
instructions without	1
instructions out	2
instructions (see	1
instructions AVX	1
instructions add	1
instructions write	1
instructions becomes	1
instructions were	1
instructions require	1
instructions mov	1
instructions during	1
instructions SSE4.1	1
instructions sets.	1
instructions listed	1
instructions SSE4.2	1
instructions MOVNTPS,	1
instructions (MOVNT)	1
instructions executed,	1
processors is	3
processors and	6
processors that	9
processors are	7
processors can	3
processors with	5
processors on	3
processors have	1
processors will	1
processors because	1
processors but	1
processors rather	1
processors without	1
processors available	2
processors (see	1
processors requires	1
processors usually	1
processors prefetch	1
processors (0,	1
processors (when	1
processors properly.	1
available to	2
available in	11
available for	10
available can	1
available if	2
available with	1
available as	1
available use	1
available then	2
available from	8
available at	1
available vector	1
available because	1
available instruction	2
available which	1
available register	1
available registers	1
available options	1
available information.	1
available today.	1
constant is	7
constant a	1
constant to	2
constant and	2
constant that	1
constant can	2
constant =	4
constant with	3
constant data	2
constant vector	1
constant should	1
constant const	1
constant 8	1
constant always	1
constant (see	1
constant single	1
constant known	1
constant needs	1
constant reference	1
constant references	1
constant plus	1
constant propagation	4
constant 5.	1
constant divisor	1
constant n,	1
constant N1	1
constant 3.5	1
constant (2n	1
constant subexpression.	1
constant propagation,	2
constant 2.5,	1
up the	11
up a	4
up to	12
up and	3
up in	3
up if	1
up with	3
up more	1
up then	1
up because	1
up one	1
up cache	2
up into	1
up 64-bit	1
up everything	1
up significantly	1
up multiplications	1
up spaces	1
up include:	1
error is	4
error and	1
error in	1
error for	1
error that	1
error can	1
error //	1
error if	1
error by	1
error code	3
error then	1
error has	1
error return	1
error code.	1
error without	1
error doesn't	1
error known	2
error simply	1
error handling	4
error conditions	1
error message	8
error condition	1
error handling.	1
error handler	1
error condition.	2
error prone.	3
error messages	1
error message.	1
error reporting	1
error reporting.	1
I have	24
I will	3
I want	1
I must	1
I simply	1
I write	2
I don't	2
I consider	1
I once	1
I am	6
I think	1
I believe	2
I die.	1
I tried	1
I guess,	1
I disagree	1
making the	11
making a	8
making it	1
making an	4
making data	1
making floating	2
making i	1
making multiple	1
making two	1
making objects	1
making any	2
making software	2
making critical	1
making sure	3
making another	1
making programs	1
making branches	1
making longer	1
making optimizations	2
making them	1
making clear	1
making highly	1
making plug-ins	1
times the	4
times to	3
times and	7
times in	4
times for	3
times //	1
times with	2
times as	1
times an	1
times may	1
times when	1
times then	2
times because	3
times one	1
times each	3
times faster	3
times cannot	1
times before	1
times less	1
times rather	1
times per	1
times CriticalFunction	1
times faster.	1
times 24	1
times lower;	1
stack is	5
stack and	2
stack in	3
stack for	1
stack can	1
stack when	1
stack memory	3
stack at	1
stack also	1
stack before	2
stack rather	1
stack registers	3
stack always	1
stack ;	2
stack (see	1
stack memory.	1
stack are:	1
stack pointer.	1
stack frame	4
stack Variables	1
stack unwinding	6
stack versus	1
stack (three	1
stack frame,	1
stack frame"	1
stack entries	1
stack unwinding.	1
want the	5
want a	1
want to	34
want it	2
want as	1
want this	2
want when	1
want vectorization	1
want them	1
Example: //	48
Gnu and	3
Gnu or	1
Gnu function	1
Gnu This	1
Gnu compiler	21
Gnu compilers	2
Gnu Intel	1
Gnu C++	2
Gnu 32-bit	2
Gnu 64	1
Gnu libraries	1
Gnu manual	1
Gnu mechanism	1
Gnu compilers.	2
Gnu directives	1
Gnu compiler.	1
Gnu C	2
Gnu compiler,	2
Gnu Comes	1
Gnu utilities	1
Some of	1
Some functions	1
Some other	1
Some compilers	16
Some 64-bit	1
Some software	1
Some systems	4
Some programming	2
Some instructions	1
Some important	1
Some CPUs	1
Some versions	1
Some common	3
Some copy	1
Some programs	1
Some application	1
Some applications	3
Some modules	1
Some STL	1
Some implementations	2
Some developers	1
Some profilers	1
Some guidelines	1
Some early	1
its time	3
its data	1
its size	1
its pointer	1
its b	1
its many	1
its possible	1
its value	2
its variables	1
its return	1
its address	1
its parameters	1
its members	1
its name	1
its own	10
its binary	1
its functions,	1
its final	1
its child	3
its address.	1
its 'this'	1
its value.	1
its family	1
its parameters.	1
its body	1
its mirror	1
its limit,	1
its brand,	1
its arguments.	1
its out-of-	1
its reputation.	1
its simplicity.	1
its address:	1
its API.	1
about the	12
about a	1
about in	1
about function	1
about code	1
about an	1
about this	1
about memory	1
about data	1
about functions	1
about instruction	1
about which	3
about no	1
about pointer	1
about branch	1
about register	1
about how	3
about its	1
about overflow	1
about Linux	1
about supported	1
about whether	1
about mathematical	1
about name	1
about it.	1
about loss	1
about increment	1
about them.	1
about Func1	1
about rounding.	1
about division).	1
about bugs,	1
about investigation	1
important to	21
important and	1
important for	2
important that	3
important or	1
important it	1
important if	1
important on	2
important than	3
important functions	1
important new	1
important method	1
important part	1
important disadvantage	2
important addition	1
important thing	1
important usability	1
important obstacles	1
important work.	1
important distinction	1
important remedy	1
accessed in	11
accessed by	3
accessed with	3
accessed on	2
accessed from	4
accessed most	1
accessed very	1
accessed much	1
accessed through	8
accessed quite	1
accessed after	1
accessed approximately	1
accessed equally	1
accessed backwards	1
accessed sequentially	1
accessed consecutively	1
accessed sequentially.	2
accessed recently	1
accessed non-sequentially	1
accessed column-wise.	1
accessed row-wise,	1
CPUs is	2
CPUs to	1
CPUs and	2
CPUs in	2
CPUs for	1
CPUs that	2
CPUs are	3
CPUs can	4
CPUs or	3
CPUs if	2
CPUs with	6
CPUs have	5
CPUs use	2
CPUs which	1
CPUs such	1
CPUs cannot	1
CPUs without	1
CPUs was	1
CPUs unless	2
CPUs (See	1
CPUs increased	1
CPUs (Intel	1
CPUs optimally.	1
CPUs unequally	1
function. The	13
function. This	5
function. A	2
function. If	1
function. In	2
function. There	1
function. See	1
function. Example:	2
function. But	2
function. Function	1
function. However,	1
function. Using	1
function. Do	1
function. When	1
function. Avoid	1
function. 12.2	1
function. Global	1
function. Copying	1
function. 7.12	1
function. Compile	1
function. Provoke	1
function. Switch	1
function. Sometimes,	1
function. __attribute__((const))	1
function. typeof(CriticalFunction)	1
function. Leaf	1
function. 154	1
extra function	1
extra code	5
extra time	4
extra cache	1
extra software	1
extra register	2
extra code.	3
extra time.	5
extra operations	1
extra instructions	2
extra work	1
extra element	1
extra check	1
extra information	1
extra cost	3
extra framework	1
extra overhead	4
extra resources.	1
extra time,	1
extra iteration	1
extra level	1
extra jump	1
extra bits.	1
extra precautions	1
extra dummy	1
extra complications.	1
extra layer	1
does the	6
does not	28
does have	1
does this	1
does It	1
does floating	2
does some	2
does so	1
does quite	1
does what	1
does not,	1
does .............................................................................	1
does incredibly	1
assembly or	1
assembly on	1
assembly code	7
assembly instruction	1
assembly code.	2
assembly instructions	1
assembly language	11
assembly syntax	1
assembly output	6
assembly programmers	1
assembly language.	5
assembly names.	1
assembly listing	2
assembly output.	1
assembly language".	2
assembly listing.	1
assembly language",	1
assembly language:	1
large to	2
large for	1
large that	1
large or	2
large then	1
large memory	3
large data	7
large because	1
large number	1
large static	1
large array	1
large objects	1
large libraries	1
large part	1
large arrays	2
large shared	1
large block	1
large cost	1
large runtime	2
large expressions	1
large graphics	1
large positive	2
large overhead	2
large libraries.	1
large delay	1
large fraction	1
large arrays.	1
large applications.	1
large object,	1
large arrays,	1
large amounts	1
large delays.	1
must be	21
must have	3
must use	2
must then	1
must make	2
must do	1
must return	1
must always	1
must check	1
must calculate	1
must go	1
must rely	1
must convert	1
must consider	2
must wait	1
must install	1
must clean	1
must begin	1
must compute	1
must warn	1
must bear	1
while the	10
while a	2
while in	1
while it	1
while if	1
while an	1
while you	1
while data	1
while other	3
while loop	3
while all	1
while most	1
while multiple	1
while many	1
while less	1
while pointers	1
while dynamic	1
while execution	1
while another	1
while (i	1
while Pentium	1
while seconds	1
while waiting	1
while (n	1
while simultaneously	1
while high-level	1
while loop,	1
while loops,	1
while (*p	1
while (seconds	1
while (0	1
while he	1
; a	1
; Example	2
; point	1
; double	1
; i	2
; return	2
; add	1
; store	1
; parameter	4
; r	1
; a[i]	1
; start	1
; unused	4
; shift	2
; save	1
; repeat	1
; align	2
; eax	1
; ecx	2
; jump	1
; edx	2
; compare	1
; top	2
; compute	1
; a[i+1]	1
; Induction++;	1
; i++	1
; mangled	2
; restore	1
; mark	1
; mark_end;	1
arrays is	1
arrays of	3
arrays and	6
arrays in	2
arrays that	2
arrays are	10
arrays can	1
arrays //	1
arrays or	1
arrays if	1
arrays by	2
arrays with	3
arrays as	1
arrays It	1
arrays should	2
arrays very	1
arrays even	1
arrays inside	1
arrays automatically	1
arrays bigger	1
arrays require	1
arrays Alignd	1
arrays forwards,	1
work the	1
work to	2
work in	2
work for	2
work that	2
work can	1
work //	1
work it	1
work with	3
work on	7
work as	2
work int	1
work when	1
work only	1
work into	3
work cannot	1
work best	1
work well	2
work needed	1
work load	2
work around	1
work efficiently	1
work automatically.	1
work better.	2
work load.	1
work correctly.	1
work evenly	1
(see page	34
(see p.	5
(see above,	2
(see below)	2
(see below).	2
Windows and	11
Windows in	1
Windows are	1
Windows if	1
Windows by	1
Windows compiler	1
Windows may	1
Windows you	1
Windows program	1
Windows Intel	2
Windows version	1
Windows operating	1
Windows Gnu	3
Windows Linux	1
Windows allows	2
Windows platform	1
Windows platforms.	3
Windows syntax	1
Windows (See	1
Windows Library	1
Windows system.	1
Windows applications.	1
Windows Template	2
Windows 7	1
Windows DLLs	1
Windows 3.x.	1
Windows Server	1
Windows MFC).	1
calls the	5
calls is	1
calls a	2
calls to	8
calls and	4
calls in	4
calls are	1
calls can	1
calls may	2
calls more	1
calls at	1
calls because	1
calls other	1
calls faster	2
calls rather	1
calls another	4
calls it.	1
calls (e.g.	1
calls directly	1
calls exit.	1
calls exit(),	1
calls alternately	1
calculations of	2
calculations to	1
calculations and	1
calculations in	4
calculations are	5
calculations can	1
calculations or	1
calculations with	1
calculations on	5
calculations as	1
calculations may	1
calculations have	1
calculations will	1
calculations then	1
calculations at	1
calculations should	1
calculations into	1
calculations so	1
calculations take	1
calculations without	1
calculations while	2
calculations inside	3
calculations unless	1
calculations piece	1
calculations usually	1
calculations go	1
calculations including	1
calculations whenever	1
calculations simultaneously	1
calculations forms	1
versions of	22
versions and	1
versions for	6
versions are	3
versions with	1
versions have	1
versions should	2
versions without	1
versions even	1
versions work	1
versions #include	1
versions were	1
versions tested	1
versions 7	1
versions alternatingly	1
versions instead.	1
execution is	1
execution of	3
execution to	1
execution and	1
execution by	1
execution may	1
execution time	4
execution then	1
execution time.	3
execution times	1
execution speed	5
execution All	1
execution mechanism	2
execution core	1
execution units.	7
execution units	5
execution units,	1
execution (chapter	1
execution .................................................................................................	1
execution unit.	1
execution speed,	2
execution considerably.	1
avoid the	10
avoid that	2
avoid an	1
avoid this	6
avoid multiple	2
avoid any	1
avoid long	2
avoid these	2
avoid dynamic	3
avoid making	1
avoid virtual	1
avoid running	2
avoid global	1
avoid conversions	2
avoid it.	1
avoid powers	1
avoid this.	2
avoid them.	1
avoid macros	1
avoid modulo	1
avoid hyperthreading	1
avoid hard-to-find	1
result is	7
result of	12
result to	1
result in	5
result can	1
result //	1
result =	2
result if	1
result by	1
result will	3
result then	1
result vector	4
result because	1
result 100	1
result ebx	1
result back	1
result -56	1
result (b+c)	1
processor the	1
processor is	5
processor to	1
processor and	3
processor for	1
processor that	1
processor can	1
processor with	1
processor may	3
processor will	1
processor has	3
processor makes	1
processor model	4
processor core	1
processor models	5
processor core.	3
processor cores.	1
processor performs	1
processor appears	1
processor features.	1
processor model.	1
processor X"	1
processor enters	1
processor X?"	1
processor activates	1
compiled to	4
compiled and	1
compiled in	1
compiled for	8
compiled with	7
compiled on	1
compiled code	3
compiled as	2
compiled when	1
compiled into	1
compiled C++	1
compiled version	1
compiled code.	3
compiled without	5
compiled programming	1
compiled versions	1
compiled three	1
compiled languages	1
compiled C++.	1
An integer	3
An example	1
An object	3
An efficient	1
An array	5
An optimization	4
An even	2
An error	1
An important	1
An allocated	1
An overflow	1
An inline	1
An optimizing	4
An application	1
An expression	3
An implementation	1
An overloaded	1
An alternative	2
An interrupt	1
An OR	1
An enum	1
An appendix	1
An uncached	1
An inferior	1
An experiment	1
An uncaught	1
Use the	5
Use a	5
Use function	1
Use an	2
Use different	1
Use 64-bit	2
Use template	1
Use these	1
Use simple	1
Use Gnu	1
Use CPUs	1
Use assembly	1
Use large	1
Use another	1
Use inline	1
Use intrinsic	1
Use signed	1
Use automatic	1
Use lookup	2
Use appropriate	1
Use whole	1
Use macro	1
Use square	1
Use bitwise	2
Use OpenMP	1
Use 12	1
Use rounding	1
Use macros	1
Use mask	1
Use ReadTSC()	1
Use fastcall	1
Use predefined	1
bytes is	1
bytes of	3
bytes to	1
bytes in	4
bytes can	1
bytes //	1
bytes =	11
bytes or	1
bytes by	1
bytes on	1
bytes then	1
bytes from	1
bytes at	1
bytes should	1
bytes Intel	1
bytes between	1
bytes without	5
bytes AMD	1
bytes byte	1
bytes smaller	1
bytes S1	1
bytes bool	1
bytes smaller.	1
bytes each.	1
bytes alignment,	1
big a	1
big to	1
big and	2
big in	1
big for	1
big that	2
big memory	2
big data	3
big program	1
big loop	1
big floating	1
big objects	2
big software	1
big before	1
big file	1
big arrays	2
big matrix	1
big problem	1
big program.	1
big block	1
big difference	1
big runtime	1
big structures	1
big problem.	1
big enough	3
big waste	1
big blocks	2
big endian	3
big arrays,	1
big mainframe	2
big registration	1
doesn't have	7
doesn't make	1
doesn't call	2
doesn't take	1
doesn't need	5
doesn't work	5
doesn't cause	2
doesn't works	1
doesn't add	1
doesn't automatically	1
doesn't give	1
doesn't know	3
doesn't generate	1
doesn't prevent	1
doesn't handle	1
doesn't occur	1
doesn't delay	1
doesn't matter	2
doesn't depend	1
doesn't compromise	1
doesn't mean	1
doesn't occur.	1
doesn't occur,	1
doesn't support,	1
doesn't provide	1
threads is	2
threads and	1
threads in	4
threads that	2
threads are	5
threads can	2
threads with	6
threads on	1
threads have	3
threads use	1
threads will	1
threads from	1
threads should	1
threads where	1
threads so	1
threads need	1
threads must	1
threads write	1
threads running	1
threads becomes	1
threads writing	2
threads share	1
threads simultaneously.	2
threads Parallelization	1
best and	1
best for	1
best function	1
best if	1
best on	5
best compiler	1
best when	1
best at	1
best compilers	1
best into	2
best possible	4
best performance	3
best way	5
best optimization	1
best optimized	2
best solution	1
best optimizing	1
best implementation	1
best cases.	1
best algorithm	1
best performance.	1
best under	1
best Java	2
best job	1
best suited	1
best optimizer.	1
best algorithm.	1
necessary to	22
necessary in	1
necessary for	2
necessary if	2
necessary when	1
necessary then	1
necessary because	1
necessary functions	1
necessary instruction	1
necessary library	1
necessary (see	1
necessary calculations	1
necessary information	2
necessary here	1
necessary destructors	1
necessary communication	1
necessary cleanup	1
necessary initialization.	1
necessary support.	1
element is	3
element of	1
element to	2
element in	13
element for	1
element if	1
element }	1
element then	1
element Example	2
element has	1
element number	2
element 0	1
element addresses	1
element __m128i	1
element a[i]	1
element outside	1
element level	2
element Instruction	1
element zero.	1
element 63	1
element matrix[r][c]	2
element matrix[c][r]	1
element (approximately):	1
element matrix[c][r].	1
language is	8
language and	5
language in	1
language for	1
language that	3
language with	1
language as	1
language when	1
language will	1
language has	1
language because	1
language also	1
language elements	1
language need	1
language Use	1
language allows	1
language runtime	1
language based	1
language modules	1
language defines	2
language programming,	1
language 11	1
language While	1
language output.	1
language Before	1
language relates	1
language ...............................................................................	1
language gained	1
language output,	1
But the	6
But a	3
But in	2
But it	5
But if	6
But not	1
But an	1
But this	2
But when	1
But program	1
But each	1
But most	1
But there	3
But many	1
But we	2
But these	1
But what	1
But lazy	1
But implementing	1
But beware	3
speed is	7
speed of	7
speed to	2
speed and	1
speed in	1
speed for	1
speed or	5
speed if	1
speed by	3
speed on	1
speed will	1
speed because	1
speed between	3
speed test	1
speed without	1
speed up	2
speed advantage	1
speed here	1
speed Testing	1
speed exceeding	1
speed /O2	1
specific to	1
specific functions	1
specific CPU	7
specific instruction	2
specific size	1
specific pointer	1
specific version	1
specific order	1
specific optimization	1
specific instructions	1
specific processor	1
specific advantage	1
specific parts	1
specific optimizations	1
specific graphics	1
specific load	1
specific calling	1
specific advantages	1
specific size.	1
specific models	1
specific purpose	1
specific places	1
specific profiler.	1
specific event	1
specific recommendation	2
specific bottleneck	1
specific purpose.	1
specific needs.	1
specific literature	1
specific model.	1
specific purpose,	1
specific preferences	1
specific purpose:	1
specific option)	1
specific interval.	1
c is	1
c and	1
c are	1
c can	1
c =	16
c loop	1
c +	8
c <	5
c __m128i	4
c >	1
c (a&&b)	1
c first.	1
c x-xx-----	1
much is	2
much of	1
much on	1
much as	1
much you	1
much time	4
much more	10
much memory	1
much data	2
much faster	2
much less	2
much about	2
much space	1
much longer	3
much higher	2
much faster.	3
much slower	1
much simpler	1
much stronger	1
much faster,	1
single and	3
single or	1
single function	3
single object	2
single branch	1
single call	2
single bit	1
single register	1
single &	1
single instructions	1
single constant	1
single function.	1
single assembly	1
single precision	7
single operation	1
single task	1
single precision.	4
single executable	1
single element.	1
single step	1
single result.	1
single operation.	1
single instruction.	1
single container,	1
single comparison:	1
single result,	1
single session.	1
i; for	6
i; if	1
i; int	1
i; }	10
i; float	6
i; return	1
i; long	1
i; const	1
i; short	2
i; ...	4
i; Here,	1
i; p	1
i; for(i=0;	5
i; 45	1
i; 84	1
These are	2
These function	2
These may	1
These different	1
These functions	2
These two	2
These table	1
These registers	1
These new	1
These systems	1
These cases	1
These instructions	3
These virtual	1
These operators	1
These addresses	1
These problems	1
These complicated	1
These methods	2
These directives	1
These conversions	4
These lines	1
These costs	2
These containers	1
These counters	1
These algorithms	1
These factors	1
These profilers	1
These units	1
These requirements	1
These suffixes	1
These workaround	1
virtual function	9
virtual functions	5
virtual table	4
virtual member	6
virtual void	5
virtual processors	2
virtual function.	1
virtual processor	2
virtual functions.	2
virtual functions,	1
virtual destructor	1
virtual table.	1
virtual machine	1
virtual 53	1
virtual machine.	1
several different	9
several functions	1
several other	1
several clock	2
several variables	1
several times	2
several large	1
several versions	1
several execution	1
several standard	1
several files	1
several branches	1
several applications	1
several examples	1
several advantages	1
several ways	1
several seconds	2
several iterations	2
several factors	2
several hundred	1
several reasons.	1
several years	1
several layers	1
several drivers,	1
several minutes	2
several meanings	1
several stages	1
several flaws:	1
through the	6
through a	20
through function	2
through an	2
through this	1
through multiple	2
through array	1
through pointers	4
through rows	2
through pointers,	1
through 14,	1
common to	3
common for	1
common function	1
common memory	1
common compilers	1
common way	1
common programming	3
common error	1
common language	1
common cause	2
common programs	1
common problems	1
common mathematical	2
common source	1
common string	1
common platforms	1
common math	1
common subexpression	3
common situation	1
common implementations	2
common purposes	1
common names.	1
common pitfalls	1
common obstacles	1
common entry	1
common time-consumers	1
common excuse	1
common subexpressions,	1
common denominator	1
common denominator:	1
common subexpressions	1
common practice	1
common sub-expressions.	1
a, a	4
a, int	1
a, but	1
a, b	1
a, float	1
a, b;	12
a, b,	16
a, bool	4
a, T	1
a, sizeof(b));	1
thread is	3
thread to	2
thread in	2
thread that	2
thread are	1
thread can	5
thread function	1
thread if	3
thread with	1
thread as	1
thread than	2
thread may	1
thread have	1
thread will	3
thread has	1
thread should	1
thread void	1
thread its	1
thread does	1
thread running	1
thread safe	1
thread priority	1
thread jumps	1
thread environment	1
thread steals	1
thread affinity	1
thread scheduler.	1
thread increments	1
etc. is	2
etc. of	1
etc. and	1
etc. in	1
etc. The	4
etc. for	2
etc. are	2
etc. //	1
etc. This	1
etc. may	1
etc. then	1
etc. It	1
etc. at	1
etc. should	1
etc. In	3
etc. There	1
etc. For	1
etc. Use	1
etc. But	2
etc. These	1
etc. #define	1
etc. Optimizing	1
etc. scattered	1
etc. And	1
etc. Whether	1
etc. (Intel	1
etc. SSSE3	1
etc. -msse3	1
etc. Event-based	1
etc. Locked	1
etc. Accessibility	1
etc. Overriding	1
AMD and	17
AMD or	1
AMD only	1
AMD processors	2
AMD CPUs	2
AMD AMD	1
AMD CPUs.	2
AMD math	1
AMD processors,	1
AMD Math	1
AMD Core	1
AMD CodeAnalyst.	2
AMD Opteron	3
AMD LIBM	2
AMD FMA4	1
AMD SSE4A	1
AMD XOP	1
AMD Family	1
compile the	4
compile a	1
compile for	1
compile with	3
compile time	12
compile time.	16
compile them	1
compile time,	1
compile for.	1
compile time?	1
exception is	2
exception in	2
exception for	1
exception or	1
exception then	1
exception so	1
exception without	1
exception handling	17
exception safe	1
exception occurs	2
exception handling.	4
exception ever	1
exception handler	3
exception safe.	1
exception handler,	1
exception handlers	1
allocated is	2
allocated to	1
allocated and	3
allocated in	1
allocated for	1
allocated with	3
allocated memory	5
allocated array	2
allocated objects	4
allocated memory.	2
allocated resources	2
allocated dynamically	4
allocated resources.	1
allocated block.	1
allocated object,	1
allocated memory,	2
allocated resource.	1
allocated separately.	1
allocated dynamically.	2
allocated memory.................................................................	1
small to	1
small and	3
small in	1
small that	2
small or	4
small code	1
small as	1
small x	2
small then	1
small bit	1
small test	1
small part	1
small bits	1
small block	1
small piece	2
small dynamically	1
small loops	1
small fraction	1
small gain	1
small enough	1
small devices	2
small embedded	2
small pieces	2
small devices,	2
small sequences	1
small microcontrollers:	1
small subtasks,	1
small low-power	1
overflow is	3
overflow of	4
overflow and	8
overflow in	1
overflow can	3
overflow or	3
overflow by	1
overflow with	1
overflow on	2
overflow will	1
overflow has	1
overflow but	1
overflow before	1
overflow doesn't	1
overflow Integer	1
overflow never	1
overflow outside	1
overflow condition	2
overflow checks	2
overflow behavior	1
overflow check.	1
+= i	1
+= b;	1
+= n	1
+= x;	2
+= 2;	1
+= 2)	3
+= xn	1
+= 4)	1
+= a[i];	3
+= 8)	4
+= 1.0f;	3
+= i_div_3;	3
+= xxn	1
+= 16)	1
+= TILESIZE)	2
+= 2;}	1
+= list[i];	2
+= A2;	1
+= a[i+1];	1
+= x^n/n!	1
+= Z;	1
+= a[i+2];	1
+= list[i+1];}	1
+= a[i+3];	1
+= sum2;	1
+= 9;	1
integers is	2
integers of	6
integers to	4
integers and	5
integers in	4
integers are	1
integers or	2
integers if	1
integers with	3
integers as	1
integers -	1
integers int	1
integers use	1
integers from	1
integers which	1
integers In	1
integers before	1
integers (see	1
integers simply	1
integers Conversion	1
integers ...................................	1
option is	2
option in	2
option for	10
option that	3
option if	1
option then	1
option only	1
option makes	2
option available.	1
option -fpic	1
option -fno-pic	3
option -fno-builtin	1
option -fpie	2
option "assume	1
option /MT).	1
option -mveclibabi=acml.	1
option -ftrapv,	1
option /QaxAVX	1
option (Windows:	1
option -fwrapv	1
option -read_only_relocs	1
option -mveclibabi=svml.	1
option -Wstrict-overflow=2,	1
good to	2
good for	4
good if	1
good code	1
good as	4
good compiler	4
good at	1
good compilers	2
good performance	2
good way	2
good optimization	1
good optimizing	1
good implementation	2
good development	1
good choice	4
good idea	3
good deal	2
good investment.	1
good performance).	1
good knowledge	1
power of	35
power function	1
power than	1
power using	2
power consumption	1
matrix is	6
matrix a	2
matrix and	1
matrix in	2
matrix for	1
matrix //	4
matrix or	2
matrix on	1
matrix when	2
matrix using	1
matrix size	2
matrix into	1
matrix void	2
matrix line	2
matrix longer	1
matrix 512	1
matrix sizes	1
matrix happen	1
matrix element.	1
matrix line.	1
matrix 96	1
matrix sizes.	1
matrix cell	1
matrix a:	1
Linux is	2
Linux and	13
Linux in	1
Linux The	1
Linux with	1
Linux as	1
Linux than	3
Linux have	1
Linux Intel	3
Linux also	1
Linux operating	1
Linux systems.	1
Linux platform	1
Linux syntax	1
Linux platforms	1
Linux compiler,	1
Linux Shared	1
Linux platforms,	1
Linux __INTEL_COMPILER	1
Linux kernel	1
Linux Align	1
Linux Optimize	1
been a	1
been stored	1
been called	1
been accessed	1
been allocated	1
been replaced	1
been tested	2
been given	1
been reduced	1
been initialized	1
been copied	1
been defined	1
been added	1
been increased	1
been updated	2
been doubled.	1
been loaded.	1
been translated	1
been deallocated.	2
been added?	2
been incremented	1
been lost	1
been incremented,	1
been reordered,	1
been alleviated	1
been identified,	1
been found,	1
been unsatisfied	1
been calculated.	1
been introduced	1
been criticized	1
been brutally	1
been identified.	1
been wasted.	1
been allocated.	1
cause the	6
cause a	4
cause of	3
cause other	1
cause all	1
cause cache	2
cause branch	1
cause large	1
cause overflow	2
cause problems	2
cause caching	1
cause contentions	3
cause errors	1
cause overflow.	2
cause seven	1
cause overflow,	1
cause unpredictable	1
cause delays	1
cause complications	1
cause slight	1
cause severe	1
cause fatal	1
cause holes	1
AVX is	2
AVX and	1
AVX or	2
AVX code	2
AVX int	1
AVX only	1
AVX instruction	9
AVX using	1
AVX double	1
AVX version	2
AVX 32	1
AVX instructions	1
AVX support	3
AVX supported	2
AVX 256	1
AVX instructions.	2
AVX support.	1
AVX part.	2
AVX instr.	1
AVX support,	1
AVX _mm256_permutevar_ps	1
AVX immintrin.h	1
classes is	1
classes and	4
classes in	3
classes that	1
classes are	3
classes can	1
classes //	1
classes or	2
classes with	1
classes on	1
classes than	1
classes use	2
classes void	1
classes like	1
classes #include	1
classes defined	2
classes allocate	1
classes implement	1
classes contain	1
classes Agner's	1
classes Fortunately,	1
classes .............................................................................................	1
classes Whenever	1
classes .....................................................................................................	1
classes looks	1
classes Programming	1
classes (Intel)	1
classes 114	1
classes Nowadays,	1
done the	1
done a	1
done to	1
done in	4
done by	9
done with	9
done on	1
done as	1
done at	4
done only	2
done every	1
done simply	1
done outside	1
done under	1
done manually	1
done implicitly	1
therefore the	1
therefore a	1
therefore be	5
therefore it	1
therefore as	2
therefore not	4
therefore more	2
therefore possible	1
therefore cannot	1
therefore need	1
therefore important	1
therefore necessary	3
therefore likely	1
therefore certain	1
therefore count	1
therefore recommended	2
therefore preferably	3
therefore difficult	1
therefore fail	2
therefore equal	1
therefore becoming	1
therefore safer	1
therefore suffer	1
therefore conclude	1
precision is	3
precision of	1
precision to	1
precision in	3
precision for	1
precision or	4
precision if	1
precision by	1
precision on	1
precision as	1
precision than	1
precision when	2
precision takes	1
precision variables	2
precision before	1
precision without	1
precision constant	1
precision (see	1
precision calculations	2
precision conversion	2
precision requires	1
precision require	1
precision math	1
precision constant.	1
precision math.	2
precision division,	1
precision (80	1
line is	1
line to	1
line in	1
line that	3
line can	1
line or	2
line if	1
line by	2
line with	1
line when	1
line will	1
line then	1
line at	2
line has	1
line size	7
line number	1
line doesn't	1
line would	1
line options	1
line size.	1
line containing	1
line size,	1
line separately	1
line (in	1
line covers	1
line provokes	1
line 29.	1
line written.	1
works is	1
works and	1
works in	2
works for	1
works by	1
works with	1
works on	2
works more	1
works then	1
works only	8
works most	3
works less	1
works even	1
works best	5
works well	2
works particularly	1
works automatically.	1
works best.	1
works differently.	1
works correctly.	1
works somewhat	1
works (gcc	1
optimized is	1
optimized and	1
optimized for	8
optimized function	2
optimized if	1
optimized by	1
optimized code	5
optimized as	1
optimized program	1
optimized Intel	1
optimized version	2
optimized software	1
optimized part	1
optimized versions	1
optimized mathematical	1
optimized function,	1
optimized math	1
optimized to:	1
optimized away	1
optimized well,	1
optimized programs.	1
optimized away.	2
optimized further.	1
optimized yet.	1
inside the	23
inside a	7
inside can	1
inside one	1
inside another	1
inside your	1
inside containers	1
inside {}	1
inside sqaure:	1
inside square:	1
manual is	5
manual for	5
manual or	1
manual on	1
manual will	1
manual at	3
manual does	1
manual 3:	7
manual 2:	3
manual 5:	6
manual currently	1
manual discusses	1
manual 4:	2
/ b	1
/ 2	1
/ 4	1
/ 8	1
/ unsigned	1
/ c;	1
/ means	1
/ b)	3
/ 3;	1
/ 10;	3
/ CodeGear	1
/ 16;	2
/ b2;	1
/ (number	1
/ 64)	1
/ sar	1
/ jl	1
/ c)	1
/ (line	1
/ x64	1
/ shr	1
/ 4;	2
/ (b1*b2);	1
/ nfac;	1
/ 1.2345;	1
/ b1;	1
/ 1.2345);	1
/ (b1	1
/ 0x40)	1
/ 3.0;	1
/ Embarcadero	1
explained in	9
explained on	18
explained at	1
explained below.	4
explained below	1
explained above,	2
explained above.	2
calculated the	2
calculated in	3
calculated by	6
calculated with	2
calculated as	4
calculated more	1
calculated from	4
calculated at	2
calculated using	1
calculated faster	1
calculated much	1
calculated fast	1
calculated value.	1
calculated result.	1
calculated twice	1
calculated first,	1
calculated once,	1
calculated internally	1
calculated independently.	1
calculated asa	1
calculated as(a	1
calculation is	1
calculation of	18
calculation and	1
calculation in	3
calculation may	1
calculation time	3
calculation more	1
calculation time.	1
calculation implemented	1
calculation becomes	1
calculation requires	1
calculation here	1
calculation depends	2
calculation faster.	1
calculation capabilities.	1
}; The	2
}; //	10
}; if	2
}; int	2
}; class	3
}; void	5
}; char	1
}; S1	1
}; struct	2
}; Bitfield	2
}; Weekdays	2
}; Replace	1
}; 7.23	1
}; 52	1
}; vector()	1
128 function	1
128 because	1
128 double	1
128 float	1
128 bit	5
128 SSE2	5
128 bits	2
128 bytes	4
128 128	2
128 below.	1
128 ==	1
128 bytes.	1
128 SSE	1
128 Is16vec8	1
128 13.7	1
128 Is8vec16	1
128 Iu32vec4	1
128 17.4	1
128 Is32vec4	1
128 I64vec2	1
128 Vec2uq	1
128 Iu8vec16	1
128 Iu16vec8	1
uses the	3
uses a	7
uses of	2
uses by	1
uses an	2
uses more	4
uses CPU	1
uses most	1
uses many	1
uses 32-bit	1
uses 64	1
uses pointers	1
uses new	1
uses 32	1
uses much	1
uses few	1
uses XMM	1
uses position-independent	1
uses ebx	1
uses logarithms	1
uses 90%	1
uses SSE3.	1
uses (live	1
four function	1
four cache	3
four double	1
four float	1
four elements	1
four single	1
four integers	1
four parameters	2
four numbers	2
four results	1
four consecutive	1
four kinds	1
four cores	1
four (or	1
four additions	1
four parameters.	1
four B	1
four places	1
four physical	1
four objects.	1
four floats	1
four bits,	1
four numbers,	1
four multiplications.	1
four float.	1
four x^n	1
four G	1
four R	1
four float's	2
four sums	1
four floats.	1
functions. The	10
functions. This	3
functions. A	6
functions. It	3
functions. There	1
functions. You	1
functions. See	1
functions. I	1
functions. Many	1
functions. Avoid	1
functions. Alternatively,	1
functions. 80	1
functions. While	1
functions. 7.4	1
functions. 7.27	1
functions. 9.4	1
functions. Sum1	1
functions. Time-	1
another function	5
another by	1
another memory	1
another vector	1
another loop	1
another C++	1
another version	1
another way	1
another dynamic	1
another part	1
another error	1
another thread	4
another source	1
another addition	1
another function,	1
another compiler.	1
another class.	1
another thread.	2
another problem.	1
another array.	1
another dispatched	1
another security	1
another computer.	1
another exception.	1
another module.	3
another platform.	1
parameters a	1
parameters of	1
parameters to	5
parameters and	1
parameters that	1
parameters are	15
parameters on	2
parameters then	2
parameters because	1
parameters Function	1
parameters would	1
parameters replaced	1
parameters ...............................................................................................	1
parameters typedef	1
parameters Vec4f	1
parameters differ	1
get the	5
get a	8
get as	1
get an	1
get x	1
get time	1
get more	1
get used	1
get one	1
get no	1
get library	1
get any	1
get very	1
get access	1
get 0	1
get its	1
get four	1
get next	1
get reliable	1
get reproducible	1
get ReadTSC	1
get rid	3
get answers	1
b; a	11
b; for	1
b; //	4
b; if	2
b; This	1
b; int	4
b; A	1
b; will	1
b; }	2
b; double	1
b; b	2
b; static	1
b; In	1
b; c	1
b; Here,	1
b; d	2
check the	3
check is	1
check for	16
check that	2
check if	8
check on	2
check makes	1
check before	1
check whether	1
check after	1
advantageous the	1
advantageous to	19
advantageous in	2
advantageous for	1
advantageous or	1
advantageous if	5
advantageous by	1
advantageous as	1
advantageous when	1
advantageous then	1
advantageous because	1
advantageous vectorization	1
advantageous if,	1
implemented a	2
implemented in	11
implemented by	2
implemented with	4
implemented on	2
implemented as	10
implemented simply	1
implemented like	1
implemented either	2
implemented internally	1
problem is	7
problem of	1
problem and	2
problem in	1
problem that	2
problem are	1
problem can	2
problem if	2
problem by	3
problem with	5
problem when	2
problem then	1
problem has	1
problem only	1
problem cannot	1
problem void	1
problem here	1
problem since	1
known to	5
known in	1
known with	1
known as	2
known then	1
known from	1
known at	17
known CPU	1
known which	1
known before	2
known hardware	1
known processors.	1
known type,	1
(i =	29
(i <	3
(i >=	2
(i %	1
solution is	14
solution a	1
solution of	2
solution to	4
solution in	3
solution for	1
solution that	1
solution can	2
solution on	1
solution may	1
solution you	1
solution because	2
solution where	1
solution would	1
container is	2
container for	3
container that	2
container be	1
container are	1
container or	1
container than	1
container may	1
container class	6
container elements	1
container rather	1
container without	1
container classes	8
container class.	1
container classes.	4
container expandable,	1
advantage of	22
advantage to	4
advantage in	4
advantage that	2
advantage if	1
advantage because	1
advantage comes	1
Function to	8
Function with	1
Function pointer	2
Function return	2
Function libraries	2
Function template	1
Function pointers	2
Function calls	1
Function parameters	7
Function addresses	1
Function inlining	4
Function names	1
Function level	1
Function prototype	1
Function Assembly	1
support the	3
support a	1
support of	1
support and	2
support in	1
support for	14
support this	1
support then	1
support from	1
support different	1
support which	1
support static	1
support 32-bit	1
support calls	1
support processor	1
support intrinsic	1
support it.	1
support anyway.	1
support SSE.	1
supported in	3
supported by	13
supported on	3
supported at	1
supported instruction	7
supported return	2
supported 128-bit	1
supported CriticalFunction	2
supported 256-bit	1
supported fprintf(stderr,	1
eight to	4
eight in	1
eight or	1
eight different	1
eight floating	3
eight elements	4
eight times	1
eight threads	1
eight single	1
eight integers	1
eight numbers	1
eight consecutive	12
eight 16-bit	2
eight logical	1
operators is	1
operators and	1
operators The	1
operators for	3
operators that	3
operators are	3
operators on	1
operators will	1
operators because	1
operators using	1
operators also	1
operators new	1
operators An	1
operators Integer	2
operators &&	1
operators produce	2
operators (e.g.	1
operators Modern	1
operators .............................................................................................	1
operators &,	3
operators ......................................................................	1
operators &&,	1
operators (&	1
operators (&&	1
few of	1
few or	1
few more	1
few functions	1
few compilers	1
few clock	7
few cases	2
few instructions	1
few times	1
few extra	1
few arrays	1
few programs	1
few cases,	1
few branches	1
few unused	1
few lines	1
few resources.	1
few parameters.	1
few machine	1
few files,	1
few pitfalls	1
few lines.	1
few restrictions	1
few kilobytes	1
few comments	1
few decades	1
few places.	1
contains the	4
contains a	4
contains only	3
contains integer	1
contains no	2
contains floating	1
contains many	4
contains any	2
contains calls	1
contains several	1
contains optimized	1
contains various	1
contains automatic	1
contains examples	1
contains similar	1
contains debug	1
contains well-tested	1
contains natural	1
contains complete	1
contains i/2+r.	1
contains writeable	1
whether the	12
whether a	1
whether to	4
whether it	6
whether an	1
whether you	2
whether there	1
whether they	2
whether r	1
whether p	1
whether vectorization	1
whether CriticalFunction	1
whether others	1
i++) is	1
i++) for	1
i++) {	23
i++) a[i]	2
i++) sum	3
i++) f	1
i++) b[i]	1
i++) List[i]++;	1
i++) matrix[FuncRow(i)][FuncCol(i)]	1
list is	5
list of	11
list and	1
list in	1
list can	1
list or	2
list with	1
list from	1
list has	1
list should	1
list float	1
list takes	1
list does	1
list (see	1
list every	1
list needs	1
list points	1
list causes	1
list plus	1
would of	1
would be	15
would not	1
would have	2
would make	2
would only	1
would all	1
would double	1
would take	1
would cause	1
would like	1
would give	1
would assume	1
would know	1
would require	1
would still	1
would otherwise	1
likely is	1
likely to	26
likely in	1
likely that	3
likely be	1
likely case	1
structure is	3
structure of	3
structure to	1
structure and	3
structure in	2
structure that	1
structure are	1
structure or	11
structure then	1
structure has	1
structure object	1
structure where	1
structure 8	1
structure };	1
structure y	1
structure needed?	1
doing the	7
doing a	1
doing an	1
doing different	1
doing floating	2
doing multiple	4
doing two	2
doing some	1
doing type	1
doing calculations	1
doing mathematical	1
doing optimizations	1
doing things	1
doing whole	1
doing out-of-order	1
doing parallel	1
doing something	1
doing arithmetic	1
doing exactly	1
doing equivalent	1
doing calculations,	1
doing divisions.	1
run the	4
run a	2
run in	5
run with	2
run on	3
run an	1
run at	2
run only	1
run most	1
run two	2
run many	1
run any	1
run faster	3
run time.	1
run eight	1
run slightly	1
run slower	1
run optimally	1
calculate the	14
calculate a	1
calculate that	1
calculate it	2
calculate than	1
calculate when	1
calculate which	1
calculate each	2
calculate how	1
calculate its	1
calculate element	1
calculate xn	1
calculate self-relative	1
calculate *p+2	2
calculate (c+d)	1
calculate (1./1.2345)	1
calculate pow(x,10)	1
inline the	3
inline a	1
inline and	1
inline or	1
inline function	3
inline int	3
inline this	1
inline functions	1
inline double	1
inline float	1
inline void	6
inline assembly	5
inline __m128i	4
inline keyword	1
inline T	1
every function	2
every code	1
every time	15
every clock	2
every call	2
every element	1
every four	1
every intermediate	1
every three	1
every second	1
every iteration	1
every access.	1
every version.	1
every call.	1
every millisecond.	1
standard is	1
standard for	1
standard function	2
standard library	1
standard libraries	2
standard template	2
standard user	1
standard stack	2
standard solution	1
standard container	1
standard calling	1
standard operations.	1
standard tasks	2
standard header	1
standard PC	4
standard specifies	2
standard C,	2
standard API	1
standard PC's	1
standard PCs.	1
standard says	1
standard 754	1
hardware is	1
hardware in	1
hardware for	1
hardware can	1
hardware often	1
hardware functions.	1
hardware support	3
hardware implementation	3
hardware platform	5
hardware access.	1
hardware CPU.	1
hardware definition	7
hardware conditions.	1
hardware interfaces	1
hardware exceptions.	1
hardware circuits	1
hardware design.	1
hardware identification.	1
1 is	2
1 to	1
1 and	1
1 for	3
1 if	1
1 by	1
1 -	1
1 from	1
1 b	1
1 64	1
1 short	1
1 (see	1
1 1	2
1 :	1
1 cache.	1
1 byte	3
1 fraction	2
1 ebx,	1
1 eax,	2
1 int64_t	1
1 char,	1
1 Introduction	2
1 0.5ns.	1
: b	2
: c	2
: b;	1
: 1;	2
: public	9
: b)	1
: 8;	1
: (bb[i]	1
: 23;	1
: 0]	1
: "memory"	1
: "=m"(n)	1
: x(0)	1
: EXCEPTION_CONTINUE_SEARCH)	1
: 52;	1
: 63;	1
: "m"(x)	1
: 2.6f;	1
: 15;	1
: 2.5f;	1
: 11;	1
add the	5
add a	2
add to	1
add or	1
add an	1
add b	1
add i	1
add 2	1
add elements	1
add new	1
add extra	1
add add	1
add counter	1
add what	1
add n	1
add unused	1
add mov	1
add statements	1
add ebx,	2
add functionality	1
add cmp	2
add Divide	1
add sar	1
add dummy	1
add eax,1	1
mode is	1
mode and	4
mode or	4
mode if	2
mode than	2
mode program	3
mode has	1
mode because	3
mode where	1
mode so	1
mode 4	1
mode 8	1
mode rather	1
mode program.	1
mode unless	2
mode SSE	1
mode (SSE2):	1
mode (SSE):	1
mode Parameter	1
store the	9
store is	1
store it	1
store x	1
store data	1
store all	2
store each	1
store many	1
store objects	1
store result	1
store An	1
store intermediate	2
store aligned	1
store operation	1
store strings	1
store unaligned	3
store help	1
store application-specific	1
store forwarding	2
values is	1
values of	6
values in	3
values are	3
values or	1
values if	1
values by	1
values than	4
values have	1
values then	1
values at	2
values because	1
values before	3
values per	1
values far	1
values first,	1
All the	2
All of	2
All in	1
All code	1
All you	1
All functions	1
All C++	1
All software	1
All pointers	1
All these	4
All dynamic	1
All calculations	1
All common	1
All optimizing	1
All addresses	1
All intermediate	1
All source	1
All public	1
All x86	1
All global	1
All modern	1
All identical	1
All newer	1
All non-static	1
All accesses	1
All disturbing	1
sign is	1
sign of	2
sign and	1
sign bit	17
sign must	1
sign :	1
sign bit:	3
sign bit.	2
sign :1;//signbit	2
sign bit,	1
copy the	3
copy is	1
copy a	2
copy of	5
copy that	1
copy matrix	2
copy Function	1
copy constructor	7
copy protection	4
copy constructors	3
copy constructor,	1
copy constructors,	1
optimizing the	2
optimizing a	1
optimizing for	2
optimizing //	1
optimizing compiler	10
optimizing CPU	1
optimizing compilers	3
optimizing library	1
optimizing execution	1
optimizing code,	1
optimizing database	1
optimizing away	2
optimizing features,	1
optimizing application-specific	1
optimizing ...............................................................................................	1
optimizing multithreaded	1
optimizing University	1
memory. The	3
memory. This	5
memory. A	1
memory. It	3
memory. If	3
memory. See	2
memory. Example:	2
memory. These	1
memory. Function	2
memory. Most	1
memory. No	1
memory. Variables	1
memory. They	1
memory. One	1
memory. Big	1
memory. Copying	1
memory. 9.6	1
memory. Efficient	1
well the	2
well in	1
well it	1
well if	2
well with	1
well on	4
well as	8
well use	1
well only	2
well before	1
well optimized	2
well spend	1
well specify	1
well developed	1
well tested,	1
well documented.	1
well thought-through	1
information is	2
information to	2
information in	3
information for	2
information that	1
information can	1
information stored	1
information about	18
information elsewhere	1
simply the	1
simply a	5
simply to	1
simply by	9
simply not	1
simply an	1
simply no	1
simply makes	1
simply optimized	1
simply don't	1
simply put	2
simply predicted	1
simply stores	2
simply zero.	1
simply treated	1
simply identical.	1
simply prints	1
able to	30
able do	1
certain to	6
certain that	5
certain Intel	1
certain operating	1
certain programming	1
certain instructions	1
certain calculations	1
certain parts	1
certain options	1
certain conditions	1
certain tasks	1
certain kinds	1
certain optimizations.	1
certain rules	1
certain limit	1
certain restrictions	2
certain modification	1
certain events,	2
certain tolerance.	1
certain interval:	1
cycles to	3
cycles in	1
cycles for	1
cycles that	1
cycles if	2
cycles on	2
cycles than	1
cycles more	2
cycles then	1
cycles at	1
cycles before	1
cycles rather	1
cycles even	1
cycles counter	1
cycles after	2
cycles later	1
cycles per	5
cycles whenever	1
cycles spent	1
cycles (depending	1
... a	1
... for	6
... can	1
... //	3
... if	2
... int	1
... }	6
... then	1
... There	1
... return	2
... Here,	1
... Here	1
... Conversions	1
... x.a	1
... ~C1();	1
... list[i	1
addresses is	2
addresses of	4
addresses to	2
addresses in	5
addresses for	2
addresses that	2
addresses are	4
addresses with	1
addresses at	1
addresses all	1
addresses divisible	4
addresses (i.e.	1
addresses 0x2F00,	1
counter is	5
counter and	2
counter in	2
counter that	1
counter can	4
counter //	2
counter by	1
counter with	1
counter when	1
counter then	1
counter should	1
counter i	1
counter variables	1
counter before	1
counter (see	1
counter inside	1
counter becomes	1
counter outside	1
counter ahead	1
counter //=2*A	1
shared object	10
shared objects	6
shared variable	1
shared between	5
shared resources	1
shared object.	4
shared object,	2
shared objects),	1
count is	11
count to	1
count and	4
count that	2
count on	1
count as	1
count may	1
count has	1
count should	1
count before	1
count how	2
count up	1
count certain	1
count down	1
count (ArraySize)	1
program. The	8
program. This	5
program. In	1
program. See	1
program. An	1
program. All	1
program. Many	1
program. Avoid	1
program. 3	1
program. 6	1
program. Add	1
program. Reading	1
program. 16.2	1
program. Small	1
program. Whole	1
program. Weighing	1
program. During	1
program. Frequent	1
program. Application	1
quite a	3
quite as	1
quite efficient	1
quite often	2
quite simple	1
quite likely	1
quite well	1
quite certain	1
quite fast	1
quite difficult	1
quite inefficient	2
quite inefficient.	1
quite time-consuming	1
quite fast.	1
quite expensive	1
quite costly	1
quite efficient,	1
quite powerful	1
quite inefficient,	1
quite dramatic	1
quite tedious	2
quite substantial.	1
quite convenient.	1
quite often.	1
quite ingenious	1
used. a	1
used. The	4
used. A	3
used. It	5
used. If	1
used. You	1
used. See	2
used. For	1
used. Example:	1
used. An	1
used. However,	1
used. We	1
used. Such	1
used. Dynamic	1
used. No	1
used. Do	1
used. Conversion	1
used. Conversions	1
used. Whenever	1
used. Web	1
files to	1
files and	6
files for	2
files that	1
files are	4
files or	1
files on	2
files when	1
files from	2
files into	3
files For	1
files need	1
files while	1
files etc.	1
files generated	1
files smaller.	1
files (*.ini	1
recommended to	27
recommended for	1
recommended that	1
recommended if	1
intermediate code	11
intermediate data	1
intermediate object	1
intermediate code.	2
intermediate file	2
intermediate calculations	1
intermediate result	2
intermediate files	1
intermediate expression	1
intermediate results	4
intermediate code,	2
intermediate version.	1
intermediate results,	1
fast and	2
fast in	2
fast that	2
fast if	2
fast on	3
fast as	6
fast floating	1
fast 32-bit	1
fast access	1
fast whether	1
fast division	1
fast ways	1
fast math	1
fast anyway	1
fast approximate	2
fast enough.	2
allocation is	5
allocation of	2
allocation and	5
allocation in	1
allocation for	1
allocation can	2
allocation with	1
allocation may	1
allocation when	1
allocation using	1
allocation also	1
allocation process	1
allocation are:	2
allocation Dynamic	1
allocation Any	1
allocation Objects	1
allocation ......................................................................................	1
allocation (new	1
(int i	13
(int *	2
(int &	1
(int a,	5
(int x)	2
(int n	1
(int x,	1
(int n)	3
(int a[],	1
write the	4
write is	1
write a	2
write to	1
write that	2
write it	2
write instruction	1
write less	1
write instructions	4
write expressions	2
write your	1
write #pragma	1
write causes	1
write directly	1
write configuration	1
write FatalAppExitA(0,"Array	1
write 2.0/3.0	1
write _mm_add_epi16(a,b).	1
write if(!a	1
optimize the	3
optimize a	1
optimize for	1
optimize code	1
optimize as	1
optimize this	3
optimize example	1
optimize performance	1
optimize register	1
optimize both	1
optimize well.	1
optimize away	4
optimize Modern	1
optimize across	3
optimize anything	1
optimize access,	1
optimize caching.	1
optimize ............................................................................................	1
optimize anything,	1
optimize specifically	1
above the	4
above for	1
above can	1
above code	5
above example	4
above example,	4
above template	1
above doesn't	1
above line	1
above methods	1
above examples	2
above advantages	1
above sections	1
above table.	1
above security	1
However, the	8
However, a	1
However, in	1
However, it	1
However, if	1
However, with	1
However, you	1
However, this	4
However, most	1
However, there	5
However, C++	1
However, such	1
However, we	2
However, these	1
was the	1
was it	1
was not	1
was an	1
was more	1
was used	1
was called	1
was less	1
was done	1
was certain	1
was never	1
was zero	1
was too	1
was called.	1
was unknown	1
was executed.	2
was down	1
was hardly	1
was saved	1
was split	1
was programmed.	2
was manipulated	1
was started.	1
was assigned	1
was coded.	1
was developed.	1
was originally	1
both the	5
both are	1
both can	1
both have	1
both functions	1
both static	2
both 32-bit	1
both Windows	2
both AMD	1
both get	1
both Intel,	1
both positive	2
both cases.	1
both during	1
both loops	1
both compiler,	2
both parent	1
both operands.	1
both cheaper	1
both positive.	1
both 16-bit,	1
programs to	1
programs and	1
programs that	3
programs can	1
programs if	1
programs with	1
programs use	4
programs when	1
programs because	1
programs but	1
programs should	1
programs where	1
programs they	1
programs must	1
programs compiled	2
programs implemented	1
programs automatically	1
programs search	1
programs spend	1
programs do.	1
programs written	1
programs installed	1
problems is	1
problems of	2
problems and	7
problems for	1
problems that	4
problems are	1
problems or	1
problems if	2
problems with	1
problems you	1
problems when	1
problems because	1
problems should	1
problems into	1
problems mentioned	1
problems associated	1
problems separating	1
unless the	15
unless you	8
unless there	3
unless they	1
unless your	1
optimal to	5
optimal in	2
optimal for	1
optimal on	1
optimal code	2
optimal from	1
optimal because	2
optimal only	1
optimal number	1
optimal version	1
optimal branch	1
optimal solution	2
optimal platform	2
optimal choice	1
optimal algorithm	3
optimal order.	1
optimal decomposition	1
space is	4
space of	1
space to	2
space and	1
space in	4
space for	1
space can	1
space or	1
space by	2
space on	1
space than	1
space has	1
space used	1
space where	1
space never	1
space becomes	2
space were	1
space explicitly	1
space 91	1
cases, the	6
cases, a	1
cases, for	1
cases, it	2
cases, an	1
cases, you	2
cases, but	3
cases, double	1
cases, there	4
cases, even	1
cases, while	1
cases, however,	3
cases, composite	1
cases, regardless	1
else if	3
else on	1
else than	1
else {	22
else being	1
lot of	24
lot to	3
lot in	1
Integer to	2
Integer size	1
Integer variables	1
Integer operations	2
Integer constant	1
Integer overflow	1
Integer power	1
Integer operators	1
Integer multiplication	4
Integer division	8
Integer expressions	1
Integer XMM	1
Integer constants	1
Integer sizes	1
Integer algebra	1
Integer division......................................................................................................	1
dispatching to	2
dispatching and	3
dispatching in	6
dispatching can	1
dispatching or	1
dispatching with	1
dispatching on	2
dispatching then	1
dispatching only	2
dispatching should	1
dispatching There	1
dispatching works	1
dispatching #include	1
dispatching mechanism	1
dispatching are:	1
dispatching explicitly	1
dispatching ....................................................................................	1
dispatching 125	1
particular code	2
particular compiler	1
particular memory	2
particular CPU	2
particular instruction	2
particular integer	1
particular set	1
particular branch	1
particular programming	1
particular part	1
particular processor	1
particular advantageous	1
particular application	1
particular piece	1
particular brand	1
particular application.	2
particular reduction	1
particular part.	1
particular purpose.	1
particular weakness	1
particular meaning,	1
particular subtask	1
particular situation,	1
microprocessor is	2
microprocessor and	2
microprocessor in	1
microprocessor The	1
microprocessor that	1
microprocessor can	3
microprocessor it	1
microprocessor with	2
microprocessor has	4
microprocessor because	1
microprocessor doesn't	1
microprocessor hardware	2
microprocessor core	1
microprocessor jump	1
microprocessor ...........................................................................................	1
microprocessor handles	1
microprocessor microarchitecture.	1
microprocessor wastes	1
replace the	6
replace a	6
replace it	2
replace an	1
replace this	6
replace all	1
replace integer	1
replace such	1
replace arrays	1
replace j	1
replace u[1]	1
next time	2
next instruction	1
next each	1
next example	1
next two	1
next new	1
next function.	1
next processor	1
next line	1
next four	1
next model	1
next higher	1
next section	1
next instance	1
next generation	2
next chapter	1
next block.	1
next element.	1
next vector,	1
next step	1
next step.	1
next calculation.	1
next paragraph.	1
next year.	1
next section.	1
branches is	1
branches to	1
branches and	4
branches in	1
branches The	1
branches for	1
branches that	4
branches are	2
branches can	1
branches or	1
branches as	1
branches may	1
branches at	1
branches such	1
branches works	1
branches inside	1
branches every	1
branches separately	1
branches Eliminate	1
branches Remove	1
typically in	1
typically have	3
typically use	2
typically used	1
typically takes	3
typically between	1
typically stored	1
typically 64	2
typically take	1
typically 0	1
typically small	1
typically uses	1
typically get	1
typically implemented	1
typically aligned	1
typically look	1
typically loaded	1
typically happens	1
typically specified	1
typically 30	1
typically thinks	1
operator is	7
operator that	2
operator //	1
operator will	1
operator }	1
operator which	1
operator +	1
operator does	1
operator These	1
operator here	2
operator i++	1
operator forces	1
operator (bitwise	1
operator less.	1
operator (|)	1
operator ++i	1
operator %.	1
operator (&)	1
operator (^)	1
preferably in	1
preferably be	17
preferably with	1
preferably have	2
preferably using	1
preferably 32	1
preferably avoid	1
preferably implemented	1
preferably aligned	1
preferably isolated	1
1; for	2
1; //	2
1; }	13
1; return	1
1; You	1
1; n	1
1; r	2
1; list[i+2]	2
1; x[1]	1
1; a[1]	1
1; 69	1
Therefore, the	6
Therefore, it	11
Therefore, you	6
Therefore, make	1
Therefore, 64-bit	1
Therefore, both	1
Therefore, micro-	1
Mac The	1
Mac code	1
Mac Intel	1
Mac operating	1
Mac systems	2
Mac programs	1
Mac systems.	1
Mac platforms.	1
Mac Windows,	1
Mac platforms	1
Mac OS	10
Mac allow	1
Mac systems,	1
Mac platform.	1
Mac OS,	1
Mac OS.	1
Mac platform,	1
multiplication is	2
multiplication of	1
multiplication and	1
multiplication are	1
multiplication can	1
multiplication or	1
multiplication by	4
multiplication may	1
multiplication will	1
multiplication }	1
multiplication at	1
multiplication but	1
multiplication takes	2
multiplication would	1
multiplication Integer	1
multiplication units.	1
multiplication here:	1
multiplication .............................................................................................	1
multiplication b[i]*c[i],	1
multiplication (27	1
multiplication (20	1
multiplication prior	1
application is	2
application to	2
application that	1
application can	1
application if	1
application with	1
application then	1
application program	3
application has	1
application software	1
application code.	1
application uses	2
application program.	3
application programs	1
application programmer	1
application depends	1
application software.	1
application itself	1
application integration,	1
application programmer.	1
x) {	27
automatically and	1
automatically in	4
automatically or	1
automatically if	1
automatically by	1
automatically when	2
automatically then	1
automatically but	2
automatically check	1
automatically replace	2
automatically generate	1
automatically choose	1
automatically come	1
automatically detect	2
automatically prefetch	1
automatically deallocated	1
automatically thanks	1
automatically reduces	1
automatically download	1
see the	4
see in	1
see that	3
see if	4
see which	3
see page	2
see how	1
see whether	2
see below.	1
see my	1
see this.	1
see shortly.	1
see http://www.agner.org/optimize/	1
see emulated	1
caching is	6
caching and	1
caching for	1
caching more	3
caching will	1
caching very	1
caching less	6
caching problems	2
caching becomes	2
caching conditions	1
caching inefficient.	2
allows the	6
allows a	1
allows it	1
allows you	3
allows only	1
allows multiple	1
allows less	1
allows common	1
allows bigger	1
allows parallel	1
allows 256-bit	1
allows compile-time	1
allows larger	1
allows overriding	1
allows it,	1
allows us	2
allows direct	1
allows "__attribute__((visibility("hidden")))".	1
sets the	4
sets is	2
sets a	2
sets and	2
sets are	2
sets can	2
sets have	2
sets A	1
sets from	1
sets all	2
sets where	1
sets 4	1
sets rather	1
sets enable	1
sets include	1
sets Microprocessor	1
expression is	3
expression a	3
expression to	1
expression that	7
expression or	2
expression with	1
expression b	2
expression contains	1
expression y	1
expression better	1
expression list[i]	1
expression -(-a)	1
expression (Tuesday	1
expression -a	1
implementation is	5
implementation of	6
implementation in	2
implementation for	1
implementation can	1
implementation if	2
implementation may	1
implementation when	1
implementation rather	1
implementation works	1
implementation uses	2
implementation would	1
implementation dependent.	1
implementation analogous	1
Most of	3
Most compiler	1
Most compilers	11
Most C++	2
Most performance	1
Most copy	1
Most reductions	1
Most modern	1
Most implementations	1
Most programmers	1
Most caches	1
Most IDE's	1
Most importantly,	1
complicated to	1
complicated and	3
complicated in	1
complicated that	1
complicated if	1
complicated code	1
complicated because	1
complicated functions	1
complicated address	1
complicated template	1
complicated cases	2
complicated solution	1
complicated implementation	3
complicated mathematical	1
complicated process	1
complicated algorithm	1
complicated algebraic	1
complicated algorithms	1
complicated techniques	1
complicated reductions.	1
complicated criteria	1
handling is	4
handling a	1
handling and	1
handling in	2
handling for	2
handling can	1
handling then	1
handling takes	1
handling even	1
handling system	2
handling option	1
handling support	1
handling unless	1
handling errors	1
handling cleanup	1
handling information.	1
handling Exception	2
handling ................................................................................	1
handling /EHs-	1
like the	1
like a	5
like to	1
like and	1
like an	1
like this	1
like example	1
like adding	1
like square	1
like this:	6
like -(-a)	1
like pressing	1
like throw(A,B,C)	1
like string,	1
like sin.	1
like sqrt,	1
like these,	1
dependency chains	7
dependency chain	7
dependency chain.	6
dependency chains.	3
dependency chains,	2
dependency chain,	1
members is	1
members of	9
members to	1
members in	1
members that	1
members are	1
members can	1
members or	2
members with	1
members may	1
members come	1
members within	1
members share	1
members (properties)	2
members last:	1
members individually.	1
their time	1
their CPU	1
their clock	1
their software	1
their 32-bit	1
their address	1
their execution	1
their uses	1
their values	1
their own	2
their CPUs.	1
their index	1
their stack.	1
their smart	1
their implementations	1
their live	4
their actual	1
their 23	1
their functionality.	1
their live-ranges	1
their workplace	1
their superior	1
__m128i a	2
__m128i b	2
__m128i two	2
__m128i const	4
__m128i c	2
__m128i zero	2
__m128i c2	2
__m128i defines	1
__m128i bc	2
__m128i mask	2
__m128i LoadVector(void	3
__m128i LoadVectorA(void	1
Using the	5
Using a	1
Using an	1
Using vector	4
Using integer	2
Using double	1
Using multiple	1
Using performance	2
Using pointers	1
Using complicated	1
Using intrinsic	3
Using templates	1
Using unaligned	1
Using hexadecimal	1
Boolean vector	2
Boolean variables	5
Boolean operations	1
Boolean operators	5
Boolean XMM	1
Boolean operands	2
Boolean vector.	1
Boolean expressions.	2
Boolean algebra	1
Boolean operands.	1
Boolean output.	1
Boolean vectors,	1
Boolean algebra,	1
Boolean NOT	1
cache. The	10
cache. This	2
cache. If	2
cache. These	1
cache. Most	1
cache. Using	1
cache. We	1
cache. When	1
cache. Compilers	1
cache. 2.2	1
cache. Single	1
cache. Files	1
cache. Bit-fields	1
cache. Multithreaded	1
don't have	7
don't need	5
don't even	1
don't want	1
don't get	1
don't support	1
don't count	1
don't know	1
don't modify	1
don't vectorize	1
don't care	1
don't depend	1
don't understand	1
don't think	1
don't send	1
256 int	1
256 double	1
256 float	1
256 clock	1
256 bit	2
256 unsigned	1
256 16	1
256 bits	2
256 short	1
256 times	1
256 AVX	2
256 &&	1
256 AVX2	4
256 F32vec4	1
256 bytes)	1
256 uint64_t	1
256 Kbytes	1
256 Vec32c	1
256 Vec32uc	1
intrinsic function	2
intrinsic vector	1
intrinsic functions	12
intrinsic instructions	1
intrinsic function.	1
intrinsic functions.	3
intrinsic hardware	1
intrinsic vectors	1
intrinsic functions,	3
methods of	1
methods to	1
methods and	1
methods in	1
methods for	4
methods are	5
methods or	1
methods if	1
methods with	1
methods may	1
methods have	1
methods then	1
methods only	1
methods also	1
methods described	1
methods could	1
methods mentioned	1
methods depend	1
signed and	5
signed or	5
signed with	1
signed than	1
signed when	2
signed integer	4
signed variable	1
signed before	1
signed integers	2
signed integers.	1
signed number.	1
signed number,	1
model the	1
model is	4
model and	1
model that	1
model with	1
model will	1
model has	1
model used	1
model number	1
model where	1
model work	1
model numbers	2
model comes	1
model N	1
model number.	3
model numbers,	1
model N+1	1
model N-1	1
model fast=2	1
development of	2
development and	1
development are	1
development time	2
development more	1
development time.	1
development work	1
development methods	1
development process	2
development time,	1
development models	1
development tool	2
development tools.	3
development process.	1
development tools	2
development environment	1
development kit	1
development tools,	1
mathematical functions	8
mathematical code.	1
mathematical operations	1
mathematical calculations	2
mathematical functions.	3
mathematical applications	1
mathematical calculations.	3
mathematical iterations	1
mathematical tasks.	1
mathematical calculations,	1
mathematical purity.	2
mathematical notion	1
never be	3
never use	1
never used	2
never takes	1
never return	1
never stored	1
never uses	1
never used.	2
never becomes	1
never called.	3
never designed	1
never interrupt	1
never spend	1
never modified	1
never occurs,	1
never throw	1
never changed.	1
never exceeds	1
never respond	1
separate for	1
separate function	2
separate from	1
separate version	1
separate file	1
separate dynamic	2
separate function.	1
separate threads	2
separate thread	5
separate modules	1
separate C	1
separate containers	1
separate module	1
separate storage.	1
separate layers	1
separate subroutine	1
separate executables	1
separate module,	1
block the	2
block is	2
block of	3
block to	1
block and	2
block for	2
block that	2
block or	1
block than	1
block then	1
block from	1
block should	1
block size	1
block into	1
block every	2
block containing	1
block turns	1
name is	1
name of	2
name and	2
name in	1
name for	3
name that	1
name as	3
name at	1
name cannot	1
name ;	1
name depending	1
name Instruction	1
name Intrinsic	1
name ?Func@@YAXQAHAAH@Z	1
name mangling	1
name mangling.	1
name "position-independent	1
name _alloca)	1
name ;startofFunc	1
systems. The	7
systems. A	2
systems. It	1
systems. If	2
systems. There	1
systems. Some	2
systems. All	1
systems. Mac	1
systems. Floating	1
systems. 10	1
systems. 3	1
systems. Virtual	1
systems. 14	1
systems. Applications	1
systems. Today	1
systems. 67	1
put the	8
put a	5
put an	1
put into	1
put there	1
put file	2
put something	1
put away	1
put time-consuming	1
put 80	1
put seldom	1
put measurement	1
put time-	1
needs the	1
needs a	2
needs of	1
needs to	14
needs an	1
needs only	1
needs all	1
needs one	2
needs them.	1
needs careful	1
y =	17
y will	1
y into	1
y +	4
y &&	1
y *=	1
conversion is	2
conversion of	1
conversion to	2
conversion and	1
conversion //	3
conversion time	1
conversion A	1
conversion from	3
conversion takes	4
conversion between	1
conversion often	1
conversion instructions	1
conversion Conversion	2
conversion Conversions	1
conversion generates	1
c; a	5
c; The	1
c; for	2
c; //	2
c; int	1
c; }	2
c; double	2
c; b	2
c; };	2
c; ...	2
c; y	1
c; Here,	1
c; Is16vec8	1
c; x[0]	1
#include directives	1
#include directives.	1
#include <stdio.h>	2
#include <dvec.h>	2
#include "vectorclass.h"	2
#include <emmintrin.h>	2
#include "asmlib.h"	2
#include <xmmintrin.h>	2
#include <ia32intrin.h>	1
#include <excpt.h>	1
#include "xmmintrin.h"	1
#include <float.h>	1
#include <pmmintrin.h>	1
#include <malloc.h>	1
#include <intrin.h>	1
#include "instrset_detect.cpp"	1
#include <asmlib.h>	1
#include <math.h>	1
various function	1
various functions	1
various other	1
various instruction	1
various efficient	1
various optimization	2
various programming	1
various methods	1
various options	1
various ways	8
various things	1
various discussion	1
various algebraic	1
various profilers	1
various alternatives	1
various corrections	1
disadvantage is	5
disadvantage of	12
disadvantage for	1
disadvantage that	3
disadvantage if	2
disadvantage when	1
high and	1
high for	1
high that	3
high then	1
high speed	1
high power	2
high precision	2
high overhead	1
high repeat	1
high processing	1
high priority	1
high level	3
high priority.	2
high resolution	1
high degree	1
high complexity	1
high price,	1
zero is	1
zero and	3
zero in	1
zero for	1
zero that	1
zero //	1
zero =	2
zero or	2
zero if	1
zero by	2
zero than	1
zero }	1
zero at	1
zero We	1
zero whenever	1
zero within	1
zero flag	1
zero flags	1
zero memset(a,	1
Microsoft and	2
Microsoft or	1
Microsoft compiler	4
Microsoft C++	2
Microsoft Table	1
Microsoft compilers.	1
Microsoft directives	1
Microsoft Intel,	1
Microsoft platform	1
Microsoft compiler.	2
Microsoft Visual	5
Microsoft Constant	1
Microsoft Comes	1
Microsoft Foundation	1
what the	5
what is	3
what a	2
what it	2
what if	1
what you	3
what instruction	1
what class	1
what they	1
what r	1
what kind	1
what fits	2
what happens	1
parameter is	6
parameter of	1
parameter to	2
parameter and	1
parameter can	1
parameter has	1
parameter should	1
parameter rather	1
parameter comes	1
parameter transfer	5
parameter 2:	1
parameter 1:	2
parameter $B1$1:	1
division is	2
division to	1
division and	1
division in	1
division by	8
division with	1
division takes	3
division take	1
division c	1
division Integer	1
division Floating	1
division prevents	1
division faster.	1
division ...........................................................................................	1
reference is	2
reference to	12
reference can	1
reference or	2
reference if	1
reference may	1
reference makes	1
reference cannot	1
reference allows	1
reference instead:	1
reference parameters).	1
source is	1
source of	4
source and	1
source code	2
source compiler	1
source so	1
source code.	3
source file	1
source files	3
source code,	1
source library.	1
source file.	2
source files.	1
source annotation	2
cost is	2
cost of	11
cost to	5
cost in	3
cost because	1
cost whenever	1
cost anything	1
running the	2
running a	1
running and	1
running in	7
running on	5
running this	1
running when	1
running multiple	1
running two	1
running on,	1
running simultaneously	1
running on.	1
running at,	1
automatic CPU	5
automatic check	1
automatic dispatching	1
automatic vectorization	4
automatic updates	1
automatic vectorization.	5
automatic prefetching	1
automatic parallelization.	2
automatic parallelization	1
automatic vectorization,	1
automatic CPU-dispatching	1
automatic updates,	1
resources of	1
resources and	1
resources for	1
resources that	1
resources are	5
resources than	8
resources from	1
resources should	1
resources cannot	1
resources ..........................................................................................	1
resources Writes	1
resources cleaned	1
resources locally	1
induction variable	10
induction variables	9
induction variables.	1
induction variable.	2
induction variables:	1
reason is	4
reason to	5
reason for	4
reason that	1
reason why	8
reason is,	1
dispatcher to	1
dispatcher in	2
dispatcher that	1
dispatcher function	4
dispatcher then	1
dispatcher should	3
dispatcher function.	3
dispatcher does	1
dispatcher 128	1
dispatcher based	1
dispatcher checks	1
dispatcher changes	1
dispatcher signal	1
dispatcher treats	1
dispatcher updated.	1
n is	4
n to	2
n and	1
n =	2
n with	1
n from	1
n <	1
n bits	1
n 0	1
n <<	1
n here	1
n factorial	1
n additions	1
n <=	1
n places	1
n being	1
n >>=	1
n floats:	1
string is	4
string of	1
string to	1
string and	1
string or	1
string as	1
string functions	3
string classes	2
string functions.	1
string instructions.	1
string length	1
string search	1
string searching	1
string constants,	2
string manipulation	1
string classes,	1
programmer to	10
programmer in	1
programmer that	1
programmer can	2
programmer may	1
programmer has	1
programmer does	1
programmer typically	1
programmer gets	1
programmer choosing	1
programmer forgets	1
programmer can.	1
programmer hasn't	1
three to	1
three or	1
three different	1
three functions	1
three clock	1
three times	2
three versions	1
three functions.	1
three values	1
three aligned	1
three ways	2
three things	1
three conditions	1
three times.	1
three branches.	1
three times,	1
three clauses	1
three clauses:	1
three parts:	1
three advantages:	1
three levels	1
better to	2
better and	1
better on	1
better than	3
better use	1
better at	2
better because	1
better version	1
better result	1
better processor	1
better solution	1
better support	1
better metaprogramming	1
better solution.	1
better backup	1
better explains	1
better understanding	1
better performing	1
better standardization	1
keyword is	3
keyword to	1
keyword can	1
keyword has	2
keyword static	2
keyword also	1
keyword makes	1
keyword __restrict	1
keyword volatile	1
keyword far	1
keyword static,	4
keyword __fastcall	1
keyword specifies	1
keyword tells	1
keyword __thread	1
keyword wherever	1
efficient. The	5
efficient. This	1
efficient. If	2
efficient. 64-bit	1
efficient. In	2
efficient. There	1
efficient. You	2
efficient. 64	1
efficient. Most	1
efficient. Dynamic	1
efficient. Do	1
efficient. Variables	1
efficient. Access	1
efficient. Extra	1
efficient. Simple	1
efficient. Splitting	1
lookup is	2
lookup in	1
lookup for	1
lookup can	1
lookup or	1
lookup if	1
lookup }	1
lookup at	1
lookup table	3
lookup cannot	1
lookup operations	1
lookup Using	1
lookup process	1
lookup tables	3
lookup Lookup	1
lookup table:	2
lookup mechanisms	1
end of	8
end in	1
end with	1
end when	1
end user	4
end up	1
end user.	5
end users	1
end user's	1
applications to	1
applications and	1
applications that	2
applications are	1
applications can	1
applications it	1
applications with	2
applications have	1
applications use	2
applications because	1
applications such	1
applications need	1
applications without	1
applications even	1
applications run	1
applications running	1
applications require	1
applications (e.g.	1
applications spend	1
applications force	1
below. The	5
below. This	1
below. There	1
below. You	1
below. Microsoft	1
below. Make	1
below. Many	1
below. Shared	2
below. Intrinsic	1
below. Position-independent	1
below. Dispatch	1
below. 126	1
below. Signed	1
below. Devirtualization	1
below. 3.7	1
below. Installing	1
below. Cannot	1
below. Those	1
&& is	1
&& a	2
&& to	1
&& and	1
&& b	2
&& i	1
&& b;	1
&& expression	1
&& true	1
&& list[i]	1
&& false	1
&& SIZE	1
&& z	1
&& !a	1
&& expression,	1
&& a<c)	1
&& !b)	1
&& !b	1
&& b<c	1
&& WriteFile(handle,	1
&& b<c)	1
| a	1
| b	1
| operations	1
| 0	2
| b;	1
| operator	1
| -1	2
| Wednesday	2
| operator;	1
| (~a&c)	2
| Friday)	1
| (b&c)	1
| ((C	1
| ((B	1
| Friday))	1
| 0x3F800000;	1
| (C	1
| (B	1
| 0x8040);	1
Make the	5
Make a	8
Make functions	1
Make all	1
Make pointer	1
Make two	1
Make array	1
Make sure	2
Make dynamic	1
Make calls	1
Make three	1
We can	15
We may	1
We cannot	1
We take	1
We want	2
We must	1
We might	1
We took	1
examples of	8
examples in	3
examples for	1
examples are	2
examples on	1
examples have	1
examples will	1
examples all	1
examples where	1
examples we	1
examples I	1
examples explain	1
examples exist.	1
char a	3
char const	1
char 8	5
char 64	2
char 16	2
char short	1
char 128	2
char 256	1
char (or	1
char pointers.	1
char string[100],	2
char pointers).	1
char abc;	1
difference is	2
difference in	7
difference for	2
difference between	9
difference less	1
difference whether	1
difference lies	1
addition is	1
addition of	1
addition to	4
addition and	2
addition with	2
addition on	1
addition then	1
addition has	1
addition takes	2
addition before	1
addition every	3
addition depends	1
addition units,	1
addition unit,	1
addition to)	1
data. The	8
data. This	3
data. A	4
data. It	1
data. Use	2
data. Therefore,	1
data. Extra	1
data. 148	1
data. That	1
data. Multidimensional	1
too many	1
too long	1
too important	1
too large	1
too big	2
too much	3
too small	2
too little	1
too long.	1
too slow.	1
too fragmented.	1
too big.	1
too small.	1
too fine	1
too high.	1
too late.	1
too worried	1
too much.	1
too small,	1
mechanism is	3
mechanism of	1
mechanism to	1
mechanism in	3
mechanism that	1
mechanism can	3
mechanism may	1
mechanism because	1
mechanism should	1
mechanism called	1
mechanism even	1
mechanism works	2
mechanism allows	1
mechanism stores	1
mechanism relies	1
mechanism executes	1
Table of	2
Table //	2
Table lookup	2
Table 8.1	1
Table 12.5.	1
Table 8.1.	1
Table 9.2.	1
Table 18.2.	1
Table 12.4.	1
Table 7.2.	1
Table 9.1.	1
Table 9.3.	1
Table 13.1.	1
Table 12.1.	1
Table 12.3.	1
Table 7.1.	1
Table 18.1.	1
Table 2.1.	1
Table 18.3.	1
Table 12.2.	1
runtime of	1
runtime if	1
runtime from	1
runtime address	1
runtime libraries	1
runtime type	4
runtime check	1
runtime framework	3
runtime dispatch	1
runtime here	1
runtime DLL	2
runtime polymorphism	1
runtime frameworks	1
runtime frameworks,	1
runtime frameworks.	1
runtime polymorphism:	1
runtime DLL's	1
needed a	1
needed in	5
needed for	5
needed if	2
needed by	1
needed from	1
needed because	1
needed only	1
needed before	2
needed even	1
needed after	1
needed anyway.	1
needed _mm_shuffle_epi8	1
means of	3
means to	1
means that	14
means are	1
means not	1
means integer	1
means avoid	1
means modulo.	1
last the	1
last in	2
last time	2
last all	1
last cache	1
last 8	1
last time.	1
last element	1
last line	1
last byte	8
last index	2
last vector.	1
last member.	1
byte of	3
byte =	2
byte at	16
byte longer	1
parts of	21
parts only.	1
|| is	1
|| are	1
|| b	1
|| i	1
|| b;	1
|| b)	1
|| true	1
|| false	1
|| !a	1
|| expression.	1
|| Day	2
|| (a&&c)	2
|| (a&&b&&c)	2
|| (!a&&c)	2
|| b))	1
|| defined(__GNUC__)	1
|| (b&&c)	1
|| (!a&&b)	1
> and	1
> b	3
> 0;	1
> 0	3
> 256	1
> y	1
> 0,	2
> b)	1
> 0)	2
> v.f	1
> largest_abs)	1
> abs(v.f)	1
> -b	1
> 1.0)	1
> v.i	1
> v.i)	1
types of	9
types to	1
types The	1
types or	2
types with	1
types because	1
types such	1
types cannot	2
types Unfortunately,	1
types (See	1
types available.	1
types ..............................................................................................	1
expressions and	2
expressions for	1
expressions that	1
expressions are	1
expressions or	1
expressions on	1
expressions as	1
expressions than	2
expressions may	2
expressions when	1
expressions using	1
expressions also	1
expressions where	1
expressions rather	1
expressions (see	1
expressions like	1
expressions Automatic	1
expressions Induction	1
expressions (except	1
difficult to	17
difficult for	4
difficult cases	1
set. The	6
set. This	1
set. A	1
set. It	1
set. If	3
set. These	1
set. Therefore,	1
set. Make	1
set. Do	1
set. 120	1
set. Aligning	1
set. 13.6	1
set. More	1
set. Neither	1
set. High	1
instead of	22
compilers. The	3
compilers. //	2
compilers. This	2
compilers. If	1
compilers. Intel	1
compilers. See	1
compilers. Some	1
compilers. Use	1
compilers. #include	1
compilers. We	1
compilers. Several	1
compilers. Dispatch	1
compilers. Fastcall	1
compilers. 2.5	1
compilers. 8.3	1
compilers. Wikipedia	1
compilers. (The	1
compilers. Mixing	1
transferred to	1
transferred in	12
transferred by	1
transferred on	2
transferred as	3
transferred from	2
transferred at	1
longer in	1
longer than	3
longer time	8
longer used	1
longer size	1
longer time.	4
longer used.	2
longer response	1
longer loop-	1
after the	8
after it	2
after this	1
after all	3
after each	2
after they	1
after debugging	1
after executing	2
after jumping	1
after exceptions:	1
read the	4
read and	3
read or	2
read this	1
read from	5
read because	1
read one	1
read into	1
read before	1
read operations	1
read about	1
read four	1
give the	7
give a	2
give it	1
give you	1
give each	1
give some	1
give overflow	1
give higher	1
give almost	1
give inconsistent	1
give annoyingly	1
give misleading	1
give -2.0	1
give infinity.	1
Each of	1
Each function	1
Each code	2
Each compiler	1
Each time	1
Each cache	2
Each object	1
Each type	1
Each element	2
Each thread	4
Each line	1
Each dependency	1
Each graphics	1
Each instance	1
Each 128-bit	1
becomes the	1
becomes a	2
becomes more	3
becomes faster	1
becomes bigger	1
becomes smaller	1
becomes easier	1
becomes invalid	2
becomes inefficient.	1
becomes fragmented	2
becomes simpler	1
becomes inconsistent	1
becomes full.	1
becomes noticeable.	1
becomes contiguous.	1
becomes bulky	1
aligned to	1
aligned //	1
aligned or	3
aligned by	6
aligned at	1
aligned integer	2
aligned arrays	2
aligned operands	2
aligned #pragma	2
aligned Assume	1
directives and	2
directives for	2
directives that	1
directives are	4
directives when	1
directives which	1
directives do	1
directives 32	1
directives Some	1
directives work	2
directives around	1
directives ..............................................................................................	1
directives .........................................................................................	1
directives Preprocessing	1
directives (everything	1
requires the	1
requires a	4
requires that	4
requires an	1
requires only	2
requires no	1
requires static	1
requires several	1
requires support	1
requires alignment	1
requires OS	1
requires log	1
requires compilation	1
requires n-1	1
optimizations is	1
optimizations of	2
optimizations in	3
optimizations that	3
optimizations with	1
optimizations on	2
optimizations you	2
optimizations when	1
optimizations such	2
optimizations possible	1
optimizations across	2
optimizations automatically,	1
graphics function	3
graphics on	1
graphics library	1
graphics objects	1
graphics application	1
graphics framework	2
graphics processors.	1
graphics operation	1
graphics calculations.	1
graphics processing	3
graphics frameworks,	1
graphics card	1
graphics accelerator	2
graphics coprocessor	1
graphics cards,	1
public and	1
public data	2
public functions	2
public variable	2
public variables	2
public variables.	1
public CHello	2
public C0	1
public CParent<CChild1>	2
public CGrandParent	1
public B2	1
public B1	1
public CParent<CChild2>	1
public B1,	1
public symbols,	1
public: int	3
public: float	1
public: static	4
public: void	5
public: virtual	4
public: ...	1
public: B2	1
public: c1()	1
public: SafeArray()	1
framework is	1
framework and	2
framework in	1
framework for	1
framework that	2
framework are	1
framework can	1
framework as	1
framework may	1
framework should	1
framework between	1
framework must	1
framework typically	1
framework Most	1
framework based	1
framework sometimes	1
framework still	1
framework itself,	1
framework requiring	1
look in	1
look at	10
look different	1
look up	4
look like	4
look clumsy	1
linking is	5
linking to	1
linking and	3
linking for	1
linking makes	2
linking cannot	1
linking rather	1
linking works	1
linking are:	2
linking (e.g.	1
linking includes	1
linking (remove	1
linking (multithreaded)	1
Many of	2
Many function	1
Many CPU	1
Many compilers	1
Many Intel	1
Many software	3
Many 32-bit	1
Many optimization	1
Many libraries	1
Many processors	1
Many CPUs	1
Many copy	1
Many programs	1
Many containers	1
Many algebraic	1
Many programmers	1
Many advices	1
Many services	1
processors. The	4
processors. A	1
processors. It	1
processors. In	1
processors. There	2
processors. See	1
processors. AMD	1
processors. Many	1
processors. 5	1
processors. Supports	1
processors. On	1
processors. Other	1
processors. Explicit	1
processors. Consider	1
processors. Hyperthreading	1
processors. Henry	1
processors. Details	1
actually be	1
actually more	1
actually has	1
actually called	1
actually making	1
actually doing	1
actually add	1
actually able	1
actually quite	2
actually used.	1
actually needed	1
actually reduce	1
actually points	1
actually is.	1
actually increase	1
actually reducing	1
actually adds	1
actually hidden	1
actually implies	1
actually throws	1
Intel, even	1
Intel, Gnu	3
Intel, AMD	13
Intel, Microsoft	2
Intel, PathScale	1
Intel, Microsoft,	1
linked function	1
linked from	1
linked into	2
linked library	1
linked libraries	1
linked list	6
linked together	2
linked either	1
linked lists	1
linked list.	3
linked together.	1
linked lists.	1
x; for	3
x; //	1
x; This	2
x; int	2
x; x	1
x; }	1
x; float	1
x; const	1
x; ...	1
x; n	1
x; public:	1
x; Here,	1
x; Note	1
x; __asm	1
x; nfac	1
x; *(int*)&x	1
x; x.f	1
microprocessors is	3
microprocessors and	1
microprocessors in	2
microprocessors that	1
microprocessors are	6
microprocessors can	1
microprocessors have	2
microprocessors when	1
microprocessors from	1
microprocessors without	1
microprocessors work.	1
microprocessors have.	1
load the	4
load is	2
load a	2
load time	1
load more	1
load all	1
load into	1
load time.	2
load several	1
load aligned	1
load unaligned	3
load address.	2
control the	2
control it	1
control no	1
control branch	5
control instructions	1
control statement	1
control condition	2
control instructions.	1
control branch.	2
control ..............................................................................................	1
control Microprocessors	1
control condition:	1
control tool.	1
assume the	1
assume is	1
assume that	17
assume no	1
100; //	1
100; int	2
100; i	2
100; float	3
100; i++)	9
100; S1	1
100; x++)	2
numbers is	2
numbers of	2
numbers to	1
numbers and	2
numbers in	3
numbers are	3
numbers can	1
numbers as	1
numbers at	1
numbers because	1
numbers simply	1
numbers form	1
numbers mean	1
platform is	2
platform and	1
platform The	1
platform for	1
platform with	2
platform not	1
platform has	1
platform n.a.	1
platform software	1
platform _WIN64	1
platform .......................................................................................	1
platform _M_IX86	2
platform _WIN32	1
platform ...........................................................................................	1
platform 2.1	1
platform __GNUC__	1
platform independence,	1
later and	1
later in	1
later //	1
later with	1
later instruction	9
later Intel	1
later reads	1
later deleted	1
later ported	1
later maintenance.	1
later discovers	1
later __svml_expf4	1
together and	1
together in	5
together The	1
together are	2
together if	1
together with	1
together on	1
together should	4
together into	1
together near	1
together Cache	1
together ......................................	1
dispatch is	1
dispatch to	1
dispatch by	1
dispatch on	2
dispatch branch	1
dispatch branches	1
dispatch mechanism	6
dispatch Automatic	1
dispatch process.	1
dispatch methods.	1
dispatch strategies........................................................................................	1
dispatch strategies	1
dispatch decision	1
dispatch mechanisms,	1
calling the	4
calling a	1
calling function	2
calling more	1
calling from	1
calling program	1
calling any	1
calling method	1
calling conventions	2
calling itself	1
calling conventions.	3
calling vector::reserve	1
calling WritePrivateProfileString,	1
your code	2
your compiler	1
your program	4
your optimization	2
your programming	2
your application	1
your own	5
your program,	1
your software.	1
your modifications	1
own function	1
own memory	1
own data	1
own CPU	1
own set	1
own address	1
own error	2
own allocated	1
own container	1
own block	1
own stack.	1
own graphical	1
own profiling	1
own IDE.	1
own research,	2
own initiative	1
own error-handling	1
own caller,	1
declared in	4
declared or	1
declared by	1
declared with	2
declared as	1
declared const	1
declared inside	6
declared outside	1
declared whenever	1
declared volatile	1
declared volatile.	1
XMM and	1
XMM vector	1
XMM register	1
XMM registers	10
XMM vectors	1
XMM registers.	1
XMM register.	1
XMM (vector)	3
XMM registers;	1
second by	1
second way	1
second result	1
second application	1
second induction	1
second operand	4
second thing	1
second generation	3
second step	2
second step.	1
second sum,	1
second source,	1
second operand.	1
second sub-vector	1
shows the	2
shows a	2
shows that	2
shows an	1
shows this	1
shows which	1
shows first	1
shows how	8
shows whether	1
shows what	1
interface is	2
interface to	2
interface and	2
interface can	1
interface than	1
interface library	3
interface elements	1
interface framework	2
interface calls.	1
interface frameworks	1
interface etc.,	1
interface frameworks.	1
interface framework...........................................................................	1
interface (OnIdle	1
improve the	11
improve this	1
improve cache	1
improve performance	1
improve speed	1
improve optimizations	1
improve efficiency	1
improve performance.	1
improve search	1
improve efficiency.	1
higher for	2
higher than	2
higher instruction	5
higher number	1
higher clock	1
higher address	1
higher priority	2
higher level	1
higher risk	1
higher bits.	1
higher speed.	1
higher due	1
higher resolution	1
bigger and	1
bigger if	1
bigger than	10
bigger memory	3
bigger vector	1
bigger software	1
bigger systems.	1
bigger vectors	1
bigger segments	1
vectors of	5
vectors and	1
vectors are	1
vectors if	1
vectors then	1
vectors do	1
vectors into	1
vectors There	1
vectors SSE2	1
vectors must	1
vectors requires	1
vectors AVX2	1
vectors SSE3	1
vectors RGB	1
vectors .......................................................	1
vectors FMA3	1
Floating point	20
AVX2 is	1
AVX2 and	1
AVX2 //	1
AVX2 int	1
AVX2 instruction	2
AVX2 float	1
AVX2 long	1
AVX2 short	1
AVX2 256	1
AVX2 Table	1
AVX2 Mathematical	1
AVX2 _mm256_i64gather_pd	1
AVX2 _mm_i64gather_pd	1
AVX2 _mm256_i32gather_epi32	1
AVX2 _mm_i32gather_ps	1
AVX2 _mm256_i64gather_epi32	1
AVX2 _mm_i32gather_epi32	1
AVX2 _mm_i64gather_epi32	1
AVX2 _mm256_i32gather_ps	1
piece of	17
piece in	1
piece by	1
piece at	1
divisible by	20
<< and	1
<< 1;	2
<< 2;	2
<< list[i]	1
<< 4,	1
<< 4)	3
<< "Hello	2
<< 5.	1
<< "Error:	2
<< 23;	1
<< 6);	1
<< x.f;	1
<< endl;	1
Here, the	7
Here, it	1
Here, you	3
Here, each	1
Here, there	1
Here, we	1
Here, I	2
Here, /	1
Here, y	1
Here, log(2.0)	1
x86 and	3
x86 instruction	3
x86 processors	1
x86 CPUs	1
x86 platform	1
x86 CPUs.	1
x86 platforms.	4
x86 platforms	1
x86 family	3
x86 systems).	1
process is	3
process of	1
process to	1
process and	1
process can	2
process or	2
process may	1
process when	1
process because	1
process which	1
process should	2
process There	1
process where	1
process running	1
binary code	1
binary data	1
binary value	1
binary executable	1
binary search	1
binary integer,	1
binary representation	3
binary form	1
binary tree	3
binary code).	1
binary search,	1
binary tree.	1
binary decimals	1
binary digits.	1
binary trees,	1
know the	1
know in	1
know for	1
know that	6
know if	1
know how	4
know whether	1
know what	3
know about.	1
512 bits	2
512 matrix	2
512 512	5
512 AVX512	4
512 kb	1
512 2048	1
512 matrix.	1
512 378.7	1
512 520	1
512 kb,	1
generate the	1
generate a	5
generate an	5
generate floating	1
generate multiple	1
generate many	1
generate any	1
generate relative	1
generate relocations	1
generate interrupts	1
generate -128,	1
advantages of	12
advantages and	2
advantages that	2
advantages when	1
advantages over	2
r is	3
r in	1
r are	1
r =	2
r +	2
r <	4
r ;	1
r points	3
r ebx,	1
r places	1
usually the	1
usually not	1
usually faster	1
usually stored	1
usually called	2
usually take	1
usually much	1
usually done	1
usually requires	1
usually higher	1
usually predicted	1
usually inlined	1
usually unroll	1
usually share	1
usually included	1
usually divided	1
usually 32.	1
usually dealt	1
results of	2
results in	5
results for	1
results are	4
results or	1
results if	1
results as	1
results when	1
results should	1
results were	1
results printf("\n%2i	1
b, and	1
b, c	1
b, c;	8
b, temp;	1
b, c,	8
storage is	3
storage of	2
storage and	1
storage are	1
storage on	1
storage A	1
storage should	1
storage order	1
storage Most	1
storage methods	1
storage Variables	2
storage (e.g.	1
storage space.	1
storage p.	1
storage principles	1
old memory	1
old data	1
old version	1
old operating	2
old processors	1
old CPUs	1
old block	1
old microprocessors	2
old CPUs.	1
old computer	1
old Pentium	2
old version.	1
old C-style	1
old DOS	1
old fashioned	2
reduce the	4
reduce a	1
reduce int	1
reduce this	3
reduce other	1
reduce example	1
reduce any	1
reduce some	1
reduce simple	1
reduce speed	1
reduce complicated	1
reduce various	1
reduce them	1
reduce (a*b*c)+(c*b*a)	1
goes the	2
goes to	5
goes in	1
goes from	1
goes one	1
goes into	1
goes many	1
goes faster	1
goes up	1
goes through	2
goes another	1
goes automatically	1
goes randomly	1
union is	3
union can	3
union {	10
union Bitfield	1
union {double	1
union forces	1
0, b	1
0, c	2
0, b;	1
0, last	3
0, c,	1
0, _EM_OVERFLOW);	2
0, sum2	1
0, s3	1
0, s2	1
0, sum;	1
0, (a&b)	1
0, s1	1
0, sizeof(a));	2
0, sizeof(list));	1
called. The	5
called. This	3
called. A	1
called. It	1
called. If	1
called. There	1
called. You	1
called. I	1
called. Example:	1
called. Therefore,	1
called. Unfortunately,	1
called. Lazy	1
called. 118	1
10 is	1
10 -	2
10 page	1
10 double	2
10 *	1
10 clock	3
10 elements	1
10 times	1
10 Gnu	1
10 means	1
10 μs	1
10 ms	1
10 2.6	1
10 Multithreading	1
10 Multithreading..............................................................................................................	1
based on	18
based mainly	1
choose the	7
choose a	2
choose to	3
choose an	1
choose this	1
choose other	1
choose one	1
choose between	1
choose either	1
choose between.	1
options to	2
options and	1
options in	1
options for	2
options that	1
options are	2
options at	1
options All	1
options Table	1
options relevant	1
options prevent	1
options turned	3
options -S	1
options ...................................................................................	1
feature is	5
feature for	2
feature that	3
feature on	1
feature will	1
feature into	1
feature called	3
feature uses	1
feature was	1
feature information,	1
ways of	8
ways to	8
ways than	1
ways around	1
ways depending	1
were in	1
were as	1
were not	2
were float	1
were able	2
were unknown	5
were measured	1
were scarce	1
were splitting	1
were carried	1
were tested:	1
were observed	1
were inserted,	1
link to	2
link with	2
link pointer	2
link library	4
link order	1
link libraries	3
link pointers	1
link libraries.	1
link map	1
link libraries,	2
made the	2
made a	2
made to	2
made for	2
made with	2
made more	1
made very	1
made available	1
made about	1
made much	1
made container	1
made smaller	1
made containers	1
made local.	1
appropriate to	1
appropriate for	1
appropriate function	1
appropriate compiler	1
appropriate instruction	1
appropriate version	7
appropriate type	1
appropriate error	2
appropriate header	2
appropriate here.	1
i, a,	1
i, sum	1
i, f	1
i, a[100];	1
i, i_div_3;	1
i, a);	3
i, j;	3
i, a[100],	3
i, StringLength;	1
i, a[2];	1
i, largest_index	1
i, timediff[i]);	1
constructor is	3
constructor and	2
constructor for	1
constructor that	1
constructor can	1
constructor //	2
constructor or	1
constructor may	2
constructor must	1
constructor sets	1
constructor specifying	1
constructor itself.	1
constructor initializes	1
CPUs. The	5
CPUs. This	2
CPUs. It	1
CPUs. These	1
CPUs. However,	1
CPUs. On	1
CPUs. (See	1
CPUs. Intel's	1
CPUs. 5.	1
CPUs. New	2
CPUs. Includes	1
CPUs. Half	1
2; //	1
2; }	11
2; i	1
2; return	2
2; i++)	1
2; Unfortunately,	1
2; Common	1
just a	3
just by	1
just as	4
just an	1
just because	1
just one	2
just two	2
just long	1
just want	1
just easier	1
just happened	1
a[i] is	1
a[i] and	1
a[i] =	14
a[i] +	1
a[i] More	1
function, the	1
function, and	3
function, if	1
function, then	1
function, but	3
function, one	1
function, each	1
function, while	1
function, means	1
function, though	1
function, provided	1
function, m	2
function, etc.,	1
operands of	1
operands and	1
operands in	1
operands The	1
operands are	3
operands if	1
operands have	3
operands has	1
operands because	2
operands Intel	1
operands cannot	1
operands AMD	1
operands means	1
innermost loop	10
innermost function,	1
innermost loop.	5
innermost loop:	1
innermost loops.	1
require a	5
require that	6
require more	1
require other	1
require two	1
require precision	1
require runtime	1
require cleanup	1
require modifications	1
compiler. The	1
compiler. This	2
compiler. It	1
compiler. You	1
compiler. Some	3
compiler. Use	1
compiler. We	1
compiler. Many	1
compiler. Supports	1
compiler. Loop	1
compiler. On	1
compiler. Object	1
compiler. Not	1
compiler. 2.6	1
compiler. Remember,	1
advanced and	1
advanced code	1
advanced data	1
advanced C++	1
advanced version	2
advanced system	1
advanced programming	1
advanced optimizing	1
advanced development	1
advanced mathematical	1
advanced programmers	1
advanced features	1
advanced prediction	1
advanced algorithms	1
advanced principles	1
advanced facilities	1
advanced high-level	1
#define is	1
#define makes	1
#define directives	2
#define directive	1
#define N1	1
#define pure_function	2
#define FUNCNAME	3
#define swapd(x,y)	2
#define EXCEPTION_FLT_OVERFLOW	1
#define ABC	1
#define Alignd(X)	2
#define MAX(a,b)	1
points is	1
points to	10
points in	1
points with	1
points out	1
points to.	4
switch is	1
switch to	1
switch in	1
switch between	1
switch statement	5
switch statements	5
switch occurs	1
switch statements,	1
switch (n)	1
switch statements.............................................................................	1
range is	1
range of	5
range and	1
range }	1
range then	3
range from	3
range (see	1
range analysis	2
range printf(Greek[n]);	1
start the	2
start a	2
start of	3
start to	4
start and	1
start at	2
start so	1
start calculations	1
start garbage	1
start up,	1
modules of	1
modules and	1
modules The	1
modules that	2
modules are	1
modules or	1
modules if	1
modules with	2
modules than	1
modules may	1
modules when	1
modules into	1
modules call	1
modules (See	1
modules contiguous	1
modules appear	1
smaller the	3
smaller and	3
smaller in	1
smaller if	1
smaller by	2
smaller as	1
smaller than	1
smaller memory	1
smaller because	1
smaller functions	1
smaller size	1
smaller sizes	1
smaller squares	1
here is	7
here to	1
here in	1
here //	1
here if	1
here may	1
here because	2
here about	2
here means	1
here gives	1
core is	1
core of	1
core and	2
core by	1
core with	1
core on	1
core will	1
core then	1
core library	2
core clock	5
core during	1
relevant to	6
relevant for	1
relevant when	3
relevant optimization	4
relevant options.	1
relevant information.	1
relevant books	1
are: The	3
are: int	1
are: It	1
are: There	1
are: All	1
are: No	1
are: When	1
are: Avoid	1
are: Variables	1
are: Optimizing	1
are: Static	1
are: 146	1
are: Long	1
are: Non-static	1
are: Coarse	1
around the	2
around and	1
around in	5
around it	1
around on	2
around this	2
around at	2
around such	1
around 1980	1
5 and	2
5 by	1
5 }	1
5 *	1
5 clock	3
5 times	1
5 /	1
5 #define	1
5 Choosing	2
5 μs	1
5 2.2	1
5 2.1	1
5 Programmable	1
replaced by	14
replaced i	1
replaced with:	2
a; //	1
a; int	6
a; double	4
a; b	1
a; float	1
a; y	1
a; bool	1
a; Plus2	1
a; 72	1
things to	2
things in	2
things that	3
things with	2
things you	2
things at	1
things only	1
things very	2
things like	2
negative or	2
negative by	1
negative integer	1
negative value	1
negative so	1
negative list	3
negative effect	1
negative inputs	1
negative result.	1
negative numbers.	1
negative effects	2
negative list,	1
negative impacts	1
section is	2
section and	1
section for	1
section can	1
section if	1
section by	1
section may	1
section will	1
section so	1
section contains	1
section needs	2
section (page	1
section discusses	1
section position-independent,	1
section 17.9:	1
reductions the	1
reductions in	1
reductions that	1
reductions are	1
reductions on	4
reductions as	1
reductions at	1
reductions such	1
reductions they	1
reductions Most	1
reductions explicitly	1
reductions manually.	1
reductions involving	2
go the	1
go to	2
go more	1
go one	1
go into	1
go through	3
go based	1
go here	1
go outside	1
go back	1
go away	1
go undetected.	2
go deeper	1
depends on	14
depends only	2
depends very	1
example: //	15
example: Use	1
example: 38	1
tested the	2
tested and	1
tested in	2
tested can	1
tested with	1
tested on	2
tested only	1
tested library	1
tested were	1
tested it.	1
tested under	1
tested implement	1
tested seem	1
tested (not	1
contentions is	2
contentions and	1
contentions in	5
contentions can	1
contentions if	2
contentions than	1
contentions will	1
contentions do	1
contentions occur	2
contentions expected.	1
predicted to	1
predicted or	1
predicted if	1
predicted by	1
predicted most	1
predicted well	3
predicted quite	1
predicted depends	1
predicted well.	3
predicted well,	1
predicted perfectly	2
predicted perfectly.	1
main will	2
main memory	2
main has	1
main through	1
main advantage	1
main memory.	1
main program.	1
main reason	1
main executable	3
main reasons	1
main principles	1
main feedback	1
main focus	1
references to	2
references in	4
references are	1
references then	1
references do	1
references rather	1
references instead	1
references require	1
references are:	1
references Pointers	2
references ............................................................................................	1
references accept	1
loaded or	1
loaded from	1
loaded at	4
loaded only	1
loaded into	4
loaded cannot	1
loaded rather	1
loaded type	1
loaded every	1
loaded until	1
loaded anyway.	1
positive and	2
positive or	1
positive }	1
positive integer	1
positive floating	1
positive number	2
positive overflow	1
positive list	3
positive result.	1
positive effects	1
positive n.	1
positive integer:	1
positive value,	1
loop. The	5
loop. This	2
loop. It	1
loop. Example	2
loop. If	1
loop. In	1
loop. Example:	1
loop. Some	1
loop. Most	1
loop. Another	1
loop. log	1
computer is	4
computer for	1
computer with	3
computer has	1
computer where	1
computer while	1
computer during	1
computer users	1
computer starts	1
computer game	1
computer games	1
computer games.	1
overhead of	10
overhead to	2
overhead in	1
overhead which	1
overhead while	1
overhead cost	2
VIA processors	1
VIA processor	1
VIA processors.	3
VIA CPUs.	1
VIA including	1
VIA processors,	1
VIA CPUs").	3
VIA CPUs"	3
VIA CPUs:	1
VIA CPUs".	2
pointer. The	2
pointer. This	2
pointer. A	1
pointer. It	5
pointer. If	1
pointer. You	1
pointer. But	1
pointer. These	1
pointer. Likewise,	1
pointer. Accessing	1
pointer. 7.9	1
supports the	1
supports a	1
supports this	2
supports then	1
supports at	1
supports vector	1
supports CPU	1
supports multiple	1
supports 32-bit	1
supports Linux	1
supports both	1
supports intrinsic	1
supports automatic	1
supports self-relative	2
supports this).	1
C and	1
C are	1
C =	2
C or	4
C function	1
C if	1
C functions	1
C language	1
C standard	1
C library.	1
C style	3
compatible with	13
compatible on	1
compatible instruction	1
compatible way	1
compatible across	1
change the	7
change of	1
change in	1
change this	1
change its	1
change their	1
change what	2
change &&	1
change during	1
change pre-increment	1
global and	2
global if	2
global variable	3
global variables	3
global const	1
global arrays	1
global variables.	2
global offset	2
global object.	1
my vector	1
my optimization	2
my test	2
my manual	1
my own	2
my free	1
my study	1
my experiment	1
my blog.	1
my experiments.	1
my crystal	1
my blog	1
my comments,	1
my tests,	1
conversions is	1
conversions and	1
conversions in	1
conversions The	1
conversions are	1
conversions can	2
conversions by	1
conversions from	3
conversions do	1
conversions between	2
conversions take	1
conversions out	1
statement and	1
statement in	2
statement that	1
statement can	2
statement if	1
statement with	2
statement so	1
statement always	1
statement several	1
statement was	1
statement jump	1
statement leads	1
statement occupies	1
errors is	1
errors in	5
errors that	2
errors can	2
errors if	2
errors without	1
errors must	1
errors elsewhere	1
errors associated	1
off the	7
off and	1
off or	2
off by	1
off all	1
off support	2
off debugging	1
off requirements	1
unused bytes	7
unused copy	1
unused points	1
unused columns	1
unused label	4
unused returns	1
unused fourth	1
relative to	6
relative addresses	3
relative reference	1
relative difference	1
relative references	2
relative efficiency	1
relative addresses.	1
relative addressing	1
columns is	1
columns a	1
columns to	1
columns in	6
columns =	3
columns below	2
columns had	1
columns unused.	1
p is	6
p and	2
p =	4
p has	1
p +	1
p always	1
p points	1
platforms. The	2
platforms. This	2
platforms. See	1
platforms. AMD	1
platforms. However,	1
platforms. 2.	1
platforms. PathScale	1
platforms. Microsoft,	1
platforms. Clang	1
platforms. Graphics	1
platforms. 3.	1
platforms. Comparison	1
platforms. Works	1
platforms. Pascal	1
languages and	1
languages in	1
languages that	2
languages are	4
languages can	1
languages as	1
languages have	1
languages use	1
languages such	2
languages where	1
languages include	1
installation of	3
installation and	1
installation The	1
installation time	1
installation program	1
installation time.	1
installation process	4
installation options	1
installation tools.	2
installation ..................................................................................................	1
depending on	16
syntax is	4
syntax in	3
syntax or	1
syntax may	1
syntax has	1
syntax described	1
syntax checking	1
syntax 90	1
syntax check.	1
syntax checks.	1
syntax restriction,	1
cases. The	4
cases. This	2
cases. It	1
cases. See	1
cases. For	1
cases. An	1
cases. Integer	1
cases. Don't	1
cases. Multiple	1
cases. Does	1
cases. 7.28	1
cases. Database	1
Supports the	1
Supports vector	1
Supports only	2
Supports all	3
Supports 32-bit	2
Supports both	1
Supports three	1
Supports x86	1
Supports parallel	2
Supports OpenMP	1
Supports 32-	1
choice of	10
choice for	5
choice between	1
1. The	2
1. This	3
1. See	1
1. Use	1
1. /	1
1. Note	1
1. Optimizing	2
1. Add	1
1. Number	1
1. How	1
1. Writing	1
1. Relocation.	1
STL is	2
STL for	1
STL are	1
STL as	1
STL has	1
STL vector	2
STL also	1
STL container	1
STL containers	2
STL templates,	1
STL containers.	1
STL (Standard	1
STL deque	1
intended to	3
intended for	8
intended as	1
intended because	1
intended (see	1
intended for.	2
dynamically and	1
dynamically with	1
dynamically when	2
dynamically allocated	8
dynamically linked	1
dynamically depending	1
dynamically created	1
dynamically (with	1
consecutive elements	12
consecutive bytes	1
consecutive variables.	1
consecutive terms	1
consecutive indices	1
profiler is	3
profiler to	2
profiler that	1
profiler may	1
profiler which	1
profiler works	1
profiler counts	1
profiler tells	2
profiler itself.	1
profiler inserts	1
profiler measures	1
profiler identifies	1
become a	2
become more	1
become very	1
become less	1
become available	1
become too	1
become bigger	1
become fragmented	2
become fragmented.	2
become invalid.	1
become invalid,	1
become imprecise	1
become obsolete	1
Windows, the	1
Windows, you	2
Windows, while	1
Windows, Linux	3
Windows, including	1
Windows, Linux,	4
Windows, allow	1
Windows, SetThreadAffinityMask,	1
Windows, -msse2,	1
Windows, Intel/MASM	1
index is	4
index of	1
index or	1
index by	1
index than	1
index then	2
index out	1
index must	1
index operator	1
index changes	1
index changing	1
index multiplied	1
modern C++	1
modern programming	1
modern processors	1
modern CPUs	2
modern microprocessors	4
modern x86	1
modern CPUs.	1
modern CPU.	1
modern CPUs,	2
modern computers	1
modern software,	1
gives the	6
gives a	1
gives an	2
gives more	3
gives access	1
gives zero.	1
gives a+b=0,	1
gives rise	1
Loop to	2
Loop with	2
Loop through	1
Loop counter	2
Loop unrolling	5
Loop r1	1
Loop r2	1
Loop invariant	2
avoided in	1
avoided for	1
avoided by	9
avoided on	1
avoided when	1
avoided because	2
avoided unless	1
turn it	1
turn on	5
turn calls	1
turn off	8
turn them	1
inlining the	3
inlining is	2
inlining a	1
inlining and	1
inlining The	1
inlining can	1
inlining more	1
inlining has	1
inlining all	2
inlining are:	1
inlining causes	1
inlining x-xxxx--x	1
size. The	1
size. This	1
size. If	1
size. In	2
size. There	1
size. I	1
size. However,	1
size. Integer	1
size. When	1
size. Alternatively,	1
size. Vectorized	1
size. Integers	1
size. Today,	1
size. Unpredictable	1
size. Later	1
network is	2
network and	1
network or	1
network with	1
network may	1
network access	3
network resources	3
network resources.	1
network resources,	1
network connections.	1
slow and	1
slow //	2
slow or	1
slow instruction	1
slow bit	2
slow unless	2
slow implementations	1
slow GOT	1
slow down	3
slow CPU,	1
b) is	1
b) a	1
b) =	1
b) -	1
b) {	5
b) +	1
b) But	1
b) etc.	1
b) y	1
b) >>	1
b) {x	1
>= size	1
>= 0;	1
>= b)	1
>= (unsigned	1
>= 2)	1
>= 4)	2
>= 8)	1
>= size)	1
>= 5)	1
>= 11)	2
>= min	1
>= operators).	1
>= N)	1
desired function	1
desired program	1
desired instruction	2
desired version	2
desired new	1
desired function.	1
desired parameters	1
desired values	1
desired version.	1
desired polymorphism	1
desired functionality	1
desired measurement	1
desired interval	1
Such a	5
Such an	1
Such variables	2
Such dependency	1
Such units	1
Such schemes	2
Such frameworks	1
Such events	1
Such hybrid	1
#pragma vector	9
#pragma ivdep	2
#pragma optimize("a",on).	1
#pragma optimize(...)	1
#pragma optimize("a",	1
#pragma novector	1
Dynamic memory	9
Dynamic libraries	1
Dynamic linking	4
Dynamic cast	1
functions, and	2
functions, or	1
functions, but	4
functions, where	1
functions, called	1
functions, etc.	2
functions, inline	1
functions, trigonometric	2
functions, classes,	1
whole program	8
whole loop	1
whole software	2
whole structure	1
whole program.	1
whole polygon	1
whole workday	1
inefficient to	2
inefficient in	1
inefficient if	2
inefficient when	1
inefficient because	4
inefficient virtual	1
inefficient way.	2
inefficient solution.	1
inefficient code-based	1
level-2 cache	12
level-2 cache.	3
response is	1
response to	1
response time	5
response from	1
response times	5
response times.	1
response times,	1
described a	1
described in	9
described on	1
described some	1
described above	1
described below.	2
2. The	4
2. Example:	2
2. Use	1
2. Using	1
2. (See	1
2. Optimizing	1
2. Position-independent	1
2. Objects	1
2. Contentions	1
2. Check	1
2. Put	1
variables. The	1
variables. This	1
variables. A	1
variables. It	1
variables. In	1
variables. See	1
variables. Example:	1
variables. All	1
variables. (See	1
variables. Vector	1
variables. Obviously,	1
variables. They	1
variables. 9.5	1
variables. 31	1
variables. Move	1
lines is	1
lines to	1
lines and	1
lines in	5
lines for	1
lines are	1
lines from	1
lines should	1
lines we	1
lines follow	1
lines belong	1
hot spots	6
hot spot	4
hot spot.	3
hot spots,	1
hot spots.	1
Unfortunately, the	7
Unfortunately, this	1
Unfortunately, many	1
Unfortunately, some	1
Unfortunately, table	1
Unfortunately, these	1
Unfortunately, few	1
Unfortunately, profilers	1
Unfortunately, contemporary	1
v. 8.42n,	1
v. 11.1	1
v. 10.1.020.	1
v. 3.1,	1
v. 4.5.2,	1
v. 9.0	1
v. 1.4,	1
v. 7.2).	1
v. 5.5	1
v. 2.00.	1
v. 2.1.7,	1
v. 14.00	1
v. 4.1.0,	1
v. 2.7,	1
v. 7.1-4,	1
operation is	2
operation in	1
operation that	1
operation can	1
operation on	1
operation will	2
operation which	1
operation using	1
operation takes	1
operation rather	1
operation doesn't	1
operation was	1
operation isolates	1
code, as	3
code, you	1
code, then	1
code, which	2
code, but	2
code, cache	1
code, so	1
code, specific	1
code, see	1
code, including	1
code, interpreters,	1
instance of	7
instance in	1
instance for	5
instance then	1
instance has	1
comes to	2
comes with	4
comes on	1
comes when	1
comes from	2
comes at	1
comes only	1
comes before	1
comes first	1
comes automatically.	1
fact that	5
fact be	1
fact it	1
fact by	1
fact an	1
fact only	1
fact using	1
fact accessed	1
fact doing	1
fact represented	1
fact addressed	1
find the	8
find and	1
find more	1
find out	2
find hot	2
find elsewhere.	1
rely on	14
rely heavily	1
No function	1
No time	1
No memory	1
No program	1
No cache	1
No error	1
No stack	1
No exception	1
No information	1
No runtime	1
No link	1
No general	1
No loop-carried	1
No differences	1
No universal	1
produce the	3
produce a	1
produce no	1
produce any	3
produce less	1
produce 32	1
produce Boolean	1
produce binary	1
produce tables	1
produce undesired	1
produce streaming	1
position-independent code	11
position-independent has	1
position-independent because	1
position-independent code.	2
vectorization will	1
vectorization then	1
vectorization const	1
vectorization less	1
vectorization (see	2
vectorization works	1
vectorization Automatic	1
vectorization is.	1
vectorization .........................................................................................	1
vectorization leads	1
vectorization Not	1
vectorization Devirtualization	1
vectorization favorable:	1
vectorization Good	1
including the	7
including a	1
including an	1
including all	1
including 32-bit	1
including user	1
including local	1
including linear	1
including relaxed	1
checking is	2
checking and	2
checking for	2
checking if	1
checking all	1
checking multiple	2
checking In	1
checking how	1
checking template	1
checking (see	1
checking ..................................................................................................	1
out-of-order execution	3
out-of-order mechanism	1
out-of-order capabilities	4
out-of-order execution.	4
out-of-order execution,	2
platforms and	4
platforms that	1
platforms or	1
platforms if	1
platforms with	2
platforms as	2
platforms because	1
platforms By	1
platforms (Windows,	1
particularly time	1
particularly critical	1
particularly useful	1
particularly important	1
particularly fast	1
particularly slow	2
particularly critical.	2
particularly bad	1
particularly problematic	1
particularly interesting	1
particularly risky	1
particularly tricky.	1
given a	2
given in	5
given on	1
given as	1
given instruction	1
given below.	1
given here	1
given task	1
given above.	1
output of	2
output are	1
output can	2
output more	1
output should	1
output option	2
output after	1
output goes	1
output file.	1
output listing	1
output (/FAs	1
level-1 and	1
level-1 data	4
level-1 cache	6
level-1 cache.	3
resources. The	1
resources. This	1
resources. In	1
resources. There	1
resources. For	2
resources. But	1
resources. However,	1
resources. Most	1
resources. Each	1
resources. On	1
resources. Modern	1
resources. Typically,	1
resources. Consider	1
outside the	10
outside of	1
outside this	1
outside any	1
outside both	1
task is	2
task of	1
task in	1
task that	2
task or	1
task when	1
task into	1
task must	1
task switch	1
task switches	1
task switching.	1
task switches;	1
limited is	1
limited to	1
limited and	1
limited in	1
limited by	3
limited number	2
limited range	1
limited resources.	1
limited resource.	1
limited "express"	1
limited audience	1
vectorized if	2
vectorized with	2
vectorized code	3
vectorized as	2
vectorized table	2
vectorized code.	1
vectorized #include	1
vectorized automatically.	1
sometimes be	4
sometimes it	1
sometimes have	1
sometimes more	2
sometimes possible	1
sometimes take	1
sometimes uses	1
sometimes able	1
sometimes give	1
sometimes unacceptably	1
local A	1
local data	1
local object	2
local objects	1
local variables	2
local const	1
local name	1
local variable.	1
local references.	2
local variables,	1
local non-member	1
costs of	6
costs to	3
costs in	2
costs are	1
costs can	1
costs if	1
S1 in	1
S1 {	4
S1 aligned	1
S1 x,	1
S1 list[100];	1
S1 {double	2
S1 ArrayOfStructures[100];	2
S1 list[size];	1
S1 list[100],	1
math is	1
math and	1
math function	2
math functions	2
math library	2
math core	1
math libraries.	1
math allow	1
math libraries:	3
temp a	1
temp in	2
temp =	4
temp *	2
temp <	1
temp before	1
temp even	1
temp +=	1
temp /	1
inlined for	1
inlined or	1
inlined function	2
inlined if	1
inlined by	1
inlined -	1
inlined functions	1
inlined so	1
inlined even	1
inlined function.	2
inlined automatically	1
inlined 15.1b	1
still the	2
still be	3
still have	1
still take	1
still want	1
still uses	1
still run	1
still needs	1
still give	1
still consumes	1
still frustrated	1
class. The	4
class. This	3
class. It	1
class. Make	1
class. Data	1
class. Calling	1
class. Storing	1
class. Which	1
class. Members	1
database is	1
database in	2
database for	1
database can	1
database by	1
database It	1
database access.	1
database ......................................................................................................	1
database anyway	1
database connections.	1
database integration,	1
database queries	1
database connections,	1
constants is	1
constants and	1
constants in	1
constants that	1
constants are	5
constants can	1
constants will	1
constants because	1
constants we	1
constants Sunday,	1
bool is	1
bool in	1
bool a,	3
bool b;	3
bool 1	1
bool a;	1
bool b)	4
Do not	12
Do objects	2
frame is	1
frame function	5
frame functions	2
frame makes	1
frame functions.	2
frame unless	1
frame function,	1
frame /Oy	1
== 2	3
== 8	1
== 5	1
== 0)	5
== Wednesday	1
== EXCEPTION_FLT_OVERFLOW	1
== Friday)	1
== Tuesday	1
d; a	1
d; //	3
d; if	1
d; This	1
d; int	1
d; unsigned	1
d; c	2
d; };	1
d; d	3
special vector	1
special loop	1
special cache	1
special cases	2
special versions	1
special feature	1
special position-independent	1
special reasons	1
special purposes	1
special purpose	1
special trick	1
special precautions	1
special mathe-	1
prevent the	3
prevent it	1
prevent this	1
prevent memory	1
prevent cache	1
prevent two	1
prevent such	3
prevent optimizing	1
prevent optimization.	1
prevent legitimate	1
shift and	1
shift in	1
shift out	3
shift operations	1
shift Floating	1
shift operation	1
shift right	1
shift operations.	1
shift down	1
shift operation.	2
shift operation,	1
destructor the	1
destructor is	3
destructor of	1
destructor to	2
destructor for	1
destructor that	3
destructor if	1
destructor by	1
destructor causes	1
save a	1
save by	1
save time	1
save one	1
save cache	1
save some	1
save time.	1
save several	1
save exception	1
save temp	1
save RAM	1
save ebx	1
save power.	1
save recovery	1
prevents the	9
prevents a	1
prevents it	1
prevents all	1
prevents certain	1
prevents out-of-order	1
preceding one	2
preceding value	1
preceding example,	1
preceding branches	1
preceding addition	2
preceding iteration	1
preceding label	1
preceding one.	2
preceding paragraph	2
preceding row.	1
safe to	3
safe and	1
safe if	4
safe than	1
safe way	2
safe programming	1
safe unless	1
safe formula	1
d in	1
d =	10
d +	2
d would	1
Choice of	14
tell the	9
tell a	1
tell it	1
tell how	1
tell these	1
tell explicitly	1
Pentium 4	7
Pentium CPUs	1
Pentium 4,	1
Pentium 4.	3
Pentium M	1
Pentium Pro	1
further if	1
further by	1
further explained	1
further tested	1
further described	1
further discussion	4
further optimizations.	1
further explanation.	1
further discussion.	1
further expansions	1
further extension	1
Assume that	5
Assume function	3
Assume no	2
Assume pointer	2
Assume member	1
Assume now	1
efficiency is	3
efficiency of	7
efficiency and	1
efficiency by	1
efficiency then	1
efficiency lies	1
repeat the	1
repeat or	1
repeat loop	1
repeat count	11
unroll the	2
unroll a	4
unroll by	1
unroll option	1
unroll too	1
unroll loops	1
unroll factor.	4
calls. The	6
calls. It	1
calls. If	1
calls. There	1
calls. Example:	1
calls. These	1
calls. Unfortunately,	1
calls. 48	1
calls. Internal	1
algorithm is	2
algorithm of	1
algorithm in	2
algorithm The	1
algorithm that	1
algorithm can	1
algorithm if	1
algorithm with	1
algorithm than	1
algorithm before	1
algorithm (e.g.	1
algorithm .......................................................................................	1
sum of	2
sum =	5
sum +=	4
sum operator	1
sum depends	1
sum for(inti=0;i<16;i+=4){	1
strings is	1
strings of	1
strings and	1
strings in	6
strings are	1
strings typically	1
strings including	2
On the	8
On other	1
On most	1
On many	1
On big	1
On older	1
exponent is	5
exponent if	1
exponent }	1
exponent +	3
exponent :	3
Linux, the	1
Linux, 32-bit	1
Linux, Mac	1
Linux, BSD	5
Linux, BSD,	2
Linux, sched_setaffinity).	1
Linux, Mac,	1
Linux, Gnu/AT&T	1
possibility is	2
possibility of	4
possibility for	3
possibility that	4
discussion of	11
discussion that	1
discussion forums	1
conditions is	1
conditions in	3
conditions that	1
conditions are	5
conditions which	1
conditions using	1
conditions enum	1
non-Intel processors	2
non-Intel CPUs	5
non-Intel processor	1
non-Intel CPUs.	1
non-Intel CPU.	1
non-Intel processors,	1
non-Intel machines?	1
non-Intel processors).	1
it. The	2
it. This	1
it. A	1
it. In	1
it. There	1
it. I	2
it. Therefore,	1
it. Global	1
it. Possible	1
it. Instead	1
it. Complicated	1
(See page	6
(See also	1
(See manual	4
(See thread-local	1
(See Sutter:	1
registers. The	3
registers. This	1
registers. A	1
registers. It	1
registers. 64-bit	1
registers. There	1
registers. You	1
registers. Example:	1
registers. Disadvantages	1
registers. Except	1
registers. Typical	1
maximum of	1
maximum loop	2
maximum size	1
maximum number	3
maximum possible	1
maximum value	1
maximum advantage	1
maximum repeat	2
maximum value.	1
mode. The	4
mode. A	1
mode. If	1
mode. See	1
mode. Some	1
mode. Therefore,	1
mode. Make	1
mode. 16-bit	1
mode. Storing	1
mode. Much	1
per array	1
per element	4
per matrix	1
per byte	1
per vector.	2
per row	1
per element.	2
per point.	1
testing is	1
testing a	1
testing and	3
testing which	1
testing all	1
testing multiple	1
testing single	1
testing contains	1
testing Most	1
testing worst-case	1
testing ................................................................................................	1
alignment is	1
alignment of	2
alignment to	1
alignment and	2
alignment can	1
alignment by	1
alignment problem	1
alignment problems.	1
alignment explicitly	1
alignment automatically.	1
alignment requirements	1
right in	1
right =	1
right function	1
right from	1
right data	1
right vector	1
right version	3
right prediction.	1
right format	1
right formula	1
right positions	1
offset of	4
offset that	1
offset can	1
offset as	1
offset at	1
offset has	1
offset table	2
offset bigger	1
offset relative	1
compatibility is	1
compatibility with	6
compatibility problems	4
compatibility problems.	1
compatibility problems,	1
macro is	1
macro to	2
macro in	1
macro for	1
macro by	1
macro as	1
macro will	1
macro so	1
macro parameters	1
macro declared	1
macro INSTRSET	1
macro expansions.	1
bytes. The	1
bytes. This	1
bytes. first	8
bytes. Some	1
bytes. Each	1
bytes. 7.19	1
object. The	3
object. This	1
object. A	1
object. It	1
object. If	1
object. There	1
object. Make	1
object. Any	1
object. Obviously,	1
object. Likewise,	1
object. 7.17	1
100 and	1
100 in	1
100 floating	1
100 *	1
100 clock	1
100 so	1
100 rather	1
100 /	1
100 As	1
100 floats	1
100 numbers:	1
100 $B1$2	1
100 doubles:	1
Note the	2
Note that	10
Note how	1
them to	1
them for	1
them as	1
them into	4
them static	1
them off	1
them again	1
them separately	1
them all.	1
them enabled	1
writing a	3
writing to	4
writing from	1
writing data	1
writing big	1
writing small	1
writing data.	1
writing style	1
library. The	2
library. This	1
library. A	1
library. It	1
library. If	2
library. Supports	1
library. Open	1
library. Add	1
library. Only	1
library. 119	1
library. 78	1
struct {	1
struct S1	6
struct abc	1
struct Bitfield	1
struct Sab	1
struct Sdouble	1
struct Slongdouble	1
struct Sfloat	1
calculations. The	4
calculations. This	1
calculations. It	2
calculations. In	3
calculations. Even	1
calculations. Division	1
calculations. Examples	1
operand is	7
operand of	2
operand that	2
operand first.	1
operand determines	1
reduced to	2
reduced from	1
reduced number	1
reduced performance	3
reduced speed	1
reduced performance.	1
reduced to:	1
reduced 15.1b	1
reduced 15.1a	2
cycles. The	3
cycles. It	1
cycles. If	1
cycles. In	1
cycles. You	2
cycles. But	1
cycles. Floating	1
cycles. Obviously,	1
cycles. Division	1
cycles. Calculations	1
final program	1
final size	2
final array	1
final version	1
final value	1
final result	2
final program.	1
final application	1
final program,	1
final product.	1
final destination,	1
sake of	13
operations. The	2
operations. This	1
operations. A	1
operations. It	1
operations. You	2
operations. All	1
operations. When	1
operations. Algorithms	1
operations. 7.6	1
operations. 105	1
operations. Multiplying	1
When the	5
When a	1
When an	1
When you	1
When used	1
When we	2
When accessing	1
When considering	1
tasks in	1
tasks that	1
tasks are	1
tasks on	1
tasks because	1
tasks into	2
tasks such	4
tasks like	1
tasks were	1
Avoid the	3
Avoid an	1
Avoid multiple	1
Avoid table	1
Avoid long	1
Avoid virtual	1
Avoid branches	1
Avoid global	1
Avoid conversions	1
Avoid unnecessary	1
Avoid nested	1
effect is	3
effect of	4
effect can	1
effect with	1
effect on	4
amount of	13
variable. The	4
variable. This	2
variable. For	1
variable. Example:	1
variable. Most	1
variable. Using	1
variable. Make	1
variable. (This	1
variable. Efficiency	1
time, of	1
time, it	1
time, then	2
time, but	4
time, such	1
time, any	1
time, RAM	1
time, except	1
time, usability,	1
Variables and	3
Variables that	6
Variables stored	1
Variables declared	2
Variables whose	1
copying the	3
copying a	1
copying of	1
copying it	1
copying an	1
copying different	1
copying all	1
copying without	1
copying them	1
copying blocks	1
copying process,	1
optimization. The	1
optimization. This	2
optimization. A	1
optimization. It	1
optimization. See	1
optimization. For	1
optimization. 14	1
optimization. 2.4	1
optimization. Everything	1
optimization. 8.2	1
optimization. Prefetching	1
optimization. en.wikipedia.org/wiki/Compiler_optimization.	1
accessing the	1
accessing a	4
accessing it	1
accessing an	2
accessing 32	1
accessing arrays	1
accessing container	1
accessing databases,	1
accessing list[i].a	1
until the	9
until a	1
until you	1
until 10	1
until seconds	1
performance. The	2
performance. A	2
performance. It	1
performance. There	1
performance. I	1
performance. Integer	1
performance. We	1
performance. 14.4	1
performance. 25	1
performance. 7.18	1
performance. Stefan	1
adding the	2
adding a	2
adding an	1
adding one	1
adding any	1
adding new	1
adding n	1
adding throw()	1
adding vectors.	1
adding bounds-checking	1
adding -100	1
Define function	2
Define vector	4
Define size	1
Define multiple	1
Define SSE2	1
Define vectors	1
Define macro	2
Define biggest	1
causes the	2
causes a	1
causes of	1
causes an	1
causes all	2
causes floating	1
causes another	1
causes problem	1
causes misses	2
causes technical	1
processing the	1
processing and	1
processing in	1
processing speed	1
processing power	1
processing unit	2
processing Memory	1
processing capabilities	1
processing instructions,	1
processing power.	1
processing unit.	1
processing unit,	1
divide the	7
divide it	1
divide by	2
divide an	1
divide i	2
so-called time	1
so-called objects	1
so-called virtual	1
so-called intrinsic	1
so-called nontemporal	1
so-called Java	1
so-called soft	1
so-called position-	1
so-called symbol	1
so-called partial	1
so-called commpage.	1
so-called iterators	1
so-called CPU-dispatcher	1
clear to	1
clear and	4
clear that	2
clear or	1
clear from	1
clear program	1
clear whether	1
clear unless	1
clear correspondence	1
total size	1
total number	3
total time.	1
total execution	2
total calculation	1
total offset	1
total amount	1
total waste	1
total size,	1
total computation	1
mix the	1
mix of	1
mix different	1
mix integer	1
mix floating	1
mix float	2
mix simple	1
mix single	1
mix signed	1
mix mathematical	1
mix nontemporal	1
16-bit systems	1
16-bit integers	1
16-bit mode	2
16-bit Windows,	1
16-bit integers.	1
16-bit systems:	4
16-bit programs.	1
16-bit programs,	1
child are	1
child class	7
child classes	1
child class.	2
child function:	1
containers is	3
containers in	2
containers for	1
containers use	1
containers should	2
containers class	1
containers do	1
containers 93	1
fit the	7
fit into	2
fit specific	1
fit their	1
fit nicely	1
predict the	2
predict a	1
predict that	1
predict with	1
predict which	4
predict where	1
predict whether	1
predict correctly	1
priority is	1
priority of	2
priority to	1
priority in	1
priority than	3
priority before	1
priority back	1
priority level,	1
priority thread,	1
disk or	2
disk if	1
disk because	1
disk often	1
disk operations	1
disk space	1
disk cache.	1
disk space.	1
disk files.	1
disk copying.	1
disk caching,	1
frequency is	4
frequency of	1
frequency that	1
frequency than	1
frequency may	2
frequency goes	1
frequency dynamically	1
frequency (in	1
unknown at	6
unknown CPU	1
unknown processors	2
unknown brand	1
unknown factors	1
unknown sources.	1
obtained in	1
obtained if	1
obtained by	4
obtained with	5
obtained when	1
libraries. The	3
libraries. A	1
libraries. C++	1
libraries. Use	1
libraries. These	1
libraries. Supports	1
libraries. Several	1
libraries. To	1
libraries. Numbers	1
libraries. www.agner.org/optimize/#vectorclass	1
iteration is	3
iteration of	2
iteration to	1
iteration that	1
iteration it	1
iteration should	1
iteration before	1
iteration needs	1
iteration (except	1
counters in	2
counters are	1
counters can	1
counters when	2
counters will	1
counters before	1
counters inside	1
counters instead	1
counters Many	1
counters ....................................................................	1
Optimizing for	3
Optimizing memory	2
Optimizing compilers	1
Optimizing software	2
Optimizing less	1
Optimizing file	1
Optimizing database	1
Optimizing subroutines	1
128-bit vector	3
128-bit execution	1
128-bit XMM	5
128-bit operation	1
128-bit vectors.	1
128-bit reads.	1
possibly in	1
possibly be	4
possibly not	1
possibly more	1
possibly also	1
possibly block	1
possibly improve	1
possibly save	1
possibly throw	1
x, and	1
x, int	1
x, unsigned	1
x, while	1
x, y;	4
x, n,	2
x, y,	2
stack. The	1
stack. This	4
stack. A	1
stack. These	1
stack. Each	1
stack. Alternatively,	1
stack. Is	1
stack. Deallocation	1
stack. String	1
2, x	1
2, b	2
2, so	1
2, 4	1
2, etc.	1
2, 4,	2
2, 6,	2
2, 3,	1
2, Tuesday	1
full use	1
full size	1
full 64-bit	1
full advantage	1
full information	1
full optimization.	1
full 128-bit	1
full declaration	1
full metaprogramming	1
full debugging	1
full speed.	1
full generality	1
Another function	1
Another problem	1
Another disadvantage	3
Another example:	1
Another possibility	2
Another thing	1
Another alternative	1
Another serious	1
Another open	1
overloaded or	2
overloaded function	1
overloaded functions.	1
overloaded operators	2
overloaded operator	3
overloaded operators.	2
overloaded assignment	1
possible. The	2
possible. This	1
possible. A	1
possible. See	1
possible. SSE2	1
possible. Use	1
possible. However,	1
possible. Don't	1
possible. Template	1
possible. Smaller	1
possible. Typically	1
efficiently if	4
efficiently by	1
efficiently with	1
efficiently on	1
efficiently than	1
efficiently when	3
efficiently from	1
models of	1
models to	2
models that	2
models if	1
models on	2
models have	1
models then	1
models rather	1
models had	1
OS and	1
OS support	1
OS independent	1
OS X	6
OS X,	2
OS X.	1
needed. The	2
needed. This	1
needed. You	1
needed. Example:	1
needed. These	1
needed. All	1
needed. Obviously,	1
needed. Even	1
needed. Objects	1
needed. 11	1
needed. Predictable	1
classes. The	3
classes. You	1
classes. An	1
classes. Each	1
classes. Unfortunately,	1
classes. Text	1
classes. 7.2	1
classes. Size	1
classes. Security	1
classes. Including	1
changed to	4
changed by	1
changed then	1
changed so	1
changed without	1
changed to:	2
changed five	1
changed freely.	1
true a	2
true that	1
true =	2
true or	1
true ;	1
true last	1
true anyway.	1
true 50%	1
true (1)	1
true 10%	1
thread. The	1
thread. This	3
thread. A	1
thread. It	1
thread. If	2
thread. You	1
thread. However,	1
thread. Pointers	1
thread. Thread-local	1
names of	2
names and	4
names in	1
names that	1
names are	2
names with	1
names from	1
though the	5
though it	2
though not	1
though this	1
though less	1
though these	1
though future	1
execute the	2
execute a	1
execute then	2
execute faster	1
execute instructions	1
execute it.	1
execute CriticalFunction	1
execute faster.	1
execute slower	1
execute _mm_empty()	1
% 2	1
% 32	1
% 128	1
% c;	1
% means	1
% 3;	1
% 10;	2
% 16;	2
% (number	1
% 0x20	1
mov add	1
mov mov	3
mov DWORD	1
mov xor	1
mov shr	1
mov eax,0.	1
mov ebx,eax	1
mov $B1$2:	1
mov 2:8+esp	1
mov lea	1
N is	4
N a	1
N =	2
N with	1
N into	1
N elements	1
N template	1
N supports	1
kinds of	12
details of	2
details in	1
details that	1
details are	1
details on	2
details about	3
details depend	1
details (www.agner.org/optimize/testp.zip).	1
RAM and	1
RAM than	2
RAM memory	4
RAM size	1
RAM memory.	3
RAM space,	1
rows and	2
rows in	2
rows for	1
rows are	3
rows //	1
rows =	3
square by	1
square x	1
square at	1
square (float	1
square blocking	2
square brackets	2
square root	2
square blocking:	1
square root,	1
fail to	6
fail in	1
fail if	4
fail completely	1
purposes. The	3
purposes. This	2
purposes. If	1
purposes. All	2
purposes. However,	1
purposes. Floating	1
purposes. Unfortunately,	1
purposes. Available	1
(e.g. in	1
(e.g. with	1
(e.g. an	1
(e.g. option	1
(e.g. GetLogicalProcessorInformation	1
(e.g. PowerPC).	1
(e.g. DEC,	1
(e.g. GetProcessAffinityMask	1
(e.g. IsProcessorFeaturePresent	1
(e.g. '>')	1
(e.g. Quine–McCluskey	1
(e.g. Sandy	1
compiling the	2
compiling in	1
compiling for	6
compiling multiple	1
compiling without	1
compiling module2.cpp.	1
convert the	2
convert it	2
convert an	1
convert example	3
convert b	1
convert float	1
convert unsigned	1
convert these	1
thing is	1
thing to	2
thing and	3
thing that	2
thing as	1
thing at	1
thing we	2
least the	2
least a	1
least in	2
least at	1
least one	2
least significant	2
least recently	1
least temporarily.	1
containing the	3
containing only	1
containing multiple	1
containing many	1
containing container	1
containing integers.	1
containing pure	1
containing thread-specific	1
containing (2,2,2,2),	1
containing numerical	1
0) {	9
0) ?	2
0) *(p++)	1
precision. The	3
precision. You	1
precision. But	1
precision. These	1
precision. Using	1
precision. When	1
precision. Conversions	1
precision. And	1
precision. Let's	1
precision. Long	1
algebraic expressions	2
algebraic reductions	6
algebraic expressions.	1
algebraic manipulations	2
algebraic reduction.	1
structures to	1
structures and	1
structures in	1
structures for	1
structures that	1
structures are	1
structures by	1
structures with	2
structures It	1
structures .............................................................	1
structures (without	1
little or	2
little more	2
little data	1
little faster	1
little work	1
little space	1
little overhead	1
little math	1
little explanation.	1
little odd	1
Any function	1
Any code	1
Any other	1
Any floating	1
Any array	1
Any pointers	1
Any language	1
Any specific	1
Any copy	1
Any expression	1
Any task	1
Any writable	1
logical register	1
logical processors	4
logical processor	1
logical structure	1
logical processors.	2
logical register.	1
logical architecture	1
logical sequence.	1
level of	3
level =	2
level framework	2
level linking	1
level framework.	1
level 9.	1
level 108	1
level linking"	1
access. The	3
access. Assume	1
access. 12	1
access. Reading	1
access. Available	1
access. 7.20	1
access. 3.10	1
access. 12.9	1
access. Sequential	1
access. Run	1
bitwise operators	10
bitwise AND	1
bitwise OR	1
handle the	2
handle is	1
handle an	1
handle only	1
handle one	1
handle its	1
handle eight	1
handle strings	1
handle unknown	1
handle current	1
handle text	1
heap is	1
heap to	1
heap can	1
heap has	1
heap space	3
heap manager	4
heap management	1
DWORD PTR	11
DWORD PTR[ecx+eax*4],ebx	1
Other compilers	2
Other system	2
Other cases	2
Other programs	1
Other tasks	1
Other brands	1
Other manuals	1
Other databases	2
during the	4
during this	1
during time	1
during program	2
during execution	1
during start	1
during installation	2
initialized to	3
initialized or	1
initialized by	1
initialized when	3
initialized only	1
initialized variables	1
initialized arrays.	1
occur and	1
occur in	5
occur if	1
occur as	1
occur at	1
occur has	1
occur quite	1
target of	1
target if	1
target address	3
target buffer	3
target pointed	1
target buffer.	1
target buffer,	1
especially in	4
especially if	4
especially on	1
especially when	1
especially loop-carried	1
smart and	1
smart pointer	5
smart pointers	2
smart pointer.	3
includes the	5
includes only	1
includes static	1
includes pointers	1
includes optimized	1
includes standard	1
includes languages	1
entire program	2
entire cache	1
entire floating	1
entire library	1
entire 64	1
entire file	1
entire list	1
entire level-1	1
entire object.	1
entire contents	1
executable to	2
executable has	1
executable because	1
executable code.	1
executable file	5
executable file.	1
subexpression to	1
subexpression containing	1
subexpression occurs	1
subexpression elimination	3
subexpression c+b	1
subexpression elimin.,	2
subexpression elimination,	2
insert the	3
insert a	3
insert an	1
insert only	1
insert any	1
insert optimization	1
insert nontemporal	1
nontemporal is	1
nontemporal write	5
nontemporal Table	1
nontemporal #pragma	1
nontemporal writes	2
nontemporal writes.	1
bounds is	1
bounds of	1
bounds check	1
bounds checking	3
bounds violations,	1
bounds checking,	1
bounds checking).	1
bounds violations	1
bounds violation,	1
improved is	1
improved in	1
improved by	8
improved performance.	1
SSE and	2
SSE or	2
SSE instruction	1
SSE double	1
SSE 128	1
SSE Store	3
SSE xmmintrin.h	1
discussed in	2
discussed on	2
discussed which	2
discussed how	2
discussed below.	3
updates to	1
updates are	1
updates if	1
updates may	1
updates should	2
updates each	1
updates through	1
updates every	1
updates Many	1
updates ....................................................................................................	1
consider the	1
consider that	1
consider it	1
consider if	4
consider which	1
consider making	1
consider whether	2
loading the	1
loading a	2
loading of	3
loading can	1
loading any	1
loading files	1
loading .......................................................................................................	1
loading Often,	1
below the	4
below in	1
below on	1
below 2	1
below diagonal	2
below shows.	2
reading the	2
reading of	2
reading and	2
reading or	2
reading as	1
reading them	1
reading disk	1
directly to	3
directly //	1
directly if	1
directly with	1
directly into	1
directly without	1
directly compiled	3
simplest and	1
simplest possible	2
simplest way	1
simplest code.	1
simplest case	1
simplest cases,	2
simplest expressions	1
simplest cases.	1
simplest method,	1
situation is	2
situation of	1
situation where	8
message is	1
message and	2
message in	2
message if	1
message when	1
message loop	2
message function.	1
message systems.	1
delay the	2
delay is	3
delay in	2
delay that	1
delay on	1
delay comes	1
delay due	1
condition is	3
condition The	1
condition can	2
condition will	1
condition i	1
condition inside	1
condition terminates	1
condition clause.	1
monitor counter	2
monitor counters	7
monitor counters.	2
resource in	1
resource for	1
resource use	2
resource then	1
resource files	1
resource problems	2
resource files,	2
resource conflicts.	1
cores is	3
cores and	1
cores in	1
cores that	1
cores are	1
cores can	1
cores or	2
cores will	1
parallel if	1
parallel vector	1
parallel because	1
parallel calculations	1
parallel structure	1
parallel calculations.	1
parallel processing	1
parallel processing,	2
parallel execution.	1
parallel processing.	1
either in	2
either by	1
either on	1
either as	3
either C	1
either way.	1
either case.	1
either sixteen	1
implementations of	8
implementations are	1
implementations use	1
implementations reveal	1
calculating the	7
calculating a	2
calculating row	1
calculating self-	1
ebx is	2
ebx that	1
ebx on	1
ebx as	1
ebx from	1
ebx ;	2
ebx contains	1
ebx ecx,	1
ebx restores	1
generation of	6
generation can	1
generation class	4
enable the	7
enable one	1
enable constant	1
enable fast	1
enable optimizations	1
instructions. The	3
instructions. This	1
instructions. A	1
instructions. There	1
instructions. Example:	1
instructions. Function	1
instructions. Each	1
instructions. My	1
instructions. Intrinsic	1
copied to	4
copied or	2
copied by	1
copied from	1
copied because	1
copied into	1
copied simply	1
e.g. the	1
e.g. a	1
e.g. Intel	1
e.g. how	1
e.g. four	2
e.g. every	1
e.g. C++,	1
e.g. AVX,	1
e.g. .R.	1
e.g. /arch:SSE2.	1
keep the	2
keep multiple	1
keep pointers	1
keep up	2
keep their	1
keep together	1
keep adding	1
keep track	2
PTR [edx]	3
PTR [esp+8]	2
PTR [eax+400]	1
PTR [eax+4],	1
PTR [esp+4]	1
PTR [ecx+eax*4],ebx	1
PTR [esp+12]	1
PTR [eax],	1
Automatic CPU	1
Automatic vectorization	5
Automatic updates	2
Automatic updating	1
Automatic paralleli-	1
Automatic updates.	1
Library functions	1
Library versions	1
Library exp	1
Library (STL)	1
Library (MKL	1
Library __vrs4_expf	1
Library (WTL).	1
Library (WTL):	1
Library (ATL)	1
Library (OWL).	1
Library amd_vrs4_expf	1
? a	2
? b	2
? c	2
? 1	1
? 1.0f	1
? 1.5f	1
? (cc[i]	1
? EXCEPTION_EXECUTE_HANDLER	1
defined a	1
defined in	5
defined with	1
defined as	1
defined inside	2
defined outside	1
Visual Studio	6
Visual Basic	2
Visual Studio.	1
Visual studio	1
Visual Basic,	1
align the	1
align by	2
align data	1
align table	1
align its	1
align large	2
align ;	1
align dynamically	1
align arrays.	1
sizes of	2
sizes to	1
sizes and	1
sizes are	2
sizes other	1
sizes were	1
sizes 1,	1
sizes Integers	1
sizes (char,	1
temp; for	3
temp; //	1
temp; }	1
temp; c	1
temp; temp	4
temp; 104	1
allow the	1
allow you	2
allow vector	1
allow variables	1
allow up	2
allow addition	1
allow lazy	1
allow compile-	1
allow assembly-like	1
PathScale and	2
PathScale compiler	1
PathScale compilers	2
PathScale C++	2
PathScale Gnu	1
PathScale compilers.	3
BSD and	4
BSD are	1
BSD or	1
BSD work	1
BSD systems.	1
BSD comes	1
BSD Instruction	1
BSD Shared	1
f; The	1
f; int	7
f; }	1
f; unsigned	1
f; f=i;	1
previous value	3
previous link	1
previous iteration	1
previous chapter	1
previous value.	2
previous branch.	1
previous one.	1
previous iteration.	1
size; i	1
size; i++)	10
rarely the	1
rarely in	1
rarely program	1
rarely possible	1
rarely necessary	1
rarely needed	1
rarely needed.	1
rarely enough	1
rarely worth	1
rarely found	1
rarely justifies	1
way. The	3
way. A	1
way. If	1
way. There	1
way. You	1
way. See	1
way. Such	1
way. Here	1
way. First	1
vector. The	3
vector. This	1
vector. It	1
vector. If	1
vector. You	1
vector. For	1
vector. These	1
vector. Organize	1
vector. 6.	1
easier to	6
easier for	3
easier if	1
easier said	1
identical to	3
identical for	1
identical code	1
identical so	1
identical performance	1
identical branches	2
identical constants	1
identical pieces	1
20 to	1
20 clock	3
20 times	1
20 Copyright	2
20 3.8	1
20 3.9	2
20 3.7	1
well. The	2
well. This	2
well. A	2
well. Supports	1
well. Even	1
well. Open	1
well. Codeplay	1
well. Very	1
program, and	3
program, for	1
program, or	1
program, it	2
program, you	2
program, one	1
program, especially	1
list[i] is	2
list[i] =	2
list[i] +=	4
list[i] >	1
list[i] <<	1
list[i] =0;	1
under the	3
under this	1
under CPU	1
under test	2
under advanced	1
under worst-case	2
under test,	1
expect the	3
expect a	4
expect to	2
expect this	1
expect 64-bit	1
except the	2
except in	3
except for	4
except when	1
except perhaps	1
loops are	3
loops //	1
loops or	1
loops if	2
loops by	1
loops would	1
loops (except	1
loops (less	1
why the	1
why it	1
why this	2
why all	1
why compilers	1
why object	1
why there	1
why such	1
why exception	1
why bookkeeping	1
dispatching. The	1
dispatching. This	1
dispatching. For	2
dispatching. Many	1
dispatching. Unfortunately,	1
dispatching. Obviously,	1
dispatching. Add	1
dispatching. Test	1
dispatching. Underestimating	1
cout <<	10
references. It	1
references. If	1
references. 64-bit	1
references. There	1
references. You	1
references. Therefore,	1
references. Most	1
references. Shared	1
references. Arrays	1
references. References	1
come with	3
come from	3
come into	1
come last	1
come first.	1
come unpredictably	1
statements is	1
statements The	1
statements that	1
statements are	1
statements because	1
statements should	1
statements often	1
statements like	1
statements within	1
statements (called	1
u; if	2
u; int	2
u; If	1
u; double	3
u; u.i	2
SSE4.1 and	2
SSE4.1 //	2
SSE4.1 instruction	2
SSE4.1 some	1
SSE4.1 gives	1
SSE4.1 instr.	1
SSE4.1 smmintrin.h	1
chapter is	1
chapter in	1
chapter 10	1
chapter (page	1
chapter 12.	2
chapter describes	1
chapter 9.10,	1
chapter "Register	1
chapter 11.	1
similar to	2
similar CPU	1
similar objects	1
similar method	1
similar methods	1
similar functions,	1
similar thanks	1
similar solutions	1
similar utility	1
course a	1
course that	1
course be	2
course make	1
course there	1
course also	1
course inefficient.	1
course far	1
course system-specific.	1
back to	4
back in	1
back into	1
back again.	4
risk of	7
risk that	2
risk factor	1
garbage collection	4
garbage collection.	3
garbage collector	2
garbage collection,	1
templates in	1
templates for	2
templates are	1
templates //	1
templates or	1
templates where	1
templates makes	1
templates (see	1
templates instead	1
buffer is	1
buffer and	1
buffer that	1
buffer can	1
buffer or	1
buffer with	2
buffer than	1
buffer overflow	1
buffer (BTB).	1
header for	1
header file	6
header files	2
header files.	1
future compilers	2
future version	1
future we	1
future processors.	2
future CPUs.	1
future models	1
future processors,	1
future due	1
whenever the	1
whenever a	3
whenever it	3
whenever an	2
whenever they	1
unrolling the	2
unrolling is	1
unrolling in	1
unrolling should	2
unrolling also	1
unrolling In	1
unrolling so	1
unrolling Some	1
CriticalFunction is	2
CriticalFunction in	2
CriticalFunction =	4
CriticalFunction when	1
CriticalFunction ();	1
swap the	4
swap memory	1
swap two	2
swap elements	2
swap these	1
newer instruction	2
newer Intel	1
newer version	1
newer method	1
newer versions	1
newer processors.	2
newer microprocessors	1
newer models	1
fraction is	1
fraction of	2
fraction 2	3
fraction :	3
fraction bits:	1
modify the	3
modify a	1
modify an	1
modify x	1
modify data	1
modify example	1
modify objects	1
modify x,	1
seconds to	2
seconds and	1
seconds =	1
seconds or	1
seconds has	1
seconds because	1
seconds count	1
seconds was	1
seconds remains	1
unaligned integer	6
unaligned arrays.	1
unaligned reads	1
unaligned op.	2
address. The	2
address. A	1
address. If	1
address. There	1
address. Pointer	1
address. Pointers	1
address. (3)	1
address. Step	1
address. Relocation	1
Store the	4
Store 4	1
Store 8	1
Store 16	3
Store result	1
sequence of	6
sequence to	1
sequence in	1
sequence are	1
sequence where	1
compiler, the	1
compiler, and	1
compiler, or	1
compiler, you	1
compiler, then	1
compiler, which	1
compiler, operating	1
compiler, etc.	1
compiler, v.	1
compiler, linker	1
significant if	1
significant as	1
significant bit	1
significant part	1
significant n	1
significant effect	1
significant amount	1
significant contribution	1
significant improvements.	1
significant digits,	1
might be	3
might not	1
might have	1
might also	1
might check	1
might store	1
might experience	1
might clash	1
CPU. It	1
CPU. If	2
CPU. See	1
CPU. But	1
CPU. These	2
CPU. Algebraic	1
CPU. Unrolling	1
CPU. Should	1
Vector class	3
Vector operations	3
Vector classes	2
Vector class,	2
length is	1
length of	8
length function	1
sets. The	2
sets. However,	1
sets. Most	1
sets. Supports	1
sets. Vector	1
sets. Likewise,	1
sets. Does	1
sets. Let	1
sets. Covers	1
linear function	2
linear array	3
linear list	1
linear array.	1
linear algebra	1
linear search,	1
linear algebra)	1
something to	1
something in	2
something that	2
something on	1
something takes	2
something about	2
f is	4
f =	4
f cout	1
f *=	1
penalty is	1
penalty of	2
penalty to	1
penalty for	4
penalty when	1
penalty should	1
F1 is	2
F1 will	1
F1 has	2
F1 only	1
F1 also	1
F1 without	1
F1 calls	2
invalid and	1
invalid in	1
invalid if	2
invalid as	1
invalid when	1
invalid pointers	1
invalid pointers,	1
invalid pointers.	2
reasons of	2
reasons to	1
reasons for	1
reasons before	1
reasons explained	4
reasons why	1
setting the	4
setting a	2
setting an	1
setting pointers	1
setting these	1
setting up	1
module for	1
module or	1
module by	1
module then	3
module static	1
module (i.e.	1
module __attribute__	1
module with,	1
beginning of	9
beginning rather	1
within the	5
within a	4
within each	1
used, for	1
used, it	1
used, then	2
used, but	2
used, there	1
used, even	1
used, while	1
used, though.	1
checks for	2
checks which	1
checks where	2
checks makes	1
checks whether	3
checks both	1
input and	1
input in	1
input or	2
input data	1
input less	1
input check	1
input never	1
input data.	1
input file.	1
not. The	4
not. There	1
not. You	1
not. See	1
not. I	1
not. Supports	1
not. Static	1
programmers to	1
programmers and	3
programmers have	2
programmers use	1
programmers do	1
programmers write	1
programmers rarely	1
alternative is	3
alternative to	1
alternative solution	2
alternative implementations	1
alternative version.	1
alternative worth	1
alternative implementations.	1
My vector	1
My example	2
My test	2
My own	1
My recommendation	2
My experimental	1
My preference	1
organized in	1
organized if	1
organized as	4
organized into	2
organized so	2
stride is	3
stride and	1
stride for	1
stride can	1
stride will	1
stride then	1
stride (see	1
stride causes	1
set, and	1
set, as	1
set, then	1
set, but	2
set, one	1
set, using	2
set, another	1
set, e.g.	1
current instruction	1
current compilers	2
current Intel	1
current array	1
current version	1
current operating	1
current CPUs	1
current .cpp	1
current position.	1
'this' is	1
'this' in	1
'this' pointer	5
'this' pointer.	2
'this' pointer,	1
problem. The	3
problem. This	1
problem. If	2
problem. These	1
problem. Whenever	1
problem. 7.11	1
problem. Vectors	1
3 The	1
3 for	1
3 -	3
3 breakpoint	2
3 Finding	2
3 1.1	1
counts a	1
counts for	1
counts that	2
counts are	1
counts at	1
counts should	1
counts how	1
counts give	1
counts represent	1
gain in	5
gain if	1
gain by	3
gain depends	1
processors, a	2
processors, and	3
processors, as	1
processors, only	1
processors, but	2
processors, between	1
happen to	3
happen in	1
happen that	2
happen if	2
happen with	1
happen quite	1
enough to	6
enough for	2
enough registers	1
enough bits	1
apply the	1
apply to	6
apply as	1
apply CPU	1
apply to.	1
Obviously, the	3
Obviously, a	1
Obviously, it	1
Obviously, you	1
Obviously, this	2
Obviously, all	1
Obviously, we	1
version. The	4
version. See	1
version. For	2
version. 2.	1
version. Note	1
version. Updating	1
row is	1
row to	1
row or	1
row by	1
row +	1
row <	1
row addresses	1
row length	1
row 28	2
Compiler has	1
Compiler optimization	2
Compiler directives	1
Compiler v.	3
Compiler identification	1
Compiler Documentation	1
Compiler Documentation".	1
matter of	8
matter and	1
matter if	1
declaration of	2
declaration to	1
declaration and	2
declaration may	1
declaration class	1
declaration makes	1
declaration size,	1
declaration "static"	1
allocate the	1
allocate a	4
allocate more	3
allocate one	1
allocate variable-size	1
series of	9
series float	1
features of	3
features to	1
features and	1
features for	1
features it	1
features as	1
features rarely	1
features 80386	1
added a	1
added to	6
added and	1
added at	1
added information	1
user. The	1
user. There	1
user. Dynamic	1
user. Time	1
user. Making	1
user. With	1
user. Installation	1
user. Menus,	1
user. Compatibility	1
user. Feature	1
to: //	10
waste a	1
waste of	9
metaprogramming is	1
metaprogramming in	1
metaprogramming can	1
metaprogramming //	1
metaprogramming so	1
metaprogramming would	1
metaprogramming implementation	1
metaprogramming is.	1
metaprogramming features,	1
metaprogramming tools	1
map is	1
map are	1
map can	1
map or	1
map may	1
map file	4
map file"	1
define a	2
define in	1
define function	2
define 64-bit	1
define matrix	1
define your	1
define application-specific	1
define fprintf	1
returns. The	2
returns. This	1
returns. There	1
returns. But	1
returns. Make	1
returns. Alternatively,	1
returns. alloca	1
returns. Global	1
returns. Every	1
Windows. The	2
Windows. It	1
Windows. In	1
Windows. Gnu	1
Windows. 10	1
Windows. Borland	1
Windows. Does	2
Windows. Integrates	1
style that	1
style are	1
style if	1
style with	1
style as	1
style has	1
style floating	1
style string	1
style type-casting	1
Load library	1
Load eight	8
3; for	1
3; or	1
3; }	5
3; return	2
approximately two	2
approximately three	1
approximately 12	1
approximately six	2
approximately seven	1
approximately so.	1
approximately 500	1
order. The	3
order. This	1
order. If	1
order. See	1
order. Example:	1
order. Some	1
order. Long	1
3: "The	8
3: printf("Delta");	1
microarchitecture of	9
easy to	3
easy way	2
easy development	1
easy linking	1
easy development.	1
easy GUI	1
situations to	1
situations where	7
situations like	1
implement the	3
implement a	3
implement in	1
implement this	1
implement OneOrTwo5[b!=0]	1
65 8	2
65 bytes	1
65 65	2
65 33	1
65 13.6	1
65 7.32	1
65 7.33	1
chosen the	1
chosen for	2
chosen as	1
chosen compiler	1
chosen only	1
chosen version	1
chosen based	1
chosen expression.	1
256-bit vector	2
256-bit integer	1
256-bit size	1
256-bit registers	1
256-bit instructions	1
256-bit read	1
256-bit YMM	2
slightly more	5
slightly faster	1
slightly less	3
scattered around	7
scattered everywhere	1
scattered randomly	1
contain the	1
contain is	1
contain a	1
contain all	1
contain many	1
contain pointers	1
contain useful	1
contain either	1
contain pure	1
writes a	1
writes to	3
writes or	1
writes with	1
writes may	1
writes automatically	1
writes only,	1
device is	1
device than	1
device should	1
device itself	1
device drivers	4
device driver.	1
independent of	3
independent and	1
independent code	1
independent then	1
independent code.	1
independent code,	1
independent divisions.	1
allocation. The	1
allocation. This	1
allocation. There	1
allocation. You	1
allocation. See	1
allocation. Some	1
allocation. Dynamic	1
allocation. Do	1
allocation. Container	1
non-static data	2
non-static variables	2
non-static member	4
non-static access.	1
subsequent elements	1
subsequent times	1
subsequent instructions.	1
subsequent counts	2
subsequent sections	1
subsequent manuals	1
subsequent manuals.	1
subsequent counts.	1
applies to	8
applies only	1
applied to	9
destructors of	1
destructors to	2
destructors for	1
destructors are	2
destructors A	1
destructors after	1
destructors ..................................................................................	1
integers. The	2
integers. It	3
integers. But	1
integers. Many	1
integers. 7.25	1
integers. 7.5	1
terms of	8
terms in	1
help the	3
help of	1
help if	1
help files	3
help files,	1
transfer is	3
transfer a	1
transfer of	1
transfer for	1
transfer are	1
transfer across	1
transfer ownership	1
blocks is	2
blocks of	2
blocks in	1
blocks than	1
blocks such	1
blocks makes	1
blocks rather	1
away the	2
away a	1
away and	1
away in	2
away an	1
away p	1
away cpuid	1
15.1b is	2
15.1b to	5
15.1b and	2
low in	1
low instruction	1
low power	1
low positive	1
low repeat	1
low priority	2
low priority.	2
multiply a	1
multiply and	1
multiply //	1
multiply it	1
multiply by	3
multiply integers	1
multiply j	1
share the	9
enabled. The	2
enabled. A	1
enabled. There	1
enabled. Conversion	1
enabled. Conversions	1
enabled. Typically,	1
enabled. Volatile	1
enabled. Few	1
explanation of	6
explanation and	1
explanation if	1
explanation why	1
near the	1
near then	1
near each	7
provided in	3
provided that	2
provided as	2
provided several	1
provided below,	1
latter is	3
latter function	1
latter has	1
latter case	1
latter function,	1
latter case,	2
6 The	1
6 clock	1
6 unused	2
6 integer,	1
6 Development	2
6 2.3	1
6 2.4	1
stores the	5
stores a	2
stores this	1
stores all	1
to. A	2
to. It	2
to. For	2
to. Example:	1
to. Therefore,	1
to. Now	1
default in	1
default integer	1
default size	1
default unless	1
default constructor	3
default anyway	1
default constructors,	1
Instruction set	7
Instruction sets	1
Instruction tables:	1
finding the	5
finding a	1
finding problems	1
finding hot	1
finding elements.	1
inefficient. The	1
inefficient. If	1
inefficient. There	1
inefficient. An	1
inefficient. Dynamic	1
inefficient. Variables	1
inefficient. Objects	1
inefficient. Division,	1
inefficient. Linear	1
c, d;	5
c, temp;	1
c, d,	3
search for	3
search instructions	1
search times	1
search facilities	2
search facilities,	1
search requests	1
Modern compilers	1
Modern CPUs	4
Modern microprocessors	4
block. This	2
block. A	2
block. There	1
block. Do	1
block. Any	1
block. Thread-local	1
block. Walking	1
critical. The	3
critical. A	1
critical. It	1
critical. However,	1
critical. Therefore,	1
critical. Optimizing	1
critical. 129	1
chains is	1
chains in	1
chains can	2
chains with	1
chains then	1
chains (see	1
chains Modern	1
chains ................................................................................................	1
time-consuming function	1
time-consuming than	1
time-consuming data	1
time-consuming part	1
time-consuming (see	1
time-consuming parts	1
time-consuming tasks	2
time-consuming garbage	1
brands of	6
brands and	1
brands or	2
available. The	4
available. It	1
available. See	1
available. Some	1
available. Microsoft	1
available. declaration	1
Don't use	1
Don't put	2
Don't change	1
Don't rely	1
Don't mix	3
Don't panic	1
brand is	1
brand of	1
brand or	1
brand new	1
brand check	1
brand simply	1
brand was	1
brand name	1
brand names	1
executed. The	1
executed. This	1
executed. It	1
executed. If	1
executed. An	1
executed. However,	1
executed. Furthermore,	1
executed. Optimizes	1
executed. Without	1
faster. The	3
faster. It	1
faster. In	2
faster. There	1
faster. Division	1
faster. Of	1
diagonal is	1
diagonal and	1
diagonal are	2
diagonal //	1
diagonal have	1
diagonal there	1
diagonal remain	1
diagonal swapd(a[r][c],	1
n; static	1
n; i++)	2
n; switch	1
n; #if	1
n; #endif	1
n; x++)	1
n; u.i	1
n; 143	1
*p and	1
*p =	4
*p or	1
*p +	3
logic of	1
logic may	1
logic structure	1
logic allows	2
logic device	2
logic devices	1
logic behind	1
Microsoft, Intel	4
Microsoft, Intel,	4
Microsoft, Gnu,	1
hard disk	6
hard disk.	2
hard working	1
purposes the	1
purposes is	2
purposes in	1
purposes are	1
purposes than	2
purposes such	1
purposes (www.boost.org).	1
typical set	1
typical software	1
typical way	1
typical uses	1
typical application	1
typical implementation	1
typical repeat	1
typical sources	1
typical degree	1
usability may	1
usability A	1
usability problem	1
usability problems	3
usability reasons.	1
usability ...............................................................................................	1
usability issues,	1
pure function	5
pure if	1
pure function.	1
pure functions,	1
pure __attribute((	1
vectorize the	6
vectorize a	1
vectorize code	1
vectorize automatically.	1
problems. The	2
problems. It	2
problems. Some	1
problems. All	1
problems. Avoid	1
problems. Software	1
problems. More	1
could be	3
could have	1
could calculate	1
could possibly	1
could free	1
could benefit	2
parameter. The	1
parameter. It	1
parameter. If	1
parameter. In	1
parameter. There	1
parameter. But	1
parameter. No	1
parameter. Templates	1
parameter. Further	1
derived class	6
derived class.	1
derived class,	1
derived class:	1
mentioned in	3
mentioned above	1
mentioned below.	1
mentioned above.	3
mentioned here:	1
Time is	1
Time for	2
Time //	1
Time before	1
Time difference	1
Time per	3
Optimization of	2
Optimization in	2
Optimization method	1
Optimization directives	2
Optimization Guide	1
Optimization Reference	1
expressions. It	1
expressions. There	1
expressions. See	1
expressions. For	2
expressions. Most	1
expressions. Floating	1
expressions. Whether	1
expressions. Operations	1
include the	1
include a	3
include not	1
include any	1
include standard	1
include C,	1
include JavaScript,	1
y; //	1
y; x	1
y; }	1
y; ...	1
y; y	4
y; bool	1
overflow. The	1
overflow. This	1
overflow. For	1
overflow. Example:	2
overflow. Table	1
overflow. Likewise,	1
overflow. Signed	1
overflow. Taking	1
element. The	4
element. In	1
element. I	1
element. 100	1
element. Matrix	1
element. Rather	1
oriented programming	7
oriented programs	1
oriented programs.	1
fully compiled	1
fully optimized	2
fully compatible	1
fully standardized	1
fully portable	1
fully optimized.	1
fully utilize	1
fully utilizing	1
storage. The	1
storage. Example	1
storage. If	1
storage. See	1
storage. All	1
storage. No	1
storage. Variables	1
storage. Optimizing	1
storage. Live	1
addition, a	1
addition, and	1
addition, set	1
addition, fast	1
addition, subtraction	3
addition, subtraction,	2
everything is	2
everything in	1
everything that	3
everything happens	1
everything else.	2
involves the	4
involves eight	2
involves allocation	1
involves multiplication	1
involves pure	1
Here the	1
Here is	1
Here are	1
Here it	1
Here you	2
Here we	2
Here CParent	1
factorial =	2
factorial function	2
factorial }	1
factorial (int	2
factorial *=	2
OpenMP is	1
OpenMP and	4
OpenMP directives	3
OpenMP directives.	1
eax to	1
eax =	1
eax with	1
eax /	1
eax ebx,	2
eax edx,	1
eax holds	1
eax $B2$2	1
bb[], short	9
mispredicted for	1
mispredicted only	4
mispredicted even	1
mispredicted (See	1
mispredicted whenever	1
mispredicted 50%	1
standardized and	2
standardized as	1
standardized file	1
standardized allows	1
standardized installation	1
standardized details	1
standardized across	1
standardized manner.	1
(or in	1
(or if	1
(or at	1
(or part	1
(or malloc	1
(or int)	1
(or later)	1
(or higher)	1
(or eight)	1
across the	1
across a	1
across function	2
across all	1
across compilers.	1
across modules	2
across platforms.	1
cycle is	3
cycle if	1
cycle on	3
cycle counter	2
aliasing is	1
aliasing does	1
aliasing (see	2
aliasing When	1
aliasing rule	2
aliasing (/Oa).	1
aliasing /Oa	1
aa[], short	9
tool is	3
tool for	2
tool can	3
tool supports	1
parent and	3
parent class	4
parent classes	1
parent class.	1
care of	7
care to	1
care about	1
systems, and	1
systems, you	2
systems, this	1
systems, but	1
systems, there	1
systems, though	1
systems, especially	1
parm1, int	8
included in	5
included for	1
included with	1
included as	1
false and	1
false =	2
false where	1
false model	1
false regardless	1
false (0);	1
false vendor	1
value. The	3
value. This	1
value. It	1
value. There	1
value. Example:	1
value. However,	1
file. The	1
file. This	2
file. A	1
file. If	1
file. Use	1
file. Only	1
file. Keep	1
*= i;	1
*= x;	5
*= n+1;	1
*= xx4;	1
temporary object	1
temporary array	1
temporary objects	1
temporary variable	1
temporary register	1
temporary storage.	1
temporary debug	1
temporary intermediates,	1
12 or	1
12 -	1
12 option	1
12 Using	2
12 bytes.	1
12 2.7	1
12 $B1$1:	1
memcpy is	1
memcpy function	1
memcpy rather	1
memcpy function.	1
memcpy 16kB	4
procedure to	1
procedure 4	1
procedure linkage	6
PC and	1
PC processors	3
PC processors.	1
PC platform	1
PC platforms.	1
PC platform.	1
frequent if	1
frequent cause	1
frequent allocation	1
frequent source	1
frequent causes	1
frequent updates	1
frequent sources	2
unlimited 4	4
unlimited 8	4
parallelism is	3
parallelism and	1
parallelism than	1
parallelism when	1
parallelism because	1
parallelism refers	1
detection function	5
detection mechanism	1
detection function,	1
detection mechanism.	1
c2 and	1
c2 for	1
c2 =	3
c2 with	1
c2 <	2
"The microarchitecture	8
throw() to	1
throw() statement	1
throw() Assume	1
throw() throw()	3
throw() specification.	1
throw() specification	1
prediction and	1
prediction are	1
prediction or	1
prediction into	1
prediction (see	1
prediction turns	1
prediction mechanism.	1
prediction mechanisms.	1
polymorphic function	1
polymorphic class	1
polymorphic member	2
polymorphic function.	1
polymorphic functions.	1
polymorphic child	1
polymorphic classes.	1
#if is	2
#if instead	1
#if directives	2
#if INSTRSET	2
#if defined(__unix__)	1
now that	1
now be	1
now as	1
now used	1
now contains	2
now overlap.	1
now discontinued	1
unit is	2
unit of	1
unit for	1
unit as	1
unit intended	1
unit throughput	2
conventions for	7
conventions are	1
register. The	2
register. This	1
register. If	1
register. In	1
register. Factors	1
register. Everything	1
register. Registers	1
kind of	8
graphical user	6
graphical interface	2
lower than	1
lower instruction	1
lower 8	1
lower 16	1
lower priority	2
lower priority.	1
lower case:	1
label is	1
label if	1
label ;	3
label plus	1
label $B1$2:.	1
label ;eax=addressofa	1
iterations is	1
iterations of	1
iterations and	1
iterations in	1
iterations such	1
iterations are:	1
iterations back.	1
iterations ahead.	1
misprediction is	1
misprediction of	1
misprediction long	1
misprediction before	1
misprediction every	1
misprediction penalty	2
misprediction penalty.	1
integer, and	2
integer, or	1
integer, then	1
integer, pointer	1
integer, so	1
integer, signed	1
integer, usually	1
binding is	1
binding of	1
binding can	1
binding by	2
binding should	1
binding definitely	1
binding leads	1
just-in-time compiler	1
just-in-time compilation	3
just-in-time compilation.	2
just-in-time compilers,	2
try to	4
try {	1
try different	1
try block	1
try block.	1
background is	1
background are	1
background calculations	1
background process	1
background job	1
background processes	1
background services	1
background jobs.	1
converted to	7
converted by	1
pointed to	7
pointed to.	1
CPUs, as	3
CPUs, not	1
CPUs, different	1
CPUs, but	3
account in	1
account for	1
account that	1
account when	5
p) {	7
p) {return	1
chain is	1
chain of	1
chain in	1
chain may	1
chain has	1
chain which	1
chain where	1
chain would	1
algorithms is	1
algorithms to	1
algorithms and	1
algorithms in	2
algorithms for	1
algorithms are	1
algorithms used	1
PLT and	1
PLT for	2
PLT tables	2
PLT entry	2
PLT lookups	1
heavy work	1
heavy mathematical	1
heavy graphics	2
heavy background	1
heavy marketing	1
heavy competition.	1
heavy traffic	1
once the	1
once The	1
once for	2
once or	1
once more	1
once then	1
once made	1
additions and	3
additions in	2
additions are	1
additions by	1
additions with	1
hash table	3
hash map	3
hash maps	1
hash map.	1
ecx and	2
ecx =	2
ecx contains	1
ecx DWORD	1
ecx now	1
ecx 86	1
system. The	2
system. This	1
system. It	1
system. See	2
system. AVX	1
system. Note	1
variables, and	1
variables, if	1
variables, loop	1
variables, but	1
variables, integer	1
variables, floating	1
variables, float	1
variables, arrays	1
equally efficient	2
equally likely	1
equally fast	1
equally efficient.	2
equally near	1
equally fast.	1
however, to	1
however, and	1
however, if	1
however, when	1
however, there	1
however, where	2
however, often	1
designed to	2
designed for	3
designed by	1
designed so	1
designed program.	1
profiling and	1
profiling (see	1
profiling support	1
profiling support.	1
profiling tools	1
profiling instruments	1
profiling feasible.	1
profiling methods:	1
fragmented and	3
fragmented when	3
fragmented hard	1
fragmented thanks	1
inputs is	1
inputs to	1
inputs for	1
inputs are	1
inputs have	1
inputs when	1
inputs give	2
fast. The	2
fast. This	1
fast. In	1
fast. All	1
fast. Simple	1
fast. Value	1
fast. Calculating	1
family of	1
family and	3
family can	1
family have	1
family number	1
family number,	1
4, we	1
4, while	1
4, 8,	1
4, Wednesday	1
4, 6,	1
4, 2007	1
4, etc.).	1
4, anda	1
Virtual function	1
Virtual functions	3
Virtual member	3
Virtual call	1
j =	2
j by	1
j as	1
j *	2
j <	1
j <<	1
interrupt the	1
interrupt should	1
interrupt 3	2
interrupt occurs	1
interrupt 3.	1
interrupt service	2
-1 =	5
-1 -	1
-1 x	1
-1 (a&~b)|(~a&b)=a^b	1
8, but	1
8, 16	1
8, last	2
8, 16,	2
8, 10,	1
8, Thursday	1
units. The	2
units. This	1
units. If	1
units. For	1
units. Each	1
units. Any	1
units. Typically,	1
who is	1
who are	1
who have	1
who has	1
who want	2
who would	2
fastest on	1
fastest because	1
fastest possible	1
fastest way	2
fastest execution	1
fastest solution	1
fastest first.	1
__restrict or	2
__restrict #pragma	2
__restrict __restrict	1
__restrict __declspec(	1
__restrict aa,	1
__restrict bb)	1
arithmetic A	1
arithmetic operations	2
arithmetic calculations	1
arithmetic operations.	2
arithmetic units,	1
arithmetic expression.	1
DLL is	1
DLL can	1
DLL or	1
DLL with	1
DLL use	1
DLL at	1
DLL takes	1
DLL goes	1
factors in	1
factors for	1
factors that	3
factors are	2
factors as	1
Gnu, Intel	1
Gnu, Clang	3
Gnu, Clang,	4
arrays. //	1
arrays. It	1
arrays. There	1
arrays. I	1
arrays. An	1
arrays. Note	1
arrays. Array	1
arrays. Strings	1
devices and	2
devices are	2
devices if	1
devices with	1
devices A	1
devices typically	1
branch. The	1
branch. It	1
branch. If	1
branch. There	1
branch. See	1
branch. Example:	1
branch. After	1
branch. Microprocessor	1
required is	1
required a	1
required for	3
required //	1
required amount	2
(unsigned int	1
(unsigned int)b	4
(unsigned int)size)	1
(unsigned int)a	1
(unsigned int)(max	1
almost the	1
almost all	2
almost always	1
almost certain	2
almost identical	1
almost independent	1
GOT and	4
GOT for	1
GOT through	1
GOT lookup	1
GOT entry.	1
array. The	3
array. //	1
array. This	1
array. But	1
array. No	1
array. eax	1
listed in	6
listed on	1
listed below	1
general function	1
general method	1
general case	1
general statement	1
general purposes	1
general case,	1
general literature	1
general improvements	1
preferred to	3
preferred when	1
preferred because	1
preferred method	1
preferred programming	1
preferred language	1
cycles, then	2
cycles, but	1
cycles, depending	5
explicitly in	1
explicitly that	1
explicitly if	1
explicitly by	2
explicitly as	1
explicitly when	1
explicitly what	1
space. The	1
space. A	3
space. It	2
space. Excessive	1
space. Putting	1
fixed size	3
fixed address	1
fixed repeat	1
fixed size,	1
fixed breakpoint	1
fixed strides.	1
Memory and	1
Memory access	1
Memory allocated	2
Memory swapping	1
Memory copying.	1
Memory swapping.	1
Memory access.......................................................................................................	1
zero. The	1
zero. A	1
zero. It	1
zero. You	1
zero. An	1
zero. Execution	1
zero. 14.3	1
zero. Zero	1
non-sequential which	1
non-sequential order	1
non-sequential access	1
non-sequential order.	3
non-sequential manner	1
non-sequential manner.	1
multiplying the	1
multiplying by	2
multiplying with	4
multiplying them.	1
Conversion of	5
Conversion to	1
Conversion from	2
down the	2
down a	1
down to	2
down and	1
down sign	1
down dependency	1
software. This	1
software. A	1
software. It	1
software. You	1
software. For	1
software. Such	1
software. Smaller	1
software. Background	1
interpreted in	1
interpreted as	2
interpreted version	1
interpreted line	1
interpreted languages	1
interpreted again	1
interpreted script	1
exactly the	3
exactly as	2
exactly what	1
exactly identical	2
jump to	2
jump by	1
jump from	1
jump between	1
jump through	1
jump targets.	1
jump tables,	1
determined in	1
determined by	5
determined with	1
determined where	1
cc[]) {	8
line. The	2
line. This	1
line. Some	1
line. But	1
line. Only	1
line. 132	1
line. Time-based	1
easily be	3
easily available	1
easily optimize	1
easily become	1
easily justify	1
easily ported	1
identification 16	1
identification adds	1
identification (RTTI)	4
identification (RTTI).	1
identification (RTTI),	1
vectors. The	2
vectors. This	1
vectors. A	1
vectors. There	1
vectors. These	1
vectors. 12.10	1
vectors. Code	1
2) {	4
2) 2	2
2) :	1
2) SelectAddMul_pointer	1
applications. The	2
applications. Some	1
applications. But	1
applications. Therefore,	1
applications. Alternatively,	1
applications. Remember	1
applications. 2.8	1
volatile is	1
volatile int	2
volatile then	1
volatile doesn't	1
volatile keyword	2
volatile volatile	1
misses is	1
misses and	2
misses in	2
misses are	1
misses by	1
misses have	1
tables of	1
tables are	3
tables can	1
tables if	1
tables Reading	1
tables .................................................................................................	1
random than	1
random number	1
random times	1
random access.	1
random order.	2
random manner.	1
random events	1
X The	1
X make	1
X operating	2
X Compilers	1
X #else	1
X (Darwin)	1
X __attribute__((aligned(16)))	1
Conversions of	1
Conversions between	6
Conversions involving	1
YMM in	1
YMM register	1
YMM registers	3
YMM vectors	1
YMM registers.	2
resolved when	2
resolved at	4
resolved before	1
purpose is	1
purpose of	4
purpose in	1
purpose libraries	1
-fpic is	1
-fpic and	1
-fpic in	2
-fpic because	1
-fpic according	1
-fpic option.	1
D is	1
D are	1
D has	1
D language	1
D :	2
D language.	1
had the	1
had a	1
had in	1
had not	1
had an	1
had used	1
had read	1
parameters. This	1
parameters. A	1
parameters. In	1
parameters. There	1
parameters. Therefore,	1
parameters. Floating	1
parameters. Or	1
ebx, 1	1
ebx, DWORD	2
ebx, eax	3
ebx, 31	1
measure the	1
measure that	1
measure are	1
measure //	1
measure how	2
measure exactly	1
poorly for	1
poorly designed	1
poorly predictable	2
poorly predictable.	2
poorly predictable,	1
this: //	6
this: Use	1
sections are	1
sections can	1
sections below.	1
sections SSE	1
sections /Gy	1
sections describe	2
Software that	1
Software should	1
Software developers	2
Software Developer’s	2
Software distributors	1
Even function	1
Even with	1
Even some	1
Even big	1
Even worse,	1
Even better,	1
Even better:	1
19 in	1
19 };	1
19 Avoid	1
19 Literature	2
19 3.5	1
19 3.6	1
important. This	2
important. A	2
important. Some	1
important. An	1
important. 9.2	1
carry and	1
carry bit	3
carry flag	3
lazy loading	1
lazy binding	6
xn is	1
xn =	2
xn as	1
xn /	1
xn n	1
xn *=	1
stamp counter	5
stamp counter.	2
debugging and	3
debugging if	1
debugging support	1
debugging options	1
debugging facilities,	1
10; a	4
10; //	1
10; int	1
10; Templates	1
table. The	1
table. If	2
table. Unfortunately,	1
table. Optimization	1
table. Even	1
table. Type	1
1, but	1
1, 2,	4
1, Monday	1
1, 2A,	1
vector, the	1
vector, and	1
vector, such	1
vector, bits	2
vector, while	1
vector, uses	1
(b) {	7
object, and	2
object, you	1
object, then	2
object, unless	1
object, except	1
allowed to	2
allowed and	1
allowed in	2
allowed only	1
allowed inputs	1
delete the	1
delete is	1
delete to	1
delete or	2
delete it	1
delete (or	1
Likewise, the	1
Likewise, a	1
Likewise, it	1
Likewise, if	1
Likewise, you	1
Likewise, when	1
Likewise, all	1
follows: //	1
follows: struct	1
follows: Instruction	2
follows: Type	1
follows: Matrix	1
follows: floatvalue	1
simultaneously. This	2
simultaneously. If	2
simultaneously. In	1
simultaneously. Each	1
simultaneously. Actually,	1
itself is	2
itself and	2
itself in	1
itself when	1
itself is.	1
solution. The	1
solution. It	1
solution. Many	1
solution. (In	1
solution. Is	2
solution. Sort	1
algebra and	1
algebra in	1
algebra are	1
algebra reductions:	4
suitable for	1
suitable functions	1
suitable set	1
suitable choice	1
suitable containers	1
suitable pivot	1
suitable duration.	1
Template for	1
Template Library	4
Template meta-	1
Template Library)	1
spend a	1
spend on	1
spend time	2
spend more	1
spend most	2
switches is	1
switches and	1
switches are	1
switches can	1
switches by	1
switches A	1
switches after	1
disk. A	2
disk. Memory	1
disk. Software	1
disk. Test	1
disk. Provoke	1
disk. Memory-hungry	1
serious when	1
serious problem	1
serious errors	1
serious legal	2
serious limitations	1
serious burden	1
c); //	4
c); ...	2
c); a.store(aa+i);	1
Studio can	1
Studio This	1
Studio when	1
Studio IDE.	1
Studio optimizes	1
Studio 2008	1
Studio 2005).	1
a[100]; for	1
a[100]; //	1
a[100]; int	3
a[100]; float	2
trick is	1
trick of	2
trick that	1
trick will	1
trick which	1
trick violates	1
disadvantages of	2
disadvantages that	1
disadvantages when	2
disadvantages mentioned	1
disadvantages compared	1
eax, 8	1
eax, 1	1
eax, 100	2
eax, eax	1
eax, ecx	1
eax, edx,	1
distributed to	2
distributed and	1
distributed as	3
distributed between	1
generally not	1
generally used	1
generally possible	1
generally very	1
generally faster	1
generally assume	2
mode, the	1
mode, and	2
mode, for	1
mode, as	1
mode, where	1
mode, we	1
Linux. The	1
Linux. It	1
Linux. 32-bit	1
Linux. Has	1
Linux. 82	1
Linux. Asmlib	1
Linux. Address	1
C1 or	1
C1 {	1
C1 :	2
C1 x;	1
C1 obj1;	1
C1 Object1;	1
instances of	4
instances that	1
instances will	1
instances makes	1
called, a	1
called, or	1
called, it	3
called, even	1
called, while	1
update the	1
update or	1
update when	1
update automatically	1
update mechanism	1
update process	1
update process.	1
<= n	1
<= n;	2
<= (unsigned	1
<= 16;	1
<= u.f	1
<= max)	1
integer. The	2
integer. If	2
integer. But	1
integer. Floating	1
integer. 158	1
body is	2
body of	2
body inside	1
body now	1
body begins	1
definition code	1
definition language	4
definition language.	1
definition language,	1
Java and	1
Java are	1
Java virtual	2
Java machines	1
Java implementations.	1
Java today.	1
Math core	1
Math Library	1
Math Kernel	5
generates the	2
generates is	1
generates to	1
generates no	1
generates too	1
generates 127.	1
executing the	2
executing a	1
executing library	1
executing instructions	3
Open files	1
Open source	1
Open database	1
Open BSD	1
Open Watcom	2
Open source.	1
256; //	1
256; i	5
256; i++)	1
optimizations. The	2
optimizations. In	1
optimizations. See	1
optimizations. Most	1
optimizations. Do	1
optimizations. Loops	1
Cache control	1
Cache contentions	3
Cache misses	1
Cache organization	2
slower or	1
slower than	6
free the	2
free and	1
free in	1
free register	1
free are:	1
free E-book	1
consuming because	2
consuming library	1
consuming calculations	1
consuming parts	1
consuming updates	1
consuming features	1
hold the	2
hold only	1
hold many	1
hold 8	1
hold four	1
hold e.g.	1
memory, as	1
memory, at	1
memory, but	1
memory, using	1
memory, such	1
memory, depending	1
memory, windows,	1
p. 43).	1
p. 87).	1
p. 104).	1
p. 22).	1
p. 28)	1
p. 26).	1
p. 57).	1
SIZE; r++)	4
SIZE; c++)	2
SIZE; r1	1
case. The	2
case. A	1
case. You	1
case. Loop	1
case. Intrinsic	1
case. Inlined	1
( short	3
( ;	1
( 1)sign	3
expensive and	1
expensive in	1
expensive that	1
expensive if	1
expensive -	1
expensive than	1
expensive cache	1
rounding and	2
rounding mode	1
rounding unless	1
rounding instead	2
rounding 137	1
130 for	4
130 14	1
130 14.4	1
130 Compile	1
far from	3
far data	1
far pointers,	1
far procedures	1
far (arrays	1
They can	3
They may	1
They have	2
They sometimes	1
exceptions is	1
exceptions a	1
exceptions in	1
exceptions are	1
exceptions can	1
exceptions throw()	1
exceptions thrown	1
system, the	1
system, and	2
system, as	1
system, not	1
system, this	1
system, but	1
absolute value	3
absolute addresses	1
absolute references	1
absolute addresses.	1
absolute values:	1
(a +	1
(a *	1
(a >	2
(a >=	1
(a ==	1
(a !=	1
machine are	1
machine code	4
machine instructions	1
machine instructions.	1
Induction =	1
Induction variables	5
Induction ;	1
120 for	2
120 However,	1
120 13	1
120 ms	1
120 12.10	1
120 12.9	1
hardly any	4
hardly relevant	1
hardly worth	1
hardly ever	1
CPUID is	1
CPUID instruction	3
CPUID information	2
CPUID was	1
saved in	3
saved from	1
saved all	1
saved variable	1
saved either	1
changes the	2
changes of	1
changes in	1
changes for	1
changes then	1
changes fastest:	1
integers, and	1
integers, as	1
integers, then	1
integers, which	1
integers, but	1
integers, while	1
integers, depending	1
collection of	2
collection can	1
collection may	1
collection when	1
collection takes	1
collection contains	1
manuals is	1
manuals are	3
manuals can	1
manuals by	1
manuals from	1
processor. The	1
processor. This	1
processor. However,	1
processor. Such	1
processor. Extra	1
processor. Nested	2
Shared objects	7
storing the	1
storing function	1
storing data	1
storing user	1
storing intermediate	1
storing strings	1
storing text	1
developers may	1
developers should	2
developers typically	1
developers choose	1
developers who	1
developers feel	1
parm2) {	1
parm2) {...}	6
T is	1
T to	1
T //	1
T const	1
T &	1
T max(T	1
T a[N];	1
eliminate this	1
eliminate one	1
eliminate i	1
eliminate common	2
eliminate everything	1
eliminate branches,	1
2: //	1
2: template	1
2: 12	1
2: "Optimizing	3
2: printf("Gamma");	1
composite objects	2
composite type	4
composite object,	1
profilers are	3
profilers such	1
profilers available	1
profilers require	1
profilers are:	1
highly system	1
highly optimized	4
highly compatible	1
highly optimized,	1
again and	2
again for	1
again from	1
again two	1
again takes	1
again before	1
127 int	1
127 will	1
127 bytes	1
127 1	1
127 127	1
127 126	1
127 int8_t	1
language. It	1
language. C++	1
language. In	1
language. See	1
language. Such	1
language. Here	1
language. D	1
aware of	4
aware that	2
aware of.	1
Alternatively, you	5
Alternatively, use	1
Alternatively, make	1
capabilities of	1
capabilities for	1
capabilities are	1
capabilities can	1
capabilities (see	1
capabilities still	1
capabilities (except	1
4) {	4
4) +	1
4) |	2
linker to	2
linker and	2
linker will	1
linker makes	1
linker extracts	1
int64_t 2	1
int64_t 4	1
int64_t 64	1
int64_t 128	1
int64_t 256	1
int64_t MS	1
int64_t 29	1
bits. The	3
bits. This	3
bits. There	1
measurements to	2
measurements are	1
measurements can	1
measurements on	1
measurements as	1
measurements may	1
representation is	1
representation of	4
representation directly	1
representation according	1
SomeFunction (int	7
size, not	1
size, because	1
size, which	1
size, bits	1
size, while	1
size, bytes	1
size, etc.	1
is. The	2
is. //	1
is. This	1
is. It	1
is. ecx	1
is. Factors	1
reductions: Common	1
reductions: x--	1
reductions: a+b	1
reductions: a+b=b+a	1
reductions: !(!a)=a	1
reductions: a+b=b+a,	1
reductions: ~(~a)	1
waiting for	7
available, one	1
available, such	1
available, we	1
available, 256	1
available, though	1
available, e.g.	1
available, i.e.	1
automatically. The	3
automatically. It	1
automatically. There	1
automatically. For	1
automatically. However,	1
powers of	7
debug and	1
debug version	4
debug information	1
debug breakpoints	1
polymorphism is	1
polymorphism that	1
polymorphism or	1
polymorphism with	2
polymorphism A	1
polymorphism effect	1
Clang and	2
Clang The	1
Clang compiler	2
Clang compilers.	1
Clang Supported	1
measured in	1
measured with	1
measured on	1
measured time	1
measured simply	1
measured results	1
measured separately.	1
details. The	2
details. //	1
details. Use	1
details. Note	1
details. Development	1
details. Inheritance	1
factor is	1
factor of	1
factor to	1
factor in	1
factor 4	1
factor rather	1
factor sizeof(S1)	1
x); //	1
x); }	3
x); const	1
x); s	1
x); 136	1
core. It	2
core. There	1
core. For	1
core. Unfortunately,	1
core. Two	1
core. Try	1
rules of	3
rules for	1
rules about	1
rules apply	2
speed. This	1
speed. A	1
speed. In	2
speed. Assume	1
speed. Optimizing	1
speed. Delays	1
vectorization. The	3
vectorization. It	1
vectorization. 3.	1
vectorization. Optimizes	2
anyway. The	1
anyway. It	1
anyway. If	1
anyway. You	1
anyway. Software	1
anyway. Pure	1
anyway. Updates	1
smallest data	1
smallest integer	3
smallest list	1
smallest members	1
smallest devices,	1
responsibility of	7
Mathematical vector	1
Mathematical functions	6
MMX to	1
MMX int	1
MMX long	1
MMX short	1
MMX char	1
MMX registers,	1
MMX mmintrin.h	1
reliable and	1
reliable than	1
reliable source	1
reliable results	1
reliable solution.	1
reliable results.	1
reliable decision.	1
Borland and	1
Borland compiler	1
Borland C++	2
Borland /	1
Borland Microsoft	1
Borland bcc,	1
sense to	1
sense that	6
latest instruction	2
latest compilers	1
latest version	3
latest versions	1
Now the	2
Now it	1
Now call	1
Now ebx	1
Now s0,	1
Now 1.0	1
units and	1
units in	1
units are	1
units can	1
units same	1
units rather	1
units smaller	1
do. The	2
do. This	2
do. It	1
do. All	1
do. Hence,	1
reciprocal of	2
reciprocal in	1
reciprocal n.a.	1
reciprocal Boolean	1
reciprocal square	1
reciprocal factorials	1
d, __m128i	4
d, y;	2
d, e,	1
threads. The	3
threads. There	1
threads. Each	1
threads. Don't	1
threads. Out-of-order	1
log is	1
log are	1
log on	3
log off	1
log (b[i]	1
thousand cache	1
thousand so	1
thousand times	2
thousand numbers	1
thousand results	1
thousand numbers.	1
compile-time if	1
compile-time constant	1
compile-time while	1
compile-time whether	1
compile-time generation	1
compile-time polymorphism.	1
compile-time polymorphism,	1
remove the	3
remove or	1
remove all	1
remove any	1
remove unreferenced	1
Intel's CPU	2
Intel's compilers	1
Intel's profiler	1
Intel's Math	2
Intel's term	1
16. This	2
16. If	1
16. In	1
16. You	1
16. Library	1
16. Alignment	1
registers, and	1
registers, not	2
registers, which	1
registers, regardless	1
registers, whereas	1
registers, totaling	1
transpose the	1
transpose a	2
transpose and	2
transpose function	1
transpose matrix	1
wait for	4
wait until	3
number. The	1
number. If	2
number. I	1
number. Therefore,	1
number. We	1
number. Failure	1
break a	2
break will	1
break at	1
break while	1
break down	1
constant. The	1
constant. //	1
constant. It	1
constant. If	1
constant. Example:	1
constant. 14.2	1
linkage table	5
linkage table.	1
possible, and	4
possible, or	1
possible, so	1
scan instruction	3
scan instructions.	1
scan instruction.	1
scan forward)	1
systems: The	1
systems: int	1
systems: long	1
systems: unsigned	2
systems: Pointers,	1
predictable the	1
predictable than	2
predictable then	1
predictable branch	1
predictable operand	1
"Hello 2"	2
"Hello ";	2
"Hello 1"	2
equal to	5
equal amount	1
CodeGear compiler	1
CodeGear /	1
CodeGear Microsoft	1
CodeGear Borland	1
CodeGear compiler).	1
CodeGear compiler)	1
compact and	2
compact if	1
compact by	1
compact than	1
compact so	1
polynomial of	1
polynomial The	1
polynomial can	1
polynomial //	1
polynomial with	1
polynomial (Vec4f	1
Common subexpression	4
Common devices	1
Common Language	1
reads to	1
reads and	1
reads or	2
reads from	2
plus the	1
plus a	1
plus an	1
plus 6	1
plus one,	1
plus i*sizeof(S1).	1
5: calling	1
5: "Calling	5
increase the	5
increase in	1
casting of	2
casting //	2
casting operator	2
course, and	1
course, that	1
course, if	1
course, this	1
course, because	1
course, but	1
scope of	5
scope or	1
principle is	1
principle of	2
principle for	2
principle as	1
throughput of	3
throughput There	1
throughput (see	1
throughput .......................................................................................	1
spent in	2
spent on	3
spent fighting	1
16; a	2
16; //	2
16; int	1
16; n++)	1
Func is	2
Func with	1
Func 87	1
Func ()	1
Func ;a	1
identify the	2
identify a	1
identify and	1
identify performance	1
identify individual	1
15 on	1
15 clock	1
15 Integer	1
15 byte	1
15 Metaprogramming	2
14 -	1
14 3	1
14 2.8	1
14 Specific	2
14 Portability	1
this. The	1
this. It	1
this. See	1
this. Unfortunately,	1
this. My	1
this. (In	1
Register variables	1
Register allocation	1
Register storage	1
Register ebx	1
Register variables,	2
complex and	1
complex if	1
complex integer	1
complex cases	1
complex framework	1
complex digital	1
Intrinsic function	2
Intrinsic functions	4
call. The	1
call. A	1
call. I	1
call. Load	1
call. Algebraic	1
call. (2)	1
notice is	2
notice that	2
notice This	1
notice ..........................................................................................................	1
Add the	1
Add to	3
Add 2	2
prediction. The	1
prediction. A	2
prediction. If	1
prediction. Example:	1
prediction. Modern	1
expected to	3
expected for	1
expected that	1
expected real-time	1
declare the	2
declare it	1
declare an	1
declare all	1
declare objects	1
application. The	3
application. If	1
application. In	1
application. You	1
here. The	2
here. It	2
here. You	1
here. Any	1
largest vector	1
largest available	1
largest element	3
largest vector.	1
dispatched function	4
dispatched version	2
members. The	1
members. This	1
members. A	1
members. It	1
members. If	1
members. But	1
fits the	2
fits into	2
fits best	2
x-xxxx--x x-xxxx--x	1
x-xxxx--x x-xx-----	1
x-xxxx--x Profile-guided	1
x-xxxx--x ~a&~b=~(a|b)	1
x-xxxx--x (a|b)&(a|c)	1
x-xxxx--x Constantfolding	1
giving the	1
giving it	1
giving this	1
giving each	1
giving access	1
giving specific	1
comparisons are	3
comparisons by	1
comparisons more	1
comparisons i	1
Performance and	2
Performance for	1
Performance Primitives	1
Performance Primitives"	1
Performance Primitives".	1
above, the	1
above, it	1
above, but	1
above, page	1
above, so	1
above, p.	1
above. The	1
above. A	1
above. An	1
above. Now	1
above. Examples	1
above. 7.	1
Pointer type	1
Pointer aliasing	1
Pointer arithmetic	2
Pointer elimination	2
detect the	1
detect that	1
detect if	1
detect an	1
detect which	1
detect opportunities	1
normal on	1
normal return	1
normal unsigned	1
normal writes	1
normal array.	1
normal afterwards.	1
Several function	1
Several other	1
Several modern	1
Several special	1
Several graphical	1
Several internet	1
convenient to	4
convenient for	1
convenient way	1
show the	1
show a	2
show that	1
show how	1
show various	1
column to	1
column <	1
column 28	2
column 29	1
column 28,	1
{...} //	6
Test the	1
Test and	2
Test if	1
Test with	1
Test Processor	1
c1 for	1
c1 {	1
c1 other	1
c1 <	1
c1 before	1
c1 +=	1
x- x	5
x- x-	1
Number of	4
Number 18	1
Number 17	1
portability is	1
portability to	1
portability and	2
portability could	1
portability issue	1
SSE3 instruction	1
SSE3 required	1
SSE3 instr.	1
SSE3 tmmintrin.h	1
SSE3 pmmintrin.h	1
SSE3 horizontal	1
evaluate the	1
evaluate a	1
evaluate and	1
evaluate b	1
evaluate whether	1
evaluate both	1
embedded systems	2
embedded systems.	2
embedded applications	1
embedded microcontrollers.	1
Agner vector	1
Agner 8	1
Agner Available	1
Agner Fog.	2
Agner Fog	1
availability of	6
13.1 can	1
13.1 //	1
13.1 CPU	2
13.1 page	1
13.1 below.	1
reference, the	1
reference, a	1
reference, or	2
reference, 64-bit	1
reference, 32-bit	1
.NET and	1
.NET framework	4
.NET framework.	1
!= 0;	1
!= 0)	4
!= INVALID_HANDLE_VALUE	1
files, data	1
files, preferably	1
files, resource	1
files, help	2
files, configuration	1
Pointers to	1
Pointers and	3
Pointers can	1
Pointers versus	1
half the	2
half a	1
half of	1
half speed	2
converting the	1
converting a	3
converting to	2
occurs in	2
occurs more	1
occurs because	1
occurs during	1
occurs somewhere	1
Set function	1
Set pointer	2
Set sign	1
Set flush-to-zero	2
costly to	1
costly and	1
costly if	1
costly when	1
costly because	2
newest CPU	2
newest instruction	3
newest processors.	1
specifying the	2
specifying that	2
specifying parallel	1
specifying otherwise.	1
follows the	1
follows a	3
follows in	1
follows (using	1
comparing the	1
comparing it	1
comparing i	1
comparing bits	1
comparing signed	1
comparing them	1
efficient, and	2
efficient, but	3
efficient, way	1
computers to	1
computers and	1
computers with	1
computers have	3
B and	1
B =	2
B value	1
B before	1
B values.	1
System code	2
System programming	2
System database	2
five or	1
five values	1
five manuals	1
five times.	1
five manuals.	1
five manuals:	1
step of	2
step in	1
step by	1
step where	1
step rather	1
poor if	1
poor because	1
poor CPU	1
poor performance	1
poor branch	1
poor documentation	1
prefetch the	1
prefetch more	1
prefetch data	3
prefetch instruction	1
9 and	2
9 +	1
9 extra	1
9 Optimizing	2
deciding which	1
deciding whether	5
self-relative addresses	1
self-relative references	1
self-relative address.	1
self-relative addressing	2
self-relative addressing.	1
(float const	1
(float x)	3
(float a)	1
(float *)alloca(n	1
Core and	1
Core 2	3
Core Math	1
Core i7	1
debugger is	1
debugger to	1
debugger and	1
debugger can	1
debugger then	1
debugger cannot	1
^ b	1
^ 1;	1
^ -1	1
^ ~a	1
^ operator.	1
^ ~b	1
regardless of	6
truncation and	2
truncation when	1
truncation takes	1
truncation so	1
truncation towards	1
base is	1
base a	1
base class	1
base address	1
base classes.	1
base access,	1
result. The	1
result. A	1
result. You	1
result. Example:	1
result. An	2
How compilers	2
How much	3
How was	1
chain. A	1
chain. If	1
chain. We	1
chain. Such	1
chain. 3.16	1
chain. Nothing	1
Reading a	1
Reading or	4
Reading again	1
compilation is	1
compilation of	2
compilation or	1
compilation may	1
compilation before	1
spots and	1
spots in	2
spots have	1
spots Before	1
spots ..................................................................................	1
behavior of	4
behavior can	1
behavior well-defined	1
happens if	1
happens when	1
happens at	1
happens inside	1
happens quite	1
happens rarely.	1
7 and	1
7 The	2
7 int	1
7 program	1
7 through	1
87 for	1
87 used	1
87 about	1
87 9.3	1
87 9.1	1
87 9.2	1
Type of	2
Type conversions	1
Type size,	1
Type casting	1
Type conversions....................................................................................................	1
places in	1
places when	1
places making	1
places back	1
places back.	1
places back,	1
unwinding The	1
unwinding that	1
unwinding information	1
unwinding mechanism	2
unwinding ..............................................................................	1
static, the	1
static, as	1
static, when	4
am not	2
am using	2
am always	1
am giving	1
leaf function	4
leaf functions	1
leaf function.	1
evaluated in	1
evaluated if	2
evaluated at	1
evaluated only	1
evaluated every	1
completely because	1
completely independent	1
completely rule	1
completely contained	1
completely unrolled	1
completely absent	1
again. The	1
again. This	1
again. If	2
again. Obviously,	1
again. Accessing	1
powerful and	1
powerful solution	1
powerful development	1
powerful computers	2
powerful facilities	1
form a	1
form of	4
form than	1
deallocated in	3
deallocated when	3
times. This	2
times. A	1
times. It	1
times. Then	1
times. Thread-local	1
32- and	3
32- bit	3
edx can	1
edx =	2
edx as	1
edx but	1
edx contains	1
rule of	2
rule out	4
one. The	2
one. This	1
one. It	1
one. You	1
one. I	1
permissible to	1
permissible in	1
permissible for	2
permissible if	1
permissible when	1
worst possible	2
worst case	3
worst problem	1
job of	1
job can	1
job into	1
job before	1
job optimizing	1
job fast	1
due to	6
1.0; for	1
1.0; int	1
1.0; }	1
1.0; while	1
1.0; list[i].b	1
1.0; temp->b	1
depend on	6
biggest time	2
biggest possible	1
biggest disadvantage	1
biggest vectors:	1
biggest time-consumer	1
?Func@@YAXQAHAAH@Z is	1
?Func@@YAXQAHAAH@Z ?Func@@YAXQAHAAH@Z	2
?Func@@YAXQAHAAH@Z ENDP	1
?Func@@YAXQAHAAH@Z PROCNEAR	1
?Func@@YAXQAHAAH@Z PROC	1
defines a	3
defines an	1
defines hardware	1
defines electrical	1
overlap. If	1
overlap. You	2
overlap. See	1
overlap. Compilers	1
overlap. 27	1
processing, and	1
processing, data	1
processing, OpenMP	2
processing, signal	1
processing, sound	1
SelectAddMul(short int	6
users and	1
users in	1
users with	1
users as	1
users will	1
users have.	1
soon be	1
soon as	2
soon also	1
soon get	1
soon became	1
six in	1
six integer	2
six instructions	1
six times	1
six years	1
Testing the	1
Testing for	1
Testing multiple	2
Testing speed	1
Testing speed..............................................................................................................	1
general, the	1
general, it	1
general, you	3
general, there	1
roll out	6
(i.e. the	1
(i.e. if	1
(i.e. where	1
(i.e. variables	1
(i.e. 2,	1
(i.e. Microsoft,	1
edx, to	1
edx, DWORD	2
edx, eax	1
edx, ecx,	1
edx, respectively.	1
C++, and	2
C++, it	1
C++, directly	1
C++, Pascal	1
C++, D,	1
i); //	6
mixed with	1
mixed language	1
mixed precision	1
mixed implementation	1
mixed types	1
mixed sizes.	1
protection means	1
protection schemes	3
protection against	1
protection scheme	1
counter. The	1
counter. This	1
counter. A	1
counter. Example:	2
counter. Any	1
structure. The	2
structure. This	1
structure. It	1
structure. For	1
structure. Incrementing	1
4. The	2
4. Instruction	1
4. Even	1
4. So	1
4. Align	1
security reason	1
security reasons	1
security problem.	1
security software.	1
security advices	1
security matters.	1
branches. The	2
branches. A	1
branches. If	1
branches. They	1
branches. Manual	1
Is16vec8 a	1
Is16vec8 b	1
Is16vec8 c	1
Is16vec8 Vec8s	1
Is16vec8 two(2,2,2,2,2,2,2,2);	1
Is16vec8 zero(0,0,0,0,0,0,0,0);	1
cores. A	1
cores. You	2
cores. Each	1
cores. 3.15	1
cores. 60	1
communication and	2
communication with	1
communication between	3
avoiding the	2
avoiding pointer	1
avoiding any	1
avoiding this.	1
avoiding infinite	1
anything it	1
anything by	1
anything else	3
anything here	1
INSTRSET is	1
INSTRSET ==	5
Accessing a	3
Accessing an	1
Accessing data	1
Accessing system	1
internal functions	1
internal variables	1
internal references.	3
internal multi-threading,	1
type-casting with	1
type-casting i	1
type-casting without	1
type-casting its	2
type-casting pointers:	1
requirements of	3
requirements for	1
requirements are	2
profiler. The	1
profiler. This	1
profiler. A	1
profiler. It	1
profiler. For	1
__fastcall or	1
__fastcall keyword	1
__fastcall changes	1
__fastcall __attribute((	1
__fastcall Noncached	1
loss of	5
cleanup of	1
cleanup that	1
cleanup before	1
cleanup jobs	2
Functions that	2
Functions Function	1
Functions _intel_fast_memcpy	1
Functions ................................................................................................................	1
handling. It	1
handling. You	1
handling. See	1
handling. 8.6	1
handling. Omitting	1
Fortran is	1
Fortran and	1
Fortran are	1
Fortran where	1
Fortran code.	1
increment the	1
increment and	1
increment an	1
increment operators	1
increment i++.	1
drivers for	2
drivers are	1
drivers may	1
drivers differ	1
economize the	4
economize resource	1
Templates are	2
Templates may	1
Templates A	1
Templates make	1
28 because	1
28 above	1
28 Dynamic	1
28 below	1
28 share	1
seven memory	1
seven different	2
seven times	1
seven significant	1
turned into	1
turned up	1
turned on,	2
turned on.	1
inheritance is	1
inheritance by	1
inheritance class	2
inheritance where	1
overcome the	2
overcome by	1
overcome this	1
overcome these	1
maintain. The	1
maintain. If	1
maintain. Most	1
maintain. Any	1
maintain. And	1
fourteen in	1
fourteen integer	1
fourteen register	1
fourteen parameters	2
122 for	2
122 this	1
122 13.1	1
122 13.2	1
consuming. A	1
consuming. There	1
consuming. Therefore,	2
consuming. Sometimes	1
method. //	1
method. A	1
method. When	1
method. 7.29	1
method. Your	1
backwards and	1
backwards compatible	2
backwards compatibility	1
backwards though	1
remote or	1
remote data	1
remote help	1
remote databases	1
remote database,	1
int, without	1
int, signed	2
int, float,	1
int, float.	1
bc for	1
bc =	3
bc with	1
tools. The	1
tools. A	1
tools. It	1
tools. Automatic	1
tools. One	1
operation. A	1
operation. For	2
operation. Example:	1
operation. x*8	1
future. If	1
future. 6	1
future. Typically,	1
future. To	1
future. 12.3	1
swapping the	1
swapping is	1
swapping of	1
swapping and	1
swapping column	1
AVX512 instruction	1
AVX512 double	1
AVX512 float	1
AVX512 long	1
AVX512 Table	1
considerable amount	1
considerable delay	1
considerable improvement	1
considerable job,	1
considerable debate	1
memset is	1
memset and	3
memset line	1
rest of	5
on, the	1
on, then	2
on, while	1
on, including	1
Agner's vector	5
Digital Mars	5
third thread	1
third thing	1
third generation	1
third party	1
third generations	1
Roll out	5
Critical function	1
Critical parts	1
Critical innermost	1
Critical device	1
Critical pieces	1
"Calling conventions	5
CISC instruction	4
CISC processors,	1
22 one	1
22 4	1
22 3.14	1
22 3.15	1
22 3.16	1
AND each	2
AND operator	1
AND operation	1
AND operations:	1
effort is	2
effort to	2
effort on	1
numbers. The	1
numbers. It	1
numbers. You	1
numbers. Therefore,	1
numbers. With	1
popular and	1
popular at	1
popular version	1
popular user	1
popular development	1
SIZE =	3
SIZE must	1
SIZE %	1
Runtime type	3
Runtime polymorphism	2
principles of	1
principles to	1
principles in	1
principles are	1
principles here:	1
context switch	1
context switches	4
names. The	1
names. Use	1
names. But	1
names. We	1
names. Remember	1
reducing the	3
reducing integer	1
reducing example	1
benefit from	5
worth the	4
worth considering	1
manual. The	1
manual. This	1
manual. There	1
manual. You	1
manual. 2.3	1
specifies the	1
specifies that	2
specifies how	1
specifies truncation	1
searching and	1
searching for	2
searching needed	2
versus unsigned	1
versus dynamic	2
versus XMM	1
versus references	1
propagation is	1
propagation and	2
propagation An	1
propagation Pointer	1
reduction is	1
reduction in	1
reduction would	2
reduction Most	1
effects of	2
effects or	1
effects into	1
effects are:	1
1.; }	3
1.; Eliminate	1
1.; x.b	1
live range	1
live ranges	4
multidimensional array	4
multidimensional structure	1
install a	3
install this	1
install automatic	1
development, and	2
development, each	1
development, database	1
development, testing	1
strict when	1
strict floating	1
strict aliasing	2
strict formalism	1
(c =	4
(c +	1
Position-independent code	3
Position-independent code.	1
Position-independent code..................................................................................	1
obvious to	2
obvious and	1
obvious reductions	1
obvious thing	1
swapped to	2
swapped with	2
swapped then	1
21 3.10	1
21 3.11	1
21 3.13	2
21 3.12	1
vectors: for	5
OR the	1
OR operator	2
OR combination	1
OR operator,	1
Array of	1
Array with	2
Array size	2
processes or	1
processes because	1
processes running	1
processes simultaneously.	1
processes running,	1
portable to	2
portable in	2
portable way	1
consume a	3
consume time	1
consume more	1
schemes are	4
schemes cause	1
80 for	1
80 into	1
80 clock	2
80 Unfortunately,	1
Arrays that	1
Arrays are	2
Arrays An	1
Arrays .....................................................................................................................	1
lists the	1
lists of	1
lists and	1
lists in	1
lists that	1
event of	1
event that	2
event it	1
event counts	1
computer. The	3
computer. Big	1
computer. Security	1
Static linking	2
Static versus	2
Static cast	1
becoming more	2
becoming better	1
becoming increasingly	2
select the	2
select all	1
select between	1
select function,	1
list, the	1
list, on	1
list, set	1
list, database,	1
list, rolled	1
executed as	1
executed only	1
executed faster	1
executed even	1
executed 10	1
actual clock	1
actual values	1
actual load	1
actual calculations.	1
actual processor.	1
case, the	2
case, you	1
case, but	1
case, N	1
over the	2
over other	1
over new	1
over 32	1
realistic set	2
realistic number	1
realistic performance	1
realistic goal	1
abc is	2
abc can	1
abc *	1
abc {int	1
finished. The	1
finished. This	1
finished. Example:	1
finished. Obviously,	1
finished. Register	1
hand, the	1
hand, a	1
hand, it	1
hand, if	1
hand, does	1
_WIN64 not	1
_WIN64 64	1
_WIN64 _M_X64	1
_WIN64 _LP64	2
recover in	1
recover from	4
console or	1
console mode	4
advice of	1
advice in	1
advice given	2
advice applies	1
ways. The	2
ways. This	1
ways. Example:	1
ways. Switch	1
16.2 The	2
16.2 calls	1
16.2 #include	1
16.2 above,	1
pow and	1
pow The	1
pow function	2
pow at	1
split the	1
split into	1
split between	1
split up	2
generated by	4
generated from	1
created a	1
created or	2
created it	1
created by	1
hundred or	1
hundred clock	2
hundred times	1
hundred times.	1
250 times	1
250 μs	2
250 ms.	2
computing power	1
computing mathematical	1
computing resources	1
computing resources.	1
computing i/2+r.	1
pointers, and	1
pointers, by	1
pointers, etc.	1
pointers, references,	1
pointers, e.g.:	1
limit the	1
limit to	2
limit can	2
90 for	2
90 9.6	1
90 9.7	1
90 Gives	1
follow the	4
follow a	1
loop-carried dependency	5
library, you	2
library, but	1
library, except	1
library, SSE4.1	1
recommendation is	1
recommendation of	1
recommendation for	1
recommendation about	1
recommendation was	1
Objects of	1
Objects and	1
Objects that	1
Objects inside	1
Objects bigger	1
compromise on	1
compromise when	1
compromise between	2
compromise safety	1
Mars This	1
Mars compiler	1
Mars compilers	1
Mars Compiler	1
Mars PGI	1
already in	1
already been	1
already works	1
already known	2
nothing to	2
nothing between	1
nothing while	1
nothing inside	1
(a&&b) ||	5
physical register	1
physical processors	2
physical movements	1
physical factors.	1
((unsigned int)i	2
((unsigned int)n	2
((unsigned int)(i	1
xxxxxxxxx Codeplay	1
xxxxxxxxx x-xxx----	1
xxxxxxxxx --	1
xxxxxxxxx 0/a=0	1
xxxxxxxxx xxxxxxx-x	1
constructors and	4
constructors are	1
increased the	1
increased to	1
increased by	1
increased when	1
increased from	1
programming, compiler	1
programming, but	1
programming, how	1
programming, etc.	1
programming, modularity,	1
factor. A	1
factor. If	2
factor. For	1
factor. Loop	1
i.e. in	1
i.e. if	1
i.e. each	1
i.e. stored	2
nonzero and	1
nonzero }	1
nonzero floating	2
nonzero u.i	1
unacceptably long	4
unacceptably long.	1
process. This	1
process. A	1
process. These	1
process. Obviously,	1
process. 3.5	1
Calculate x	1
Calculate integer	2
Calculate polynomial	2
Only the	2
Only for	1
Only one	1
Only available	1
adds the	1
adds an	1
adds this	1
adds 16	1
adds extra	1
() {	5
Division of	1
Division by	3
Division takes	1
pitfalls of	3
pitfalls here.	1
pitfalls here:	1
package is	1
package and	1
package in	1
package on	1
package several	1
equivalent to	2
equivalent expression	1
equivalent reductions	1
equivalent if(!(a	1
understand and	1
understand when	1
understand how	1
understand it.	1
understand compiler-generated	1
Fortunately, the	1
Fortunately, it	1
Fortunately, all	1
Fortunately, most	1
Fortunately, there	1
command or	1
command line	3
command received	1
a[i]; The	1
a[i]; //	1
a[i]; It	1
a[i]; s1	1
a[i]; Converting	1
relatively small	1
relatively costly	1
relatively cheap	1
relatively primitive	1
relatively expensive,	1
priority. The	1
priority. If	1
priority. In	1
priority. Other	1
priority. Especially	1
files. This	1
files. See	1
files. Use	1
files. 13.2	1
files. 121	1
inefficient, of	1
inefficient, and	1
inefficient, especially	1
inefficient, however,	1
inefficient, (4)	1
guidelines are	1
guidelines can	1
guidelines by	1
guidelines should	1
guidelines below.	1
Kernel Library	1
Kernel Library"	2
Kernel Library,	1
Kernel Library.	1
necessarily stored	1
necessarily accessed	1
necessarily done	1
necessarily stay	1
necessarily newer.	1
returns a	2
returns //	1
returns from	1
returns even	1
jobs is	1
jobs to	1
jobs and	1
jobs simultaneously.	1
jobs simultaneously	1
Data that	1
Data caching	1
Data members	2
Data alignment.	1
frameworks that	1
frameworks are	3
frameworks typically	1
excessive memory	1
excessive loop	1
excessive number	3
safer to	4
safer implementation	1
Aligning data	1
Aligning dynamically	2
Aligning RGB	2
execution. The	1
execution. This	1
execution. It	1
execution. There	1
execution. Example:	1
a[size], b[size];	3
a[size], b[size],	2
latency of	2
latency and	1
latency or	1
latency which	1
specify the	3
specify an	1
specify static	1
for(i=0; i<300;	3
for(i=0; i<100;	1
for(i=0; i<301;	1
larger than	1
larger memory	1
larger vector	1
larger floating	1
larger address	1
-(-a) to	1
-(-a) =	3
-(-a) very	1
Multiple calls	1
Multiple applications	1
Multiple inheritance	1
Multiple divisions	1
Multiple threads?	1
unfortunately the	1
unfortunately it	1
unfortunately this	1
unfortunately there	1
unfortunately very	1
n! is	1
n! //	1
n! =	1
n! int	1
n! 117	1
pieces of	5
Basic is	1
Basic was	1
Basic .NET	1
Basic soon	1
Basic .NET,	1
(In the	1
(In 64-bit	1
(In Windows	1
(In my	1
(In Windows,	1
microprocessors. The	1
microprocessors. Integer	1
microprocessors. Many	1
microprocessors. 7.13	1
microprocessors. Multiplication	1
modules. This	3
modules. You	1
modules. 3.12	1
s =	3
s +=	2
project at	1
project together	1
project goes	1
project window	1
project built	1
divided into	5
www.agner.org/optimize/asmlib.zip. The	2
www.agner.org/optimize/asmlib.zip. //	1
www.agner.org/optimize/asmlib.zip. If	1
www.agner.org/optimize/asmlib.zip. Currently	1
Wednesday =	1
Wednesday or	1
Wednesday |	2
Wednesday ||	1
mispredictions. The	1
mispredictions. Boolean	1
mispredictions. When	1
mispredictions. Test	1
mispredictions. 44	1
relies on	5
And it	2
And here	1
And whenever	1
And who	1
platforms, and	1
platforms, it	1
platforms, different	2
platforms, including	1
compare the	1
compare it	1
compare with	1
compare two	1
compare absolute	1
valid only	1
valid values	1
valid address.	1
valid 63	1
valid addresses,	1
CPU-intensive software	1
CPU-intensive code.	1
CPU-intensive programs	1
CPU-intensive applications	1
CPU-intensive code,	1
Is the	2
Is a	1
Is searching	2
so. The	1
so. It	1
so. See	1
so. These	1
so. 58	1
seen in	3
seen can	1
seen many	1
Typically, the	2
Typically, a	1
Typically, there	2
107 for	1
107 number	1
107 12.2	1
107 12.4	1
107 12.3	1
contiguous in	1
contiguous with	2
contiguous memory	1
contiguous memory.	1
gets the	2
gets from	1
gets information	2
manuals. See	1
manuals. I	2
manuals. 7.1	1
manuals. Please	1
tells the	4
tells that	1
wrap the	2
wrap around	1
wrap around.	1
wrap around,	1
separately and	1
separately in	1
separately if	1
separately with	1
separately through	1
__attribute(( aligned(16)))	2
__attribute(( const))	2
__attribute(( fastcall))	1
necessary. A	1
necessary. If	1
necessary. 101	1
necessary. Take	1
necessary. Fast	1
increasing the	1
increasing function	1
increasing number	2
increasing faster	1
16, 32	1
16, last	1
16, i.e.	2
16, 32,	1
threads, but	3
threads, such	1
threads, while	1
Development in	1
Development time	1
Development process	1
Development Environments)	1
Development process......................................................................................................	1
AND'ed with	4
AND'ed b	1
elimination and	1
elimination x	1
elimination A	1
elimination If	1
elimination Common	1
all. This	2
all. In	1
all. Fortunately,	1
all. Can	1
.......................................................................................... 21	1
.......................................................................................... 96	1
.......................................................................................... 126	1
.......................................................................................... 150	1
.......................................................................................... 66	1
upper 32	2
upper limit	3
addresses. The	1
addresses. This	1
addresses. If	1
addresses. Therefore,	1
addresses. Especially	1
loop-invariant code	4
loop-invariant expression	1
sum1 and	1
sum1 =	1
sum1 from	1
sum1 +=	2
~a a	1
~a =	3
~a ^	1
Compilers and	1
Compilers for	1
Compilers will	1
Compilers do	1
Compilers cannot	1
); //	2
); #else	1
); Alignd	1
); 7.26	1
18 will	1
18 software	1
18 3.4	1
18 Overview	2
them. The	1
them. This	1
them. You	1
them. Some	1
them. Pure	1
point. The	1
point. //	1
point. This	1
point. Use	1
point. Conversion	1
consumption of	2
consumption are	1
consumption as	1
consumption was	1
8. The	2
8. There	1
8. Avoid	1
8. 71	1
key in	1
key or	1
key values	1
key press	1
key press.	1
explanation. The	2
explanation. Note	1
explanation. (The	1
explanation. Please	1
itself. You	1
itself. But	1
itself. Function	1
itself. Another	1
itself. Constructors	1
updated to	1
updated every	1
updated since	1
updated 2014-08-07.	1
updated lately.	1
appear to	1
appear in	3
appear as	1
Codeplay and	1
Codeplay compiler	1
Codeplay Watcom	1
Codeplay VectorC	2
(except in	2
(except for	3
combined by	1
combined with	1
combined size	2
combined into	1
definitely the	1
definitely be	3
definitely degrades	1
jumps between	1
jumps back	1
jumps to.	1
jumps Eliminate	1
jumps Jumps	1
elements. The	2
elements. A	1
elements. Example:	1
elements. 12.1	1
.cpp files	2
.cpp modules	2
.cpp file)	1
features, and	2
features, but	1
features, see	1
features, including	1
flag and	1
flag in	1
flag or	1
flag then	1
flag (e.g.	1
8) {	4
8) SelectAddMul_pointer	1
ever more	1
ever bigger	1
ever used,	1
ever seen	1
ever happens.	1
Writes to	1
Writes "Hello	4
13 //	1
13 Making	2
13 Asmlib	1
13 objects,	1
b[i] and	2
b[i] =	2
b[i] +	1
doubled. The	2
doubled. This	1
doubled. A	1
doubled. Thin	1
written in	2
written as	1
written table	1
written back.	1
languages, it	1
languages, but	1
languages, such	1
languages, operating	1
languages, profiling	1
malloc is	1
malloc and	4
runs most	1
runs quite	1
runs under	1
runs alone	1
runs satisfactorily	1
true, and	1
true, if	1
true, then	1
true, which	2
division. The	1
division. Some	1
division. Older	1
division. 12.4	1
division. Correction	1
C; }	1
C; double	1
C; Assuming	1
C; x.abc	1
C; x.a	1
0.18 0.18	2
0.18 0.11	2
0.18 0.12	1
MS compiler	3
MS compiler:	2
#endif //	2
#endif double	1
#endif return	1
#endif const	1
present in	1
present processors	1
present manual	2
present manual.	1
15.1c is	1
15.1c as	1
15.1c would	1
15.1c was	1
15.1c automatically,	1
1000; int	2
1000; float	1
1000; unsigned	1
1000; i++)	1
strlen function	2
strlen function.	1
strlen 128	2
__asm int	1
__asm fistp	1
__asm fld	1
__asm ("fldl	1
__asm ("int	1
cycle. The	3
cycle. This	1
cycle. In	1
11 clock	1
11 short	1
11 programming,	1
11 Out	2
belong to	5
50 -	1
50 clock	1
50 simple	1
50 7.16	1
50 7.17	1
facilities of	1
facilities for	1
facilities that	1
facilities are	2
5. The	1
5. If	1
5. But	1
5. Calling	1
5. www.amd.com.	1
currently not	1
currently only	1
currently used	1
currently doesn't	1
currently available,	1
here: The	1
here: A	1
here: return	1
here: a[i]	1
here: functional	1
Does not	4
Does not,	1
macros is	1
macros are	1
macros with	1
macros instead	1
macros Compiler	1
prefer is	1
prefer a	1
prefer to	3
divisor is	4
divisor that	1
Program installation	2
Program loading	2
better. The	1
better. If	1
better. Whenever	1
better. Remember	1
BSD, the	1
BSD, but	1
BSD, Windows	1
BSD, Intel-based	1
bit-mask: __m128i	2
bit-mask: c2	1
bit-mask: bc	1
two. In	1
two. Some	2
two. Often,	1
up, as	1
up, which	2
up, even	1
up. The	1
up. This	1
up. If	1
up. Some	1
reasons. The	1
reasons. This	1
reasons. C++	1
reasons. Use	1
103 for	1
103 //	1
103 12	1
103 11	1
Choosing the	4
slices is	1
slices of	1
slices to	1
slices allocated	1
exception. The	1
exception. A	1
exception. 64	1
exception. Therefore,	1
enum is	1
enum as	1
enum Weekdays	2
repeats a	1
repeats 20	1
repeats 1000	2
highest instruction	1
highest performance	1
highest efficiency	1
highest level	1
96 void	1
96 9.9	1
96 9.11	1
96 9.10	1
recommend that	2
recommend object	1
recommend any	1
lead to	4
additional integer	1
additional floating	1
additional information	1
additional parameters.	1
51 for	1
51 performance	1
51 7.19	1
51 7.18	1
56 public:	1
56 7.27	1
56 7.28	1
56 7.26	1
type. The	1
type. Likewise,	1
type. References	1
type. Interrupt	1
place the	1
place to	1
place in	1
place indicated	1
preferable to	3
preferable for	1
overlap the	3
overlap or	1
eight-element vectors:	4
40 -	1
40 i	1
40 clock	1
40 7.12	1
43 for	1
43 about	1
43 7.13	1
43 speculatively	1
sixteen in	2
sixteen vector	1
sixteen integers	1
turning the	1
turning off	3
initialization. The	2
initialization. A	1
initialization. Each	1
Graphics and	1
Graphics A	1
Graphics accelerators	1
Graphics .................................................................................................................	1
obstacles to	3
obstacles and	1
asmlib function	1
asmlib library	3
Furthermore, it	1
Furthermore, you	1
Furthermore, this	1
Furthermore, most	1
obtain the	2
obtain most	1
obtain much	1
ebx. The	2
ebx. 9	1
ebx. Only	1
estimate is	1
estimate of	1
estimate that	1
estimate can	1
enabled in	1
enabled there	1
enabled (there	1
enabled (single	1
enables the	2
enables interprocedural	2
Obstacles to	4
r) {	3
r) {return	1
regular time	1
regular access	1
regular patterns	1
regular pattern,	1
m is	3
m and	1
Metaprogramming can	1
Metaprogramming means	1
Metaprogramming Metaprogramming	1
Metaprogramming .......................................................................................................	1
explain the	2
explain this	1
explain how	1
Dispatch on	2
Dispatch at	2
well, of	1
well, but	2
well, others	1
sufficiently large	2
sufficiently fast	1
sufficiently accurate	1
126 Make	1
126 12.2	1
126 13.6	1
126 13.5	1
bad The	1
bad on	1
bad CPU	1
bad dilemma.	1
p(double x)	4
said that	1
said than	1
said here	2
modulo operator	1
modulo 16.	1
modulo calculations:	1
modulo operations:	1
databases with	1
databases Many	1
databases usually	1
databases .......................................................................................................	1
_EM_OVERFLOW); //	4
against the	1
against this	1
against overflow	1
against overkill.	1
Vectorized with	1
Vectorized code	2
Vectorized table	1
break; }	1
break; case	3
loader to	1
loader will	1
loader calls	1
loader (requires	1
Failure to	4
declared. If	1
declared. An	1
declared. Therefore,	1
declared. Avoid	1
resources, and	1
resources, such	1
resources, even	1
resources, databases,	1
true. The	2
true. Boolean	1
true. template<>	1
objects. The	1
objects. This	1
objects. STL	1
objects. Storage	1
parallel. Modern	1
parallel. Small	1
parallel. Fine-grained	1
parallel. Coarse-grained	1
one, and	1
one, because	1
one, into	1
one, auto_ptr	1
list[300]; int	4
r++) {	4
parabola (float	3
parabola (2.0f);	1
x^4 //	2
x^4 F32vec4	2
mouse inputs	1
mouse move	1
mouse input.	1
mouse move.	1
specialization is	1
specialization for	3
index. The	2
index. A	1
index. Are	1
options. CPU	1
options. I	1
options. Many	1
options. Supports	1
c++) {	4
are. For	1
are. However,	1
are. Dynamic	1
are. Declare	1
needed, and	1
needed, or	1
needed, but	1
needed, however,	1
declaring the	2
declaring it	1
declaring an	1
SVML and	1
SVML +	1
SVML v.10.3	1
SVML v.10.2	1
*.so). The	3
*.so). There	1
(u.i *	1
(u.i &	2
(u.i >	1
support. There	1
support. Make	1
support. Then	1
support. Hardware	1
subtraction and	3
subtraction (3	1
Multiply by	1
Multiply b	2
Multiply (int	1
|= 0x80000000;	2
|= 0x20;	2
pool. See	2
pool. 15	1
pool. Alignment?	1
performs best	1
performs better	1
performs well.	1
performs poorly.	1
"Intel 64	1
"Intel Math	2
"Intel Performance	1
Are objects	4
pre-increment is	1
pre-increment to	1
pre-increment or	1
pre-increment operator	1
ownership is	1
ownership of	3
88 for	1
88 9.5	1
88 Object	1
88 9.4	1
0x80000000; //	3
0x80000000; because	1
move the	1
move or	1
move out	1
move outside	1
Can the	1
Can be	1
Can only	1
Can do	1
defining a	1
defining integer	1
defining constants.	1
defining _mm_malloc	1
produces a	3
produces another	1
precision, and	1
precision, as	1
precision, but	1
precision, especially	1
non-inlined copy	4
drawbacks of	4
__declspec(align(16)) or	1
__declspec(align(16)) static	1
__declspec(align(16)) struct	1
__declspec(align(16)) X	1
u.f and	1
u.f <	1
u.f We	1
u.f >	1
commercial compiler	1
commercial compilers	1
commercial compilers.	1
commercial license	1
configuration files	2
configuration files,	2
134 and	1
134 on	1
134 }	1
134 14.3	1
lines. The	2
lines. This	1
lines. A	1
restrictions on	4
Constant propagation	1
Constant folding	3
manager for	1
manager can	1
manager will	1
manager has	1
pattern can	2
pattern or	1
pattern history,	1
x86-64 instruction	1
x86-64 platform	1
x86-64 platforms.	2
*p+2 is	2
*p+2 a	1
*p+2 and	1
Watcom compilers	1
Watcom Another	1
Watcom Digital	1
Watcom C/C++	1
round function	1
round memory	1
round addresses	1
round addresses.	1
cores, and	2
cores, vector	1
cores, we	1
chooses the	1
chooses between	3
running. The	1
running. If	1
running. Such	1
running. Programs	1
serial in	1
serial code	2
serial because	1
cc into	4
Header file	3
Header files	1
150 for	1
150 you	1
150 16	1
150 15	1
thanks to	4
2.0; x	1
2.0; }	2
2.0; i	1
pipeline and	1
pipeline then	1
pipeline where	1
pipeline structure	1
n) {	4
input. The	1
input. It	1
input. Many	1
input. (In	1
8.1 below.	1
8.1 How	2
8.1 (page	1
conditions. A	1
conditions. For	1
conditions. All	1
conditions. Programs	1
choosing the	2
choosing a	2
146 below.	2
146 Multiple	1
146 14.12	1
.............................................................................................. 50	1
.............................................................................................. 56	1
.............................................................................................. 82	1
.............................................................................................. 99	1
_mm256_zeroupper() before	4
Making critical	2
Making too	1
Making exception-safe	1
flush-to-zero and	1
flush-to-zero mode	3
Taylor series	1
Taylor expansions	1
Taylor series,	1
Taylor series.	1
SelectAddMul_pointer =	4
dispatcher. The	1
dispatcher. //	1
dispatcher. See	2
Clang, Intel	3
Clang, Intel,	1
14.9 is	1
14.9 Using	2
14.9 struct	1
n, then	1
n, including	1
n, factorial	2
14.8 and	1
14.8 const	1
14.8 Conversions	2
overflow, and	2
overflow, this	1
overflow, such	1
x++) {	2
x++) factorial	2
optimal. The	1
optimal. There	1
optimal. Use	1
optimal. Best-case	1
*)d, x);	3
*)d, x);}	1
class, it	1
class, Intel	1
class, structure	1
class, Agner	1
z =	3
z !=	1
advance and	2
advance which	1
advance rather	1
c: CPU	1
c: __m128i	2
c: Is16vec8	1
guaranteed to	4
think that	4
example. The	1
example. A	1
example. We	1
example. My	1
older processors	1
older microprocessors	1
older processors,	1
older MMX	1
commonly the	1
commonly used	3
queue of	1
queue as	1
queue should	2
{} which	1
{} brackets	1
{} brackets.	1
{} vector(float	1
1.0f; The	1
1.0f; This	1
1.0f; }	2
ALIGN 4	2
ALIGN ;	1
ALIGN ?Func@@YAXQAHAAH@Z	1
modification is	1
modification of	1
modification to	1
modification if	1
solutions to	1
solutions are	1
solutions may	1
solutions are:	1
guide for	4
appendix to	3
appendix at	1
17 will	1
17 Optimization	2
17 debug	1
empty throw()	3
empty throw()specification	1
maintenance -	1
maintenance There	1
maintenance ..........................................................................................	1
maintenance easier.	1
1: //	1
1: 4	1
1: 8	1
1: printf("Beta");	1
Out of	2
Out (FIFO)	1
Out (FILO)	1
protected operating	2
protected mode	2
Container classes	4
alternatives to	3
alternatives that	1
modifications of	1
modifications to	1
modifications in	1
modifications actually	1
i_div_3; }	1
i_div_3; list[i+1]	1
i_div_3; list[i+2]	1
i_div_3; for(i=i_div_3=0;	1
s; An	1
s; s	2
s; 40	1
case" and	1
case" counts	1
case" counts.	1
case" values.	1
distinguish between	2
distinguish elements	1
distinguish these	1
missing in	2
missing functions	1
missing check	1
subroutines in	4
tools to	1
tools for	1
tools that	1
tools have	1
0x2710 and	2
0x2710 will	2
spot and	1
spot that	1
spot has	1
spot but	1
powN is	1
powN {	1
powN template	2
C-style method	1
C-style type	1
C-style type-casting	1
C-style type-casting.	1
While an	1
While C++	1
While we	1
While some	1
Bitfield {	2
Bitfield x;	2
clean up	3
clean solution	1
according to	4
Bounds checking	4
u.i =	1
u.i +=	1
u.i ^=	1
u.i &=	1
dramatic when	1
dramatic effect	1
dramatic degradation	1
dramatic consequences.	1
IDE. It	1
IDE. Does	1
IDE. Has	1
IDE. Free	1
lengths of	1
lengths to	1
lengths in	1
lengths that	1
expensive. A	2
expensive. You	1
expensive. Using	1
efficiency. The	1
efficiency. For	1
efficiency. These	1
efficiency. Using	1
Copyright conditions	1
Copyright notice	2
Copyright ©	1
extended to	3
extended number	1
size) =	1
size) {	1
size) /	1
size) %	1
(Gnu) all	1
(Gnu) AMD	1
(Gnu) Table	1
(Gnu) AES,	1
contained in	2
contained object	1
contained objects?	1
transferring the	1
transferring 'this'	1
transferring composite	1
transferring additional	1
Access to	2
Access data	2
saving a	1
saving and	1
saving memory	1
saving registers	1
years to	1
years before	1
years old	1
years old.	1
y, a1,	2
y, z;	2
structured and	1
structured software	1
structured exception	2
documentation and	1
documentation for	2
documentation Intel:	1
CChild1 *	1
CChild1 :	2
CChild1 Object1;	1
PGI compiler	1
PGI C++	2
PGI PathScale	1
As we	1
As table	1
As explained	1
As soon	1
(RTTI) If	1
(RTTI) Runtime	1
(RTTI) /GR–	1
(RTTI) ...........................................................................	1
default, which	1
default, so	1
default, even	1
default, conform	1
xpow10(double x)	4
a2, b1,	4
inconvenient to	1
inconvenient times	1
inconvenient times.	2
expressed as	4
bottleneck is	2
bottleneck or	1
bottleneck than	1
directive to	1
directive for	1
directive never	1
directive __declspec(cpu_dispatch(...)).	1
not, and	1
not, by	1
not, then	2
scarce resources.	1
scarce resource	1
scarce resource.	1
scarce resource,	1
12.4b and	1
12.4b can	1
12.4b shows	1
12.4b executes	1
lrint function	1
lrint (double	2
lrint function:	1
versions. The	1
versions. This	1
versions. A	1
versions. It	1
............................................................................................. 87	1
............................................................................................. 56	1
............................................................................................. 136	1
............................................................................................. 113	1
Alignment of	4
going to	2
going from	1
going either	1
underflow and	1
underflow in	1
underflow except	1
underflow neutralize	1
ranges do	3
ranges now	1
splitting the	1
splitting of	2
splitting 256-bit	1
user's time.	2
user's needs.	1
user's computers.	1
__INTEL_COMPILER n.a.	1
__INTEL_COMPILER __INTEL_COMPILER	2
__INTEL_COMPILER 161	1
cleaned up	2
cleaned up,	1
cleaned up.	1
cached. The	1
cached. This	1
cached. See	1
cached. Usually	1
video or	2
video should	1
video processing,	1
aa: StoreVector(aa	3
aa: a.store(aa+i);	1
information. It	1
information. Each	1
information. They	1
information. 1.1	1
Whenever the	1
Whenever a	2
Whenever dynamic	1
area is	1
area of	1
area for	2
consequence is	1
consequence of	2
consequence that	1
a1, a2,	4
unsigned. The	2
unsigned. //	1
unsigned. This	1
pointers. The	2
pointers. This	1
pointers. 144	1
26 point	1
26 about	1
26 7.2	1
26 7.1	1
Smaller microprocessors	1
Smaller microcontrollers	3
29 for	1
29 with	1
29 64-bit	1
29 7.3	1
sum2 are	1
sum2 =	1
sum2 from	1
sum2 +=	1
(n &	2
(n >	1
(n !=	1
(b +	1
(b ==	2
(b !=	1
2n and	1
2n by	2
2n -1.	1
idea to	3
idea how	1
...................................................................................................... 20	1
...................................................................................................... 21	1
...................................................................................................... 90	1
...................................................................................................... 37	1
C, C++	1
C, specifying	2
C, C++,	1
Same as	1
Same example,	3
disable it	1
disable exception	2
disable power-save	1
assumption is	1
assumption that	2
assumption about	1
treated as	3
treated like	1
Fastcall is	1
Fastcall function	1
Fastcall functions	2
RGB video	2
RGB image	1
RGB color	1
avoids the	2
avoids many	1
avoids overflow:	1
prevented in	1
prevented by	1
prevented from	2
....................................................................................... 5	1
....................................................................................... 22	1
....................................................................................... 145	1
....................................................................................... 24	1
seldom used	2
seldom used.	1
seldom occur	1
mixing code	2
mixing different	1
mixing single	1
Branches and	2
Branches are	2
double. The	1
double. Another	1
double. Here	1
double. Misaligned	1
16.1 const	1
16.1 Using	2
16.1 #include	1
(r =	4
50% of	3
50% or	1
suboptimal way	1
suboptimal code.	1
suboptimal way.	2
16kB aligned	2
16kB unaligned	2
tasks. A	1
tasks. For	1
tasks. Sometimes	1
tasks. Before	1
image data	1
image base	1
image processing,	1
image processing.	1
worst-case conditions	1
worst-case maximum	1
worst-case conditions.	1
worst-case performance:	1
(1) is	1
(1) or	1
(1) get	1
(1) check	1
float, but	1
float, double	2
float, double,	1
9.5 because	1
9.5 so	1
9.5 Alignment	2
Induction; ;	2
Induction; a[i+1]	1
Induction; Induction++;	1
uncached or	1
uncached memory	1
uncached write	1
uncached read	1
individual functions	1
individual array	1
individual bits	1
individual installation	1
begin the	1
begin with	1
begin at	1
begin calculating	1
interface. A	1
interface. It	1
interface. Applications	1
interface. Otherwise	1
9.3 #include	1
9.3 Functions	2
9.3 shows,	1
option. This	1
option. Use	1
option. Then	1
option. 8.4	1
diagonal. The	3
diagonal. Each	1
interfaces to	1
interfaces and	2
interfaces from	1
floats for	1
floats A	1
floats F32vec4	1
floats exp	1
another. The	1
another. These	1
another. Therefore,	2
N> class	3
N> static	1
Class data	2
Class member	2
Small data	1
Small functions	1
Small hand-held	1
Small lightweight	1
N1 =	1
N1 }	1
N1 could	1
N1 (N	1
alloca is	1
alloca may	1
alloca was	1
alloca over	1
aliasing. The	1
aliasing. See	1
aliasing. Operations	1
aliasing. __declspec(noalias)	1
eliminated if	3
eliminated completely.	1
detailed optimization	1
detailed instructions.	1
detailed explanation	1
detailed overview	1
F32vec4 xx4(x4);	1
F32vec4 xxn(x4,	1
F32vec4 F64vec2	1
F32vec4 s(0.f,	1
mask to	1
mask =	2
mask out	1
original is	1
original pointer	1
original object	1
original method	1
caches and	1
caches are	1
caches have	1
caches work	1
recognize that	3
recognize VIA	1
513 513	2
513 58.7	1
513 2056	1
Threads are	2
Threads Threads	1
Threads ..................................................................................................................	1
Overloaded functions	2
Overloaded operators	2
Contentions in	4
illustrated in	3
illustrated by	1
words, the	1
words, it	1
words, you	2
returned in	2
returned by	1
returned pointer	1
existing object	2
existing systems	1
existing program.	1
Let's take	1
Let's look	2
Let's repeat	1
is, and	1
is, in	1
is, but	1
is, I	1
illustrates the	1
illustrates such	1
illustrates how	1
illustrates this.	1
unit-testing is	2
unit-testing It	1
unit-testing ......................................................................................	1
i<300; i++){	2
i<300; i+=3){	1
i<300; i+=3,i_div_3++){	1
{return a	1
{return b;}	1
{return r.a	1
{return p->a	1
b2; This	1
b2; int	1
b2; y	2
Remember to	2
Remember that	1
Remember again,	1
explicit use	1
explicit CPU	1
explicit induction	1
explicit checks	1
mirror the	2
mirror elements	1
mirror position	1
dedicated test	1
dedicated microprocessor	2
dedicated physics	1
Disp() {	4
r, c;	4
8.26a by	1
8.26a void	1
8.26a compiled	1
8.26a (32-bit	1
breakpoint and	1
breakpoint in	2
breakpoint again.	1
b1, b2;	2
b1, b2,	2
appears to	2
appears in	1
appears on	1
functionality of	1
functionality to	1
functionality and	1
functionality without	1
languages. This	1
languages. But	1
languages. My	1
languages. www.yeppp.info	1
sequential order	1
sequential order.	1
sequential labels	1
sequential instructions,	1
www.agner.org/optimize/cppexamples.zip for	2
www.agner.org/optimize/cppexamples.zip contains	1
www.agner.org/optimize/cppexamples.zip containing	1
style. The	2
style. It	1
style. Some	1
MOVNTQ instruction	2
MOVNTQ _mm_stream_pi	1
MOVNTQ _mm_empty();	1
optimized. We	1
optimized. Note	1
optimized. Library	1
optimized. Jumps	1
......................................................................................... 65	1
......................................................................................... 87	1
......................................................................................... 107	1
......................................................................................... 132	1
CHello {	3
CHello *	1
found in	3
found elsewhere.	1
me explain	2
me corrections	1
me manually,	1
counts. The	1
counts. This	1
counts. It	1
counts. In	1
measurement code	1
measurement should	1
measurement instruments	2
layers of	2
layers and	2
handler to	1
handler in	1
handler calls	1
handler needs	1
coded in	2
coded as	2
changing the	1
changing in	1
changing this	1
changing then	1
unit-test may	1
unit-test but	1
unit-test without	1
unit-test does	1
implicit pointer	1
implicit parameter	1
implicit 'this'	2
smaller. The	1
smaller. This	1
smaller. It	1
smaller. Structure	1
interval is	1
interval from	1
interval 0	1
interval [1.0,	1
33 result	1
33 7.5	1
33 7.6	1
33 11.8	1
31 for	1
31 ebx,	1
31 7.3	1
31 11.6	1
int)b /	2
int)b %	2
3. The	3
3. Use	1
μs is	1
μs on	2
μs today,	1
module. The	3
module. This	1
cast The	4
8-bit integers	2
8-bit signed	2
Integers of	1
Integers can	1
Integers variables	2
Calling a	2
Calling conventions	1
Calling exit	1
(double const	2
(double x)	1
(double x,	1
Weekdays {	2
Weekdays Day;	2
application-specific code.	2
application-specific instructions	1
application-specific information	1
first. If	2
first. However,	1
first. b+c	1
considerations of	1
considerations that	1
considerations should	1
considerations such	1
63 number	1
63 31	1
63 63	1
63 .	1
represented with	2
represented as	2
force the	2
force a	1
force when	1
manually. The	1
manually. This	1
manually. It	1
manually. I	1
identified by	4
www.agner.org/optimize/cppexamples.zip. If	1
www.agner.org/optimize/cppexamples.zip. An	1
www.agner.org/optimize/cppexamples.zip. These	1
www.agner.org/optimize/cppexamples.zip. 9.9	1
virus scanners	2
virus scanner	1
virus attacks	1
structures. For	1
structures. On	1
structures. Accessing	1
structures. Useful	1
exp function	2
exp exp	1
exp 12.8	1
(in bytes)	3
(in Windows:	1
pointer, a	1
pointer, but	2
pointer, common	1
kept in	2
kept small	1
kept entirely	1
Y and	1
Y //	1
Y =	1
Y +=	1
interprocedural optimization	1
interprocedural optimizations	1
interprocedural optimizations.	2
incompatible or	1
incompatible with	3
bytes) is	1
bytes) of	2
bytes) on	1
selected if	1
selected instruction	1
selected version	1
selected during	1
multiplied by	4
reproducible as	1
reproducible time	1
reproducible results.	2
normally use	2
normally compiled	1
normally belongs	1
constants. For	2
constants. Integer	1
constants. Register	1
cache, code	1
cache, at	1
cache, where	1
cache, branch	1
entry with	1
entry point	1
entry point.	1
entry initially	1
inferior to	2
inferior version	2
obsolete. But	1
obsolete. Programmers	1
obsolete. Microprocessor	1
obsolete. Rick	1
simultaneously can	1
simultaneously or	2
simultaneously prefetching	1
routine that	2
routine should	1
routine sets	1
auto_ptr to	1
auto_ptr and	1
auto_ptr that	1
auto_ptr has	1
tree or	3
tree may	1
unable to	4
Optimizes very	1
Optimizes reasonably	2
Optimizes moderately	1
constants, and	1
constants, array	1
constants, string	2
techniques of	1
techniques in	1
techniques can	1
techniques like	1
otherwise can	1
otherwise would	1
otherwise optimize	1
otherwise go	1
Smart pointers	4
opens the	2
opens a	1
opens and	1
modified by	3
modified should	1
15.1a to	4
Comparison of	4
finished the	3
finished using	1
run. The	1
run. Some	1
run. Examples	1
run. Both	1
sequentially in	2
sequentially A	1
sequentially ..........................................................................................	1
Intel: "Intel	1
Intel: "IA-32	2
Intel: "Intel®	1
format. The	2
format. Other	1
format. Alternatively,	1
programs. The	1
programs. It	1
programs. If	1
programs. Writing	1
manner to	1
manner by	1
manner then	1
manner where	1
work. The	3
work. Data	1
uint64_t 128	1
uint64_t 256	1
uint64_t Table	1
uint64_t MS	1
(level >=	4
tests are	1
tests with	1
tests on	1
tests were	1
Then you	1
Then we	2
Then again	1
soft processor	2
soft cores	1
soft processor.	1
100, c	1
100, y;	1
100, max	1
100, NUMCOLUMNS	1
results. This	1
results. If	2
results. Integer	1
hyperthreading is	1
hyperthreading or	1
hyperthreading by	1
hyperthreading processor	1
operators. Function	1
operators. Make	1
operators. Vectorized	1
operators. 7.7	1
simpler in	1
simpler than	1
simpler when	1
simpler because	1
format is	2
format and	1
format instead	1
reasonable solution	1
reasonable upper	2
reasonable estimate	1
resolution of	1
resolution and	1
resolution can	1
resolution if	1
units, and	1
units, memory	1
units, one	1
units, etc.	1
12.2 128	1
12.2 __declspec(align(16))	1
12.2 AVX-512	2
b: from	1
b: __m128i	2
b: Is16vec8	1
processing. Visual	1
processing. Yeppp.	1
processing. Running	1
processing. Scott	1
well-defined with	1
well-defined interface	2
well-defined functionality	1
Still faster	4
45 for	1
45 clock	2
45 7.14	1
bb into	4
detail in	2
detail on	1
advices in	1
advices on	1
advices may	1
conclusion is	2
conclusion to	1
deleted by	1
deleted when	1
deleted properly	1
49 and	1
49 for	1
49 first	1
parameters, as	1
parameters, local	1
parameters, pointers,	1
Storing the	1
Storing variables	1
Storing something	1
(set) =	3
fine-grained parallelism	2
fine-grained parallelism.	1
Execution time	1
Execution unit	2
LoadVector(cc +	3
arbitrary memory	1
arbitrary cache	1
arbitrary name	1
Which of	1
Which method	1
Which solution	1
behave according	1
behave differently	2
bits, and	1
bits, but	1
bits, so	1
compact. The	1
compact. See	1
compact. Accessing	1
behaves like	2
behaves differently	1
FPGA in	1
FPGA as	1
FPGA soft	1
earlier Intel	1
earlier CPUs.	1
earlier vmlsExp4	1
5) {	1
5) SelectAddMul_pointer	1
5) {}	1
&, |,	3
101 for	1
101 Multithreading	1
101 10.1	1
reasons: The	2
reasons: Each	1
consecutively and	1
consecutively in	2
Extra time	1
Extra memory	1
Extra data	1
error. The	2
error. //	1
carried out	2
carried dependency	1
reordering the	1
reordering has	1
reordering easier	1
platform. Intel	1
platform. However,	1
platform. 14.8	1
satisfied with	3
catch an	1
catch programming	1
catch (...)	1
/arch:AVX etc.	1
/arch:AVX /openmp	1
/arch:AVX /QaxSSE3,	1
93 for	1
93 9.8	1
93 themselves.	1
53 function	1
53 7.21	1
53 7.20	1
#else //	2
#else #define	1
addition. This	1
addition. If	1
addition. Comparing	1
Text strings	3
big-endian storage.	3
54 class	1
54 7.22	1
54 7.23	1
119 The	1
119 for	1
119 12.8	1
!a =	2
!a &&	1
abstraction is	1
abstraction in	1
abstraction which	1
each, or	1
each, four	1
each, eight	1
11) and	1
11) {	2
code). The	1
code). If	1
code). Supports	1
...................................................................................... 16	1
...................................................................................... 90	1
...................................................................................... 156	1
wrong branch	1
wrong branch.	1
wrong type.	1
LoadVector(bb +	3
alias any	1
alias anything	1
alias upon	1
blocks, for	1
blocks, or	1
blocks, either	1
feedback should	1
feedback comes	1
feedback seriously.	1
pure_function ;	1
pure_function #endif	1
pure_function __attribute__((const))	1
a-a =	3
chains. A	1
chains. In	1
chains. Another	1
prefetching the	1
prefetching data	1
prefetching so	1
compiler-generated code	2
compiler-generated assembly	1
redesign of	2
redesign can	1
differently on	2
differently because	1
B, and	1
B, C;	2
reasonably well.	2
reasonably well,	1
Two or	1
Two libraries	1
Two threads	1
55 In	1
55 7.24	1
55 7.25	1
libraries: Intel	2
libraries: long	1
projects can	1
projects have	1
projects made	1
1)sign 2exponent	3
14.6 float	1
14.6 Floating	2
combination of	3
libraries, but	1
libraries, also	2
mean use	1
mean good	1
mean atomic.	1
inserts extra	1
inserts temporary	1
inserts built-in	1
const*)p); }	3
hidden by	1
hidden pointer.	1
hidden behind	1
x*x*x*x*x*x*x*x =	3
errors. The	1
errors. If	1
errors. See	1
One may	1
One popular	1
One kilobyte	1
blocking and	1
blocking for	1
blocking or	1
Faster if	2
Faster than	1
sources of	3
well-tested libraries	1
well-tested container	1
well-tested functions,	1
devices, as	1
devices, you	1
devices, but	1
multiplication, to	1
multiplication, etc.	1
multiplication, etc.)	1
part. It	1
part. If	2
API and	1
API function	1
API calls	1
starts running	1
starts up,	1
starts up.	1
only. The	1
only. This	1
only. Critical	1
counters, function	1
counters, as	1
counters, etc.	1
execution, as	1
execution, you	1
execution, even	1
list[i+1] =	2
list[i+1] +=	1
distance the	1
distance in	1
distance between	1
14.28 can	1
14.28 will	1
14.28 union	1
zero, by	1
zero, rather	1
zero, c	1
r1 and	1
r1 <	1
r1 +=	1
r2 and	1
r2 <	2
(MS) smmintrin.h	1
(MS) xopintrin.h	1
(MS) x86intrin.h	1
aligning the	1
aligning data	1
aligning dynamically	1
assuming that	2
assuming no	1
r; for	1
r; c++)	2
analysis of	1
analysis The	1
analysis Join	1
seem a	1
seem to	1
seem illogical	1
perhaps for	1
perhaps };	1
perhaps Mac	1
service routine	1
service routines	1
service routines,	1
Comes with	3
esp ;	1
esp ebx	1
esp ;alignby4	1
features. The	1
features. User	1
features. Take	1
---xx---- (a+c==b+c)=(a==b)	1
---xx---- a<<b<<c=a<<(b+c)	1
---xx---- (-a>-b)=(a<b)	1
............................................................................................... 4	1
............................................................................................... 50	1
............................................................................................... 23	1
C/C++ standard	2
C/C++ v.	1
100. It	1
100. pop	1
100. Now,	1
b;}; S1	2
b;}; Sab	1
consumes a	1
consumes CPU	1
consumes most	1
numbers, then	1
numbers, but	1
numbers, we	1
129 130	1
129 129	1
129 13.7	1
reload the	2
reload *p	1
124 2	1
124 necessary	1
124 13.3	1
motion A	1
motion Induction	1
motion manually	1
speed-critical program	1
speed-critical functions	1
speed-critical functions.	1
numbers: //	3
(page 77)	1
(page 131)	1
(page 146).	1
12. If	1
12. Most	1
12. Higher	1
1000 *	1
1000 times	2
long. This	1
long. If	1
long. Lazy	1
organization for	1
organization It	1
organization ...................................................................................................	1
slow, you	1
slow, then	1
slow, difficult	1
performed with	1
performed on	2
high-level language	2
high-level languages	1
advance. The	2
advance. This	1
anyway and	1
anyway in	1
anyway if	1
(*.dll or	3
Intel-based Mac	3
main() are	1
main() {	2
x2 =	2
x2 *	1
database, and	2
database, or	1
Works with	2
Works well	1
calculations: for	1
calculations: //	2
basis for	1
basis then	2
updating of	1
updating in	1
updating mechanism	1
manipulation is	1
manipulation Mathematical	1
manipulation tricks	1
28. The	1
28. This	1
28. We	1
C0 {	2
C0 *	1
access, as	1
access, etc.	1
access, sort	1
calculations, and	1
calculations, should	1
calculations, where	1
multi-core CPUs,	2
multi-core processing.	1
level, and	2
level, typically	1
Exception handling	2
Exception Specifications,	1
optimization, the	1
optimization, it	1
optimization, which	1
Whether the	1
Whether you	2
contents of	2
contents copied	1
books and	1
books contain	1
books 1994.	1
removed the	1
removed from	1
removed after	1
164 1	1
164 below.	1
matrix[rows][columns]; int	3
list. Each	1
list. Do	1
list. 94	1
exponential function	1
exponential functions,	2
generality of	1
generality and	2
takes. The	1
takes. See	1
takes. Debugging.	1
multithreaded applications	1
multithreaded program,	1
multithreaded applications:	1
list[i+2] =	2
list[i+2] +=	1
Total size	2
Total kilobytes	1
explicitly. In	1
explicitly. There	1
explicitly. Divisions	1
programs, more	1
programs, except	1
programs, 99%	1
optimizes the	1
optimizes a	1
optimizes reasonably	1
instruments in	1
instruments into	1
instruments directly	1
After each	1
After first	2
involving integer	1
involving class	1
involving division	1
(vector) reductions:	3
unfortunate because	1
unfortunate method	1
unfortunate consequence	1
"Optimizing subroutines	3
parameter, and	1
parameter, or	1
parameter, so	1
exceptions. The	2
exceptions. See	1
time- consuming	2
time- consuming.	1
K8 0.24	1
K8 1.09	1
K8 0.38	1
loaded. This	2
loaded. 21	1
(i=0; i<100;	1
(i=0; i<n;	2
14.30 will	1
14.30 const	1
14.30 finds	1
b;} vector	1
b;} };	2
wasteful in	1
wasteful copying	1
wasteful behavior	1
Return the	1
Return a	1
Return reference	1
StoreVector(void *	3
microcontrollers have	3
character arrays	1
character arrays.	2
implemented. The	2
implemented. Use	1
fact, the	2
fact, you	1
runtime. Example	1
runtime. #define	1
runtime. Polymorphism	1
manually by	1
manually when	1
manually unless	1
xxn *	1
xxn rather	1
xxn *=	1
|, ^,	2
|, ~.	1
7.2 a	1
7.2 Integers	2
Thread-local storage	3
81 for	1
81 optimization	1
81 8.6	1
7.1 float	1
7.1 Different	2
signal an	1
signal processing	1
signal processing,	1
circular buffer	3
7.4 we	1
7.4 Enums	2
ignore the	1
ignore a	1
ignore overflow	1
keywords and	1
keywords relevant	1
keywords Fast	1
7.8 if	1
7.8 Member	2
once. The	1
once. Example:	1
once. One	1
89 for	2
89 int	1
list[100]; int	1
list[100]; Func1(list,	1
list[100]; memset(list,	1
considered a	2
considered metaprogramming	1
Windows). The	1
Windows). There	1
Windows). Alternatively,	1
for. The	1
for. In	1
for. Some	1
divisions are	1
divisions can	1
divisions (Division	1
8; //	2
8; float	1
reflects the	3
..................................................................................................... 103	1
..................................................................................................... 126	1
..................................................................................................... 93	1
lies in	2
lies r	1
trigonometric functions.	1
trigonometric functions,	2
manipulate the	2
manipulate all	1
fractional part	3
-128 to	1
-128 generates	1
-128 127	1
spaced a	1
spaced by	2
approximate reciprocal	1
approximate comparison	1
approximate reciprocal,	1
comparisons, which	1
comparisons, such	1
comparisons, etc.	1
User work	1
User feedback	1
User complaints	1
dividend is	2
dividend to	1
unpredictable times	1
unpredictable errors	1
unpredictable intervals	1
LoadVector(void const	3
step. The	1
step. In	1
step. With	1
Z =	1
Z }	1
Z +=	1
separated by	2
separated from	1
64, but	1
64, depending	1
64, ...).	1
copies the	2
copies them	1
brand. The	1
brand. Critical	1
brand. Future	1
annoying to	2
annoying time	1
CodeAnalyst. There	1
CodeAnalyst. These	1
CodeAnalyst. Unfortunately,	1
Literature on	1
Literature Other	1
Literature .....................................................................................................................	1
study the	2
study of	1
stack, which	2
stack, except	1
collection. The	1
collection. A	1
collection. Objects	1
occurs, but	1
occurs, even	1
occurs, (2)	1
-fno-pic and	1
-fno-pic when	1
-fno-pic apparently	1
_M_IX86 and	1
_M_IX86 x86-64	1
_M_IX86 _M_IX86	1
elsewhere and	1
elsewhere in	1
elsewhere then	1
bypassing the	2
bypassing syntax	1
0x273F will	1
0x273F into	1
0x273F would	1
135 The	1
135 show	1
135 14.4	1
looks like	3
{double a;	2
{double d;	1
implementing a	2
implementing polymorphic	1
int. A	1
int. Therefore,	1
int. Reinterpret	1
space, if	1
space, as	1
space, even	1
skip the	1
skip this	1
skip large	1
137 about	1
137 errors	1
137 14.6	1
132 Table	1
132 14.2	1
132 14.1	1
position- independent	3
Index out	3
Specifies a	1
Specifies that	1
Specifies alignment	1
residual error	3
operations, and	1
operations, as	1
operations, see	1
C++. This	1
C++. Critical	1
C++. Yet,	1
input/output than	1
input/output operations.	1
input/output Graphics	1
packages and	1
packages faster	1
packages include	1
operations: //	2
operations: __m128i	1
Explicit CPU	1
Explicit cache	2
purpose. The	1
purpose. It	2
reciprocal_divisor; y2	1
reciprocal_divisor; 14.7	1
reciprocal_divisor; reciprocal_divisor	1
compilation. The	2
compilation. Some	1
(number of	3
endian systems	1
endian storage	1
endian storage.	1
allocates the	1
allocates memory	1
allocates one	1
136 and	1
136 ...	1
136 14.5	1
reveals a	1
reveals that	1
reveals three	1
filled up	1
filled up,	1
filled up.	1
(requires a	1
(requires no	1
(requires binutils	1
offer the	2
offer profile-guided	1
Bitfields may	1
Bitfields Bitfields	1
Bitfields ...................................................................................................................	1
At the	1
At this	1
At least,	1
up-to-date function	1
up-to-date version.	1
up-to-date solution.	1
leaving the	2
leaving their	1
Inheritance from	1
Inheritance An	1
Inheritance ..............................................................................................................	1
153 for	1
153 16.1	1
153 spends	1
degree of	2
degree polynomial	1
_mm_storeu_si128((__m128i *)d,	3
automatically, and	1
automatically, but	1
automatically, although	1
sequentially. The	1
sequentially. It	1
sequentially. Some	1
Enums are	1
Enums An	1
Enums ......................................................................................................................	1
Algebraic reductions	1
Algebraic reduction	2
A, B	1
A, B,	2
operands. The	1
operands. You	1
operands. Nevertheless,	1
i<100; i++)	1
i<100; i++,i2+=2.0f)a[i]=i2;	1
i<100; i++)a[i]=2*i;	1
0.11 memcpy	1
0.11 0.18	1
0.11 1.21	1
0.12 memcpy	1
0.12 0.18	1
0.12 0.11	1
nearest integer	1
nearest element	1
nearest integer.	1
To use	1
To prevent	1
To explain	1
x-- x	3
language, all	1
language, such	1
language, e.g.	1
145 and	1
145 SSE2	1
145 14.11	1
140 a	1
140 for	1
140 14.8	1
141 for	1
141 #include	1
141 14.9	1
RISC and	1
RISC in	1
RISC cores,	1
Consider the	2
Consider running	1
text or	1
text strings	2
Object Windows	1
Object files	1
Object oriented	1
14.10 int	1
14.10 Mathematical	2
14.11 int	1
14.11 Static	2
<int N>	2
<int m>	1
back. The	2
back. Thus,	1
8.4 double	1
8.4 Obstacles	2
8.7 int	1
8.7 Checking	2
listing to	1
listing reveals	1
listing /FA	1
twice for	1
twice because	2
Pascal and	1
Pascal has	1
Pascal used	1
expected. The	1
expected. I	1
expected. Use	1
14.4 Integer	2
14.4 511	1
Vec16s when	1
Vec16s a,	1
Vec16s Vec16us	1
Simple function	1
Simple integer	1
Simple member	1
Manual", Volume	3
leave the	1
leave a	1
leave them	1
solved by	2
solved this	1
supplied in	2
supplied with	1
Available from	2
Available protocols	1
translated to	2
translated into	1
Linux: long	1
Linux: unsigned	1
Linux: -ffunction-sections)	1
With the	1
With a	2
Has not	1
Has an	1
Has many	1
overriding of	1
overriding Intel's	2
Opteron K8	3
systems". The	1
systems". For	1
systems". 7.16	1
correct or	1
correct result	1
correct child	1
caching. This	1
caching. Smaller	1
caching. 3.14	1
overflow: //	1
overflow: a[i]	1
overflow: _controlfp_s(&dummy,	1
scans a	1
scans all	2
way: //	1
way: There	1
way: bool	1
Sometimes the	1
Sometimes it	2
-fno-builtin to	1
-fno-builtin Gnu	2
justify the	1
justify a	1
justify such	1
contrary, the	1
contrary, you	1
contrary, each	1
conventions. The	1
conventions. Optimizes	1
conventions. FreeBSD	1
initialization routine	3
Internet at	1
Internet where	1
Internet forums	1
cover the	2
cover graphics	1
Constructors and	2
Constructors are	1
PC's and	1
PC's in	1
PC's had	1
7.21 int	1
7.21 Runtime	2
delays in	1
delays if	1
delays execution	1
a); }	3
c[i] are	2
c[i] =	1
cleaning up	3
way, the	1
way, then	1
way, etc.	1
Big arrays	1
Big runtime	1
Big supercomputers	1
ZMM registers	3
coefficients is	1
coefficients //	1
coefficients double	1
DOS and	2
DOS compilers).	1
-fpie because	1
-fpie option	1
-fpie instead	1
labels is	1
labels that	1
labels follow	1
6, 9	1
6, 24,	2
ret returns	1
ret ALIGN	2
Signed and	1
Signed /	1
Signed versus	1
logarithms and	1
logarithms in	1
logarithms take	1
stored. The	1
stored. This	1
stored. All	1
manner. This	1
manner. It	1
manner. 3.4	1
Today, the	2
Today, it	1
easiest and	1
easiest way	2
pop ebx	1
pop ebx.	1
pop ret	1
3.5 will	1
3.5 Program	2
-S or	1
-S -	1
-S Generate	1
inlined. An	1
inlined. But	1
inlined. (In	1
cmp eax,	1
cmp jl	1
cmp ja	1
flow and	2
flow at	1
directives. This	1
directives. For	1
directives. OpenMP	1
deallocated. The	1
deallocated. Failure	2
(128 or	1
(128 bit	1
(128 vectors	1
Programmers that	1
Programmers very	1
Programmers do,	1
focus the	1
focus is	1
focus on	1
definition. This	2
definition. Inlining	1
track of	2
track backwards	1
condition. In	1
condition. Replacing	1
condition. Things	1
s3 can	1
s3 =	1
s3 +=	1
s2 and	1
s2 =	1
s2 +=	1
contemporary operating	1
contemporary processors.	1
contemporary 106	1
66 float	1
66 8.1	1
66 8.2	1
probably the	1
probably be	1
probably without	1
longjmp is	1
longjmp in	1
longjmp if	1
2exponent 127	1
2exponent 16383	1
2exponent 1023	1
leads to	3
Alignd (	3
improving the	1
improving code	1
improving performance.	1
sizes. The	1
sizes. For	1
sizes. Fortunately,	1
....................................................................................................... 19	1
....................................................................................................... 21	1
....................................................................................................... 150	1
holds the	1
holds a	2
competing for	1
competing brands	1
competing product	1
questions to	1
questions if	1
questions from	1
register, not	1
register, do	1
register, add	1
etc., and	1
etc., can	1
etc., as	1
ReadTSC as	1
ReadTSC function.	1
ReadTSC listed	1
with: //	3
kernel in	1
kernel version	1
kernel code"	1
CPUs"). This	2
CPUs"). Const	1
j; int	1
j; float	1
j; ...	1
natural order	1
natural parallelism.	1
natural ordering?	1
Examples are	2
Examples include	1
(iset >=	3
F2 and	1
F2 that	1
F2 actually	1
moving the	2
moving each	1
9.6b. The	2
9.6b. #include	1
-O3 or	2
-O3 Interprocedural	1
unusual for	2
unusual that	1
misses, branch	3
Divide by	3
sorted list	3
efficiency, then	1
efficiency, platform	1
efficiency, portability	1
same. The	1
same. This	1
same. If	1
(STL) is	1
(STL) if	1
(STL) which	1
rid of	3
ms for	2
ms by	1
arrays, a	1
arrays, it	1
arrays, then	1
matrix[r][c] is	1
matrix[r][c] below	2
issue to	1
issue an	1
issue because	1
solve this	2
solve all	1
since the	1
since we	1
since 2004.	1
beyond the	3
readable and	1
readable when	1
readable but	1
infinity or	3
bookkeeping is	1
bookkeeping in	1
bookkeeping depends	1
formula in	1
formula into	1
formula a[i]	1
technical problems	1
technical details	1
technical problems.	1
instr. set	3
specified on	1
specified instruction	1
specified types	1
organizing the	2
organizing data	1
9.5a on	1
9.5a const	1
9.5a goes	1
false, a	2
false, then	1
open the	1
open source	1
open source.	1
decomposition of	1
decomposition and	1
decomposition here	1
measuring the	2
measuring performance	1
File access	1
File input/output	1
File access................................................................................................................	1
negligible when	1
negligible because	1
negligible contribution	1
took several	1
took advantage	1
took 50	1
on. Most	1
on. Replace	1
on. 7.31	1
Hyperthreading is	1
Hyperthreading Some	1
Hyperthreading .....................................................................................................	1
30 //	1
30 ms	1
30 Overflow	1
initially points	3
occur. The	1
occur. In	1
occur. See	1
Strings can	1
Strings Text	1
Strings ......................................................................................................................	1
Preprocessing directives	3
utilize the	2
utilize systems	1
(0,0,0,0,0,0,0,0) __m128i	2
(0,0,0,0,0,0,0,0) Is16vec8	1
38 //	1
38 7.11	1
38 7.10	1
reference. This	1
reference. A	1
reference. Registers	1
FUNCNAME SelectAddMul_SSE41	1
FUNCNAME SelectAddMul_SSE2	1
FUNCNAME SelectAddMul_AVX2	1
history of	3
CChild2 *	1
CChild2 :	1
CChild2 Object2;	1
bit: //	2
bit: absvalue	1
forums and	1
forums on	1
forums Several	1
addressing of	3
1024; int	2
1024; struct	1
C#, Visual	2
C#, managed	1
allocating more	1
allocating when	1
allocating piecewise	1
a+b is	1
a+b =	2
taken into	3
microprocessor. These	1
microprocessor. Integer	1
microprocessor. Multiplication	1
argument is	1
argument to	1
argument does	1
Func1 and	1
Func1 when	1
Func1 (int	1
Unix-like systems	1
Unix-like systems.	1
Unix-like platforms.	1
----- -	1
----- x----	1
----- ~(~a)=a	1
2.5 may	1
2.5 Choice	2
read-only can	1
read-only data	1
read-only data.	1
well-structured code	1
well-structured program	1
well-structured C++	1
represent the	1
represent a	2
elsewhere. In	1
elsewhere. Faster	1
elsewhere. 13.5	1
micro-op cache	1
micro-op cache.	2
best. Some	1
best. These	1
best. 3.11	1
returning a	2
returning from	1
Long double	2
Long dependency	1
r1; c2	1
r1; c1	1
r1; r2	1
CPU- specific	3
top of	3
decide to	1
decide which	1
decide how	1
other. This	1
other. See	2
brackets in	1
brackets mean	1
brackets index,	1
2004. No	1
2004. Open	1
2004. Can	1
odd and	1
odd number	1
odd here.	1
7.7 unsigned	1
7.7 Function	2
Documentation of	1
Documentation for	1
Documentation License	1
prone. The	1
prone. A	1
prone. All	1
compile- time	2
compile- time,	1
Global or	1
Global variables	2
lookups for	1
lookups are	1
lookups Max.	1
Whole program	3
a*b =	2
a*b -	1
linker. The	2
linker. Both	1
security. b	1
security. There	1
security. Standard	1
lookup. For	1
lookup. These	1
lookup. Lookup	1
78 for	2
78 Therefore,	1
handled in	1
handled at	1
handled separately:	1
a[], int	3
implicitly when	2
implicitly converting	1
terminating a	1
terminating zero	2
_WIN32 n.a.	1
_WIN32 Linux	1
_WIN32 _WIN32	1
(2n /	3
measures the	2
measures not	1
multiplications. The	1
multiplications. How	1
multiplications. Subtractions	1
intensive may	1
intensive program	1
intensive applications.	1
moved with	1
moved out	2
ReadTSC() -	1
ReadTSC() {	1
ReadTSC() from	1
valid. For	2
valid. Re-interpreting	1
b[size]; //	3
Not all	1
Not optimized	2
none of	3
"what is	1
"what works	2
Comparing an	1
Comparing two	1
Comparing performance	1
instructions, but	1
instructions, multiple	1
instructions, where	1
Microprocessor documentation	1
Microprocessor designers	1
Microprocessor producers	1
metaprogramming. The	1
metaprogramming. Don't	1
metaprogramming. None	1
Size of	3
metaprogramming, as	1
metaprogramming, but	1
metaprogramming, loops	1
bypass the	3
output. The	2
output. On	1
........................................................................................... 5	1
........................................................................................... 6	1
........................................................................................... 139	1
numerically largest	3
expression. The	1
expression. Example	1
expression. Assume,	1
.......................................................................................................... 120	1
.......................................................................................................... 164	1
.......................................................................................................... 38	1
InstructionSet() function	1
InstructionSet() #include	2
Eliminate branches	1
Eliminate jumps	2
backup copy	1
backup copying	1
backup features,	1
13.6 CPU	2
13.6 80.9	1
Get supported	2
Get upper	1
throw an	1
throw any	1
throw exceptions	1
More complicated	1
More examples	1
More details	1
---x----- x	1
---x----- x--xx----	1
---x----- x---x---x	1
_mm_loadu_si128((__m128i const*)p);	2
_mm_loadu_si128((__m128i const*)p);}	1
Before you	2
Before starting	1
Applications that	3
25 clock	1
25 7	1
25 Since	1
AVX-512 instruction	3
23 5	1
23 software.	1
23 ,	1
evict the	1
evict number	2
Copying the	1
Copying or	1
Copying constant	1
(x =	3
being out	1
being initialized.	1
being said,	1
sum, then	2
sum, initialize	1
unrolled to	1
unrolled loop	1
unrolled double	1
slow. If	1
slow. Today,	1
slow. Value	1
StoreVector(aa +	3
7.11 bool	1
7.11 Type	2
market the	1
market is	1
market for	1
vectors, and	1
vectors, as	1
vectors, but	1
resource. The	2
resource. Do	1
Architecture Software	2
Architecture Programmer’s	1
7.12 void	1
7.12 Branches	2
limited. There	1
limited. Example:	1
limited. Dynamic	1
11.3 is	1
11.3 const	1
11.3 even	1
typedef int	1
typedef void	1
typedef instead	1
0x2700 to	3
Replace or	1
Replace macro	1
Replace with:	1
Instead, the	1
Instead, you	1
Instead, I	1
frameworks, rather	1
frameworks, intermediate	1
frameworks, interpreters,	1
*(p++) is	1
*(p++) |=	2
(Intel CPU	2
(Intel Atom).	1
nearby address	1
nearby parts	1
nearby branches.	1
fragmented. This	2
fragmented. An	1
truncation. The	1
truncation. This	1
truncation. Efficient	1
Different compilers	1
Different kinds	2
logarithm of	1
logarithm would	1
logarithm again,	1
Day for	1
Day ==	2
ported to	3
inline. This	2
inline. Replacing	1
big. The	1
big. In	1
big. 7.14	1
deallocation of	2
deallocation and	1
(PLT) and	1
(PLT) in	1
(PLT) that	1
7.22 short	1
7.22 Inheritance	2
Context switches	2
Context switches.....................................................................................................	1
7.23 int	1
7.23 Constructors	2
services that	1
services only	1
services under	1
7.20 int	1
7.20 Virtual	2
extremely complicated	1
extremely costly	1
extremely inefficient,	1
kb =	1
kb size	1
kb /	1
joining the	1
joining a	1
joining identical	1
decrement operators	2
decrement operators.	1
0x1C. If	1
0x1C. There	1
0x1C. Reading	1
free. This	1
free. These	1
free. Visual	1
Check that	2
Check if	1
double, then	2
double, bool,	1
periodic pattern	3
7.27 float	1
7.27 Overloaded	2
7.24 float	1
7.24 Unions	2
product is	2
product makes	1
7.25 unsigned	1
7.25 Bitfields	2
7.28 class	1
7.28 Templates	1
7.28 Templates...............................................................................................................57	1
references, and	1
references, which	1
references, 'this'	1
CPUs" for	2
CPUs" gives	1
experience to	1
experience before	1
experience unacceptably	1
determine the	1
determine if	1
determine whether	1
<typename T,	1
<typename T>	1
<typename MyChild>	1
Generate optimization	1
Generate assembly	1
Generate map	1
certainly a	1
certainly more	1
certainly something	1
Devirtualization class	1
Devirtualization An	1
Devirtualization ---x-----	1
pivot in	1
pivot element.	1
pivot search:	1
__declspec( align(16))	2
__declspec( noalias)	1
mispredictions if	1
mispredictions by	1
mispredictions (see	1
a[100], b;	1
a[100], b,	1
a[100], temp;	1
allocations is	1
allocations of	2
necessary, to	1
necessary, by	1
necessary, each	1
9.4 const	1
9.4 Variables	2
float. The	1
float. (Both	1
float. Similar	1
1.0f;} The	2
1.0f;} 66	1
indeed a	1
indeed of	1
indeed vectorized	1
9.1 show	1
9.1 Caching	2
(not a	1
(not member	1
(not up	1
built-in code	2
built-in test	1
n. The	1
n. You	1
n. But	1
complete code	1
complete redesign	2
(x) x	2
(x) x-xx--xx-	1
ecx, 1	1
ecx, DWORD	1
ecx, edx,	1
modified. This	2
modified. Unlike	1
folding and	2
folding -	1
expects a	1
expects an	1
expects immediate	1
Call to	1
Call critical	2
joined into	2
joined together	1
classes, as	1
classes, such	1
classes, templates	1
compute a	1
compute (FuncRow(i)*columns	1
compute i/2	1
interpreting the	2
interpreting or	1
LIBM libraries	1
LIBM library.	1
LIBM Library	1
accesses to	1
accesses data	1
accesses b	1
$B1$2 is	1
$B1$2 ebx	1
$B1$2 label	1
copying. The	1
copying. There	1
copying. Security.	1
Volume 1	1
Volume 1,	1
Volume 2A	1
placed in	2
placed immediately	1
spot. Use	1
spot. Sometimes,	1
spot. Repeating	1
variable, for	1
variable, it	1
variable, pointer	1
jumping out	2
jumping around	1
compared to	2
compared with	1
3-dimensional vectors	2
3-dimensional geometry	1
x. The	1
x. This	1
x. It	1
a. This	1
a. You	1
a. I	1
post-increment. The	1
post-increment. There	1
post-increment. For	1
sufficient to	2
sufficient for	1
evicted when	1
evicted from	1
evicted before	1
flags on	1
flags register	1
flags stall	1
Sum2 and	3
(2,2,2,2,2,2,2,2) __m128i	2
(2,2,2,2,2,2,2,2) Is16vec8	1
[edx] DWORD	2
[edx] adds,	1
7.14 class	1
7.14 Functions	2
7.16 float	1
7.16 Function	2
7.17 const	1
7.17 Structures	2
templates. The	1
templates. Two	1
templates. Ready	1
7.13 struct	1
7.13 Loops	1
7.13 Loops......................................................................................................................	1
7.19 int	1
7.19 Class	2
beware of	1
beware that	2
7.18 int	1
7.18 Class	2
card for	1
card or	1
(4) access	1
(4) get	1
elements: #define	2
viable solution	1
viable compromise	1
7.10 Arrays	2
_mm_set1_epi16(2); //	2
templates, as	1
templates, such	1
complexity of	1
complexity (en.wikipedia.org/wiki/Standard_Template_Library).	1
511 511	1
511 2040	1
Member pointers	1
Member pointers.......................................................................................................37	1
modifying the	1
modifying only	1
undesired results.	1
undesired effects.	1
7.15 Function	2
symbol interposition	2
problematic because	2
invest in	1
invest more	1
memcpy, at	1
memcpy, memmove,	1
Sum3 in	1
Sum3 are	1
Pure functions	1
Pure function.	1
impossible to	1
impossible with	1
B1; class	2
forwarding delay	2
storage, but	1
storage, far	1
107). The	1
107). Agner's	1
64) can	1
64) %	1
static. This	1
static. Example:	1
_M_X64 _M_X64	1
_M_X64 162	1
CriticalFunction(); ...	1
CriticalFunction(); timediff[i]	1
x-xxx---x x	1
x-xxx---x x-xxx---x	1
shown in	2
lack the	1
lack of	1
a2 *	1
a2 /	1
a1 *	1
a1 /	1
16) {	1
16) shows	1
debugger. You	1
debugger. However,	1
mostly compatible	1
mostly relative	1
a) {	2
ptr x;	1
ptr n;	1
fastcall functions	1
fastcall modifier	1
accumulators for	1
accumulators if	1
aliasing" if	1
aliasing" (if	1
Implementation The	1
Implementation .....................................................................................................	1
significantly simply	1
significantly just	1
parallelism. The	2
479001600}; if	1
479001600}; ...	1
"Performance Optimization	2
type-casted to	2
x4 =	2
frequency. The	1
frequency. For	1
interpretation or	1
interpretation on	1
(chapter 11)	1
(chapter 12)	1
research, not	1
research, I	1
SIAM 2001.	2
a[i+1] =	2
x-xxx---- a-(-b)=a+b	1
x-xxx---- a*b*c=a*(b*c)	1
send data	1
send your	1
string[100], *p	2
SSSE3 a	1
SSSE3 _mm_perm_epi8	1
expressions, but	1
expressions, even	1
CriticalFunctionType *	1
CriticalFunctionType CriticalFunction_Dispatch;	1
71). The	1
71). In	1
ASCII string	1
ASCII form.	1
overlapping or	1
overlapping calculations.	1
computationally intensive	2
executes a	1
executes three	1
window of	1
window or	1
ten times	1
ten years	1
Structure of	1
Structure and	1
jobs. The	1
jobs. For	1
please don't	1
please install	1
Unions A	1
Unions ....................................................................................................................	1
AMD: "Software	1
AMD: "AMD64	1
((a*x+b)*x+c)*x+d x*x*x*x*x*x*x*x	2
9.2 Cache	2
1024 bits	1
1024 bytes,	1
programmed. But	1
programmed. Therefore,	1
Aligned arrays	1
Aligned operands	1
past the	1
past history	1
9.6 Dynamic	2
object's class	1
object's class.	1
b2, y1,	2
partial template	1
partial flags	1
(a+b)+(c+d) a*b+a*c=a*(b+c)	2
(16 or	1
(16 bits),	1
xor mov	1
xor eax,eax.	1
again, that	1
again, but	1
9.9 Access	2
resolve any	1
resolve compatibility	1
context. The	1
context. It	1
(May use	2
131. Intel	1
131. AMD	1
goal is	1
goal of	1
discovered that	2
Exp(float x)	2
9.8 Strings	2
_MSC_VER and	1
_MSC_VER //	1
16.3 Worst-case	2
chance of	1
chance that	1
manipulated to	1
manipulated with	1
c+b can	1
c+b will	1
override the	1
override public	1
branches, as	1
branches, provided	1
applications, but	2
developed a	1
developed as	1
7.29 Threads	2
CriticalFunction. If	1
CriticalFunction. You	1
discusses how	2
#elif INSTRSET	2
7.26 Overloaded	2
"Instruction tables".	2
400 bytes.	1
400 here.	1
invariant code	2
c*x +	2
carefully to	1
carefully optimized	1
CriticalInnerFunction is	1
CriticalInnerFunction ()	1
a/1=a xxxxxxxxx	1
a/1=a x-xxx-x--	1
__m128 defines	1
__m128 s;	1
operator; and	1
operator; you	1
subexpression. A	1
subexpression. For	1
freed when	1
freed before	1
operator, or	1
operator, which	1
p->Hello(); }	1
p->Hello(); p	1
CPUs: use	1
CPUs: An	1
0's when	1
0's gives	1
chip that	1
chip can	1
operator. The	2
proceed in	1
proceed unattended.	1
CriticalFunction_386(int parm1,	2
scientific vector	1
scientific computing,	1
biased allows	1
biased binary	1
minor error	1
minor increase	1
screen. There	1
screen. However,	1
market. But	1
market. Such	1
aligned(16))) Assume	1
aligned(16))) __declspec(	1
justified in	1
justified for	1
exit the	1
exit may	1
cos(x); }	1
cos(x); z	1
having the	1
having different	1
for-loop or	1
for-loop has	1
char, short	1
char, signed	1
a/a=1 --------x	1
a/a=1 ----x---x	1
legal issue.	1
legal issue,	1
resource, such	1
resource, especially	1
parallelization. The	1
parallelization. Supports	1
keeping a	1
keeping data	1
sampling: The	2
12.5. Vector	1
12.5. Aligned	1
reduces the	1
reduces example	1
non-member functions.	1
non-member function,	1
vectorized, because	1
vectorized, but	1
y=temp;} //	1
y=temp;} int	1
influences in	1
influences are	1
explains the	1
explains why	1
emulate the	1
emulate a	1
four, we	1
four, depending	1
believe that	2
stdint.h or	1
stdint.h char	1
elimin., integer	1
elimin., float	1
instance. The	1
instance. Non-static	1
TransposeCopy(double a[SIZE][SIZE],	2
insufficient information	1
insufficient amount	1
dangers of	1
dangers to	1
aligned. It	1
aligned. See	1
external libraries.	1
external clock.	1
"Error: Index	2
smmintrin.h (Gnu)	1
smmintrin.h SSE4.2	1
frameworks. The	1
frameworks. This	1
Monday, etc.	1
Monday, Tuesday,	1
X, 32-bit	1
X, unless	1
GNU General	1
GNU Free	1
127. The	2
FuncType *	1
FuncType SelectAddMul,	1
C1::f }	1
C1::f directly	1
Splitting up	2
Algorithms that	2
-mAVX /arch:AVX	1
-mAVX -axSSE3,	1
worry about	1
worry much	1
instruction. The	1
instruction. Programmers	1
x^2 //	1
x^2 float	1
disabled in	1
disabled will	1
CPU-specific and	1
CPU-specific versions	1
8.26b void	1
8.26b compiled	1
preprocessing directives	1
preprocessing macro	1
strides. Therefore,	1
strides. Uncached	1
15. If	1
15. C++	1
develop and	2
Full template	2
(N &	2
Enable the	1
Enable exception	1
cases: The	1
cases: If	1
non-AVX code	1
non-AVX code.	1
a+(b+c) -	2
mouse. The	1
mouse. This	1
www.amd.com. 163	1
www.amd.com. Advices	1
-56 which	1
-56 rather	1
difficult. The	1
difficult. On	1
-msse3 -mssse3	1
-msse3 /arch:SSE3	1
(32-bit or	1
(32-bit mode):	1
values. The	1
values. Which	1
/arch:SSE2 -msse2	2
Vec8s 16	1
Vec8s a,	1
CParent is	1
CParent :	1
Adding the	1
Adding 1	1
developer.intel.com. Many	1
developer.intel.com. AMD:	1
frame- pointer	2
<stdio.h> //	1
<stdio.h> #include	1
9.11 Explicit	2
relocations in	2
NAN (not	1
NAN (Not	1
9.10 Cache	2
2" The	1
2" Here	1
sum; for	1
sum; }	1
12.10 Conclusion	2
semaphores, mutexes,	1
semaphores, mutexes	1
Multiplication and	1
Multiplication takes	1
N&(N-1) is	1
N&(N-1) gives	1
assembly: ALIGN	2
regularly. Intel:	1
regularly. AMD:	1
vacant then	1
vacant spaces.	1
early implementations	1
early planning	1
non-polymorphic functions	1
non-polymorphic member	1
3.3; //	1
3.3; double	1
users. In	1
users. Firewalls,	1
extern "C"	2
heap. The	2
formats can	1
formats should	1
ruled out	2
reused again	1
reused elsewhere.	1
Organize the	2
CParent<CChild1> {	2
14.12b and	1
14.12b int	1
types: long	1
types: char,	1
FDIV bug	2
decimal point	2
nfac =	1
nfac *=	1
connections. Open	1
connections. Temporary	1
PC. Nevertheless,	1
PC. Similarly,	1
hacks and	1
hacks that	1
24 6	1
24 dramatically	1
suffer from	2
throw. It	1
throw. In	1
differently. The	1
differently. A	1
align(16)) __attribute((	2
element, bits	2
Often, it	2
Replacing a	1
Replacing two	1
b*x*x +	2
language". The	1
language". While	1
that's about	1
that's what	1
13.3 Difficult	2
inherent performance	1
inherent support	1
-static Generate	1
-static /MT	1
ArrayOfStructures[100]; This	1
ArrayOfStructures[100]; Here,	1
13.2 Model-specific	2
comparison is	1
comparison of	1
hint and	1
hint about	1
13.5 Implementation	2
13.4 Test	2
13.7 CPU	2
code" in	1
code" actually	1
course. A	1
course. It	1
<dvec.h> //	2
loop, the	1
loop, for	1
number, or	1
number, which	1
case: //	2
rolling out	2
loop: for	1
loop: //	1
2.0f; }	1
2.0f; x.i	1
52. The	1
52. You	1
supporting multiple	1
supporting multi-threaded	1
thrown by	1
thrown exceptions	1
invoking the	2
{1, 1,	2
construct an	1
construct obscure	1
compiled. This	1
compiled. #if	1
transpose(double a[SIZE][SIZE])	2
Checking what	2
elimination, constant	2
StringLength; for	1
StringLength; i	1
integration, mixed	1
integration, web	1
kilobytes at	1
kilobytes Time	1
got low	1
got RISC	1
locally in	1
locally or	1
it, for	1
it, it	1
32. This	1
32. In	1
minimum value	1
minimum supported	1
thread-specific data	2
a[2]; for	1
a[2]; a[0]	1
can't be	1
can't have	1
Vec4f polynomial	1
Vec4f Vec2d	1
(2) use	1
(2) find	1
paragraph and	1
paragraph described	1
remain unchanged.	1
remain locked	1
scanners to	1
scanners and	1
calculates the	1
calculates four	1
databases, etc.	1
databases, network	1
C++". Addison-Wesley,	1
C++". Addison-Wesley.	1
2008 version).	1
2008 R2	1
/Gy -ffunction-	2
Assuming that	2
search, is	1
search, or	1
......................................................................... 128	1
......................................................................... 130	1
constructs are	1
constructs Most	1
screen resolutions,	2
Loops The	1
Loops with	1
Plus2 (int	1
Plus2 (&a);	1
a*0 =	2
a*1 =	2
"vectorclass.h" //	2
b[size], i;	1
b[size], c[size];	1
Table[100]; int	2
describe some	1
describe various	1
GOT. The	1
GOT. Another	1
dynamic_cast more	1
dynamic_cast operator	1
Finding the	2
120, 720,	2
uninitialized or	1
uninitialized variables	1
77 Pointer	1
77 8.4	1
string. The	1
string. In	1
74 x	1
74 8.3	1
73 and	1
73 Without	1
Object2; CChild1	1
Object2; CHello	1
destination both	1
destination array.	1
lookup: //	2
72 for	1
72 This	1
(Tuesday |	2
b:2; int	2
string; int	1
string; while	1
putting the	2
14.14b double	1
14.14b automatically	1
non- standardized	1
non- sequential	1
15.1c. We	1
15.1c. Calculate	1
73). It	1
73). Current	1
....................................................... 20	1
....................................................... 120	1
mutexes, etc.	1
mutexes, database	1
volatile. The	1
volatile. This	1
relocation. The	1
relocation. All	1
(~a&c) |	1
(~a&c) a&b&c&d	1
90% of	1
90% chance	1
MultiplyBy in	1
MultiplyBy (int	1
suited for	2
Developer’s Manual",	2
y1, y2;	1
y1, y2,	1
14.14a with	1
14.14a double	1
settings and	1
settings are	1
Compile for	1
Compile once	1
Provoke cache	1
Provoke branch	1
import table	2
turns out	2
0x4700. These	1
0x4700. Reading	1
x---- -----	1
x---- x----	1
Overcoming the	2
a*1=a (-a)*(-b)=a*b	1
a*1=a x-xxxxx-x	1
Take the	1
Take user	1
shuffling, such	1
shuffling, packing,	1
priorities to	1
priorities then	1
range"; }	1
range"; 134	1
corrections and	1
corrections for	1
safe. This	1
safe. In	1
supported. The	1
supported. For	1
anonymous object.	1
anonymous namespace.	1
pure. This	1
pure. Virtual	1
SSE4.2 string	1
SSE4.2 nmmintrin.h	1
clock; }	1
clock; __cpuid(dummy,	1
12.4a where	1
12.4a so	1
matrices, clock	2
inconsistent and	1
inconsistent results	1
bc); //	2
join all	1
join them	1
range. The	1
range. This	1
c:2; };	2
Value of	2
CGrandParent {	2
two); //	2
-- -	2
bypassed by	1
bypassed when	1
drivers, interrupt	1
drivers, configuration	1
-0 }	1
-0 (zero	1
accelerator card	1
accelerator card.	1
3.10 Graphics	2
3.11 Other	2
increases the	2
3.13 Memory	2
3.14 Context	2
3.15 Dependency	2
3.16 Execution	2
Sum1 has	1
Sum1 slightly	1
a*x*x*x +	2
0x20; If	1
0x20; 46	1
TILESIZE //	1
TILESIZE =	1
expression, or	1
expression, but	1
consumers ................................................................................	1
consumers 3.1	1
CPU, an	1
CPU, which	1
&Object1; p1->Hello();	1
&Object1; p->NotPolymorphic();	1
............................................................................. 158	1
............................................................................. 84	1
exp(x) for	2
programming. The	1
programming. 13.3	1
time1; //	1
time1; long	1
events, for	1
events, such	1
achieved more	1
achieved when	1
<emmintrin.h> //	1
<emmintrin.h> static	1
2.8 Overcoming	2
answers to	1
answers in	1
starting a	1
starting and	1
disadvantages: The	1
disadvantages: It	1
2.3 Choice	2
ahead of	2
inserted in	1
inserted UnusedFiller	1
2.2 Choice	2
/arch:SSE -msse	2
2.1 Choice	2
2.0 This	1
2.0 /	1
40320, 362880,	2
Func(int); const	2
invalidate the	1
invalidate each	1
opposite of	1
opposite order	1
itself, and	1
itself, during	1
2.7 Choice	2
a[1000]; float	1
a[1000]; F1(a);	1
2.6 Choice	2
S. Goedecker	1
S. Warren,	1
environment block.	1
environment (IDE)	1
F2(b); }	2
handles this	1
handles eight	1
2.4 Choice	2
note that	2
others are	1
others have	1
needs. The	1
needs. 9.8	1
sar add	1
sar ebx,1	1
("internal"))) __attribute__	1
("internal"))) Vectorize	1
8.15a were	1
8.15a struct	1
footprint is	1
footprint than	1
14.13b int	1
14.13b works	1
namespaces. Therefore,	1
namespaces. 65	1
preventing program	1
preventing illegitimate	1
Lowest version	2
Saturday =	1
Saturday };	1
a*b+a*c=a*(b+c) a*x*x*x	2
resolutions, different	1
resolutions, etc.	1
So the	1
So please	1
9.6a const	1
9.6a Time	1
a*(b+c) -	2
events that	1
events as	1
__fastcall. The	1
__fastcall. Function	1
a+0 =	2
Delays in	1
Delays or	1
Report on	2
(bb[i] *	1
(bb[i] >	1
specified. The	1
specified. Insert	1
prototype to	1
prototype CriticalFunctionType	1
39 shows	1
39 matrix[i][j]	1
let's look	1
let's say	1
(Day &	1
(Day ==	1
visible in	1
visible at	1
Kbytes to	1
Kbytes and	1
proxy is	1
proxy for	1
Microprocessors with	2
105. Floating	1
105. 8.7	1
recently than	1
recently 4	1
creating and	2
order(i); matrix[j][0]	1
order(i); list[j].a	1
refers to	1
refers to.	1
floppy disk.	1
floppy disks	1
underflow. The	2
37 A	1
37 7.8	1
36 C++	1
36 7.7	1
3) <<	1
3) <<6	1
contrived example,	1
contrived examples	1
Manual on	1
Manual 3:	1
Excessive use	1
Excessive loop	1
FuncA and	1
FuncA (int	1
web application	1
web browsing	1
occur, but	2
reorder instructions	2
microseconds to	1
microseconds as	1
Standard C++	1
Standard Template	1
const_cast operator	2
though. In	1
though. Some	1
compiler: unsigned	1
compiler: __int64	1
y) {	2
/MT -msse3	1
/MT 160	1
overwritten, and	1
overwritten, possibly	1
[esp+8] DWORD	1
[esp+8] eax,	1
annoyingly long	1
annoyingly high	1
list[size]; int	1
list[size]; ...	1
license Table	1
license included	1
y1 =	2
y2 =	2
swapd(x,y) {temp=x;	2
int)i <	1
int)i >=	1
CriticalFunction_SSE2(int parm1,	2
GHz then	1
GHz CPU.	1
false. The	1
false. Likewise,	1
Multithreading The	1
Multithreading works	1
New versions	2
CriticalFunctionDispatch(void) {	1
CriticalFunctionDispatch(void) __asm__	1
methods. The	1
methods. If	1
became available	1
became available.	1
if, a	1
if, and	1
computers. At	1
computers. Today,	1
x.abc =	2
Worst-case testing	2
Operations that	2
named YMM	1
named MKL,	1
a*0=0 a*1=a	1
a*0=0 --xxxx-xx	1
p2 =	1
p2 having	1
p1 and	1
p1 =	1
major platforms.	2
internet or	1
internet forums	1
p; int	1
p; p	1
lrintf and	1
lrintf (float	1
resulting code	1
resulting machine	1
a[c][r]); //	1
a[c][r]); void	1
math. Memory	1
math. Libraries	1
2048 bytes	1
2048 230.7	1
3.5; c	1
3.5; Here,	1
DLLs are	1
DLLs use	1
Unix systems	1
Unix applications	1
Lookup tables	2
differ a	1
differ then	1
InstructionSet(); //	2
F1() {	1
F1() throw();	1
safety is	1
safety problem	1
predefined vector	2
variable-size array	1
variable-size arrays	1
obj1; C0	1
obj1; p->f();	1
Codes", by	1
Codes", SIAM	1
summarized in	1
summarized below.	1
small. The	1
small. Are	1
................................................................................ 16	1
................................................................................ 61	1
buffer. It	1
buffer. Contentions	1
list[size], sum	1
list[size], sum1	1
"asmlib.h" //	2
ArraySize =	1
ArraySize by	1
Live range	2
mask); //	1
mask); 110	1
suffixes are	1
suffixes such	1
programmer. There	1
programmer. 79	1
x-xxxxxx- a*0=0	1
x-xxxxxx- x-xxxx-x-	1
name. In	1
name. #define	1
third-party graphics	1
third-party profilers	1
(a+b)+c=a+(b+c) --xx-----	1
(a+b)+c=a+(b+c) a+b+c=c+b+a	1
audio and	1
audio or	1
arguments are	1
arguments while	1
infinite loop	1
infinite loop.	1
flow. However,	1
flow. Failure	1
worse, it	1
worse, many	1
miss can	1
miss on	1
unsafe code	1
unsafe because	1
away. It	1
away. Note	1
movements of	2
((x2) 2)	2
windows, mutexes,	1
windows, graphic	1
pressing a	2
Factors that	2
price, and	1
price, compatibility,	1
Jumps can	1
Jumps between	1
maintaining a	1
maintaining such	1
Nevertheless, the	1
Nevertheless, it	1
sound processing	1
sound processing,	1
servers that	1
servers should	1
utility. The	1
utility. It	1
executable. SSE2	1
executable. Most	1
controlled. The	1
controlled. Small	1
literature for	1
literature on	1
512; //	2
precautions to	1
precautions for	1
smarter ways	2
2001. 9.11	1
2001. Advanced	1
Current compilers	1
Current CPUs	1
concentrated on	2
aa[i] =	2
null reference	1
null reference.	1
capable of	2
FuncC(i); }	1
FuncC(i); FuncB(i+1);	1
updating. The	2
MOVNTDQ require	1
MOVNTDQ _mm_stream_si128	1
renaming and	1
renaming mechanism	1
considering is	1
considering whether	1
worthwhile to	2
a-(-b)=a+b a-a	1
a-(-b)=a+b ---xxx-x-	1
f(); };	2
separately. The	2
patterns with	1
patterns containing	1
93. Avoid	1
93. 7.10	1
lowest of	1
lowest instruction	1
EXCEPTION_FLT_OVERFLOW ?	1
EXCEPTION_FLT_OVERFLOW 0xC0000091L	1
constructor, if	1
constructor, an	1
syntax: __asm	2
1.2; //	2
26. The	1
26. Avoid	1
parentheses can	1
parentheses manually.	1
check. It	1
check. There	1
experiments in	1
experiments on	1
................................................................................................. 103	1
................................................................................................. 132	1
tables". There	1
tables". Tips	1
jl $B1$2	1
jl $B1$3:	1
computation time	1
computation time.	1
thread-local storage	2
date. A	1
date. Mac	1
physics processor	1
physics processing	1
first, then	2
below) then	1
below) 16.1	1
eliminated. Loop	1
eliminated. Code	1
c.load(cc+i); a	1
c.load(cc+i); //	1
x-xxxxxxx xxxxxxxxx	1
x-xxxxxxx ---x-----	1
Unrolling the	1
Unrolling a	1
hyperthreading. If	1
hyperthreading. On	1
bytes, so	1
bytes, 4	1
(*.lib, *.a)	2
irrelevant software	1
irrelevant within	1
careful when	1
careful optimization.	1
compression and	1
compression Most	1
intervals are	1
intervals which	1
(c2 =	2
immediate response	1
immediate responses	1
Object1; CChild2	1
Object1; C2	1
etc.) have	1
etc.) inside	1
64-bit. Supports	1
64-bit. They	1
indirect function	1
indirect function"	1
(-a==-b)=(a==b) ---xx----	2
hyperthreading, then	1
hyperthreading, but	1
exponent, and	2
FuncA(i); }	1
FuncA(i); FuncC(i);	1
cross-platform compatibility	1
cross-platform portability.	1
{temp=x; x=y;	2
decomposition. It	1
decomposition. Functional	1
parameter: //	1
parameter: template	1
determines the	1
determines whether	1
(properties) The	1
(properties) ............................................................................	1
ABC =	1
ABC 123	1
comments about	1
comments generated	1
..................................................................................................................... 38	1
..................................................................................................................... 163	1
profitable to	1
profitable (see	1
behind the	2
Technical Report	1
Technical University	1
Neither is	1
Neither can	1
calculation. In	1
calculation. However,	1
const)) Assume	1
const)) __attribute((	1
test, but	1
test, maintain	1
-ffunction- sections	2
-msse SSE2	1
-msse /arch:SSE	1
Initialize to	1
Initialize loop	1
indices or	1
indices when	1
s0 =	1
s0 +=	1
/FA -S	2
marketing of	1
marketing reasons.	1
parm2); //	1
parm2); }	1
--xx----- (a&&b)	1
--xx----- x-xxx---x	1
20, columns	2
conflicting with	1
conflicting considerations	1
20; i	1
20; i++)	1
61 function	1
61 7.31	1
looking at	1
looking name	1
coarse-grained parallelism	2
matrix[c][r] at	1
matrix[c][r] above	1
-mssse3 -msse4.1	1
-mssse3 /arch:SSSE2	1
isolate the	2
Let me	2
question. You	1
question. For	1
x^n //	1
x^n }	1
treats different	1
treats non-Intel	1
topics .........................................................................................	1
topics 14.1	1
(3) look	1
(3) trap	1
table: //	2
unstable or	1
unstable due	1
60 The	1
60 7.30	1
iterations. The	1
iterations. Here	1
Join identical	2
bb[i] +	1
bb[i] >	1
sampling requires	1
sampling generates	1
(memory address)	1
(memory pooling)	1
verifying the	1
verifying and	1
3.6 Dynamic	2
3.4 Automatic	2
log(b[i]) +	2
Now, the	1
Now, according	1
a+a+a+a=a*4 -(-a)=a	2
doubt how	1
doubt obtained	1
78). A	1
78). Adding	1
v.f are	1
v.f if	1
manner? If	2
generating overflow.	1
generating denormal	1
Especially the	2
.................................................................................................... 10	1
.................................................................................................... 19	1
3.2 Use	2
F1(a); }	2
Switch between	1
Switch statements	1
_mm_set1_epi16(0); //	2
everywhere in	1
everywhere by	1
a&&(b||c) !a	1
a&&(b||c) (a&&!b)	1
(a&b) |	2
3.3 Program	2
3.1 How	2
randomly one	1
randomly around	1
Useful for	1
Useful when	1
3.8 System	2
3.9 Other	2
............................................................................................ 66	1
............................................................................................ 36	1
mainframe computer.	1
mainframe computers.	1
(time before)	1
(time after)	1
Everything that	2
required. The	1
required. See	1
theoretical possibility	1
theoretical background	1
12.1a. Automatic	1
12.1a. Enable	1
file, is	1
file, especially	1
working with	1
working software	1
pragmas in	1
pragmas must	1
use. The	1
use. I	1
use, as	1
use, incompatible	1
favorable: Small	1
favorable: Larger	1
color settings	1
color difference.	1
8192 /	1
8192 bytes,	1
_mm_cmpgt_epi16(b, zero);	2
lost. This	1
lost. It	1
Exceptions and	2
question when	1
question without	1
afterwards a	1
afterwards reads	1
Every time	1
Every fourth	1
denormals-are-zero mode	2
declaration. The	1
declaration. This	1
exceptions: while	1
exceptions: __except	1
read. It	1
read. If	1
Non-static member	1
Non-static members	1
re- allocating	1
re- usable	1
requiring the	1
requiring many	1
{int a;	2
branching is	1
branching takes	1
changed. This	1
changed. 7.8	1
belongs to	2
(a&&c) =	1
(a&&c) ||	1
NumberOfTests =	1
NumberOfTests times	1
obviously takes	1
obviously influenced	1
undetected. The	1
undetected. Converting	1
alone in	1
alone compiler	1
caller to	1
caller through	1
understanding of	2
influence the	1
influence on	1
x-xx----- x--x-----	1
x-xx----- 75	1
Lazy binding	2
Volatile to	1
Volatile The	1
lock a	2
allowed. The	1
allowed. Non-public	1
today will	1
today where	1
(double)(signed int)u;	2
programmable logic	2
checks. But	1
checks. These	1
mechanisms often	1
mechanisms explained	1
8.1. The	1
8.1. Comparison	1
G values	1
G values,	1
Align by	1
Align arrays	1
c) The	1
c) 139	1
&CriticalFunction_386; }	2
(three on	1
(three parameters	1
goto CFALSE;	1
goto DTRUE;	1
testing. Here,	1
testing. Trying	1
feature. This	1
feature. All	1
interposition is	1
interposition feature	1
loads the	2
*.a) or	2
dispatchers are	1
dispatchers up	1
Registers are	2
Event-based sampling:	1
Event-based sampling	1
associated with	2
time-consumer in	1
time-consumer even	1
mechanism. The	1
mechanism. See	1
Optimizations in	2
machines with	1
machines use	1
problem: 1.	1
problem: (1)	1
constructors, and	1
constructors, copy	1
References are	2
mutually incompatible.	2
_mm_empty() as	1
_mm_empty() after	1
report that	1
report /Qopt-report	1
disturbing influences	2
develop- ment	2
negative. The	2
facilities, binary	1
facilities, easy	1
creation of	2
warning for	1
warning from	1
min =	1
min &&	1
14.2 Bounds	2
14.3 Use	2
14.1 Use	2
vectorclass manual	1
vectorclass www.agner.org/optimize/#vectorclass.	1
14.7 Don't	2
debugging. A	2
Func(int a[],	2
(columns *	2
14.5 Integer	2
defined. The	1
defined. This	1
-msse4.1 -mAVX	1
-msse4.1 /arch:SSE4.1	1
x^10 //	2
branches): if	2
DoThisThreeTimesAWeek(); }	2
-msse2 SSE3	1
-msse2 /arch:SSE2	1
logarithms, exponential	2
default. This	1
default. Position-independent	1
WTL application	1
WTL applications	1
_controlfp(0, _EM_OVERFLOW);	2
load. The	1
load. A	1
select(b >	2
framework. The	1
framework. Obviously,	1
8.6 Optimization	2
synchronization between	2
Without static,	1
Without optimization,	1
millisecond resolution	1
millisecond resolution.	1
sizeof(S1) =	1
sizeof(S1) would	1
high-priority threads	1
high-priority thread	1
development. This	1
development. For	1
push and	1
push mov	1
Numerically Intensive	2
verify that	1
verify than	1
us to	2
searching, and	1
searching, or	1
known. This	1
known. Example:	1
14.13 System	2
14.12 Position-independent	2
area. The	1
area. Join	1
14.19 static	1
14.19 below.	1
rounding. This	1
rounding. Pointer	1
column; for	1
column; Do	1
dramatically for	1
dramatically by	1
148 It	1
148 14.13	1
8.5 Compiler	2
Polynomial coefficients	2
temporarily. This	1
temporarily. Using	1
obscure examples	1
obscure possibility	1
14.1c is	1
14.1c void	1
142 unsigned	1
142 14.10	1
"assume no	2
properly and	1
properly aligned	1
issue. See	1
issue. But	1
restarted anyway.	2
Func2() {	2
x--x----- ---x-----	1
x--x----- --xx-----	1
PCs. The	1
PCs. Therefore,	1
8.2 Comparison	2
Possible solutions	2
IDE's for	1
IDE's (Integrated	1
8.3 Obstacles	2
obtained. If	1
obtained. In	1
C++: An	1
C++: Preprocessor	1
sin(x); }	1
sin(x); z	1
delay. See	1
delay. But	1
1.f; for	1
1.f; float	1
Divisions can	1
Divisions take	1
7.32 Preprocessing	2
largest_index =	2
wide, should	1
wide, while	1
list[i].a and	1
list[i].a =	1
model. You	1
model. Instead,	1
7.33 Namespaces...........................................................................................................	1
7.33 Namespaces	1
manipulating floating	2
Dependency chains	2
additions. When	1
additions. Divisions	1
MOVNTPD and	1
MOVNTPD _mm_stream_pd	1
158 Integer	1
158 18	1
A; double	1
A; x.b	1
cycle? In	1
cycle? ......................................................................................	1
server. Use	1
server. These	1
156 16.3	2
fine-tuned for	2
157 17	2
draw the	1
draw each	1
examples. The	1
examples. You	1
class: //	1
class: class	1
sharing the	2
155 16.2	1
155 test.	1
7.30 Exceptions	2
ways, with	1
ways, as	1
predicted. The	1
predicted. This	1
i<n; i++)	1
i<n; ++i).	1
dividing by	1
dividing repeatedly	1
complications that	1
complications with	1
AVX, as	1
AVX, AVX2	1
7.31 Other	2
redo the	2
parallelization of	1
parallelization in	1
Matrix size	2
.................................................................................. 16	1
.................................................................................. 55	1
a.store(aa+i); }	2
0x7FFFFFFF) {	2
add, etc.	1
add, remove	1
fed into	1
fed directly	1
array, or	1
array, which	1
AVX. These	1
AVX. 5.	1
Alignd(X) X	1
Alignd(X) __declspec(align(16))	1
_mm_add_epi16(c, two);	2
waits for	1
waits until	1
loops, then	1
loops, etc.	1
Tuesday, Wednesday	1
Tuesday, Wednesday,	1
loops. 13.1	1
loops. Consider	1
Increment and	1
Increment loop	1
cached as	1
cached more	1
propagation, and	1
propagation, etc.	1
exceeds an	1
exceeds 64	1
Wikipedia under	1
Wikipedia article	1
................................................................................................ 22	1
................................................................................................ 157	1
mask. The	1
mask. Poor	1
conclude that	1
conclude this	1
shared. You	1
shared. Any	1
relocated by	1
relocated (rebased)	1
else. This	1
else. System	1
FIFO queue	1
FIFO manner?	1
Library" and	1
Library" contains	1
dealing with	2
Hello() {	2
Various development	1
Various graphics	1
software, it	1
software, but	1
Overflow may	1
Overflow behaves	1
multiplications and	1
multiplications only.	1
differences were	1
differences due	1
2.2, C	2
machine. The	2
containers. If	1
containers. See	1
tree. On	1
tree. Is	1
approach to	2
dynamically. The	1
dynamically. Arrays	1
__asm__ (".type	1
__asm__ ("CriticalFunction");	1
difficulties making	2
deleting the	1
deleting containers.	1
discussion. Integer	1
discussion. 7.33	1
...................................................................................................................... 96	1
...................................................................................................................... 33	1
int) are	1
int) instead	1
(y) {	2
purpose, or	1
purpose, you	1
algorithms, are	1
algorithms, cannot	1
&CriticalFunction_SSE2; }	2
Disp(); class	1
Disp(); void	1
consistent for	1
consistent modularity	1
1.23456. The	1
1.23456. But	1
v; if	2
(b, c);	2
reveal a	1
reveal things	1
created. There	1
created. Far	1
denormal numbers	1
denormal numbers.	1
optional and	1
optional commercial	1
op. Intel	1
op. AMD	1
experiment are	1
experiment where	1
Induction++; }	1
Induction++; ;	1
precisions when	1
precisions take	1
Difficult cases	1
Difficult cases........................................................................................................	1
interpreter for	1
interpreter which	1
(PLT). The	1
(PLT). And	1
order(int x);	2
digital operation	1
digital building	1
i++){ list[i]	2
0.40 n.a.	1
0.40 0.30	1
z; a	1
z; bool	1
139 can	1
139 14.7	1
0.44 0.12	1
0.44 0.40	1
cc); }	2
__GNUC__ and	1
__GNUC__ #define	1
covered the	1
covered in	1
fashioned C	2
alloca. This	1
alloca. 9.7	1
Efficient caching	1
Efficient conversion	1
spaces for	1
spaces that	1
$B1$1: mov	1
$B1$1: push	1
362880, 3628800,	2
(line size)	2
column. The	1
column. Number	1
complex, that	1
complex, but	1
3.7 File	2
cheap if	1
cheap compiler	1
purity. In	1
purity. For	1
0.f, 0.f,	1
0.f, 1.f);	1
14.23b and	1
14.23b union	1
below). The	1
below). A	1
division, which	1
division, square	1
received by	1
received data	1
degradation of	1
degradation in	1
"override" feature.	2
11.2b const	1
11.2b was	1
matrix[j][0] is	1
matrix[j][0] =	1
x--xx---- (a&&b)	1
x--xx---- (a&&b)||(a&&!b)=a	1
Sometimes, the	1
Sometimes, functions	1
distribute function	1
distribute all	1
"worst case"	2
overdetermined in	1
overdetermined Boolean	1
ms. This	1
ms. If	1
thing. Example:	1
thing. An	1
squares: for	1
squares: const	1
MemberPointer is	2
www.intel.com. (See	1
www.intel.com. Manual	1
TILESIZE) {	2
sources. The	1
sources. For	1
first-in-last-out fashion.	1
first-in-last-out nature	1
3628800, 39916800,	2
uncommon for	2
coprocessor or	1
coprocessor might	1
23; //	2
82 8.7	1
82 Keywords	1
relates to	2
7.9 Smart	2
alignment. See	1
alignment. __declspec(align(16))	1
7.5 Booleans	1
7.5 Booleans...................................................................................................................	1
deal of	2
binutils version	2
7.6 Pointers	2
Specific optimization	2
__attribute__((const)) #else	1
__attribute__((const)) (Linux	1
unnecessary for	1
unnecessary functions	1
b[1000]; };	1
b[1000]; F2(b);	1
7.3 Floating	2
performing an	1
performing software	1
once, rather	1
once, while	1
s1 =	1
s1 +=	1
(called static	1
(called x86)	1
84 for	1
84 9	1
"C" int	1
"C" declaration	1
respects and	1
respects relevant	1
License license	1
License shall	1
ISO/IEC TR	1
ISO/IEC TR18015	1
command-line version	1
command-line versions	1
i++ are	1
i++ ;checkifi<100	1
137). The	1
137). This	1
template. The	1
template. 57	1
General case,	1
General Public	1
container, then	1
container, preferably	1
integrated in	1
integrated development	1
started. The	1
started. It	1
transposes a	2
container. STL	1
container. Can	1
(*SelectAddMul_pointer)(aa, bb,	2
crash the	1
crash on	1
1.1, B	2
reserve the	1
reserve resources	1
Older operating	1
Older CPUs	1
deleted. Smart	1
deleted. User	1
Asmlib Gnu	1
Asmlib My	1
Both the	1
Both code	1
&Object2; p->Hello();	1
&Object2; p2->Hello();	1
a:4; int	2
(-a)*(-b)=a*b a/a=1	1
(-a)*(-b)=a*b ---xxx---	1
left for	1
left out	1
c2++) {	2
Nested loops	2
ipow faster	1
ipow (double	1
comparison, which	1
comparison, bit	1
produced regularly.	2
NotPolymorphic(); virtual	1
NotPolymorphic(); };	1
a*b+a*c =	2
11.1a to	1
11.1a float	1
support, and	1
support, then	1
forget to	2
inverted bit-mask:	1
inverted mask.	1
11.1b float	1
11.1b automatically,	1
80. The	2
i. The	1
i. This	1
worked well	1
worked sufficiently	1
needed: //	2
Introduction This	1
Introduction .......................................................................................................................	1
i+=3){ list[i]	2
PUBLIC ?Func@@YAXQAHAAH@Z	2
-(-a)=a -	1
-(-a)=a --xxxxxx-	1
"IA-32 Intel	2
loaded, the	1
loaded, but	1
(a&&b&&c) =	2
a+0=a a*0=0	1
a+0=a x-xxxxxx-	1
7.15b below	1
7.15b SafeArray	1
grows by	1
grows during	1
0. The	2
r2++) {	2
index, just	1
index, i.	1
time-consumers are	1
time-consumers mentioned	1
enough. A	1
enough. For	1
720, 5040,	2
tedious and	1
tedious indeed.	1
correctly. The	1
correctly. A	1
flexible, but	1
flexible, well	1
ARRAYSIZE =	1
ARRAYSIZE &&	1
annotation in	1
annotation option	1
respectively. (In	1
respectively. Increment	1
1.1 The	2
43). The	1
43). There	1
^= 0x80000000;	2
1's is	1
1's when	1
hexadecimal numbers	1
hexadecimal numbers,	1
u, v;	2
extending the	1
extending with	1
^, ~	1
^, ~,	1
systematic and	1
systematic manner	1
forces the	2
rolled out	2
__attribute__ ((visibility	2
Java, use	1
Java, C#,	1
ivdep Assume	1
ivdep __restrict	1
Gnu. It	1
Gnu. There	1
recursion must	1
recursion template<>	1
^a =	2
algebra, it	1
algebra, we	1
management and	2
lots of	2
163 20	1
163 Internet	1
projects, it	2
160 19	1
160 /Qparallel	1
(This is	1
(This eliminates	1
Mac. The	1
Mac. Supports	1
chip. Such	2
wrapped into	2
perfectly on	1
perfectly varies	1
zero); //	2
added? If	2
Addison-Wesley, 1996.	1
Addison-Wesley, 2003.	1
counter, which	1
counter, comparing	1
modifier can	1
modifier will	1
-Ofast /O3	1
-Ofast -mveclibabi	1
test. You	1
test. disable	1
respond to	1
respond quickly	1
Intensive Codes",	2
planning phase	1
planning stage	1
C2 :	1
C2 Object2;	1
R value	1
R values	1
release version	2
fraction. The	1
fraction. For	1
Friday is	1
Friday =	1
textbooks recommend	2
slower. Many	1
slower. Another	1
9.7 Container	2
c1; int	1
c1; c2	1
compilers, system	1
compilers, etc.,	1
subtracting 1	1
subtracting n	1
Returns a	1
Returns time	1
insight can	1
insight you	1
a*b=b*a x	1
a*b=b*a a+b+c=a+(b+c)	1
r1+TILESIZE; r2++)	2
0/a =	2
hope that	2
Portability C++	1
Portability note:	1
compilers). The	2
Catch floating	1
Catch exceptions	1
99% of	2
"; //	1
"; Disp();	1
Sab {int	1
Sab ab[size];	1
contribution to	2
distinction between	2
Update induction	2
Supported compilers	1
Supported operating	1
ment in	1
ment time	1
typeof(CriticalFunction) *	2
ones that	1
ones mentioned	1
busy doing	1
busy concentrating	1
optimally on	1
optimally aligned.	1
Fast function	1
Fast versions	1
funny things	1
funny looking	1
queries is	1
queries can	1
saying that	1
saying please	1
normal. This	1
normal. 157	1
1" //	2
updated. It	1
updated. Most	1
clumsy and	1
clumsy AND-OR	1
int)u; //	1
int)u; 14.9	1
trivial programming	1
trivial tasks	1
a[SIZE][SIZE]) {	2
x64 141	1
x64 (Visual	1
systems). 28	1
systems). 42	1
wasted on	2
Public distribution	1
Public License,	1
dummy elements	1
dummy element	1
symbolic link	1
symbolic link.	1
fetched and	1
fetched from	1
0x40 bytes	1
0x40 };	1
(a&b)|(a&c) =	2
relocation, but	1
relocation, especially	1
(The Microsoft	1
(The PGI	1
Mixing float	1
Mixing object	1
decides which	1
decides whether	1
<xmmintrin.h> _mm_setcsr(_mm_getcsr()	1
<xmmintrin.h> _MM_SET_FLUSH_ZERO_MODE(_MM_FLUSH_ZERO_ON);	1
Func1(x) +	1
Func1(x) *	1
5040, 40320,	2
ability to	2
3, 5	1
3, 4,	1
3.12 Network	2
123 and	1
123 correspond	1
provoke an	1
provoke error	1
VectorC A	1
VectorC v.	1
processes. The	2
((visibility ("internal")))	2
stronger for	1
stronger when	1
accessible from	2
reusable and	1
reusable classes.	1
procedures for	1
procedures are	1
!(a <	1
!(a ||	1
Overview of	2
ammintrin.h AMD	1
ammintrin.h (MS)	1
sequences of	2
stop the	2
expansions of	1
expansions and	1
bit. The	1
bit. We	1
Conclusion There	1
Conclusion ..........................................................................................................	1
linking. The	1
linking. A	1
Free Documentation	1
Free trial	1
bottlenecks is	1
bottlenecks can	1
interrupts and	1
interrupts at	1
legacy code,	1
legacy software.	1
segment by	1
segment then	1
__unix__ __linux__	2
attempts to	2
Code that	1
Code caching	1
Day; if	2
swapd(a[r2][c2],a[c2][r2]); }	2
bb, cc);	2
power. There	1
power. Connecting	1
consumer to	1
consumer if	1
parenthesis around	2
Security The	1
Security software	1
limit, then	1
limit, etc.	1
~ for	1
~ are	1
swapd(a[r][c], a[c][r]);	2
Single precision	2
0.28 strlen	1
0.28 0.22	1
Booleans The	1
Booleans as	1
0.24 n.a.	1
0.24 0.25	1
Caching of	2
interfere with	2
-fomit- frame-	2
0.25 0.28	1
0.25 0.24	1
_mm_mullo_epi16 (b,	2
FMA4 instruction	1
FMA4 fma4intrin.h	1
distribution to	1
distribution and	1
>> can	1
>> n	1
do, at	1
do, however,	1
appropriate. 8.	1
appropriate. Compiler-specific	1
Please skip	1
Please note	1
Network access	2
__int64 64-bit	1
__int64 64	1
mispredictions, floating	1
mispredictions, etc.	1
rows; i++)	2
together. The	1
together. Data	1
organize the	1
organize data	1
bitfield is	1
bitfield by	1
15.1b. Calculate	1
15.1b. Branches	1
sees the	1
sees a	1
Interpreted code	1
Interpreted languages	1
treat a	1
treat non-Intel	1
a[SIZE][SIZE], double	2
(a<b &&	2
processor). Integer	1
processor). Optimizing	1
occurred. //	1
occurred. This	1
corresponding instruction	1
corresponding bitwise	1
memset(a, 0,	2
m;} int	1
m;} template	1
recovering or	1
recovering from	1
Sunday, Monday,	2
incompatible. A	1
incompatible. You	1
2;} //	1
2;} int	1
fast, compact,	1
fast, -fp-	1
University of	1
University courses	1
log, and	1
log, exp,	1
begins with	1
begins at	1
14.26 does	1
14.26 union	1
14.27 union	1
14.27 assumes	1
somewhat more	1
somewhat less	1
predictable. It	1
predictable. For	1
subtraction, multiplication,	1
subtraction, comparison,	1
14.23 page	1
14.23 union	1
slight degradation	1
slight imprecision	1
unit. For	1
unit. Various	1
direct access	1
direct hardware	1
generic version	1
generic branch,	1
unit, but	1
unit, either	1
invalid. The	1
invalid. Boolean	1
heavily on	1
heavily loaded.	1
self- relative	2
log2 a	1
log2 =	1
counters. A	1
counters. My	1
speed, memory	2
(!a&&c) =	1
(!a&&c) ||	1
[] array	1
[] operator	1
122. The	2
messages to	1
messages saying	1
x[]); void	2
only) -O3	1
only) (Intel	1
although it	1
although slightly	1
primitive programming	1
primitive operations	1
Goedecker and	2
Model-specific dispatching	2
-fno-rtti Assume	1
-fno-rtti /GR-	1
initialization, or	1
initialization, condition,	1
largest_abs =	2
implementations. However,	1
implementations. 7.22	1
24, 120,	2
studying the	1
studying a	1
87). There	1
87). Data	1
contentions. See	1
contentions. Use	1
SafeArray {	1
SafeArray <float,	1
58 If	1
58 shows	1
increasingly important.	1
increasingly blurred	1
accurate and	1
accurate for	1
efforts in	1
efforts on	1
starts. The	2
i/2+r. The	2
reader has	1
reader what	1
usability, program	1
usability, but	1
template<> class	2
low-level C	1
low-level optimizations.	1
available: //	2
_controlfp_s(&dummy, 0,	2
mangled function	2
Transforming serial	2
contend for	2
collector at	1
collector which	1
int)n <	2
Far storage,	1
Far Systems	1
factorials: static	1
factorials: const	1
........................................................................................ 53	1
........................................................................................ 109	1
compares the	1
compares eax	1
shows. The	1
shows. It	1
By giving	1
By Agner	1
certainty that	1
certainty which	1
1-bit in	1
1-bit removed.	1
Or it	1
Or #include	1
Programs that	1
Programs using	1
operation, which	2
closed. The	2
source. It	1
source. Supports	1
:1;//signbit };	2
avoided, if	1
avoided, there	1
book on	1
book "Performance	1
avoided. The	1
avoided. 37	1
EMMS }	1
EMMS instruction	1
immediately before	2
sizeof(a)); //	1
sizeof(a)); }	1
105). If	1
105). Using	1
usage in	1
usage convention	1
fix the	2
b[SIZE][SIZE]) {	2
press or	1
press break	1
sorting and	1
sorting algorithms,	1
(*.dll, *.so).	2
1.00 0.25	1
1.00 0.35	1
, longdoublevalue	1
, doublevalue	1
efficiently. This	1
efficiently. It	1
word static	1
word processor	1
B2 {	1
B2 b2;	1
10.1 Hyperthreading	2
Converting an	1
Converting class	1
matrix. For	1
matrix. My	1
B; for	1
B; x.c	1
divisions. It	1
divisions. Example:	1
chains, especially	1
chains, namely	1
coprocessors is	1
coprocessors to	1
x.a =	2
effect. GOT	1
effect. Which	1
keyboard and	1
keyboard or	1
39916800, 479001600};	2
Approximate exp(x)	2
Table[x] =	2
restriction on	1
restriction from	1
x.c =	2
misleading results	1
misleading reports	1
#ifdef _MSC_VER	1
#ifdef __GNUC__	1
.................................................................................................. 18	1
.................................................................................................. 134	1
Sum of	2
x.b =	2
CPUs". A	1
CPUs". 9.3	1
shr add	1
shr ebx,31	1
each. The	2
0/a=0 ---x---xx	1
0/a=0 ---xx--xx	1
replacing a	1
replacing an	1
1.0f +	1
1.0f :	1
manual, but	1
manual, I	1
involve the	1
involve a	1
Optimize for	1
Optimize function	1
list[i]; This	1
list[i]; sum2	1
initialize to	1
initialize sum	1
117 A	1
117 12.7	1
previously in	1
previously required	1
113 Number	1
113 12.6	1
root and	2
statistics, and	1
statistics, signal	1
times, one	1
times, even	1
obstacle of	1
obstacle to	1
Fog. Technical	1
Fog. Public	1
12.8 Aligning	2
IDE with	1
IDE on	1
12.9 Aligning	2
removing the	1
removing superfluous	1
setup may	1
setup but	1
_LP64 Windows	1
_LP64 _WIN64	1
type, a	1
type, but	1
b.load(bb+i); //	1
b.load(bb+i); c.load(cc+i);	1
factorials so	1
factorials don't	1
subroutine for	1
subroutine if	1
later. The	1
later. Example:	1
12.4 Using	2
12.5 Using	2
manipulations of	1
manipulations on	1
leaks and	1
leaks if	1
says that	2
12.6 Transforming	2
140). The	1
140). Mathematical	1
12.7 Mathematical	2
52 or	1
52 ,	1
obey any	1
obey certain	1
72. It	1
72. You	1
b*a -	1
b*a (a+b)+c=a+(b+c)	1
95 and	1
95 not	1
12.1 AVX	2
time-critical code.	1
time-critical part	1
12.3 Automatic	2
universal solution	1
universal algorithm	1
Suppl. SSE3	2
crash. See	1
crash. Furthermore,	1
a+b+c+d =	2
99 read	1
99 10	1
Remove branch	1
Remove right-most	1
interpreters, just-in-time	2
9. Avoid	1
9. Multiplications	1
any, is	1
any, must	1
thread-safe function	1
thread-safe functions.	1
F3(bool y)	2
exclusive access	1
exclusive mode,	1
9.2. All	1
9.2. Cache	1
NumberOfTests; i++)	2
stay in	1
stay on	1
extension of	1
extension to	1
"best case"	2
functions) has	1
functions) /Gy	1
repeated until	1
repeated 1024/4	1
FactorialTable[13] =	2
Friday) in	1
Friday) {	1
function: //	1
function: (static_cast<MyChild*>(this))->Disp();	1
8.21 is	1
8.21 void	1
&CriticalFunction_AVX; }	2
105 The	1
105 12.1	1
interpret the	1
interpret that	1
Writing a	1
Writing past	1
bug is	1
bug causes	1
Compare each	2
x=y; y=temp;}	2
better, you	1
better, make	1
flip the	1
flip sign	1
float's when	1
float's fits	1
minutes to	2
109 }	1
109 12.5	1
(a+1) *	1
(a+1) /	1
reasons, the	1
reasons, but	1
better: store	1
better: -Ofast	1
method, it	1
method, but	1
whose address	1
whose distance	1
delete, and	1
delete, or	1
accessed, and	1
accessed, it	1
a&(b|c) -	1
a&(b|c) x-xxxx--x	1
assigning a	1
assigning different	1
10% of	2
Mostly obsolete.	2
4: "Instruction	2
4; The	1
4; Register	1
have. The	1
have. In	1
relieving the	1
relieving a	1
10, columns	1
10, 12	1
ENDP +	1
ENDP ecx,	1
incremented to	1
incremented every	1
48 Use	1
48 7.15	1
Tuesday =	1
Tuesday ||	1
internally as	2
fourth of	1
fourth value	1
tips on	2
shared_ptr than	1
shared_ptr allows	1
BSD. The	1
BSD. If	1
effort. 7.21	1
effort. Square	1
today. You	1
today. But	1
Put the	1
Put in	1
CriticalFunction_AVX(int parm1,	2
(r2 =	2
writing: 103	1
writing: __declspec(align(64))	1
B2; class	1
B2; 54	1
overall performance	1
overall computation	1
Structures and	2
executables. This	1
executables. Make	1
inherently parallel	1
inherently serial,	1
me. You	1
me. My	1
non-virtual member	1
non-virtual functions.	1
safer. It	1
safer. Type	1
b+c =	1
b+c will	1
__linux__ x86	1
__linux__ __unix__	1
-32768 32767	1
b+a a*b	1
factorials, but	1
convenience -	1
231. This	1
pow(x,10); }	1
companies often	1
dominate in	1
preferences for	1
optimize("a",on). Specifies	1
optimize(...) Fastcall	1
x---x---x x-xxx----	1
16383 one	1
extensions. If	1
today, then	1
14.5b if	1
14.5a const	1
otherwise. In	1
//Loopby4 s	1
b2); y1	1
1./3628800., 1./39916800.,	1
niche in	1
10) {	1
fistp dword	1
SetThreadAffinityMask, in	1
common, and	1
(low numbers	1
common. Even	1
segments (32-bit	1
Darwin8 g++	1
108 You	1
compact, and	1
102 also	1
namespace. 3.	1
update, or	1
similarity between	1
106 CPUs	1
function) should	1
"move constructor"	1
function" has	1
Friday, Saturday	1
bits), unless	1
Correction for	1
vulnerability of	1
reinstallation work	1
ignoring the	1
sums }	1
N-1)==0 if	1
1./6., 1./24.,	1
{x =	1
Rather than	1
code-based methods	1
N+1 supports	1
512-bit ZMM	1
7.6. Set	1
circumvent operating	1
---x---xx (-a==-b)=(a==b)	1
blog. Here,	1
OpenMP. www.openmp.org.	1
Includes many	1
$B2$2 ;	1
effects. This	1
Delight". Addison-Wesley,	1
AND-operations in	1
precompiled code.	1
typo in	1
51). The	1
Included with	1
Updates to	1
'@' and	1
(methods) Each	1
count. The	1
masm=intel /FA	1
warn against	1
warm up	1
noticed that	1
constructs........................................................................ 26	1
a<<b<<c =	1
leak. An	1
utility for	1
clumsy, as	1
16-byte instructions	1
zeroes. Example:	1
caveats. We	1
$B1$2:. This	1
repagination are	1
a[i+2] ;	1
recognizes it	1
recognized in	1
cleans up	1
(bitwise and)	1
portability. Unfortunately,	1
independently. The	1
9.5b void	1
answer questions	1
(Standard Template	1
13.2. CPU	1
adds, not	1
objconv or	1
purpose: Contain	1
limitations to	1
x8*x2; return	1
limitation). 14.11	1
speculatively executing	1
disassembly window	1
(en.wikipedia.org/wiki/L2_cache). The	1
attempt is	1
0+1.23456 =	1
before) }	1
blocks. A	1
timingtest.h from	1
C1::Disp() or	1
predictor. On	1
128. These	1
accurate, however,	1
Misaligned data.	1
FAQ for	1
before. This	1
Xnu project.	1
initialized. The	1
so). A	1
Remember, therefore,	1
/fp:fast=2 -fp-model	1
/MT). In	1
MKL). Works	1
B1 {	1
CParent::Hello() has	1
user-defined function	1
spots, but	1
B. In	1
exploiting fine-grained	1
sets). Here,	1
lost at	1
i+1; The	1
terminated. The	1
burden is	1
(a&&!b) ||	1
SafeArray: //	1
Is8vec16 Vec16c	1
weakness or	1
imple- mentations	1
Yeppp. Open	1
nested function	1
source) {	1
1994. Mostly	1
side effects	1
ample resources.	1
(MMX), 128	1
1/50 of	1
/openmp /MT	1
forgot to	1
clauses are	1
reproducibility. Delays	1
-abs(x);. There	1
x-xxx -	1
timediff[i] =	1
Be sure	1
for(inti=0;i<16;i+=4){ //Loopby4	1
message. It	1
coordination with	1
distant future.	1
Sunday =	1
restore ebx	1
47 Most	1
1996. These	1
www.agner.org/optimize. Copyright	1
row++) for	1
resume after	1
x-xxxxx-- (a&b)|(a&c)	1
areas. Data	1
qword ptr	1
Repeat NumberOfTests	1
/EHs- No	1
union: //	1
(12.4e) with	1
steals resources	1
(add with	1
moved, which	1
moved. A	1
areas, and	1
longdoublevalue (	1
unconventional manner	1
*const_cast<int*>(&x) +=	1
(option -fno-pic).	1
x-xxxxx-x (-a)*(-b)=a*b	1
Handles to	1
strange and	1
invalid, and	1
_mm_stream_si128 SSE2	1
/Gy, Linux:	1
(there is	1
sqrt and	1
b.y +	1
SSE. Several	1
bits: //	1
264-1 uint64_t	1
generality. The	1
sin(0.8); The	1
esp+12 and	1
bounds-checking to	1
owns the	1
i--, x++)	1
versa. But	1
body. A	1
CString uses	1
58.7 168.3	1
Prevent optimizing	1
"express" edition	1
(en.wikipedia.org/wiki/Standard_Template_Library). The	1
zero: //	1
*(int*)&x |=	1
-fno-pic). 64	1
tread can	1
rows. Let's	1
saturated. This	1
rows, not	1
uncaught overflow	1
macro, but	1
virtualization. The	1
seek information	1
macro. If	1
constructed. All	1
data, including	1
FuncB (int	1
limits the	1
xx4(x4); //	1
precious resource	1
15h Processors".	1
installed, a	1
installed. The	1
point: //	1
IA-32/Intel64, 2009.	1
_mm_perm_epi8 32	1
min) <=	1
LLVM is	1
7.40a struct	1
7.40b union	1
7.40c x.abc	1
(FuncRow(i)*columns +	1
(Darwin) are	1
see, it	1
importance of	1
comparable to	1
interpretation. The	1
x∙xn-1, and	1
rarely. The	1
optimize("a", on)	1
neither faster	1
correctly whether	1
sets) (line	1
libraries........................................................................................ 12	1
mind. In	1
sets, cache	1
dot in	1
a2*b1) /	1
mispredicted. A	1
Day. Note	1
mispredicted, which	1
Good compilers	1
after) -	1
OneOrTwo5[2] =	1
intermediates, loop	1
incremented. See	1
incremented, while	1
here's an	1
insufficient. The	1
she is	1
not-too-big upper	1
evictions and	1
bit, the	1
Prefetch PREFETCH	1
core). The	1
noalias) __restrict	1
transposition of	1
other's caches	1
below, on	1
illegitimate copying.	1
legitimate backup	1
121 13	1
architecture of	1
renamed instances	1
unacceptable to	1
hardware-related details	1
12, last	1
12) are	1
"More Effective	1
"Effective C++".	1
Dispatcher void	1
www.gnu.org/copyleft/fdl.html. 164	1
Boost collection	1
ebx,31 copies	1
matters. Problems	1
<ia32intrin.h> etc.	1
finish. 3.8	1
inappropriate CPU	1
0: printf("Alpha");	1
IA-32 Architectures	1
x87 style	1
a+b+c=a+(b+c) (a+b)+c=a+(b+c)	1
6.0f; Constant	1
brackets. However,	1
NULL. There	1
b*(2.0/3.0) unless	1
.a), but	1
tolerance may	1
Processor memcpy	1
Files on	1
compactness, and	1
(partial) template	1
Abrash: "Zen	1
T+1 to	1
0] in	1
Edition, 2005;	1
14.7b is	1
Otherwise the	1
suggested improvements).	1
14.3a int	1
14.3b int	1
(DLL) which	1
SelectAddMul_SSE41 #elif	1
thenaandbcannot use	1
Hat). PathScale	1
int32_t long	1
issuing an	1
unchanged across	1
Deallocation has	1
initiative whenever	1
bloat and	1
Division, square	1
Gives a	1
C- style	1
boolb=0; static	1
C# and	1
(0); and	1
acceptable limit,	1
FuncB, then	1
removed. If	1
trigger the	1
basic understanding	1
j++) 39	1
once................................... 135	1
statements, as	1
compiling. This	1
frustration and	1
2-3 clock	1
prone to	1
switches..................................................................................................... 22	1
deeper into	1
b)) even	1
less. Fortunately,	1
"function". Multiple	1
Max. number	1
operator[] (unsigned	1
enabled: //	1
owns. A	1
wrapper classes	1
161 32	1
162 19	1
be, for	1
algebra) require	1
be. The	1
Re-do the	1
algebra. For	1
slices. This	1
transformation of	1
x^8 //	1
2.11 ifunc	1
power-save options	1
situations: The	1
balance between	1
0.35 0.29	1
over. Virtualization	1
over- loaded	1
a<c) =	1
a1/b1 +	1
"memory" );	1
2009. Gnu	1
situations, and	1
vendor string.	1
list; //	1
Non-polymorphic functions	1
investment. A	1
MOVNTPS, MOVNTPD	1
(80 bits).	1
matrix[NUMROWS][NUMCOLUMNS]; int	1
149 All	1
x);} void	1
cc[i]+2 is	1
Iu32vec2 64	1
Iu32vec4 Vec4ui	1
time1 =	1
plug-ins that	1
Vec32c unsigned	1
interval, for	1
time? If	1
&SelectAddMul_AVX2; (iset	1
i7 processor	1
kit (SDK	1
i) {	1
(Vec4f const	1
transitions between	1
Usually it	1
a[size]; unsigned	1
................................................................................................... 87	1
x?" or	1
separating the	1
(the instruction	1
g() {	1
technology, and	1
800 bytes	1
tolerated. PGI	1
Gbytes. This	1
p1; p1	1
CriticalFunctionType(int parm1,	1
deleted, copied	1
a/1 =	1
Yet, D	1
-263 263-1	1
assigned previously	1
functional decomposition	1
2eee 1.fffff,	1
human readable	1
plug-in to	1
_mm_setcsr(_mm_getcsr() |	1
2-20, but	1
yet as	1
Newton-Raphson iterations.	1
regarded as	1
pixel or	1
affinity mask.	1
PROCNEAR ;	1
119). The	1
stack). ecx	1
ago, the	1
reuse the	1
Beginners are	1
Error: lowest	1
pool, as	1
reordered, inlined,	1
doublevalue (	1
(IPP). Works	1
hand. Low-level	1
hand- written	1
|) instead	1
standardization of	1
Patches should	1
object-oriented programming,	1
WriteFile if	1
link. Use	1
strategies........................................................................................ 122	1
monitoring options.	1
printf("Beta"); break;	1
re-use a	1
dead code	1
Core2 processor	1
meaning. 2.	1
meaning, then	1
2014-08-07. Contents	1
(int)&matrix[0][0] +	1
Safe []	1
i*12, because	1
__thread or	1
(BTB). Contentions	1
meanings depending	1
capabilities. Here	1
paragraph. The	1
Sum2(S3 *	1
18015, "Technical	1
alignments and	1
status: _fpreset();	1
Including the	1
millisecond. The	1
list[100], *temp;	1
benchmark performance	1
ifbit=1 bitofn	1
f(x) or	1
floatvalue (	1
Inlining a	1
remains zero	1
worst- case	1
titles. Literature	1
11.2a const	1
/GR– -fno-rtti	1
~C1(); };	1
(vector const	1
initial value	1
optimize/#vectorclass Include	1
powN<true,N/2>::p(x); }	1
accumulators. Current	1
22. Avoid	1
addressed relative	1
F0() {	1
OS, etc.)	1
vmlsExp4 vmldExp2	1
-mcmodel=large, but	1
+127. An	1
precision: //	1
223 to	1
x[1] =	1
Adolfy Hoisie:	1
64; //	1
products fail	1
dvec.h vectorclass.h	1
(.dll or	1
stages before	1
InstructionSet().The following	1
64. Each	1
sticks may	1
Parallelization by	1
covers 64	1
die. See	1
153. A	1
65535 uint16_t	1
/Qopt-report -opt-report	1
low-priority thread	1
Vectorization with	1
Profile-guided optimization	1
destructors. The	1
Locked mutexes.	1
independence, and	1
libraries............................................................................ 146	1
fine-tuning, testing,	1
exits. For	1
exits, when	1
mangling are	1
utilities in	1
cases........................................................................................................ 124	1
alleviated in	1
decimals, for	1
cell for	1
transfers ownership	1
list[j].b +	1
list[j].a =	1
12.4a. Loop	1
12.4a, depending	1
example,a *	1
obeyed. Copy	1
sufficient, and	1
product. It	1
restores the	1
2011). Instead,	1
serial, such	1
restored before	1
managed C++,	1
Disadvantages are:	1
real-time speed.	1
1./40320., 1./362880.,	1
exceeding that	1
(a+c==b+c)=(a==b) ----x----	1
18.2. Compiler	1
click becomes	1
1.23456, y;	1
download updates	1
/Qopenmp -m32	1
technique is	1
de-allocation of	1
x<<3, which	1
optimizer. Borland/CodeGear/Embarcadero	1
division). The	1
monotonically increasing	1
top-of-stack index.	1
configurations with	1
off. It	1
Vec8ui Vec4q	1
2.20 or	1
2.23 0.95	1
std.org/jtc1/sc22/wg21/docs/TR18015.pdf. OpenMP.	1
relocate, but	1
advised to	1
button or	1
positions in	1
did not	1
Vec8us 32	1
<excpt.h> #include	1
minimal difference	1
Library, available	1
Systems with	1
more. Many	1
telling the	1
unexpected behaviors.	1
feasible. Interference	1
x2*x2; double	1
Mathcad (v.	1
-mveclibabi=acml. Agner's	1
friendly compiler	1
running, and	1
targets is	1
exit. Calling	1
switching. This	1
alternatives: Make	1
operations............................................................................................... 105	1
27). The	1
................................................................................... 81	1
log(c[i]); //	1
assignment, as	1
assignment. shared_ptr	1
diagnose. It	1
8.9b int	1
15.1c). 16	1
vector(float a,	1
c;}; abc	1
8.9a int	1
sets........................... 122	1
Integrates into	1
AddTwo(int *	1
Violation of	1
evenly between	1
identified, then	1
simultaneous lookups	1
incrementing a	1
imprecise or	1
Technology Journal	1
-100, b	1
p->f() goes	1
DontSkip =	1
1./2., 1./6.,	1
blend instruction	1
e +	1
flexibility of	1
SelectAddMul_SSE2, SelectAddMul_SSE41,	1
Greek[4] =	1
Windows: __rdtsc()).	1
wealth of	1
correlated with	1
independently of	1
Output array	1
T, unsigned	1
T> static	1
SelectAddMul, SelectAddMul_SSE2,	1
throw()specification is	1
asa <<	1
themselves. But	1
ARRAYSIZE. Another	1
electrical connections	1
A2 =	1
"=m"(n) :	1
A. Hoisie,	1
(IDE) supports	1
TR 18015,	1
Numbers in	1
amounts of	1
fld qword	1
Calculating the	1
(v. 15.0)	1
polygon or	1
~(~a)=a x-xxxxx--	1
/vms Fastcall	1
sample more	1
everybody. So	1
unwise to	1
systems"). An	1
looses ownership	1
p2->Hello(); //	1
8.23b. Calculate	1
d); Now	1
144 The	1
circuits consisting	1
14.1b int	1
143 if	1
14.1a int	1
ecx+eax*4. The	1
Reinterpret cast	1
max =	1
77) shows	1
theory. Advice	1
constructor" to	1
14, with	1
Number) if	1
grow in	1
Pointers, references,	1
Unpredictable branches	1
QueryPerformanceCounter functions	1
workload between	1
u[0]. 14.10	1
class). If	1
seeing an	1
distributors are	1
2B, and	1
(Red Hat).	1
optimally. The	1
optimally, or	1
view. This	1
competition. Processors	1
8.42n, 2004.	1
group books	1
thank the	1
www.openmp.org. Documentation	1
interesting because	1
~a&~b=~(a|b) --xxxx---	1
;eax=addressofa ;edx=addressinr	1
"static" or	1
0x800 apart.	1
subtract this	1
works, here's	1
@gnu_indirect_function"); //	1
optimizations, as	1
matrixes. Algorithms	1
speeds. If	1
tmmintrin.h SSE4.1	1
{}; void	1
forgets that	1
7. If	1
integer: //	1
module2.cpp. The	1
last: //	1
14.0 80.8	1
SelectAddMul_AVX2, SelectAddMul_dispatch;	1
Choose the	1
list[j].c; }	1
r.a +	1
places). Some	1
Linux) 4.	1
decrementing a	1
Accessibility guidelines	1
constructors. A	1
x10 =	1
Generic version	1
F64vec4 Table	1
system-independent, in	1
DynamicArray[i] =	1
cross-module optimizations	1
therefore, always	1
FuncCol(i)) *	1
requesting a	1
locally. Access	1
8.3a float	1
12.4c. Same	1
a+b=0, and	1
"Software Optimization	1
listing. Use	1
eax. The	1
game or	1
polynomial(x) =	1
cc[i]); }	1
Time-based sampling:	1
uninstallation of	1
a+b=b+a a*b=b*a	1
remaining bits	1
u.d is	1
branch). This	1
conversions.................................................................................................... 40	1
forbids the	1
107. A	1
Walking through	1
(1985). This	1
de-allocated. This	1
.................................................................................................................. 60	1
/O3 -O3	1
dispatching: 1.	1
dispatching, then	1
C++0x support.	1
(b1*b2); The	1
1./1.30767E12, 1./2.09227E13};	1
*temp; for	1
segmented memory,	1
integral number	1
compiler). Fastcall	1
Weighing the	1
workaround methods	1
Users should	1
Problems with	1
-m32 -m64	1
bool, enum	1
branch, which	1
/arch:SSE4.1 -mAVX	1
performance: The	1
editions). Do	1
[ecx+eax*4]. This	1
Borland/CodeGear/Embarcadero C++	1
easier. I	1
1000. The	1
ready made	1
studied do	1
0.666666666666666666667; This	1
A2; //	1
commpage. These	1
uses. There	1
powN<true,0> {	1
0x3700, 0x3F00	1
matrix[row][column] =	1
performance). Aligned	1
describes how	1
{2.6f, 1.5f};	1
non-sequentially because	1
1% goes	1
errors; make	1
1) y	1
(typically 64)	1
hackers often	1
errors, and	1
formula: (set)	1
Certainly not!	1
occupies a	1
multi-threading, e.g.	1
"xmmintrin.h" //	1
occupied throughout	1
experimental results	1
condition: //	1
runtime). The	1
c1, c2;	1
Dr Dobbs	1
switching to	1
formulas in	1
trace with	1
Single-Instruction-Multiple-Data (SIMD)	1
condition, and	1
protected: T	1
zigzag course	1
topic, see	1
complaints should	1
(XMM), 256	1
local: 1.	1
20. The	1
D, Pascal,	1
throw(A,B,C) to	1
fills up	1
local. This	1
precise floating	1
Predefined macros	1
local, and	1
column-wise. Assume	1
__intel_cpu_features_init_x() does	1
stall because	1
=0; list[i+1]	1
accelerators The	1
Addison-Wesley. Third	1
absvalue =	1
eax,0. The	1
dword ptr	1
ger or	1
recommendations are	1
decomposition, we	1
targets. A	1
undesired. Example:	1
bytes). This	1
Turn on	1
12.6. Function	1
7.32b. A	1
VTune, for	1
[1.0, 2.0)	1
if), but	1
referencing it	1
VTune; AMD's	1
stupid things.	1
worrying too	1
storing. The	1
...................................................................... 32	1
7.29b floata;	1
"Hacker's Delight".	1
Storage on	1
Unsigned is	1
blurred as	1
7.29a float	1
dummy; double	1
eliminating the	1
FatalAppExitA(0,"Array index	1
emulating the	1
satisfies the	1
(int)n -	1
with, e.g.	1
appropriately. Users	1
168.5 513	1
x10; }	1
168.3 Table	1
streaming audio	1
(2.5f *	1
commas and	1
reciprocal_divisor =	1
usual object	1
?Func2@@YAXQAHAAH@Z ENDP	1
<float.h> #include	1
temp++ actually	1
doing. See	1
unreasonably large.	1
popularity when	1
(rebased) once	1
ja $B2$3:	1
(YMM), and	1
2.0) by	1
dates back	1
Called directly	1
(-a)*(-b) =	1
row, column;	1
position above	1
constructor. A	1
2B. There	1
number). Different	1
(0, 2,	1
78. Assume	1
decimals of	1
executables for	1
among the	1
Installing a	1
largest_abs) {	1
8.15b. The	1
towards zero,	1
b[i]*c[i], though	1
Compiler-specific keywords	1
maintained for	1
efficient: //	1
LoadVectorA(void const	1
c[arraysize]; //	1
performance, it	1
sensible balance	1
Interprocedural optimization	1
Assembly name	1
powN<true,N> {	1
a+b+c =	1
compelling security	1
profile. It	1
cumbersome to	1
403 int	1
pmmintrin.h Suppl.	1
experience. Occasionally,	1
executable: a	1
vector). The	1
Environments) have	1
machines? Possible	1
those who	1
a[i].u[1] *	1
scheme should	1
IDE, for	1
(N-1)) return	1
investigating performance	1
novector to	1
110; int	1
spaces. This	1
signaling the	1
passed as	1
<pmmintrin.h> //	1
sub-vector. A	1
IEEE standard	1
(|) works	1
expensive, while	1
N-1 is	1
dominating and	1
fastcall)) __fastcall	1
interrupted. Now	1
17.4 129	1
script languages,	1
lookup[b]; If	1
const*)p);} //	1
Vec16uc 16	1
xxn(x4, x2*x,	1
i/2; }	1
According to	1
microarchitecture. A	1
team projects,	1
abs(v.f) }	1
(".type CriticalFunction,	1
one-man projects,	1
vectorization............................................................. 117	1
None of	1
MAX(a,b) (a	1
buffer, branch	1
roughly estimate	1
pow(x,n) As	1
<<6 );	1
arrays: //	1
Processors". www.amd.com.	1
Instrumentation: The	1
i&15 is	1
("hidden")))". A	1
buffers for	1
_mm256_i64gather_pd unlimited	1
twice. You	1
(2013) both	1
capability to	1
_endthread() cleans	1
2.5*x^2 -	1
__debugbreak();. If	1
system- specific	1
calls, if	1
fine- tune	1
asmlib, which	1
aiming at	1
found, then	1
subtask before	1
lrint. Unfortunately,	1
c[i]); }	1
231-1 int32_t	1
serves as	1
latencies are	1
audience for	1
ced functions)	1
full. This	1
if. This	1
bloat. It	1
radical solution	1
Putting simple	1
absence of	1
FuncB(i); }	1
solving the	1
programmers' time,	1
Four typical	1
(a+b). This	1
objects? It	1
y. The	1
violations, invalid	1
processor) when	1
sourcebook for	1
horizontal add,	1
comparison. On	1
broken up.	1
*)alloca(n *	1
spell-checking and	1
int)size) {	1
7.34a. Use	1
SSE). The	1
CPU-type is	1
communicating between	1
even-numbered logical	1
meaning for	1
a<<(b+c) -	1
mixes float	1
encryption algorithms,	1
tried to	1
coef[16] =	1
fallacy of	1
referenced from	1
0xC0000091L void	1
formalism. The	1
underflow: //	1
mark end	1
sub-vectors that	1
polymorphism. It	1
__assume_aligned directive	1
polymorphism, which	1
polymorphism: //	1
menus of	1
(Microsoft, Intel)	1
f, x,	1
date): Microsoft	1
Examples: //	1
MOVNTPS _mm_stream_ps	1
lacks the	1
arranged in	1
(c+d) before	1
pushed on	1
USB sticks	1
brand, family	1
(b+c) can	1
"frame pointer".	1
Sdouble {	1
tested, and	1
Sum3(S3 &	1
duration. The	1
lifetime of	1
temp++) {	1
14.13c int	1
consecutively? If	1
14.13a int	1
fill up	1
8.15b struct	1
_mm_i64gather_pd unlimited	1
finally (4)	1
hybrid solutions	1
Func1(list, &list[8]);	1
workday or	1
instantiated at	1
flaws in	1
pointers). An	1
file" option	1
IntegerPower<10>(x); }	1
tested: Microsoft	1
analyzing program	1
S2 {	1
S3 {	1
(a+b)+c =	1
{1.1, 0.3,	1
elements, as	1
(static_cast<MyChild*>(this))->Disp(); }	1
cross- compiled	1
GetLogicalProcessorInformation in	1
it). This	1
substantial. This	1
A*x*x +	1
AES, PCLMUL	1
u <	1
driver. A	1
combined. For	1
disadvantages. The	1
loose the	1
Processors with	1
investing in	1
arguments. This	1
www.agner.org/optimize/asmlib.zip contains	1
Round to	1
reductions. Algebraic	1
kludgy. The	1
sched_setaffinity). The	1
answer. Beginners	1
out-of- order	1
r1, r2,	1
GUI development,	1
fence instructions,	1
eee is	1
(Scalar means	1
Omitting the	1
nine, even	1
$B2$2: mov	1
7.10b char	1
d.y; Fortunately,	1
7.10a bool	1
randomness in	1
thread, and	1
development", Addison-	1
selected. Compiler	1
BigArray[1024] __attribute__((aligned(64)));	1
shortly. The	1
latencies, throughputs	1
perspective of	1
latencies. 8.5	1
<<, >>	1
FuncRow(int); int	1
versions: class	1
1.0E8, c	1
12.4c is	1
"Intel® C++	1
illogical that	1
Programmer’s Manual",	1
AND-OR construction	1
(short int)i;	1
!b) rather	1
versions, each	1
microcontrollers. I	1
-b to	1
-a >	1
_mm_prefetch SSE	1
12.4. Vector	1
MyChild> class	1
bb[size] );	1
building blocks	1
universal, flexible,	1
pool all	1
&list[100] is	1
Entry to	1
add_elements(__m128 const	1
Returning objects	1
++i). But	1
NUMROWS =	1
(s0+s1)+(s2+s3); Now	1
Primitives (IPP).	1
narrow range	1
12.4e. Same	1
DLL's (dynamically	1
"Moving blocks	1
sqaure: for	1
&SelectAddMul_dispatch; //	1
mutexes. Open	1
move. It	1
nfac; xn	1
detecting errors	1
move, depending	1
"Inner Loops:	1
distinct tasks.	1
(a&b)&(c&d) a	1
License, optional	1
core, but	1
string, wstring	1
0.82 0.59	1
heading You	1
60. In	1
Prefetching data	1
vectorization, such	1
position. Windows	1
0.89 0.40	1
ahead. It	1
15] +=	1
scanner that	1
logic. Some	1
ifunc branch).	1
/Gr Function	1
n∙(n-1)!. If	1
Transposing a	1
controlling the	1
shared_ptr. auto_ptr	1
databases. The	1
trying the	1
multitasking environment,	1
(27 -	1
(20 -	1
(total cache	1
8.5b a	1
/GL --combine	1
8.5a void	1
it) load	1
strategies It	1
requested. See	1
delayed for	1
List[i]++; Here,	1
you. Optimized	1
assumes that	1
variable: //	1
2003. Contains	1
assumed that	1
builder. Not	1
! and	1
nowadays stress	1
Templates...............................................................................................................57 7.29	1
OneOrTwo5[b!=0] as	1
maps etc.	1
9.10, then	1
steps. All	1
Updating mechanisms	1
-axAVX. This	1
inverting the	1
(int)(&list[100]) =	1
_mm_or_si128(c2, bc);	1
ebx,eax /	1
specialization. This	1
specialization, not	1
improved. 3.2	1
Fortran. These	1
Meyers: "Effective	1
(a1*b2 +	1
evaluated, because	1
OneOrTwo5[b!=0]; will	1
x(0) {};	1
vmldExp2 Intel	1
rounded to	1
Truncation is	1
1.2345; Change	1
duration compared	1
pointers: The	1
_mm. These	1
Wikibooks. The	1
switches; so	1
interleave the	1
27 The	1
0.57 0.44	1
0); DontSkip	1
Eclipse when	1
real time	1
B*x +	1
2002). In	1
"generate map	1
true/false Loopunrolling	1
detected until	1
supercomputers with	1
initializing pointers	1
mirrored in	1
matrix[FuncRow(i)][FuncCol(i)] +=	1
Implicit type	1
underestimate this	1
rule. Splitting	1
Installation problems.	1
undocumented. 2.7	1
bitmap than	1
0x7FFFFF) |	1
2A and	1
valuable source	1
type-casting. It	1
bases, but	1
redirects it	1
(SSE2): #include	1
severe delays	1
member. This	1
vectors) /arch:SSE	1
mentally flawed	1
connect them.	1
bility of	1
n+1; //	1
Sutter: A	1
primitive, but	1
transposing and	1
computer, including	1
closest to	1
print out	1
evaluation of	1
foreground jobs	1
only). Specifies	1
obtain, such	1
investigated by	1
power, loop	1
(handle !=	1
11.1 for	1
Constructor //	1
11.6 64	1
media such	1
benefits of	1
11.8 127	1
powN<(N &	1
bias of	1
utilized appropriately.	1
MKL relies	1
263-1 int64_t	1
F64vec2 F32vec8	1
language", section	1
X. 14.13	1
(remove unreferen-	1
X" is	1
developing so	1
aligned, and	1
2.0/3.0 than	1
7.31b char	1
7.31a char	1
powN<true,N-N1>::p(x); #undef	1
Language Runtime,	1
noticeable. The	1
gigabytes of	1
>>= 1;	1
103) will	1
learning process	1
7.43b. Compile-time	1
links. 20	1
UnusedFiller; };	1
50-50 chance	1
know). The	1
overview of	1
supposed to	1
14.4b if	1
15.1a. Calculate	1
Mbytes. There	1
interactive programs	1
version). This	1
bitofn //	1
happens. This	1
error-prone. The	1
article on	1
entries. This	1
risky. The	1
built with	1
Members of	1
majority of	1
build code	1
(multithreaded) /arch:AVX	1
int)(i -	1
justifies the	1
8.13a int	1
8.13b int	1
~, <<,	1
wheel. The	1
come. Even	1
(gcc v.	1
self-explaining menus	1
actively invalidate	1
2.5}; return	1
a.x, y	1
weigh the	1
resource-hungry applications	1
zero-bits if	1
reorganized in	1
(a&~b)|(~a&b)=a^b ---------	1
__try {	1
minimizing memory	1
relation to	1
b[r][c]; }	1
enum, const,	1
8.21, you	1
14.15b if	1
fine then	1
Usability for	1
CPU-dispatching (see	1
double) /arch:SSE2	1
main, but	1
truly represent	1
allocation, deallocation	1
seen, is	1
(MFC). A	1
sprintf, etc.	1
double: //	1
CriticalFunction, @gnu_indirect_function");	1
reorganize: //	1
convoluted template	1
b[i]; c[i]	1
.R. for	1
restrictions. A	1
copyrighted by	1
network. Various	1
arraysize; i++)	1
express any	1
cheaper and	1
re-allocation is	1
de-referenced in	1
Web systems	1
restart the	1
(dynamically linked	1
(j =	1
clearing arrays	1
auto_ptr. Smart	1
Non-strict floating	1
List[ArraySize]; ...	1
experiments. Contentions	1
acceptable. 3.6	1
*(++p) because	1
Vec4uq Vec4f	1
Modulo by	1
improvements). //	1
vectorize, or	1
doubles by	1
so, then	1
Compile-time polymorphism	1
weekdays. The	1
price GNU	1
PSDK). Supports	1
Noncached write	1
printf(Greek[n]); }	1
Unlike a	1
interface, another	1
(MKL v.	1
response. It	1
MFC application.	1
supported"); return;	1
misprediction, or	1
loader. 2.	1
(1./1.2345) at	1
array[++i] because	1
Func1(int x)	1
responses to	1
offering profiling	1
Programming in	1
First-In-Last- Out	1
Inserting your	1
(10000 /	1
cpuid //	1
16.2. The	1
Advice on	1
a+a+a+a =	1
PTR[ecx+eax*4],ebx eax,	1
mode): ;	1
{1.0f, 2.5f};	1
kludgy that	1
clauses: initialization,	1
throughout the	1
x8 =	1
eliminates the	1
straightforward. The	1
create a	1
non-const reference,	1
dropping the	1
Studio. This	1
SSE4A ammintrin.h	1
friend function	1
inlining, common	1
linking, as	1
12.2, the	1
unnecessarily wasteful	1
caught by	1
structure), the	1
checked before	1
a[i+1]; s2	1
(true) {	1
107), OpenMP	1
122) for	1
62. If	1
source, and	1
96. 14.5	1
coded. If	1
further. The	1
Branch/loop function	1
key? If	1
sizeof(float)); //	1
x-xxx-x-- 0/a=0	1
xx x	1
key. Do	1
Menus, buttons,	1
conform to	1
sizeof(float)). Now,	1
password. The	1
Linked lists	1
classes): //	1
compilers............................................................................. 74	1
transition from	1
(3 -	1
Copy protection.	1
10.1.020. Functions	1
TR18015 Technical	1
happening. It	1
keys within	1
assignment operator,	1
Namespaces........................................................................................................... 65	1
alternatingly several	1
e, f,	1
2005. Codeplay	1
_mm_malloc and	1
exit(), abort(),	1
sizeof(list)); A	1
hand-held devices	1
a;} float	1
5.82 (Embarcadero/CodeGear/Borland	1
year or	1
ex xn	1
1./720., 1./5040.,	1
throughputs and	1
for(i=i_div_3=0; i<300;	1
meta- programming	1
CFALSE; }	1
CFALSE: c	1
Except for	1
Include file	1
entirely inside	1
(&ArraySize) is	1
form. A	1
cut off	1
developed. A	1
frequency, as	1
lineage of	1
nor slower	1
x*x +	1
error-handling function	1
correspondence between	1
areas where	1
occasionally predict	1
forms a	1
reusability and	1
141. Applications	1
First-In-First-Out or	1
old-fashioned. Development	1
n;} This	1
u[1] by	1
indication of	1
x*8 is	1
complicated. If	1
block, but	1
ended queue)	1
-msse2, -mavx,	1
strongest optimization	1
remember that	1
Keep often	1
Memory-hungry applications	1
sizeof operator.	1
server in	1
affects other	1
decision at	1
0.75 0.18	1
0.77 0.89	1
Nothing in	1
<bool IsPowerOf2,	1
staircase function	1
?: operator	1
economy and	1
1./8.71782E10, 1./1.30767E12,	1
ipow(x,10); //	1
packing, unpacking	1
Contains many	1
attribute which	1
E-book Usability	1
(int)d; //	1
7.2. Alignment	1
s1, s2	1
_intel_fast_memcpy and	1
graphic brushes,	1
vectors........................................................................ 119	1
9.1a int	1
9.1b int	1
absvalue, largest_abs	1
mathimf.h that	1
GetTickCount or	1
registers; see	1
(.lib or	1
2'nd order	1
verifying, debugging	1
lesson we	1
forward access	1
original, poorly	1
translate these	1
Occasionally, the	1
improvements. Making	1
absvalue; largest_index	1
position-independent, makes	1
conditional move,	1
9.1. Time	1
frame, saving	1
frame" or	1
int8_t short	1
104). The	1
Vec8f Vec4d	1
Vec8i Vec8ui	1
x^3, x^4	1
.................................................................................... 124	1
1.5f :	1
--combine -fwhole-	1
_mm256_i32gather_epi32 unlimited	1
__declspec(noalias) or	1
unequally can	1
(b&c) =	1
.exe file,	1
printf("Gamma"); break;	1
polynomial: //	1
commas. There	1
popped from	1
engineering principles	1
polynomial. Scheduling	1
burdensome position-independent	1
trial versions	1
contiguous. The	1
................................................................. 107	1
thinks "what	1
_mm_load_ps(coef+i); //	1
maintenance. However,	1
downloaded program	1
(*CriticalFunction)(parm1, parm2);	1
b1; y2	1
explaining the	1
(ArraySize) is	1
prepared for	1
iterators that	1
implies more	1
200. Next,	1
safety, you	1
(a|b)&(a|c) =	1
2006 (Red	1
2007 (www.intel.com/technology/itj/).	1
2004 -	1
53). No	1
ready-made profiler.	1
Detect supported	1
GetPrivateProfileString and	1
vector::reserve with	1
CParent<CChild2> {	1
storage............................................................................. 26	1
query certain	1
7.33b const	1
delete). 88	1
compose a	1
prototype: void	1
fragmentation. Bounds	1
OK, however,	1
sorting, searching,	1
y2; y1	1
fatal errors	1
scarcity of	1
Rick Booth:	1
MOVNTI _mm_stream_si32	1
-100+100+100 =	1
classes............................................................................................ 51	1
initializer lists,	1
(www.intel.com). If	1
1./362880., 1./3628800.,	1
non-zero, and	1
initializes x	1
g(x) is	1
discover that	1
-2.0 55	1
93). All	1
(release version)	1
publicly available	1
optimized, using	1
discrete icon	1
-opt-report Table	1
unsatisfied with	1
safe, of	1
entries use	1
other, then	1
seemingly simultaneously.	1
imported pointer,	1
standardized. It	1
compensate for	1
maintain and	1
sin. Pointer	1
sin, etc.	1
rightmost 1-bit	1
............................................................................... 8	1
insertion of	1
object: (1)	1
instead. The	1
saved. Any	1
_mm_andnot_si128(mask, bc);	1
8.11b int	1
8.11a int	1
(Integrated Development	1
opposite). 9.10	1
"AMD64 Architecture	1
0x20, Saturday	1
DTRUE: d	1
DTRUE; }	1
exchange data	1
supposedly is	1
digits. The	1
44. The	1
digits, so	1
www.agner.org/optimize/#vectorclass All	1
(absvalue >	1
8.23b has	1
defined(__GNUC__) //	1
excuse that	1
SelectAddMul_SSE2 #elif	1
system-specific. In	1
Predictable branches	1
Later models	1
www.agner.org/ optimize/#vectorclass	1
factors. The	1
operators). The	1
(b&&c) =	1
35 This	1
34 else	1
'?', '@'	1
-2.0, 4.4,	1
int)a /	1
holding the	1
module, and	1
Running multiple	1
hint, but	1
system-specific graphical	1
instrset_detect(); 116	1
remotely. If	1
distributions of	1
Loops: A	1
"we don't	1
little-known alternative	1
Hoisie: "Performance	1
InstructionSet(): //	1
decryption, data	1
crystal ball	1
resolution. A	1
absent in	1
Similarly, we	1
name, regardless	1
(approximately): if	1
reset or	1
disassembly, probably	1
ordering? If	1
arranging data	1
hints as	1
functionality. This	1
decoded in	1
a<<b<<c=a<<(b+c) x-xxx--xx	1
__intel_cpu_feature_indicator where	1
Vol. 11,	1
unchanged. The	1
unchanged, while	1
tag on	1
Or, if	1
Combining the	1
fetch the	1
(c1 =	1
reserved for	1
balanced mix	1
convenient. It	1
(when vector	1
effectively preventing	1
specification. The	1
high. It	1
native floating	1
rendering graphics	1
First-In-First- Out	1
line: static	1
dilemma can	1
(b*c)/d, it	1
propagate through	1
varies between	1
line, because	1
framework........................................................................... 14	1
floats: float	1
timediff[NumberOfTests]; for	1
floats. The	1
22). 159	1
Place non-polymorphic	1
abc; };	1
ambiguous and	1
models. However,	1
correspond to	1
_mm_permutevar_ps 4	1
7.38b. Alternative	1
Y; Y	1
BigArray[1024]; //	1
3B. developer.intel.com.	1
steps to	1
looping through	1
Func1(2); ...	1
flawed approach	1
about. Function	1
pop-up messages	1
signifying one	1
renaming. The	1
manually, but	1
<malloc.h> void	1
spell checking.	1
sequential, and	1
&list[0]; temp	1
(Not A	1
day be	1
complications. A	1
least, it	1
VTune and	1
__vrs4_expf __vrd2_exp	1
x-xx----x x-xxxxxx-	1
identifies any	1
--------x a/1=a	1
a|(b&c) x-xxxx--x	1
double's of	1
lists. A	1
lists, switch	1
programmed in	1
most. The	1
Print heading	1
designers have	1
Try to	1
contiguously in	1
8.1b float	1
x,y coordinates	1
8.1a float	1
-fno-strict-overflow. You	1
usable library	1
Reset floating	1
likelihood that	1
fixed-size array	1
dependent. The	1
right-most 1-bit	1
--------- ~a	1
143. The	1
||). The	1
facilitate porting	1
2007. PGI	1
12.9b. Taylor	1
esp+8 and	1
...................................... 88	1
economy, cache	1
lately. Vector	1
structures: //	1
row-wise, then	1
lookup-table static.	1
reached with	1
8.16 float	1
__rdtsc()). The	1
(GOT). These	1
8.17 char	1
8.18 float	1
Sequential forward	1
may, in	1
multithreading. 7.30	1
7.43 on	1
7.42 int	1
renewed. Context	1
7.45 //	1
7.44 class	1
7.4. Signed	1
two(2,2,2,2,2,2,2,2); //	1
while-loop is	1
Compiled languages	1
1/n! 1.,	1
378.7 168.5	1
counting clock	1
"\nError: Instruction	1
neutralize each	1
x.i |=	1
38.1 97	1
38.7 512	1
"__attribute__((visibility("hidden")))". Use	1
animations is	1
Manual". developer.intel.com.	1
demonstration purposes.	1
cards, etc.	1
1./6.22702E9, 1./8.71782E10,	1
hand and	1
caller, and	1
32, 64,	1
provokes an	1
operand. Likewise,	1
memory-hungry software	1
provoked here	1
32; float	1
WhateverFunction(i); //	1
unavoidable. It	1
apparently has	1
DLL. Another	1
_mm_stream_ps SSE	1
perform poorly	1
mark_end; This	1
96). Virtual	1
x^1, x^2,	1
-ftrapv, but	1
libircmt.lib. Function	1
1.2345); The	1
repetitive. The	1
(n) {	1
consumers. Choose	1
request for	1
N: #define	1
"Alpha", "Beta",	1
(be aware	1
artificially changed	1
animation. It	1
cons of	1
tolerance. The	1
0x3F00 and	1
17is calculated	1
reputation. The	1
Iu8vec8 16	1
(/Oa). The	1
saturated addition,	1
offsets). Example:	1
$B1$2: mov	1
knowledge of	1
list[i].b =	1
stub. If	1
Espresso) that	1
Guide for	1
"Integrated Performance	1
T+6, and	1
examples: strlen	1
bear in	1
log(2.0) is	1
andnot(a,a) =	1
12.8a. Sum	1
0x7FFFFFFF; //	1
-mavx, etc.	1
"__attribute__((visibility ("hidden")))".	1
2:8+esp eax,	1
c2, mask);	1
anything, you	1
pulses since	1
disappears when	1
requests for	1
reliable. Event-based	1
Typically it	1
constructing the	1
Non-public distribution	1
GB, but	1
writable data	1
c2; double	1
inttypes.h is	1
attempting to	1
Debugging. The	1
indexes, working	1
--xxxxxx- a-(-b)=a+b	1
preprocessor can	1
enters the	1
July 2011).	1
lookup[2] =	1
Surprisingly, we	1
because, in	1
jeopardizing safety,	1
draws a	1
UNIX shell	1
_mm256_permutevar_ps 4	1
'$' are	1
exist. Therefore	1
9.3. Time	1
freely without	1
taking cache	1
values: //	1
zation by	1
(4096). This	1
process...................................................................................................... 25	1
values, and	1
maximum, saturated	1
discussions about	1
#define, const	1
_fpreset(); _controlfp_s(&dummy,	1
observed between	1
15.1d to	1
package, including	1
piecewise or	1
division: Integer	1
unused. This	1
ab[size]; int	1
steal the	1
array[i++] is	1
FPGAs. The	1
x^n/n! xxn	1
access................................................................................................................ 20	1
OMF format.	1
nicely into	1
finishes in	1
keyword: //	1
keyword, for	1
2GHz A	1
cryptography (www.intel.com).	1
Professional and	1
keyword. The	1
strcpy, strcat,	1
7.35b struct	1
7.35a struct	1
plain old	1
_MM_SET_FLUSH_ZERO_MODE(_MM_FLUSH_ZERO_ON); It	1
_mm_stream_si32 SSE2	1
GB. When	1
advisable to	1
mentations have	1
_mm_i32gather_ps unlimited	1
100000001.23456. The	1
9.6b 64	1
processors). It	1
weighed against	1
/arch:SSE2. The	1
2009). Intel	1
UnusedFiller in	1
flaws: The	1
Booleans................................................................................................................... 33	1
notion of	1
Atom). The	1
kbytes. This	1
Intel) know	1
comparison: //	1
Intel. See	1
FreeBSD and	1
somewhat. The	1
set: //	1
SelectAddMul_dispatch(short int	1
<intrin.h> long	1
reduced. This	1
Avoiding the	1
reporting here:	1
profiling, but	1
profiling. When	1
numbered consecutively?	1
phase in	1
(b1 *	1
builder Has	1
Uncached memory	1
responsi- bility	1
thought about	1
(SVML). This	1
xx(-)x- -	1
8.23a. Loop	1
indexed in	1
event-counters do.	1
often. This	1
Microcontrollers used	1
genuine compiler	1
calculate. If	1
modularity, reusability	1
modularity. For	1
localize the	1
optimize, and	1
Instead of	1
Repeating the	1
Fine-grained parallelism	1
script. Interpreted	1
28) The	1
work, 133	1
28, the	1
calculated. Therefore,	1
"FDIV bug".	1
3.1, 2007.	1
slower, especially	1
reciprocal: //	1
__attribute__((fastcall)). The	1
cc[size] );	1
fistpl %0	1
VML and	1
Bridge) because	1
mmintrin.h SSE	1
long, double.	1
wastes several	1
inexact if	1
odd-sized vector	1
1./4.790016E8, 1./6.22702E9,	1
thread-like scheduling	1
T+5, then	1
Itanium systems.	1
Relocation. All	1
brands, and	1
2056 38.1	1
NUMROWS; row++)	1
Lists of	1
module2.cpp int	1
12.8b. Sum	1
0.29 0.28	1
14.18c double	1
xmmintrin.h SSE2	1
blocking: int	1
0.27 strlen	1
0.22 memcpy	1
((C &	1
((B &	1
Func(a[i]); }	1
creates or	1
work-around can	1
results, which	1
log) inside	1
a*b*c=a*(b*c) a+b+c+d	1
non-vector library.	1
recycled? There	1
carry) instructions	1
OS. See	1
FactorialTable in	1
timediff[i]); }	1
can. It	1
JNZ). This	1
chain, especially	1
to) the	1
!(a<b)=(a>=b) (a<b	1
134. The	1
shows, the	1
feeds a	1
1.0) {	1
improvements in	1
introduced in	1
Hence, it	1
x86) of	1
8.2a double	1
8.2b a	1
alternately FuncA	1
routines and	1
billions of	1
1.09 1.25	1
x4∙xn-4. There	1
103), but	1
1980 where	1
14.7b, we	1
14.7b. Testing	1
Ignoring virtualization.	1
affected by	1
x.d =	1
x.f =	1
7.9b char	1
7.9a bool	1
identical. For	1
somewhere in	1
!b =	1
bus is	1
(FIFO) basis	1
practice, of	1
8.24 can	1
8.25 void	1
disassembler. Note	1
&&, ||,	1
8.20 module1.cpp	1
(critical stride)	1
8.22 #ifdef	1
smart. They	1
12.9a. Taylor	1
SSE2, preferably	1
r.b;} The	1
Multiplying by	1
post-increment operator	1
bugs, compatibility	1
C1::f. But	1
F32vec8 F64vec4	1
Will be	1
overkill. Don't	1
8.3b a	1
ordinary procedure	1
paying the	1
Journal Vol.	1
-1.0E8, b	1
imprecision in	1
provide the	1
in-between the	1
__intel_cpu_feature_indicator_x. You	1
recovery information	1
(WTL). A	1
2.8. Asmlib:	1
indicates a	1
46 A	1
(WTL): //	1
44 In	1
decision. 13.4	1
42 If	1
indicated by	1
workstations and	1
41 Float	1
230.7 513	1
faster, except	1
(cc[i] +	1
85 ;	1
/Qipo -ipo	1
indeed. It	1
a[1] =	1
6); Or,	1
hackers. It	1
exact. Multiple	1
(row =	1
friendly. It	1
predictable, then	1
(OnIdle in	1
abusing the	1
Leaf functions	1
"Delta" };	1
0x10, Friday	1
................................................................................................................ 48	1
C2::Disp() is	1
sleep mode.	1
(SIMD) operations.	1
if-else structure),	1
(); __asm__	1
feeding an	1
----x---x a/1=a	1
violate or	1
34. In	1
1.19 13	1
(a&&b)||(a&&!b)=a x--xx----	1
mathe- matical	1
VHDL or	1
postponed until	1
rise to	1
u[2]} a[size];	1
browsing that	1
counter: //	1
0.3, -2.0,	1
Henry S.	1
encounter another	1
Bit-fields of	1
unacceptable. Each	1
live-ranges do	1
0.30 4.5	1
Serialize //	1
Reference Manual".	1
consuming, especially	1
problems, usability	1
(GOT) in	1
0.38 0.44	1
----x---- !(a<b)=(a>=b)	1
created, deleted,	1
transpose(matrix); }	1
contention. You	1
powN<(N1&(N1-1))==0,N1>::p(x) *	1
(r1 =	1
wrapping the	1
omitted, of	1
p->a +	1
newer. The	1
consisting of	1
estimated calculation	1
Underestimating the	1
edx. Furthermore,	1
Z. Each	1
Architectures Optimization	1
hide them	1
specification to	1
decoding and	1
abort(), _endthread(),	1
others. While	1
Z; Z	1
memory................................................................. 120	1
considered. A	1
general. Assume	1
7.38a. Multiple	1
hundreds of	1
Func2(double x)	1
studio 2008,	1
reinvent the	1
yesterday's big	1
4.5.2, July	1
NEAR ;	1
CodeGear, Codeplay	1
http://www.agner.org/optimize/asmlib.zip contains	1
compiler) integer	1
2040 38.7	1
7.43a. Runtime	1
recursive templates.	1
Trying to	1
29. Each	1
returning. F1	1
sizeof(b)); 47	1
scheduler. This	1
summarizes the	1
(b*c) overflows,	1
prints an	1
optimization", Coriolis	1
(2.0f); b	1
list[i &	1
pow(x,N) where	1
[eax+400] DWORD	1
-156. Surprisingly,	1
speeded up	1
y.d +	1
used: //	1
m. The	1
m) {	1
y.a +	1
y.b +	1
y.c +	1
Coriolis group	1
...). We	1
m> int	1
...)) {	1
oldest Pentium	1
correspondingly two	1
excellent support	1
(float)i; f	1
grandparent class:	1
Vec4q Vec4uq	1
ebx,1 adds	1
(u.i[1] <	1
simplicity. But	1
Actually, only	1
geometry and	1
Vec4i 32	1
saves time	1
aliased #pragma	1
Vec4d 16	1
(MS Visual	1
scheduling in	1
PowerPC). We	1
guarantee that	1
Virtualization is	1
algorithm. The	1
compete for	1
searches of	1
both, while	1
writes. If	1
p->member is	1
confirmed this	1
hence higher	1
EXCEPTION_CONTINUE_SEARCH) {	1
14.21. //	1
versatile. Fortran	1
systematization of	1
footprint. If,	1
memcpy: //	1
summing up	1
ports, etc.	1
Assume, for	1
ultimate solution	1
organized. Floating	1
parsing are	1
© 2004	1
official C	1
fragmentation of	1
construction in	1
modified, if	1
40% more	1
9.0 CodeGear	1
suppress. GOT	1
reflected, first	1
137, respectively.	1
terminates the	1
26). Variables	1
perfectly. As	1
16.4 65	1
-fwhole- program	1
terminated and	1
. The	1
backwards. Copying	1
"Gamma", "Delta"	1
often, but	1
history, etc.	1
c1() :	1
integer-to-float conversion	1
arraysize =	1
Vec16us Vec8i	1
---xxx-x- a+0=a	1
subexpressions, and	1
unreferenced functions.	1
non-recursing template	1
puts the	1
15.0) is	1
identifier names.	1
gained remarkably	1
stage that	1
i++,i2+=2.0f)a[i]=i2; 41	1
(byte code).	1
asmlib.. //	1
combining multiple	1
scope. A	1
selecting optimize	1
............................................................. 96	1
connections, etc.	1
(temp =	1
added. This	1
Namespaces There	1
merge the	1
142). 30	1
flush and	1
ASP and	1
documented. The	1
standards. Such	1
pointers.......................................................................................................37 7.9	1
correctness must	1
(rather than	1
(zero with	1
CriticalFunction_Dispatch(int parm1,	1
BTB can	1
profile-guided optimization.	1
PROC NEAR	1
0x3FF unsigned	1
7.32a double	1
(*p !=	1
issues, and	1
coding rules	1
F2(float x[]);	1
options....................................................................................... 160	1
0x3FFF unsigned	1
$B1$3: pop	1
0.0; //	1
rewritten with	1
mutexes and	1
_mm256_i64gather_epi32 unlimited	1
attack for	1
clock. This	1
exp, sin,	1
rights. Software	1
fluctuating and	1
combine the	1
b<c &&	1
incur a	1
included. Combining	1
compiler-specific. You	1
security, but	1
reinterpret_cast operator	1
CPU-dispatcher that	1
1.5f; is	1
Sum1, Sum2	1
(*.ini files).	1
returned. There	1
1.25 1.61	1
1.21 0.57	1
(also called	1
mechanisms. Modern	1
Warren, Jr.:	1
matrix[i][j] +=	1
pass a	1
mechanisms, and	1
Constantfolding xxxxxxxxx	1
&CriticalFunction_Dispatch; //	1
traditionally considered	1
Database queries	1
upon the	1
isolated into	1
thorough analysis	1
EXCEPTION_EXECUTE_HANDLER :	1
isolates the	1
ball reveals	1
intrin.h (MS)	1
Convert to	1
pow, log,	1
denominator can	1
int)(max -	1
pattern, while	1
of. Big	1
Float to	1
Sort the	1
excessively so.	1
inlined, or	1
1024/4 =	1
max) {	1
/QaxAVX or	1
delaying process	1
/Ox -O3	1
/Oy -fomit-	1
reorganize the	1
intranet for	1
v.i *	1
(2,2,2,2), and	1
directly: Library	1
INVALID_HANDLE_VALUE &&	1
(Embarcadero/CodeGear/Borland C++	1
/Oa -fno-alias	1
/Og Whole	1
54. It	1
micro-operation breakdowns	1
||, !	1
Bit vector	1
inputs. Let's	1
infinity, and	1
infinity. A	1
utilizing its	1
solution, but	1
Larger data	1
criticized for	1
PathScale. 2.	1
reduction. For	1
label. It	1
despite the	1
/O2 or	1
reinstall a	1
framework, during	1
SSE3. //	1
situation, but	1
modulo. For	1
5.0f; b	1
a[0] =	1
hard-to-find errors,	1
new. The	1
/fp:fast /fp:fast=2	1
adjusted if	1
dominating. At	1
discriminating between	1
36. There	1
Contents 1	1
Asmlib: v.	1
zero-terminated ASCII	1
pipelined, as	1
polymorphous class?	1
_mm_free. A	1
discovers that	1
_mm_stream_pd SSE2	1
streams with	1
_mm_stream_pi SSE	1
2.20, glibc	1
intervals. Some	1
81). 77	1
cycles). Floating	1
16is calculated	1
non-constant references	1
taken. A	1
irregular response	1
extracts the	1
taken, i.e.	1
games and	1
lrint(d); //	1
Is32vec4 Vec4i	1
Is32vec2 32	1
microcontrollers: Smaller	1
(other than	1
-ipo No	1
x[]) {	1
a[arraysize], b[arraysize],	1
printf("Delta"); break;	1
1.2 in	1
ends the	1
quickly to	1
restriction, but	1
email and	1
(Windows, Linux,	1
i*sizeof(S1). This	1
end. The	1
147 14.12	1
packed into	1
0x2F00, 0x3700,	1
(Windows: /Gy,	1
(!a&&b) =	1
temp2. Modern	1
edition is	1
stride, as	1
stride. Variables	1
stride) =	1
temporarily lock	1
teachers to	1
stopping threads.	1
0x2C so	1
(CGrandParent) contains	1
caches. Typically,	1
positive. It	1
Booth: "Inner	1
Libraries for	1
Because the	1
Find numerically	1
2016. The	1
!(!a)=a x-xxxxxxx	1
NAN. Avoiding	1
Interrupt service	1
platform-independent and	1
strcat, strlen,	1
(bit scan	1
required, but	1
numerical data	1
characters '?',	1
made) then	1
matrices. An	1
Thursday, Friday,	1
counterparts. In	1
90. 15	1
double..................................................................................... 140	1
(Of course	1
language...................................................... 14	1
64). You	1
STL. Some	1
matters: Division	1
0= 0	1
advance, because	1
operators............................................................................... 29	1
84). The	1
(Visual Studio	1
13.1. Instruction	1
new/delete or	1
14.22b unsigned	1
14.22a unsigned	1
technological point	1
matters, which	1
interprets the	1
Run multiple	1
vectorizing mathematical	1
400, last	1
www.open- std.org/jtc1/sc22/wg21/docs/TR18015.pdf.	1
15.1d. Integer	1
Taking the	1
reloaded eight	1
features: The	1
Nerds at	1
user-written code	1
59 third	1
amd_vrd2_exp Agner's	1
5; to	1
clearly better.	1
-fno-alias Non-strict	1
ingenious things	1
57 Templates	1
denominator: //	1
Func1(double) pure_function	1
later) instruction	1
Denmark. Copyright	1
StoreNTD(double *	1
(Both use	1
5, 2009).	1
two: //	1
14.18a float	1
14.18b float	1
53. 7.24	1
two, b	1
Slongdouble {	1
9.2b void	1
9.2a void	1
Much of	1
evicted. Don't	1
advertise new	1
(-a>-b)=(a<b) ---xx---x	1
short. In	1
45. This	1
1./39916800., 1./4.790016E8,	1
occurrences of	1
Connecting several	1
134) return	1
12.1a, the	1
memset, or	1
destroyed. In	1
have: //	1
memset: //	1
etc.). Older	1
9.2, such	1
things. Looking	1
limitation and	1
8.24. Integer	1
attacks and	1
7.32b double	1
undocumented Intel	1
surely rely	1
-1. The	1
met: the	1
shut down	1
sections. 3.3	1
behaviors. Arrays	1
Very poor	1
assembly-like intrinsic	1
Addison- Wesley	1
following: 130	1
difference, let's	1
bottleneck. Organize	1
sequence. If	1
__declspec(__align(64)) double	1
rounds a	1
expansions. Programmers	1
temp1 and	1
0x40) %	1
temp. The	1
printf("\nResults:"); for	1
Low-level languages	1
0x0F) |	1
........................................................................... 54	1
powN<true,N/2>::p(x) *	1
version) in	1
memcpy(b, a,	1
b[arraysize], c[arraysize];	1
truth depends	1
ADX instructions	1
ADC (add	1
realize that	1
Contain one	1
objects, respectively	1
I64vec2 Vec2q	1
mitigated by	1
-axSSE3, etc.	1
objects) are	1
2015 or	1
r+i/2 could	1
lag. Thinking	1
tedious. The	1
design. The	1
design, it	1
scratch. This	1
0.63 0.75	1
---xxx--- a/a=1	1
Programmable logic	1
producer will	1
says. A	1
-ffunction-sections) which	1
re-allocated every	1
nn ifbit=1	1
DEC, JNZ).	1
whereas 64-bit	1
Faster, but	1
(Linux only).	1
ns =	1
Effective C++".	1
XOP ammintrin.h	1
XOR b	1
stand alone	1
-fp-model fast,	1
class? This	1
free) causes	1
1./2.09227E13}; float	1
135). This	1
caching, but	1
fprintf //	1
Sum3. Whether	1
block: 62	1
clients that	1
1.4, 2005.	1
column++) matrix[row][column]	1
occurred anywhere	1
tool. 7	1
iterator in	1
illegal operation	1
8.6a int	1
8.6b int	1
zip file	1
7.15a. Array	1
33% when	1
signed. Be	1
signed, or	1
7.5. Set	1
s0, s1,	1
remarkably in	1
Today (2013)	1
great lengths	1
files). 20	1
/QaxSSE3, etc.	1
(www.agner.org/optimize/testp.zip). A	1
everything, which	1
Security. The	1
standard. An	1
methods: Instrumentation:	1
respectively (MS	1
v.10.3 &	1
v.10.2 &	1
tiling. This	1
doubles: union	1
Next, we	1
alternative. The	1
Library) and	1
lea $B2$2:	1
StoreVectorA(void *	1
emphasized that	1
*.so) that	1
en.wikipedia.org/wiki/Compiler_optimization. ISO/IEC	1
wmmintrin.h AVX	1
flip-flops, multiplexers,	1
Microsoft's .NET	1
(/FAs or	1
standards for	1
140. Avoid	1
for(i=0,i2=0; i<100;	1
(Division is	1
i<301; i+=3){	1
valid) can	1
CPU’s. Another	1
ab[i].b =	1
forwards, not	1
elimination. The	1
unreliable. They	1
port to	1
Currently includes	1
cheap, in	1
Library. The	1
(www.intel.com/technology/itj/). 10.1	1
timing, assembly	1
520 and	1
properties) are	1
result, true	1
reply about	1
14.17b double	1
52; //	1
costless in	1
penalty. Branches	1
fetching, decoding	1
afterwards. The	1
123; are	1
groups of	1
_mm_load_si128((__m128i const*)p);	1
sent me	1
(less than	1
_mm_exp_ps _mm_exp_pd	1
noticeable but	1
_mm_exp_pd AMD	1
Step (1)	1
__declspec(cpu_dispatch(...)). See	1
c[size]; float	1
bb[i]*cc[i] is	1
memset(list, 0,	1
broader perspective	1
NUMCOLUMNS; column++)	1
semicolons in	1
toggle multiple	1
14.7a. Testing	1
Today's microprocessors	1
holes of	1
12.1. Vector	1
Therefore the	1
output, which	1
i=0; has	1
session. But	1
algorithm, then	1
2014. Last	1
a[i+2]; s3	1
anda *	1
deviate from	1
Background services.	1
"instrset_detect.cpp" //	1
12.1b to	1
_mm_add_epi16(a,b). Two	1
EXCLUSIVE OR	1
8.26b: ;	1
list[16]; int	1
formalism that	1
full-size execution	1
graceful way.	1
changes. A	1
(ATL) and	1
-parallel -openmp	1
n++) {	1
(Examples can	1
Friday)) {	1
relaxed floating	1
and) will	1
Family 15h	1
fprintf(stderr, "\nError:	1
16.1. This	1
handle. Waiting	1
Uses debug	1
modifies many	1
specifically for	1
controversies over	1
F1(int x[]);	1
representation, except	1
Thus, we	1
http://www.agner.org/optimize/ -	1
80.9 512	1
80.8 65	1
intelligible way	1
computational power	1
__attribute__((aligned(16))). Specifies	1
measurement. If	1
obscured in	1
considerations. It	1
dictates that	1
crashes the	1
83 called	1
Look at	1
17.9: "Moving	1
multiplexers, arithmetic	1
next. The	1
representations in	1
deallocate the	1
_mm_store_si128((__m128i *)d,	1
completely. For	1
different. 64-bit	1
succeeded in	1
little-endian storage,	1
chapter. Using	1
Vec16c 8	1
125 for	1
14.16a double	1
if-branch in	1
mainly on	1
132. Unfortunately,	1
size_t is	1
FILO manner?	1
Higher inputs	1
86 add	1
coordinates //	1
b2 *	1
b1 *	1
"Macro loops"	1
b. But	1
VIA. The	1
happened to	1
Polymorphism is	1
32-62. This	1
motion. See	1
(www.boost.org). The	1
(seconds <	1
continue in	1
Intel/x86-compatible microprocessors.	1
7.26b float	1
Journal, 2002).	1
(parallel composer)	1
7.26a float	1
possibilities for	1
subtasks is	1
bottleneck, it	1
analysis. If	1
speed.............................................................................................................. 153	1
difference. Newest	1
nmmintrin.h (MS)	1
const, or	1
SVML. The	1
non-object oriented	1
catching hardware	1
F1(); }	1
used). You	1
2.6.30 and	1
contentions, as	1
causing return	1
StoreNTD(&a[c][r], b[r][c]);	1
F1. However,	1
("fldl %1	1
8.19. Devirtualization	1
micro- processors	1
15.1b, and	1
module1.cpp int	1
memory-intensive functions	1
F1? Then	1
account. You	1
project. Some	1
project, it	1
recoverable and	1
3.x. These	1
checking, as	1
checking. Any	1
8.10b a	1
8.10a if	1
yet. Supports	1
0.59 0.27	1
DontSkip; long	1
(&a); The	1
During the	1
---xx---x Divide	1
view the	1
discontinued Object	1
Address calculation	1
virtually no	1
satisfactory. The	1
87. This	1
-fp- model	1
.................................................................... 155	1
fetching a	1
i2; for(i=0,i2=0;	1
zero(0,0,0,0,0,0,0,0); //	1
card. Some	1
Func1, while	1
convention says	1
(OWL). Several	1
<, <=,	1
<. The	1
PHP, ASP	1
non-reduced expression	1
level. My	1
released when	1
address: //	1
Enterprise editions).	1
Vec2uq 8	1
statements............................................................................. 43	1
Mac, BSD	1
www.agner.org/optimize/testp.zip. This	1
CString. This	1
receive new	1
Mac: Darwin8	1
expanded like	1
solutions. Patches	1
solutions, depending	1
(a+1); c	1
7.30b int	1
7.30a int	1
return; }	1
published by	1
GetProcessAffinityMask in	1
reinstalled and	1
emulated processors	1
map. Do	1
/Qparallel -parallel	1
fffff is	1
Basic, etc.	1
OneOrTwo5[b &	1
Basic. A	1
fastest. The	1
square(x) +	1
fastest: //	1
max(T const	1
late. You	1
<float, 100>	1
closer to	1
static_cast operator	1
performance/price ratio.	1
improvement in	1
runtime, if	1
x^2, x^3,	1
set). We	1
corresponds to	1
icon signaling	1
3"); or	1
1.61 n.a.	1
38). Is	1
__attribute__((aligned(16))) #endif	1
Documentation". Included	1
connection with	1
satisfactorily on	1
(SDK or	1
alloca: //	1
Linear arrays	1
list[301]; int	1
code.................................................................................. 148	1
Server 2008	1
Comments All	1
synchronizing and	1
redesigning a	1
alloca, because	1
brushes, etc.	1
_mm_cvtss_si32(_mm_load_ss(&x));} static	1
mind, that	1
addressing. In	1
Optimized function	1
multi-threaded software	1
7.3. Explain	1
Fog The	1
;edx=addressinr ;	1
//=DeltaY //	1
Similar operations	1
Alignment? Some	1
startup code	1
1.5f}; a	1
doesn’t. The	1
7.39 union	1
12.8a to	1
12.8b automatically	1
"how many	1
7.35 page	1
7.37 class	1
#) are	1
connections rather	1
7.36 class	1
MAX(f(x), g(x));	1
add_horizontal) static	1
violates the	1
8*x +	1
www.agner.org/optimize and	1
write: y	1
exploited. A	1
closely follows	1
foremost, in	1
remedy is	1
dependent and	1
c1::*MemberPointer; Here,	1
i--) *(p++)	1
list[i].b. It	1
removable media	1
ignore, then	1
atomic. It	1
5). As	1
87) is	1
distributed. The	1
degrades performance	1
Explain volatile	1
(VML, MKL).	1
IsPowerOf2, int	1
Func(ab[i].a); }	1
(NetBurst) CPU	1
understands only	1
6! The	1
ArraySize; i++)	1
poorly. It	1
habit, it	1
log(2.0); ...	1
M processor	1
period and	1
flexibility, while	1
fashion. It	1
3A and	1
CPU-time in	1
62 __try	1
CLR, to	1
0.95 0.6	1
exponent: //	1
operands: minimum,	1
67 The	1
68 else	1
69 }	1
details). The	1
4.0.1. Gnu:	1
DLLs, configuration	1
Incrementing or	1
conversion. The	1
browsers, different	1
50; float	1
unrealistic that	1
identification. Such	1
500 clock	1
between. It	1
consult the	1
iteration. This	1
event, the	1
helpful for	1
costs. The	1
protocols and	1
instead: //	1
(char, short	1
moderately well.	1
aa, int	1
overflows, even	1
12.3. Intrinsic	1
brutally interrupted.	1
sign(i) ;	1
occur: if	1
bcc, v.	1
#undef N1	1
1.fffff, where	1
"Technical Report	1
converts a	1
sizeof(float)) =	1
Sfloat {	1
erroneously called	1
Subtractions use	1
Builder 5,	1
as(a <<	1
shifts one	1
intrinsics and	1
$B2$3: ret	1
Vec2d Vec8f	1
breakdown. Many	1
subtasks, but	1
y?" then	1
driver involves	1
producers keep	1
Vec2q 64	1
parts: one	1
Is8vec8 8	1
prototypes for	1
manuals: 1.	1
(int)(&list[0]) +	1
If, for	1
breakdowns for	1
minimize the	1
uint16_t unsigned	1
32767 int16_t	1
parts, for	1
IPP library	1
courses in	1
fma4intrin.h (Gnu)	1
all, it	1
bodies above,	1
eax,1 is	1
Loading data	1
(SIZE >	1
Michael Abrash:	1
actions like	1
risking to	1
sign, eee	1
MathLoop() {	1
heuristic guidelines.	1
(n!) as	1
root, RGB	1
GOT, and	1
7.2). This	1
130. It	1
ameliorated by	1
installed can	1
Gauss elimination.	1
blog for	1
Dobbs Journal,	1
fundamental laws	1
[eax+4], ecx	1
dest, double	1
("CriticalFunction"); typeof(CriticalFunction)	1
Change this	1
scheduled in	1
-fwrapv or	1
conversions. It	1
educational purposes	1
state. This	1
i/2 in	1
__vrd2_exp AMD	1
traffic and	1
address) /	1
Compatibility problems.	1
conversions: //	1
confined to	1
glitches in	1
funda- mentally	1
matrix[SIZE][SIZE]; transpose(matrix);	1
FUNCNAME(short int	1
matrix[c][r]. //	1
__declspec(align(64)) int	1
\n fistpl	1
MultiplyBy<8>(10); a	1
accept expressions	1
suggestions for	1
Since most	1
impacts on	1
(with new	1
Your measurement	1
learn from	1
compatibility, second	1
c1+TILESIZE; c2++)	1
slice are	1
division...................................................................................................... 137	1
_mm_shuffle_epi8 16	1
__svml_expf4 __svml_exp2	1
Complicated code	1
temp->b =	1
list[x]; }	1
temp->a =	1
subexpressions that	1
(addition, multiplication,	1
guess, that	1
12.1b. Vectorization	1
12.1b, the	1
&SelectAddMul_SSE2; //	1
imprecisions should	1
(Intel) #include	1
__svml_exp2 Intel	1
hardware. Porting	1
followed by	1
SelectAddMul_dispatch; //	1
branches: one	1
prior to	1
a+1;. The	1
(but not	1
__intel_cpu_features_init() sets	1
low-power CPUs	1
list[i+1];} sum1	1
IsProcessorFeaturePresent in	1
names, one	1
satisfied. The	1
distinctions between	1
i+=3,i_div_3++){ list[i]	1
relocation at	1
hours to	1
b+a, a*b	1
satisfied: 1.	1
neverthe- less	1
list[] =	1
clause. Comparing	1
expandable, but	1
754 (1985).	1
x2*x, x2,	1
Should we	1
deprecated. This	1
porting between	1
amd_vrs4_expf amd_vrd2_exp	1
hour. Neither	1
discriminates between	1
applying the	1
has. Assuming	1
1023 1	1
Waiting for	1
classes: //	1
p1->Hello(); CChild2	1
_mm_blendv_epi8(bc, c2,	1
8.12a int	1
8.12b int	1
CriticalFunction_Dispatch; //	1
(Compile without	1
Frequent context	1
isolating a	1
strongly recommended	1
manageable and	1
include: Memory	1
totaling up	1
(5) make	1
(MOVNT) are	1
.NET, which	1
column-wise manner	1
exception-safe code	1
spends most	1
4.5 0.82	1
Size() {	1
Sizes of	1
4.; };	1
website. 5	1
buttons, dialog	1
9.5a: 98	1
call, and	1
....................................................................... 77	1
1./5040., 1./40320.,	1
ReadB() {return	1
printf("\n%2i %10I64i",	1
7.1. Sizes	1
elements? If	1
(if valid)	1
caused by	1
x.f; //	1
---xx--xx (-a==-b)=(a==b)	1
XOP, AMD	1
First-In-Last-Out access,	1
sizeof(float) in	1
Hardware updating.	1
tricks Michael	1
a= a	1
a: //	1
directory as	1
"Beta", "Gamma",	1
(b*2.0)/3.0 rather	1
(doubly ended	1
CriticalFunction(b, c);	1
unreferen- ced	1
scalar (Scalar	1
57). It	1
63; //	1
Scott Meyers:	1
delays. The	1
Read time	1
paralleli- zation	1
uint8_t unsigned	1
opportunities for	1
Thursday =	1
_mm_i32gather_epi32 unlimited	1
gone to	1
aliasing, but	1
add_elements(s); //	1
Dispatcher. Will	1
void. Returning	1
worse kind	1
((a+b)+c)+d. This	1
Classes (MFC).	1
strlen, sprintf,	1
Constructor-style type	1
correctness. It	1
miss. But	1
higher-priority thread	1
services. Many	1
library). The	1
[esp+4] DWORD	1
N; }	1
DynamicArray =	1
_mm_hadd_ps(x, x);	1
N) {	1
design of	1
(depending on	1
obvious. See	1
obvious, then	1
FuncType(short int	1
(1. /	1
freely. The	1
x-xx--xx- x--x-----	1
b[r][c]); }	1
option) better:	1
replacements for	1
Performance". www.open-	1
handler, even	1
increment. The	1
segmentation of	1
integers: //	1
-openmp -static	1
behaviour is	1
XOR'ing it	1
RTTI then	1
divisor. In	1
a.y);} vector	1
r1+1; r2	1
increments seconds.	1
handlers for	1
references: If	1
composer) This	1
2-dimensional vector	1
-128, and	1
//=A*x*x+B*x+C //=DeltaY	1
applications: The	1
/Fa for	1
unrecoverable error	1
Things that	1
/Fm Generate	1
texts they	1
redesign. Some	1
0x3F800000; //	1
-fpic. This	1
research on	1
servicing. A	1
__cpuid(dummy, 0);	1
rows/columns in	1
p->NotPolymorphic(); p->Hello();	1
Hoisie, SIAM	1
e.g.: //	1
destroys any	1
deque (doubly	1
knows that	1
2010. This	1
80x86 /	1
restoring registers,	1
a2/b2; Here	1
_mm_cvtss_f32(s); }	1
-read_only_relocs suppress.	1
newsgroups contain	1
12.4b, rewritten	1
12.4b. Vectorized	1
(rarely 64).	1
10000, then	1
b[0], a[1],	1
72). The	1
dimensions of	1
v 4.0.1.	1
y2, reciprocal_divisor;	1
lightweight processors	1
;alignby4 ;	1
Coarse time	1
vectorized: void	1
influenced by	1
5.5 Mac:	1
swapping. Software	1
breaking out	1
Cannot optimize	1
libmmt.lib and	1
speeding up	1
;a ;r	1
_finite()) and	1
Functional decomposition	1
ratio. The	1
unattended. Uninstallation	1
reflect this	1
;r ;	1
2.5f}; a	1
61. It	1
-m64 -static	1
concentrating on	1
(& and	1
preference is	1
&list[8]); }	1
(6 integer	1
(0 <	1
(YMM) if	1
12.4d. Same	1
process, and	1
best-case conditions.	1
d.x; a.y	1
a+b=b+a, a*b=b*a	1
(8 float	1
(A &	1
(C <<	1
developer may	1
(B <<	1
PREFETCH _mm_prefetch	1
mangling. The	1
susceptible to	1
Stefan Goedecker	1
(SSE): #include	1
inte- ger	1
/arch:SSE3 -mssse3	1
sum. The	1
ReadB needs	1
Verilog. Common	1
inferior. A	1
dimension may	1
party security	1
Advices on	1
reporting. For	1
wired for	1
14.12a int	1
refresh the	1
inequality sign	1
Ready made	1
types. A	1
!a; can	1
defined(__unix__) ||	1
destructor, if	1
destructor. A	1
wires that	1
_mm_clflush intrinsic	1
sizes? It	1
SelectAddMul example	1
--xxxx-xx a*1=a	1
Loops...................................................................................................................... 45	1
iset =	1
beginning. ret	1
adhere to	1
__rdtsc(); return	1
3.0; The	1
Calculations in	1
loop- carried	1
i++)a[i]=2*i; The	1
non-recoverable errors;	1
side-effects and	1
Looking at	1
loop? Certainly	1
Glibc v.	1
C1, so	1
written. This	1
Partial template	1
a[] which	1
modularity and	1
properly. Many	1
fast=2 Simple	1
aa[size] );	1
throws an	1
feed into	1
former case	1
bug". The	1
considerably. Another	1
feel that	1
relate to	1
b++; will	1
well-known languages.	1
6. If	1
antivirus program	1
sizes, and	1
pipeline. If	1
" :	1
gates, flip-flops,	1
games. Such	1
FactorialTable[n]; //	1
Newer processors	1
IntegerPower (double	1
158. This	1
'>') are	1
18.1. Command	1
obsolete within	1
15.1c, but	1
prediction). 149	1
-231 231-1	1
information, such	1
a*b*c*2. It	1
nagging pop-up	1
threads? Container	1
7.22. //	1
www.yeppp.info And	1
&list[100]; temp++)	1
Intel/MASM syntax:	1
Keywords that	1
requires, of	1
workplace and	1
risky because	1
"standard stack	1
cached, but	1
p->f(); //	1
checking). An	1
search: //	1
instrset_detect function	1
measure. This	1
concentrate the	1
double's. It	1
Inlined functions	1
a*4 -	1
this). Use	1
x2; //	1
Runtime, CLR,	1
multiplications, which	1
That being	1
reach element	1
x2, x);	1
76 Boolean	1
75 (a&&b)	1
832 256	1
job, but	1
job. You	1
71 The	1
70 Induction	1
www.openmp.org and	1
down. Remember	1
79 Floating	1
CPLDs and	1
coincides with	1
8.14b int	1
press. 19	1
8.14a int	1
bit-mask which	1
worried about	1
"m"(x) :	1
sign-bit if	1
7.33a const	1
stupid. Some	1
pooling. It	1
pooling) than	1
shares the	1
modular. The	1
forward) instruction	1
advantages: The	1
WritePrivateProfileString to	1
2005). Borland	1
try, catch,	1
multiply-and-add Table	1
only, then	1
triangle is	1
x-xxxx-x- x-xxxxxxx	1
Rounding is	1
Quine–McCluskey or	1
n-1 multiplications,	1
laws of	1
x^0/0! //	1
semicolons, while	1
(/arch:SSE2, /arch:AVX	1
float(i); f	1
decimals. It	1
not! 250	1
together...................................... 88	1
(live ranges)	1
-ffast-math /fp:fast	1
managing a	1
Sum1() {return	1
rare. Testing	1
responded to	1
-100 to	1
2.; x.c	1
pre-calculated table.	1
a+b+c=c+b+a a+b+c+d	1
devirtualization (see	1
invoked with	1
128- bit	1
9.5b. //	1
printer or	1
Uninstallation should	1
Half size	1
Important features	1
Func2 were	1
say that	1
12.3a, for	1
......................... 142	1
reads. The	1
1./120., 1./720.,	1
unions rather	1
Pascal, Fortran	1
namely the	1
structure, data	1
Multidimensional arrays	1
'this'. We	1
AVX2, or	1
<asmlib.h> void	1
16-bit, 32-bit	1
u.i[1] ^=	1
much. Excessive	1
(eax) which	1
on) __restrict	1
attention of	1
level- 1	1
maintainability of	1
f=i; f	1
0x7F unsigned	1
relying on	1
setup. on	1
Monday =	1
n'th degree	1
"Register usage	1
a&b&c&d =	1
clause are	1
ignored if	1
union, as	1
i<20 loop	1
<=, >	1
relational operators	1
*x; double	1
Primitives" library	1
finds the	1
false: //	1
square: //	1
protection. Some	1
iterative in	1
objects), resource	1
tricky. I	1
opposite: Don't	1
for-loop: i++;	1
complication that	1
++b; the	1
square. //	1
SelectAddMul_SSE41, SelectAddMul_AVX2,	1
strategy for	1
AND'ing it	1
xplus2() {	1
X?" rather	1
Specifications, Dr	1
million times	1
(new and	1
reason. A	1
reason, you	1
-fopenmp /Qopenmp	1
squares and	1
Best-case testing	1
investigation of	1
disguise. Enums	1
route. This	1
small, then	1
compactness of	1
overhead. Example:	1
//=2*A //=A*x*x+B*x+C	1
2.6f; The	1
%10I64i", i,	1
point-to-integer conversions	1
set?". A	1
loop-branch is	1
vector(x +	1
8.8b double	1
Encryption, decryption,	1
8.8a double	1
~b =	1
Firewalls, virus	1
x-xxx--xx a	1
100*16, and	1
Newest instruction	1
normalized, if	1
MFC). This	1
.............................................................................. 65	1
widely different	1
re-calculated every	1
advise of	1
Multithreaded programs	1
year. Ignoring	1
Insert an	1
Reducible expressions	1
vector() {}	1
decades ago,	1
decreased when	1
CPU.............................................................................81 8.5	1
(*CriticalFunction)(b, c);	1
12.7. Vector	1
patterns. This	1
publish a	1
definitions when	1
Multiply(10,8); b	1
"undefined". This	1
separately: for	1
[ecx+eax*4],ebx stores	1
std::unexpected() function	1
b.x +	1
people. I	1
(GetExceptionCode() ==	1
-mveclibabi=svml. This	1
a[c][r] =	1
uninitialized, if	1
jumps, calls	1
places. Constant	1
computing, but	1
stress the	1
Iu8vec16 Vec16uc	1
b[1], ...	1
strictness is	1
2.1. Comparing	1
alignment, bytes	1
2.00. Intel	1
around. Adding	1
Why is	1
access....................................................................................................... 22	1
arraysize) {	1
casting. Linked	1
casting, but	1
violations and	1
-mveclibabi -fopenmp	1
malloc. Handles	1
Last updated	1
malloc) is	1
*(__m64*)&source); //	1
231 then	1
interval. A	1
removed, all	1
Func() {	1
interval: //	1
question: Put	1
r2; c2++)	1
violation, integer	1
incremental or	1
admittedly very	1
application- specific	1
collect the	1
PC's, workstations	1
"position-independent code"	1
application, while	1
spots. The	1
list.Size(); i++)	1
essential task	1
r2, c1,	1
xx-xx--x- reciprocal	1
mirroring is	1
"function level	1
identified. My	1
g(x)); In	1
Time- consuming	1
originally designed	1
8*1024/64 =	1
--xxxx--- a	1
(using Intel	1
series: ex	1
3.; x.d	1
v.i) {	1
select_gt(b, zero,	1
Prototype for	1
String constants	1
IsPowerOf2 =	1
glibc version	1
pros and	1
matical applications.	1
............................................................................ 51	1
stored? If	1
tends to	1
leftmost column	1
Gnu). Other	1
series, vectorized	1
series. The	1
(ZMM). Vector	1
Command line	1
2.1.7, 2004.	1
Square blocking	1
DelayFiveSeconds function	1
tortuous and	1
.......................................................... 107	1
boxes, etc.	1
s); return	1
yes License	1
dialog boxes,	1
integer). All	1
~. The	1
~(~a) =	1
matrix, i.e.	1
xxxxxxx-x xxxxxxxxx	1
Those who	1
file) should	1
predictions in	1
value, n.	1
x[0] =	1
_mm_stream_pi((__m64*)dest, *(__m64*)&source);	1
OneOrTwo5[(b!=0) ?	1
fake an	1
(XMM) if	1
logically distinct	1
vendors are	1
constant, unless	1
i[2]; }	1
analyze all	1
accomplished by	1
catch, and	1
2005; and	1
PCLMUL wmmintrin.h	1
wherever appropriate	1
criteria or	1
.............................................................................................................. 54	1
++i and	1
repeatedly with	1
sqrt, pow	1
__restrict__, if	1
raising an	1
vectorclass.h Supported	1
section. 12.5	1
section, but	1
unfavorable, unless	1
114 #include	1
................................................................................................................... 56	1
hasn't thought	1
1.f); //	1
emmintrin.h SSE3	1
optimal, though.	1
occurrence is	1
testing, verifying	1
row. The	1
(methods)......................................................................... 53	1
self-styled hacks	1
ia32intrin.h _mm_exp_ps	1
N-1)==0,N>::p(x); }	1
minute if	1
develop. It	1
Declare the	1
exact time	1
RAM, a	1
circumstances around	1
powN<true,1> {	1
NOT. Instead,	1
(0x2710 /	1
_mm_i64gather_epi32 unlimited	1
Embarcadero Comes	1
lower; and	1
table-based methods	1
(a*b*c)+(c*b*a) to	1
97 Table	1
pow(x,10) with	1
AMD's profiler	1
data", where	1
92 DynamicArray[i]	1
allowing two	1
Tips about	1
vice versa.	1
generators. In	1
x4*x4; double	1
tested. The	1
c.x +	1
c.y +	1
activates critical	1
back, where	1
activated by	1
Scheduling A	1
7.34b. Replace	1
Vectorize #pragma	1
comments, in	1
variables: //	1
80386 32	1
14.16b double	1
note: This	1
Requires binutils	1
Pentium-II or	1
Borland's now	1
xx4; //	1
__except (GetExceptionCode()	1
rounding, but	1
issue, as	1
superfluous code,	1
b*2.0/3.0 will	1
mainstream next	1
_mm_hadd_ps(s, s);	1
Perl. Several	1
14.17a double	1
15.1c? We	1
discussions. Turn	1
unwinding. All	1
("int 3");	1
relax floating	1
higher) is	1
;checkifi<100 ;	1
dealt with	1
((x2)2)2 a+a+a+a=a*4	1
language: An	1
dummy[4]; volatile	1
model, which	1
exist for	1
14.15a if	1
(without member	1
Loopunrolling x-xxxx--x	1
wrong, but	1
makers assume	1
textbook on	1
15; //	1
leaks. It	1
large. 156	1
Poor reproducibility.	1
159 18	1
154 //	1
/GR- -fno-rtti	1
152 If	1
entry. You	1
inlining. Reducible	1
Object1.Hello(), though	1
151 15.1c	1
thought-through approach	1
vectorize. The	1
suggests methods	1
normally. There	1
_mm256_i32gather_ps unlimited	1
Multithreading.............................................................................................................. 101	1
_endthread(), etc.	1
ranges) do	1
analogous to	1
summation variables	1
system......................................................................................... 6	1
statement: //	1
happy to	1
systems" for	1
Gnu/AT&T syntax:	1
Device drivers,	1
mainframes, and	1
device. Any	1
loops" chapter	1
www.agner.org/optimize/#vectorclass. The	1
%1 \n	1
sort and	1
floata; boolb=0;	1
updates. Automatic	1
updates, remote	1
(b[i] *	1
level-3 cache.	1
14.00 for	1
Few compilers	1
detects an	1
_alloca) for	1
anywhere in	1
B1, public	1
importantly, it	1
................................................................................................................. 21	1
a[1], b[1],	1
0.5 ns	1
Feature bloat.	1
0.6 1.19	1
mask, and	1
list[ARRAYSIZE]; if	1
Is16vec4 16	1
Details about	1
JavaScript, PHP,	1
NUMCOLUMNS =	1
eight) points	1
First you	1
losing precision.	1
ReadTSC(); CriticalFunction();	1
cores: Define	1
makers. 4.	1
panic if	1
sin function	1
rebooted. To	1
WritePrivateProfileString, which	1
(...) {	1
abuse is	1
place. This	1
FuncCol(int); const	1
%. Conversion	1
Const cast	1
abs(u.f) >	1
tables: Lists	1
13) {	1
Interference from	1
times: Dispatch	1
min)) {	1
conflicts. But	1
133 although	1
complicated? Because	1
131 Note	1
<math.h> #define	1
Application programmers	1
people who	1
disks and	1
Further details	1
single-thread speed.	1
collection, as	1
138 A	1
tables. The	1
%0 "	1
tables, and	1
superior performance/price	1
powerful. The	1
newsgroup comp.lang.asm.x86	1
activate a	1
C2, then	1
massively parallel	1
unique key.	1
multithreading that	1
unlikely that	1
pending instructions	1
a[0], b[0],	1
kb. This	1
kb, 8	1
practice to	1
(RTTI). See	1
(RTTI), which	1
www.agner.org/optimize/testp.zip or	1
.................................................................................................................... 55	1
ease of	1
resized in	1
Pro instruction	1
unpredictably at	1
................................... 141	1
Internal references	1
comparisons. The	1
trap integer	1
overridden in	1
Vec4ui 64	1
sub-expressions. Why	1
addresses, or	1
opinions on	1
microprocessors, different	1
individually. Example:	1
p->b;} int	1
initialisation i=0;	1
matters rather	1
tune the	1
18.3. Predefined	1
doubled for	1
categories: File	1
routines, system	1
usability. This	1
0x8040); See	1
couple of	1
Parameter transfer	1
huge). Far	1
13.1, Requires	1
Of course,	1
131) shows	1
recompile it.	1
Main loop	1
MKL, VML	1
log(c[i]);. This	1
said, I	1
ways). If	1
tests, the	1
trees, hash	1
template: //	1
bits). The	1
FactorialTable[b]; ...	1
Thin clients	1
_mm_cvtsd_si32(_mm_load_sd(&x));} The	1
int)i; This	1
tried. The	1
Windows) to	1
needed? A	1
2A, 2B,	1
follows. The	1
static_cast<float>(i); //	1
respect. 7.15	1
bulky and	1
light-weight alternative	1
kilobyte is	1
correction for	1
supports. An	1
supports, rather	1
104 }	1
5-10% for	1
0.5ns. 2GHz	1
profitable. On	1
255 uint8_t	1
MASM assembly	1
150. Using	1
directly, or	1
directly. The	1
argue that	1
planned solutions.	1
capability: //	1
destination, but	1
shell script.	1
.so). There	1
range"); or	1
reversed if	1
4.4, 2.5};	1
reflecting it	1
scanf. Violation	1
isolation have	1
limiting factors	1
(signed) address.	1
exceptions, etc.	1
measurements: warm	1
1.0 <=	1
YMM) which	1
Covers PC's,	1
Wednesday, Thursday,	1
(XMM or	1
Iu16vec4 32	1
patch. 131	1
1., 1./2.,	1
met then	1
xopintrin.h (Gnu)	1
FuncC(i+1); }	1
^0 =	1
C99 standard.	1
Iu16vec8 Vec8us	1
x86intrin.h (Gnu)	1
unpacking needed.	1
-fsource-asm). This	1
seriously. User	1
__attribute__((aligned(64))); //	1
clash with	1
nature of	1
if(!(a ||	1
requirement. Useful	1
Advanced book	1
propagated through	1
C0::f or	1
I64vec1 8	1
(CParent<>) contains	1
dilemma. You	1
High precision	1
Gnu: Glibc	1
API's. Memory	1
workaround. Supports	1
4.1.0, 2006	1
_mm_empty(); //	1
parallel: Using	1
our estimate	1
8.0f) *	1
considerable. If	1
pointer". The	1
"Zen of	1
parameters). The	1
debate about	1
Pragmatic Look	1
Multiplications are	1
(1,2,3,4), and	1
146). In	1
green. It	1
candidates for	1
Preprocessor directives.	1
Out-of-order execution	1
he or	1
thousands of	1
menu click	1
chapter, I	1
shuffling can	1
a&&b (a&&b)	1
arithmetics and	1
Vec32uc Vec16s	1
Move the	1
if(!a &&	1
(column =	1
gives: //	1
100000000. When	1
formats. Comments	1
Iss. 4,	1
incomplete information	1
printf("Alpha"); break;	1
generations classes	1
costless. It	1
guidelines. Most	1
knowing that	1
7.43b is	1
18, then	1
Thinking in	1
Relocation is	1
Typical candidates	1
int16_t int	1
shall automatically	1
p2; p2	1
SafeArray() {	1
closes the	1
uint32_t unsigned	1
2.5f; If	1
breakpoints at	1
favor of	1
g++ v	1
....................................................................................................................... 3	1
frustrated by	1
2.7, 2.8.	1
a[i+3]; }	1
columns. Every	1
a[N]; public:	1
Overriding the	1
columns; j++)	1
a.x =	1
a.y =	1
conversion, shuffling,	1
responsible for	1
i++; }	1
throw(); This	1
i++. cmp	1
tools, rather	1
precedence, not	1
__intel_cpu_features_init_x(). In	1
(Some compilers	1
well- tested	1
a=a*2; to	1
interrupt, e.g.	1
7.1-4, 2008.	1
truncation, and	1
old. The	1
232-1 uint32_t	1
API. In	1
__m128d defines	1
Wesley 1997.	1
73) automatically	1
73. Runtime	1
s(0.f, 0.f,	1
Active Template	1
subset, giving	1
remedies against	1
resultant code	1
sequence, where	1
safely assume	1
1]; Here,	1
kind: "what	1
environment, between	1
point). There	1
(everything that	1
2008, v.	1
bb) {	1
2008. Digital	1
intrinsics, automatic	1
intrinsics. Digital	1
layer of	1
(FILO) basis	1
linking" if	1
14.2a float	1
14.2b float	1
FuncC. Unrolling	1
similarly sets	1
R2 as	1
apart. I	1
FMA3 floating	1
clarity of	1
these, it	1
these. The	1
Porting such	1
wasted. The	1
memmove, memset,	1
[esp+12] ;	1
reserving memory	1
tempting to	1
levels of	1
DelayFiveSeconds() {	1
mimic the	1
Third Edition,	1
identifying hot	1
disagree with	1
AQtime, Intel	1
14.29 union	1
14.24 union	1
14.25 union	1
Vectors of	1
reciprocal, fast	1
14.20 double	1
14.21 is	1
adapt to	1
unrelated to	1
unit- test	1
SelectAddMul_AVX2 #endif	1
1.6; int	1
fighting with	1
__intel_new_strlen in	1
ARM platforms	1
a[i]. Note	1
at, rather	1
overwrite the	1
seconds. A	1
399 int	1
immintrin.h AMD	1
BSF (bit	1
seconds; //	1
1.2f; //	1
intended, while	1
makefile. You	1
strings. In	1
supply such	1
queue. It	1
queue, list,	1
from), function	1
distinguishing between	1
queue) allocates	1
comp.lang.asm.x86 for	1
9.1b. On	1
cc[]); //	1
Coarse-grained parallelism	1
term for	1
wstring or	1
symbols, but	1
consequences. I	1
activating the	1
sum2; If	1
minimized. For	1
inserted, one	1
*(T*)0; }	1
7.30b. The	1
vary dynamically	1
14.4a const	1
exceed 2	1
WriteFile(handle, ...))	1
&SelectAddMul_SSE41; (iset	1
11, Iss.	1
allocated. If	1
11. Using	1
minimized if	1
alias, if	1
115 from	1
Atom processors,	1
100> list;	1
116 //	1
111 }	1
110 //	1
around, (3)	1
112 Vectorized	1
-Wstrict-overflow=2, or	1
FuncB(i+1); FuncC(i+1);	1
minimum, maximum,	1
118 12.7	1
11; //	1
constant: Unsigned	1
Jr.: "Hacker's	1
70). The	1
(&) and	1
list[300] =	1
(&& and	1
Default version	1
locked after	1
1./24., 1./120.,	1
executed, cache	1
annoying. We	1
94 Are	1
91 step	1
9; }	1
98 int	1
platform, but	1
exiting the	1
rare cases	1
occupying a	1
_mm_and_si128(c2, mask);	1
getting them	1
Linux). Threads	1
7.41a class	1
7.41b a.x	1
Zero can	1
endl; //	1
0x20 =	1
[eax], ecx	1
Alternative to	1
NOT on	1
reports of	1
registration database	1
error; and	1
calling. __fastcall	1
(arrays can	1
__declspec(thread). Such	1
2.5; //	1
granularity is	1
&= 0x7FFFFFFF;	1
accessed. Pointer	1
BIOS setup.	1
quadratic matrix,	1
d+e, then	1
re-loaded from	1
2.5, which	1
writeable data.	1
malloc/free should	1
(single precision	1
"Gnu indirect	1
eax,eax. This	1
nature, it	1
/arch:SSSE2 -msse4.1	1
27. An	1
1997. Mostly	1
Nowadays, programming	1
Sandy Bridge)	1
Primitives". These	1
;startofFunc ;	1
meaningless event	1
--- -	1
disturb the	1
task-specific part	1
Temporary files	1
'1' is	1
dummy[0]; clock	1
replaces the	1
a+1; b	1
reproducible. Such	1
incredibly stupid	1
Efficiency Accessing	1
Re-interpreting the	1
inheritance. There	1
inheritance, virtual	1
Future processors	1
sub-vector before	1
(^) may	1
incurred on	1
b<c) Multiply	1
Foundation Classes	1
volumes in	1
12.2. Header	1
