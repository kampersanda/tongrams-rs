70186
the // parent class.	1
the function is not	1
the function is also	1
the function is called	2
the function is less	1
the function is always	1
the function is small	1
the function is doing	1
the function is never	1
the function is called.	7
the function is replaced	1
the function is defined	1
the function is called,	2
the function is inlined.	1
the function is big.	1
the function a different	1
the function a member	2
the function a constructor	1
the function to work	1
the function and to	1
the function in which	4
the function in terms	1
the function for the	1
the function that needs	1
the function can be	1
the function or class	1
the function or variable	1
the function or otherwise	1
the function has only	1
the function pointer is	1
the function pointer and	1
the function pointer has	2
the function pointer follows	1
the function library at	1
the function library asmlib,	1
the function where you	1
the function we want	1
the function return a	1
the function cannot be	1
the function address in	1
the function call statement	1
the function they are	1
the function type and	1
the function must check	1
the function through a	1
the function was called	1
the function name is	1
the function calling method	1
the function calling conventions	1
the function go to	1
the function names are	1
the function directly if	1
the function modify an	1
the function returns. The	2
the function returns. This	1
the function returns. There	1
the function returns. Make	1
the function returns. Alternatively,	1
the function returns. alloca	1
the function returns. Global	1
the function returns. Every	1
the function stores the	1
the function could be	1
the function body inside	1
the function call. Load	1
the function call. Algebraic	1
the function returns even	1
the function definition. This	1
the function longjmp is	1
the function ReadTSC listed	1
the function argument to	1
the function inline. This	1
the function inline. Replacing	1
the function construct an	1
the function declaration. This	1
the function body. A	1
the function prototype: void	1
the function billions of	1
the function add_horizontal) static	1
the function bodies above,	1
the function scanf. Violation	1
the if branch in	1
the if statement and	1
the if condition can	1
the code is not	1
the code is compiled	3
the code is optimized	1
the code is implemented	1
the code is likely	1
the code is fast	1
the code is running	1
the code is later	1
the code is chosen	1
the code is executed.	1
the code is included	1
the code is fragmented	1
the code is exactly	1
the code is distributed	1
the code is selected	1
the code is indeed	1
the code is repetitive.	1
the code of the	1
the code to a	1
the code to be	1
the code to call	1
the code to support	1
the code to tell	1
the code to test.	1
the code and compile	1
the code and put	1
the code and divide	1
the code in a	3
the code in example	3
the code in multiple	1
the code in order	1
the code that the	1
the code that is	1
the code that a	1
the code that it	1
the code that you	1
the code that use	1
the code that allows	1
the code that matters	1
the code are relative	1
the code are modified,	1
the code can be	3
the code can then	1
the code can therefore	1
the code can become	1
the code can possibly	1
the code can probably	1
the code if we	1
the code with an	1
the code you are	1
the code have been	1
the code more efficient	1
the code more complicated	1
the code more compact	1
the code more efficient,	1
the code will be	1
the code will not	1
the code will run	1
the code then you	1
the code from example	1
the code has a	1
the code has no	1
the code cache is	1
the code cache and	2
the code cache or	1
the code cache if	1
the code size or	1
the code where speed	1
the code takes no	1
the code so that	1
the code faster because	1
the code makes caching	2
the code less clear	1
the code rather than	1
the code 16 will	1
the code up to	1
the code must compute	1
the code inside square:	1
the code contains only	1
the code contains natural	1
the code memory. The	1
the code automatically in	1
the code automatically or	1
the code cache. The	2
the code difficult to	1
the code becomes bigger	1
the code becomes simpler	1
the code becomes contiguous.	1
the code becomes bulky	1
the code together near	1
the code smaller and	1
the code section and	1
the code section can	1
the code section will	1
the code section so	1
the code section position-independent,	1
the code still needs	1
the code prevent the	1
the code further by	1
the code execute faster	1
the code to: //	1
the code could benefit	1
the code involves multiplication	1
the code itself is	1
the code automatically. It	1
the code generated by	2
the code relies on	1
the code itself. Another	1
the code incompatible with	1
the code only. This	1
the code explicitly. There	1
the code carefully to	1
the code mixes float	1
the code section, but	1
the compiler is able	2
the compiler is usually	1
the compiler is prevented	1
the compiler is unable	2
the compiler to the	1
the compiler to be	1
the compiler to make	2
the compiler to do	4
the compiler to inline	1
the compiler to store	1
the compiler to optimize	4
the compiler to assume	2
the compiler to reduce	1
the compiler to predict	1
the compiler to evaluate	1
the compiler to ignore	1
the compiler to vectorize,	1
the compiler and it	1
the compiler in the	1
the compiler that the	2
the compiler that a	1
the compiler that you	1
the compiler that this	1
the compiler can make	1
the compiler can do	1
the compiler can replace	2
the compiler can automatically	2
the compiler can see	1
the compiler can align	1
the compiler can safely	1
the compiler if the	1
the compiler not to	1
the compiler may in	1
the compiler may be	1
the compiler may not	3
the compiler may calculate	1
the compiler may actually	1
the compiler you are	1
the compiler you will	1
the compiler have been	1
the compiler will convert	1
the compiler will vectorize	1
the compiler will recognize	1
the compiler from the	1
the compiler from making	4
the compiler from doing	2
the compiler from aligning	1
the compiler at compile	1
the compiler has to	1
the compiler has an	1
the compiler has no	1
the compiler has chosen	1
the compiler takes the	1
the compiler takes care	1
the compiler cannot know	2
the compiler cannot rule	1
the compiler does It	1
the compiler does quite	1
the compiler does what	1
the compiler does .............................................................................	1
the compiler must calculate	1
the compiler must convert	1
the compiler (see page	1
the compiler doesn't have	3
the compiler doesn't make	1
the compiler doesn't know	2
the compiler option -fno-pic	1
the compiler option "assume	1
the compiler manual for	1
the compiler manual or	1
the compiler uses a	1
the compiler uses position-independent	1
the compiler would be	1
the compiler optimize example	1
the compiler needs to	2
the compiler optimizations that	1
the compiler output can	1
the compiler e.g. how	1
the compiler explicitly that	1
the compiler itself is.	1
the compiler generates is	1
the compiler .......................................................................................... 66	1
the compiler additional information	1
the compiler 8.1 How	1
the compiler documentation for	2
the compiler optimizes a	1
the compiler bypassing the	1
the compiler sees the	1
the compiler treat a	1
the compiler interpret the	1
the compiler recognizes it	1
the compiler knows that	1
the time the variable	1
the time the software	2
the time is spent	2
the time of programming	1
the time of programming.	2
the time to answer	1
the time and b	1
the time and rarely	1
the time it takes	14
the time it was	2
the time on processors	1
the time you would	1
the time used by	1
the time we are	1
the time before the	1
the time before and	1
the time goes to	1
the time delay that	1
the time stamp counter	3
the time stamp counter.	1
the time consuming parts	1
the time spent in	1
the time spent on	1
the time consumption of	1
the time consumption was	1
the time slices is	1
the time slices to	1
the time slices allocated	1
the time MemberPointer is	1
the use of the	1
the use of integer	1
the use of Intel	1
the use of two	1
the use of register	1
the use of assembly	1
the use of arrays	1
the use of classes	1
the use of intrinsic	1
the use of <<	1
the use of RAM	1
the use of longjmp	1
the more important it	1
the more complicated functions	1
the memory is mirrored	1
the memory to be	1
the memory to become	1
the memory if the	1
the memory when exiting	1
the memory used by	1
the memory page size	1
the memory allocation is	1
the memory space is	1
the memory model used	1
the memory block from	1
the memory block should	1
the memory block. This	1
the memory footprint is	1
the memory bus is	1
the memory released when	1
the data to the	1
the data and resources	1
the data in the	1
the data are used	1
the data are stored	2
the data are accessed	1
the data are aligned	1
the data are scattered	1
the data with all	1
the data as an	1
the data more random	1
the data cache (see	1
the data set into	1
the data into multiple	1
the data into groups	1
the data object in	1
the data object through	1
the data elements are.	1
the data caching less	1
the data cache. The	1
the data cache. If	1
the data cache. These	1
the data cache. 2.2	1
the data cache. Single	1
the data cache. Bit-fields	1
the data block to	1
the data section may	1
the data fit into	1
the data fit nicely	1
the data members. If	1
the data members. But	1
the data optimally, or	1
the data structure, data	1
the program is compiled	1
the program is never	1
the program is actually	1
the program is loaded	2
the program is executed.	1
the program is running.	2
the program is run.	2
the program is loaded.	1
the program is compiled.	1
the program is dividing	1
the program is started.	1
the program is loaded,	2
the program is busy	1
the program is terminated	1
the program is shut	1
the program of occupying	1
the program to use	1
the program to measure	1
the program to issue	1
the program in a	1
the program in case	1
the program that are	1
the program that calls	1
the program that runs	1
the program that waits	1
the program are also	1
the program are often	1
the program or because	1
the program if there	1
the program by their	1
the program with profiling	1
the program code for	1
the program code are	1
the program as long	1
the program as well	1
the program - preferably	1
the program than to	1
the program may be	1
the program may need	1
the program have been	1
the program more clear	1
the program will be	1
the program will crash.	1
the program then it	1
the program has most	1
the program do the	1
the program takes too	1
the program before the	1
the program less efficient.	1
the program must clean	1
the program uses a	1
the program uses more	1
the program contains automatic	1
the program under test	2
the program under test,	1
the program happen to	1
the program logic allows	2
the program had read	1
the program itself when	1
the program itself. You	1
the program appear to	1
the program runs satisfactorily	1
the program starts running	1
the program starts up.	1
the program 153 spends	1
the program flow and	1
the program flow at	1
the program flow. However,	1
the program afterwards reads	1
the program slower. Another	1
the program starts. The	2
the program logic. Some	1
the vector class library	1
the vector class library,	1
the vector size for	1
the vector size then	1
the vector size (16	1
the vector register size.	1
the vector registers in	1
the vector registers can	1
the vector registers are:	1
the vector operations of	1
the vector operations mentioned	1
the vector element level	2
the vector size. There	1
the vector registers. It	1
the different functions in	1
the different integer types	1
the different compilers succeeded	1
the different instructions sets.	1
the different versions of	2
the different versions alternatingly	1
the different execution units	1
the different parts of	1
the different tasks were	1
the different cores is	1
the different microprocessors. 7.13	1
the same in a	1
the same in both	1
the same for simple	1
the same or a	1
the same function or	1
the same function on	1
the same function may	1
the same function calling	1
the same code and	1
the same code in	1
the same code can	1
the same code as	1
the same as the	2
the same as a	1
the same as for	2
the same as if	1
the same as i	1
the same as last	1
the same as C-	1
the same as reflecting	1
the same compiler option	1
the same time to	2
the same time that	1
the same time as	1
the same time regardless	1
the same memory space.	1
the same memory pool.	1
the same memory area	2
the same memory area.	2
the same memory areas.	1
the same memory block,	1
the same data in	1
the same instruction set.	1
the same cache is	1
the same cache line.	2
the same cache lines.	2
the same cache line,	1
the same set in	1
the same class and	1
the same class will	1
the same object (except	1
the same array for	1
the same version of	1
the same member pointer.	1
the same way is	1
the same way as	3
the same address so	1
the same critical part	1
the same register for	2
the same register because	2
the same time. The	1
the same time. A	2
the same time. There	1
the same time. Example:	1
the same without discriminating	1
the same dynamic library	1
the same dynamic libraries	1
the same part of	3
the same bits in	1
the same bits differently.	1
the same type to	1
the same result if	1
the same processor core	1
the same processor core.	3
the same thread as	1
the same precision in	1
the same precision as	1
the same few parameters.	1
the same structure or	1
the same inline assembly	1
the same shared object.	1
the same space for	1
the same cache. Multithreaded	1
the same name for	1
the same name as	2
the same source code.	2
the same source file.	1
the same induction variable	1
the same reason that	1
the same after this	1
the same piece of	2
the same function, each	1
the same compiler. It	1
the same range of	1
the same core will	1
the same errors can	1
the same variables. In	1
the same operation is	2
the same level-1 cache.	1
the same resources. But	1
the same class. The	1
the same object. There	1
the same time, except	1
the same priority is	1
the same priority than	1
the same thing and	3
the same thing as	1
the same logical register.	1
the same subexpression occurs	1
the same resource then	1
the same generation can	1
the same address. There	1
the same module then	1
the same module (i.e.	1
the same features as	1
the same value. This	1
the same unit as	1
the same register. Everything	1
the same DLL at	1
the same object, except	1
the same core. It	1
the same constant. Example:	1
the same principle as	1
the same regardless of	1
the same result. A	1
the same resources, such	1
the same cache, at	1
the same brand. Future	1
the same way, the	1
the same chip can	1
the same name. In	1
the same arguments are	1
the same executable. SSE2	1
the same machine. The	1
the same thing. Example:	1
the same thing. An	1
the same template. 57	1
the same chip. Such	1
the same effect. Which	1
the same class). If	1
the same computer, including	1
the same name, regardless	1
the same algorithm, then	1
the same directory as	1
the same divisor. In	1
the same queue, list,	1
the functions that are	3
the functions that it	2
the functions that have	2
the functions that access	1
the functions are never	1
the functions are actually	1
the functions memset and	1
the functions malloc and	1
the functions lrintf and	1
the only one that	1
the only way to	1
the only situation where	1
the only reasonable solution	1
the CPU is limited	1
the CPU to generate	1
the CPU to start	1
the CPU to increment	1
the CPU to overlap	1
the CPU and the	4
the CPU and prevent	1
the CPU can do	1
the CPU it is	1
the CPU by giving	1
the CPU than the	1
the CPU may occasionally	1
the CPU time then	1
the CPU from doing	2
the CPU from overlapping	1
the CPU has hardware	2
the CPU has problems	1
the CPU which can	1
the CPU used for	1
the CPU clock by	1
the CPU clock frequency	2
the CPU doesn't support,	1
the CPU doing multiple	1
the CPU was started.	1
the CPU dispatching and	1
the CPU dispatching explicitly	1
the CPU dispatcher to	1
the CPU dispatcher in	1
the CPU dispatch mechanism	1
the CPU core is	1
the CPU supports the	1
the CPU supports then	1
the CPU (See manual	2
the CPU cores and	1
the CPU dispatching. This	1
the CPU brand check	1
the CPU detection function	4
the CPU detection mechanism	1
the CPU detection function,	1
the CPU detection mechanism.	1
the CPU family number,	1
the CPU brand. Critical	1
the CPU chip. Such	1
the CPU supports, rather	1
the other is -0	1
the other with a	1
the other then put	1
the other way is	2
the other way three	1
the other thread increments	1
the other thread. However,	1
the other way. A	1
the other hand, the	1
the other hand, a	1
the other hand, it	1
the other hand, if	1
the other hand, does	1
the other way, etc.	1
the other compilers). The	1
the other volumes in	1
the instruction set is	1
the instruction set for	1
the instruction set that	1
the instruction set SSE2	1
the instruction code. You	1
the instruction sets is	1
the instruction set. These	1
the instruction xor eax,eax.	1
the point is that	1
the point where it	1
the loop is in	1
the loop is long	1
the loop is inside	1
the loop is rolled	1
the loop and have	1
the loop and splitting	1
the loop and reorganize:	1
the loop in this	1
the loop in example	2
the loop are finished.	1
the loop can be	1
the loop can change	1
the loop or the	1
the loop or add	1
the loop if the	1
the loop if you	1
the loop if all	1
the loop by the	1
the loop by two	2
the loop by n	1
the loop by four,	1
the loop will take	1
the loop branch must	1
the loop without checking	1
the loop does not	1
the loop counter is	2
the loop counter can	1
the loop counter with	1
the loop counter ahead	1
the loop count is	4
the loop count (ArraySize)	1
the loop control it	1
the loop control branch	4
the loop control statement	1
the loop control branch.	2
the loop control condition:	1
the loop further if	1
the loop unroll option	1
the loop unroll factor.	1
the loop condition i	1
the loop buffer that	1
the loop body is	1
the loop is. The	1
the loop counter. Example:	1
the loop counter. Any	1
the loop increment i++.	1
the loop index. The	1
the loop counter, which	1
the loop exits, when	1
the loop overhead. Example:	1
the one that is	1
the one that takes	1
the one that works	1
the one that gives	1
the one it is	1
the cache to load	1
the cache in between	1
the cache in just	1
the cache will be	1
the cache will evict	1
the cache then you	1
the cache so we	1
the cache between each	1
the cache always chooses	1
the cache line that	1
the cache line size	2
the cache line would	1
the cache line size,	1
the cache contentions can	1
the cache size. When	1
the cache size. Alternatively,	1
the cache lines we	1
the cache lines follow	1
the cache miss on	1
the integer is signed,	1
the integer in the	1
the integer in a	1
the integer has enough	1
the integer size on	1
the integer value of	1
the integer registers is	1
the integer operations use	1
the integer expression -a	1
the integer calculations. The	1
the integer factorial function	1
the set can be	1
the class is declared.	1
the class of the	1
the class that the	1
the class or structure	2
the class or give	1
the class has at	1
the class c1 other	1
the class Vec16s when	1
the class definition. This	1
the class declaration. The	1
the floating point and	1
the floating point code	1
the floating point value	1
the floating point register	1
the floating point registers	1
the floating point operations	1
the floating point stack	2
the floating point calculations	1
the floating point rounding	1
the floating point representation	1
the floating point number.	1
the floating point format	1
the example of a	1
the example below shows.	1
the compilers that are	1
the compilers are able	1
the compilers may behave	1
the compilers will not	1
the compilers cannot do	1
the compilers I have	5
the compilers reduced 15.1a	1
the most used data.	1
the most used parts	1
the most efficient memory	1
the most efficient integer	1
the most efficient library	1
the most efficient solution	3
the most efficient solution.	1
the most efficient alternative.	1
the most critical integer	1
the most critical part	7
the most critical parts	1
the most critical modules	1
the most often used	3
the most simple reductions	1
the most important or	1
the most important functions	1
the most common memory	1
the most common cause	1
the most common platforms	1
the most common math	1
the most common obstacles	1
the most complicated implementation	1
the most advanced code	1
the most significant part	1
the most time-consuming part	1
the most time-consuming parts	1
the most frequent causes	1
the most reliable solution.	1
the most predictable operand	1
the double precision constant	1
the size is a	1
the size of the	9
the size of a	3
the size of an	1
the size of data	1
the size of program	1
the size of each	2
the size of abc	3
the size and type	1
the size doesn't matter	1
the size known at	1
the size known before	1
the size parameter is	2
the size (in bytes)	1
the Intel and PathScale	1
the Intel function libraries	1
the Intel compiler is	3
the Intel compiler in	1
the Intel compiler for	2
the Intel compiler has	1
the Intel compiler because	1
the Intel compiler works	1
the Intel compiler reduced	1
the Intel compiler puts	1
the Intel CPU dispatcher	1
the Intel CPU detection	1
the Intel C++ compiler.	1
the Intel C++ Compiler	1
the Intel libraries do	1
the Intel mechanism executes	1
the Intel compiler. This	1
the Intel math function	1
the Intel libraries. Supports	1
the Intel Core and	1
the pointer is used.	1
the pointer is needed	1
the pointer is deleted.	1
the pointer or reference.	1
the pointer it gets	1
the pointer has to	1
the pointer has been	1
the pointer does not	1
the pointer p has	1
the library is very	1
the library is loaded	1
the library is needed.	1
the library that is	1
the library that comes	1
the library function calls.	1
the library function 250	1
the library has no	1
the library functions directly:	1
the library into memory.	1
the library file and	1
the library function. 12.2	1
the library through the	1
the library functions. The	1
the library function, and	1
the library www.agner.org/optimize/asmlib.zip. The	1
the library libmmt.lib and	1
the multiple data structures	1
the multiple processor cores.	1
the multiple .cpp modules	1
the two clock counts.	1
the two operating systems	1
the two functions. The	1
the two branches to	1
the two induction variables	1
the two types of	1
the two modules contiguous	1
the two constants are	1
the two kinds of	1
the two loops would	1
the two loops (except	1
the two AND operations:	1
the two parentheses can	1
the two formulas in	1
the object is no	1
the object is so	1
the object is large	1
the object is copied	1
the object is treated	1
the object is deleted	1
the object is known.	1
the object of the	1
the object in case	1
the object can be	1
the object or array	1
the object it points	1
the object on its	1
the object x when	1
the object then you	1
the object has no	2
the object file level,	1
the object file level.	1
the object does not	1
the object doesn't need	1
the object files need	1
the object instead of	1
the object file. Use	1
the object pointed to.	1
the object belongs to	1
the object owns. A	1
the number of different	1
the number of CPU	1
the number of possible	1
the number of clock	1
the number of objects	2
the number of elements	8
the number of registers	1
the number of bits	1
the number of available	1
the number of times	2
the number of calls	1
the number of threads	1
the number of points	1
the number of columns	4
the number of lines	1
the number of logical	1
the number of cores	2
the number of iterations	1
the number of machine	1
the number of branches.	1
the number of context	1
the number of physical	1
the number of allocations	1
the number of jumps,	1
the number and sets	1
the number and types	1
the static version if	1
the static keyword to	1
the static keyword has	1
the static modifier will	1
the static keyword: //	1
the static keyword, for	1
the 64-bit vector operations	1
the 64-bit instruction set	1
the 64-bit systems will	1
the 64-bit systems. A	1
the 64-bit vectors then	1
the 64-bit versions. The	1
the 64-bit extension to	1
the C++ compiler is	1
the C++ template feature	1
the C++ programming language	1
the C++ language also	1
the C++ language While	1
the C++ language relates	1
the C++ syntax in	1
the C++ language, all	1
the C++ language...................................................... 14	1
the array is not	1
the array is stored.	1
the array is defined.	1
the array a and	1
the array to make	1
the array or container	1
the array size a	1
the array pointer eax	1
the array elements then	1
the array address is.	1
the array must begin	1
the array element is	1
the array element has	1
the array after all	1
the array index is	1
the array i) {	1
the array 800 bytes	1
the many rules of	1
the many people who	1
the possible alternatives to	1
the clock cycles spent	1
the clock count before	1
the clock frequency is	2
the clock frequency may	1
the clock frequency goes	1
the clock counts that	1
the clock counts should	1
the clock frequency. The	1
the clock frequency. For	1
the clock frequency, as	1
the clock period and	1
the version in main	1
the version that fits	1
the version changes then	1
the value is calculated	1
the value is poorly	1
the value is already	1
the value of the	11
the value of a	2
the value of A	1
the value of b	1
the value of register	1
the value of N	1
the value of ebx	1
the value of seconds	1
the value of ebx.	1
the value of m	1
the value of b+c	1
the value and write	1
the value in the	1
the value in edx	1
the value that is	3
the value that lies	1
the value it was	1
the value from a	1
the value from memory	1
the value has changed	1
the value each time	1
the value before the	1
the value 0 for	1
the value 10 *	1
the value pointed to	2
the value wrap around.	1
the value 1000. The	1
the value -100+100+100 =	1
the value infinity, and	1
the value 0x2C so	1
the objects in the	1
the objects are accessed	1
the objects are aligned.	1
the objects should preferably	1
the objects stored are	1
the objects they point	1
the objects together into	1
the objects (memory pooling)	1
the variable is only	1
the variable is stored	2
the variable is used.	1
the variable is declared.	1
the variable to be	1
the variable in the	1
the variable in many	1
the variable that r	1
the variable as function	1
the variable from RAM	1
the variable at the	1
the variable two names,	1
the variable always has	1
the variable pointed to	2
the variable whose address	1
the variable Day. Note	1
the variable __intel_cpu_feature_indicator where	1
the variable __intel_cpu_feature_indicator_x. You	1
the variable 85 ;	1
the variable m. The	1
the variables that are	1
the variables might have	1
the return address of	1
the return statement: //	1
the table is not	1
the table is initialized	1
the table is cached.	1
the table to be	1
the table to stack	1
the table in the	1
the table in static	1
the table that is	1
the table are core	1
the table from static	1
the table at runtime,	1
the table has const	1
the table takes extra	1
the table inside a	1
the table values by	1
the table lookup. Lookup	1
the table static. This	1
the performance is not	1
the performance is limited	1
the performance of the	3
the performance of this	1
the performance of two	1
the performance if the	1
the performance by organizing	1
the performance by 5-10%	1
the performance then there	1
the performance because the	2
the performance even matters,	1
the performance counters inside	1
the performance during the	1
the performance monitor counters	2
the performance monitor counters.	1
the performance under the	1
the performance significantly simply	1
the performance dramatically by	1
the performance somewhat. The	1
the performance costs. The	1
the very time-consuming garbage	1
the software to be	1
the software for speed	1
the software programming language	1
the software contains a	2
the software was coded.	1
the software was developed.	1
the software implementation is	1
the software implementation if	1
the software development work	1
the software development process.	1
the software package in	1
the order of the	4
the order of functions	1
the order of floating	1
the order of Boolean	1
the order in which	6
the order a[0], b[0],	1
the long double format.	1
the 32-bit version. The	1
the 32-bit integer. Floating	1
the 32-bit case. The	1
the branch is poorly	1
the branch by a	1
the branch inside the	2
the branch target buffer	2
the branch target buffer.	1
the branch prediction mechanism.	1
the branch misprediction penalty.	1
the member function is	1
the member functions of	2
the member pointer refers	1
the member function. But	1
the member pointer. This	1
the member relative to	1
the way the register	1
the way the programming	1
the way a profiler	1
the way of example	1
the way of declaring	1
the way member pointers	1
the way microprocessors are	1
the way m is	1
the elements of a	1
the elements in a[]	1
the elements are stored	1
the elements are accessed	3
the elements from row	1
the elements consecutively in	1
the elements matrix[r][c] below	1
the const int declaration	1
the const keyword wherever	1
the const restriction on	1
the const restriction from	1
the called function. Example:	1
the called function. But	1
the address of the	12
the address of a	1
the address of it	1
the address of an	2
the address of each	2
the address of array	1
the address of element	1
the address of matrix[j][0]	1
the address can be	1
the address calculation more	1
the address calculation faster.	1
the address range from	2
the 4 lines in	1
the critical function is	2
the critical function may	1
the critical function many	1
the critical function ten	1
the critical code to	1
the critical code are	1
the critical code so	1
the critical functions and	1
the critical functions take	1
the critical code. A	1
the critical part of	6
the critical part can	1
the critical function. The	2
the critical function. In	1
the critical parts of	1
the critical innermost loop	2
the critical innermost loop.	2
the critical innermost loops.	1
the critical stride is	2
the critical stride and	1
the critical stride will	1
the critical stride then	1
the critical stride (see	1
the critical stride causes	1
the critical stride, as	1
the critical stride. Variables	1
the call to square	1
the call to CriticalFunction	1
the call to Object1.Hello(),	1
the call and return	1
the call stack in	1
the call p->f() goes	1
the 8 most popular	1
the bit scan instruction	2
the operating systems disappears	1
the operating system is	1
the operating system to	3
the operating system and	1
the operating system for	1
the operating system can	2
the operating system or	1
the operating system has	1
the operating system which	1
the operating system rather	1
the operating system (see	1
the operating system thread	1
the operating system API	1
the operating system kernel	1
the operating system. This	1
the operating system. It	1
the operating system. See	1
the operating system. AVX	1
the operating system, and	1
the operating system, not	1
the unsigned integer to	1
the first in a	1
the first time the	2
the first time because	1
the first time Func	1
the first data member	1
the first two (three	1
the first two suggested	1
the first object to	1
the first way and	1
the first call to	1
the first time. This	1
the first processors that	1
the first result is	1
the first element is	2
the first element of	1
the first 128 bytes	1
the first 128 bytes.	1
the first four parameters	1
the first program. An	1
the first application if	1
the first byte of	2
the first algorithm that	1
the first operand of	2
the first operand determines	1
the first six integer	1
the first PC's had	1
the first sum, then	1
the first sub-vector. A	1
the first dimension may	1
the register size in	1
the register stack is	1
the register stack are:	1
the register usage convention	1
the register keyword. The	1
the optimization of performance	1
the optimization unless the	1
the optimization features of	1
the optimization capabilities for	1
the optimization effort on	1
the optimization efforts on	1
the optimization job. You	1
the libraries named MKL,	1
the code. The third	1
the code. // Example	1
the code. This is	1
the code. This can	1
the code. It is	1
the code. See ISO/IEC	1
the code. For my	1
the code. Example: //	2
the code. Some profilers	1
the code. Many of	1
the code. Let's look	1
the code. Sometimes the	1
the code. C#, managed	1
the code. Inserting your	1
the time. The expression	1
the time. This is	1
the time. A for-loop	1
the template function is	1
the template function for	1
the template parameters are	3
the template parameters differ	1
the template parameter is	1
the template function, m	1
the template parameter. The	1
the template parameter. If	1
the registers eax, ecx	1
the need to store	1
the need to load	1
the need to update	1
the need for the	1
the pointers and the	1
the test and setting	1
the test program is	1
the test program itself	1
the test loop. The	1
the new version of	1
the new version causes	1
the new value of	1
the new function. The	1
the new bigger memory	1
the new block. Any	1
the new features. Take	1
the new context. It	1
the user is far	1
the user to turn	1
the user to restart	1
the user and a	1
the user and prevent	1
the user can see	1
the user if such	1
the user will be	1
the user has a	1
the user has to	1
the user but only	1
the user must install	1
the user never uses	1
the user actually has	1
the user interface is	1
the user interface and	1
the user interface than	1
the user might experience	1
the user interface. It	1
the user interface. Applications	1
the user expects an	1
the user interface, another	1
the even integer is	1
the method of storing	1
the method that gives	1
the method used here	1
the access to individual	1
the access non-sequential which	1
the SSE2 or later	4
the SSE2 instruction set	13
the SSE2 instruction set,	3
the SSE2 instruction set:	1
the SSE2 version of	1
the SSE2 (or later)	1
the following example, which	1
the following assembly code	2
the following methods could	1
the following example: //	1
the following conditions are	2
the following way. The	1
the following way. If	1
the following way. First	1
the following explanation if	1
the following table. Type	1
the following disadvantages compared	1
the following reasons: The	2
the following reasons: Each	1
the following way: //	1
the following way: There	1
the following way: bool	1
the following cases: If	1
the following alternatives: Make	1
the following steps to	1
the following work-around can	1
the following features: The	1
the following sections. 3.3	1
the following solutions, depending	1
the system code is	2
the system may store	1
the system database in	1
the system forbids the	1
the 32 sets can	1
the file is closed.	2
the file to a	1
the file for each	1
the file has been	1
the file until the	1
the programming language is	1
the programming manuals from	1
the dynamic libraries need	1
the dynamic libraries (*.dll	1
the dynamic linker. The	1
the part of the	1
the bits of the	1
the bits of an	1
the bits for Tuesday,	1
the type of an	1
the type of CPU	1
the type of object	1
the type of objects	1
the type of registers	1
the type and size	1
the type that is	1
the type conversion takes	1
the type conversion generates	1
the type T is	1
the case a =	1
the case of the	2
the case of data	1
the case of Boolean	1
the case in loops.	1
the case that the	1
the case if alternative	1
the case with programs	1
the case then the	1
the case we may	1
the case labels follow	1
the cases where dynamic	1
the cases described in	1
the short vector method	1
the & operator forces	1
the & operator (bitwise	1
the & operation will	1
the & operator; and	1
the simple function because	1
the simple function, the	1
the simple function, m	1
the instructions listed in	1
the processors that were	1
the processors on a	1
the available vector classes.	1
the available instruction set.	2
the available options for	1
the constant is a	1
the constant vector (1,2,3,4),	1
the constant 8 rather	1
the constant single precision	1
the constant 5. But	1
the constant 3.5 will	1
the constant subexpression. A	1
the constant 2.5, which	1
the error is not	1
the error code may	1
the error code. If	1
the error doesn't occur,	1
the error condition. Replacing	1
the stack is a	1
the stack and are	1
the stack and reading	1
the stack in 32-bit	2
the stack for all	1
the stack can be	1
the stack when CriticalInnerFunction	1
the stack at address	1
the stack before the	1
the stack before it	1
the stack rather than	1
the stack always belong	1
the stack (see above,	1
the stack pointer. Likewise,	1
the stack Variables and	1
the stack unwinding information	1
the stack (three parameters	1
the Gnu compiler in	1
the Gnu compiler for	2
the Gnu compiler on	1
the Gnu compiler will	2
the Gnu compiler mechanism	1
the Gnu compiler reduced	1
the Gnu compiler manual.	1
the Gnu manual currently	1
the Gnu mechanism stores	1
the Gnu directives work	1
the Gnu compiler. Not	1
the Gnu C function	1
the Gnu C library.	1
the Gnu compiler, the	1
the Gnu utilities in	1
the function. The function	1
the function. The assembly	1
the function. The automatic	1
the function. The overhead	1
the function. This is	1
the function. This has	2
the function. This fragmentation	1
the function. In the	1
the function. Copying the	1
the function. Compile once	1
the extra function calls	1
the extra operations outside	1
the extra work needed	1
the extra overhead of	1
the extra bits. The	1
the assembly output of	1
the assembly output more	1
the assembly output listing	1
the assembly output (/FAs	1
the large graphics frameworks,	1
the large overhead of	1
the while loop is	1
the while loop in	1
the while loop because	1
the while loop, the	1
the arrays are accessed	1
the arrays are aligned	2
the arrays are sufficiently	2
the arrays are properly	1
the arrays are aligned,	1
the arrays or structures	1
the arrays as required,	1
the arrays very big	1
the work it has	1
the work into multiple	2
the work load is	2
the work load. The	1
the work evenly between	1
the Windows operating system,	1
the Windows system. Note	1
the Windows Template Library	1
the calls to the	1
the calls to CriticalFunction.	1
the calculations of loop	1
the calculations in a	1
the calculations are available	1
the calculations on the	1
the calculations so that	1
the calculations inside the	1
the execution of everything	2
the execution to the	1
the execution time when	1
the execution time because	1
the execution speed in	1
the execution units rather	1
the execution considerably. Another	1
the result is that	1
the result is known	1
the result is valid.	1
the result of the	6
the result of full	1
the result in a	2
the result in x.	1
the result can be	1
the result will be	1
the result vector in	4
the result 100 rather	1
the result back to	1
the result -56 rather	1
the processor is not	1
the processor is an	1
the processor is compatible	1
the processor and the	2
the processor can do	1
the processor has hyperthreading.	1
the compiled code may	1
the compiled code big	1
the compiled code. In	1
the compiled versions #include	1
the big registration database	1
the threads are competing	1
the threads use different	1
the threads will invalidate	1
the threads write to	1
the threads share the	1
the best and most	1
the best compiler and	1
the best possible instruction	1
the best possible branch	1
the best possible version.	1
the best way to	3
the best optimization it	1
the best optimized function	1
the best optimized math	1
the best optimizing compilers	1
the best implementation for	1
the best cases. It	1
the best algorithm than	1
the best Java implementations.	1
the best job optimizing	1
the best optimizer. Borland/CodeGear/Embarcadero	1
the best algorithm. The	1
the necessary functions for	1
the necessary instruction set.	1
the necessary library files	1
the necessary calculations of	1
the necessary information about	1
the necessary cleanup jobs	1
the necessary initialization. The	1
the speed of a	1
the speed of functions	1
the speed of each	1
the speed of RAM	1
the speed of addition,	1
the speed or not.	1
the speed by using	1
the speed will be	1
the speed here is	1
the specific instruction set.	1
the specific purpose in	1
the specific event it	1
the specific literature for	1
the virtual function is	2
the virtual function dispatch	1
the virtual table lookup	1
the virtual function. If	1
the virtual functions. This	1
the virtual table. Unfortunately,	1
the virtual 53 function	1
the common language runtime	1
the common entry point	1
the thread to a	1
the thread in which	1
the thread function so	1
the thread have a	1
the thread priority before	1
the exception handling is	1
the exception handling option	1
the exception handler to	1
the exception handler in	1
the exception handler needs	1
the exception handler, even	1
the allocated memory into	1
the allocated array into	1
the allocated object, and	1
the overflow and underflow	1
the overflow condition inside	1
the overflow behavior well-defined	1
the integers from 0	1
the option for "assume	1
the option for "function	1
the option that gives	1
the option -fpic according	1
the option -fno-pic and	1
the option -fpie instead	1
the option -mveclibabi=acml. Agner's	1
the option -ftrapv, but	1
the option /QaxAVX or	1
the option -read_only_relocs suppress.	1
the option -mveclibabi=svml. This	1
the power of 10	2
the power of N	1
the power function when	1
the matrix is a	1
the matrix is bigger	1
the matrix when the	1
the matrix into smaller	1
the matrix line size.	1
the matrix longer than	1
the matrix 512 520	1
the matrix element. The	1
the AVX and later	1
the AVX or later	1
the AVX instruction set	4
the AVX instruction set.	1
the AVX instruction set,	1
the AVX 32 instruction	1
the AVX instructions. The	1
the AVX instructions. A	1
the AVX part. If	2
the line that covered	1
the line number information.	1
the line containing the	1
the optimized code will	1
the optimized code (release	1
the optimized version of	1
the optimized version because	1
the manual for your	1
the manual for my	1
the calculated value. The	1
the calculated result. Example:	1
the calculation of the	5
the calculation of A	3
the calculation of one	2
the calculation of B	1
the calculation of self-relative	1
the calculation of B.	1
the calculation of (a+b).	1
the calculation in a	2
the calculation time is	2
the uses of a	1
the four cache lines	2
the four results in	1
the four B value	1
the four G values	1
the four R value	1
the four sums }	1
the parameters of the	1
the parameters are transferred	1
the parameters on the	1
the parameters would be	1
the check for CPU	1
the check after the	1
the problem is to	1
the problem is likely	1
the problem is too	1
the problem and make	1
the problem and assume	1
the problem that the	1
the problem by increasing	1
the problem cannot easily	1
the solution is to	1
the solution is more	1
the solution to these	1
the container is to	1
the container be recycled?	1
the container may move	1
the container rather than	1
the container expandable, but	1
the advantage of bigger	1
the advantage that the	1
the advantage that it	1
the supported instruction set.	1
the operators new and	1
the few cases where	1
the list is large	1
the list does not	1
the list every time	1
the list causes all	1
the likely case that	1
the structure to make	1
the structure in example	1
the structure or class	1
the structure 8 bytes	1
the structure }; 52	1
the structure y into	1
the inline keyword is	1
the standard libraries are	1
the standard template library	1
the standard stack frame	1
the standard calling conventions.	1
the standard header file	1
the standard PC processors	3
the standard PC platform	1
the hardware is updated.	1
the hardware can be	1
the hardware implementation in	2
the hardware platform and	1
the hardware definition code	1
the values of a	2
the values of all	1
the values of its	1
the values of A,	1
the values in the	1
the values in a	1
the values because a	1
the sign of a	2
the sign bit of	4
the sign bit to	2
the sign bit in	1
the sign bit are	1
the sign bit so	1
the sign bit: //	2
the sign bit. The	1
the sign bit. We	1
the sign bit, the	1
the copy of the	1
the copy constructor and	1
the memory. The static	1
the memory. This makes	1
the memory. It is	1
the well optimized Intel	1
the information is utilized	1
the information in the	1
the addresses of library	1
the addresses of array	2
the addresses of dynamically	1
the addresses are accessed	1
the addresses are spaced	1
the shared object without	1
the shared variable inside	1
the shared resources are	1
the shared object. This	1
the shared object. Likewise,	1
the shared object, then	1
the program. The use	1
the program. The CPU	1
the program. The advantage	1
the program. The map	1
the program. This makes	1
the program. This requires	1
the program. In some	1
the program. 3 Finding	1
the program. Reading or	1
the program. 16.2 The	1
the program. Small functions	1
the program. Application programmers	1
the intermediate code by	1
the intermediate code. This	1
the intermediate result of	1
the intermediate result (b+c)	1
the intermediate expression b	1
the allocation process because	1
the write causes an	1
the above code in	1
the above example with	2
the above example may	1
the above example, the	3
the above example, then	1
the above template class	1
the above methods if	1
the above examples will	1
the above advantages of	1
the above sections are	1
the above table. If	1
the above security advices	1
the programs they are	1
the problems of the	1
the problems and planned	1
the problems that the	1
the problems mentioned above.	1
the problems associated with	1
the optimal code for	1
the optimal version of	1
the optimal branch can	1
the optimal solution is	1
the optimal platform ...........................................................................................	1
the optimal platform 2.1	1
the optimal choice for	1
the optimal algorithm The	1
the optimal algorithm before	1
the optimal algorithm .......................................................................................	1
the optimal order. Some	1
the optimal decomposition of	1
the space explicitly when	1
the dispatching only for	1
the dispatching should be	1
the particular application. The	1
the microprocessor is doing	1
the microprocessor is able	1
the microprocessor and the	1
the microprocessor can predict	1
the microprocessor can execute	1
the microprocessor can begin	1
the microprocessor it is	1
the microprocessor has the	1
the microprocessor has hardware	1
the microprocessor has made	1
the microprocessor has hyperthreading,	1
the microprocessor doesn't know	1
the microprocessor hardware for	1
the microprocessor jump to	1
the microprocessor handles this	1
the microprocessor wastes several	1
the next time the	1
the next new model	1
the next function. However,	1
the next processor model	1
the next model work	1
the next higher instruction	1
the next instance of	1
the next generation of	2
the next block. A	1
the next element. I	1
the next vector, and	1
the next step in	1
the next step. With	1
the next calculation. However,	1
the next paragraph. The	1
the next section. 12.5	1
the branches are poorly	1
the Mac platform, but	1
the multiplication is done	1
the multiplication is exact.	1
the multiplication of xxn	1
the multiplication can be	1
the multiplication by changing	1
the multiplication would take	1
the multiplication b[i]*c[i], though	1
the application can make	1
the application has a	1
the application software is	1
the application code. An	1
the application uses most	1
the application program. The	1
the application program. All	1
the application program. Add	1
the application programmer gets	1
the application software. Such	1
the application itself and	1
the application programmer. There	1
the caching conditions are	1
the expression is used,	1
the expression a =	2
the expression that is	1
the expression contains a	1
the expression y =	1
the expression list[i] is	1
the expression -(-a) to	1
the complicated address calculation	1
the dependency chain in	1
the members of both	1
the members individually. Example:	1
the Boolean operators because	1
the Boolean operators &&	1
the Boolean operators &&,	1
the Boolean operators (&&	1
the Boolean operands because	1
the cache. The cache	1
the cache. The operating	1
the cache. The problem	1
the cache. When we	1
the intrinsic function _mm256_zeroupper()	1
the intrinsic hardware functions.	1
the methods in the	1
the methods described on	1
the development of a	1
the development process can	1
the mathematical notion of	1
the block size grows	1
the name of Func	1
the name in the	1
the name cannot be	1
the name _alloca) for	1
the systems. There is	1
the needs of position-	1
the conversion is costly	1
the conversion is valid.	1
the conversion to signed	1
the conversion takes 50	1
the various optimization methods	1
the disadvantage of a	1
the disadvantage that the	3
the high processing power	1
the high level framework	1
the high level framework.	1
the high complexity of	1
the zero flag and	1
the Microsoft directives work	1
the Microsoft platform software	1
the Microsoft compiler. Supports	1
the Microsoft Visual Studio	1
the parameter is copied	1
the parameter has a	1
the division faster. Of	1
the source is an	1
the source code more	1
the source code. It	1
the source code, as	1
the source files. 13.2	1
the source annotation option	1
the cost of this	1
the cost of exception	1
the cost of longer	1
the cost of keeping	1
the cost of fine-tuning,	1
the cost of verifying,	1
the resources of the	1
the induction variable can	1
the induction variable as	1
the induction variable method	1
the reason why it	1
the reason why all	1
the reason why there	1
the reason why exception	1
the dispatcher function is	1
the dispatcher function and	1
the dispatcher function. This	1
the dispatcher function. When	1
the dispatcher function. typeof(CriticalFunction)	1
the dispatcher 128 function	1
the dispatcher signal an	1
the string is already	1
the programmer to be	1
the programmer to make	7
the programmer to know	2
the programmer in a	1
the programmer that pointers	1
the programmer can do	1
the programmer has defined	1
the programmer choosing the	1
the programmer forgets that	1
the programmer can. It	1
the programmer hasn't thought	1
the three functions. Sum1	1
the keyword static to	2
the keyword __restrict or	1
the keyword volatile is	1
the keyword far (arrays	1
the keyword __thread or	1
the end of the	2
the end of a	1
the end of an	1
the end of this	1
the end in order	1
the end when all	1
the end user is	1
the end user will	1
the end user who	1
the end user gets	1
the end user. The	1
the end user. There	1
the end user. Dynamic	1
the end user. Installation	1
the end user. Menus,	1
the && expression to	1
the | operator which	1
the | operator; you	1
the examples in the	1
the examples have been	1
the examples I have	1
the difference is simply	1
the difference between the	2
the difference between a	1
the difference between two	1
the difference between rounding	1
the difference between commas	1
the data. The effect	1
the data. This is	1
the data. A complete	1
the data. Use OpenMP	1
the runtime address calculations	1
the runtime framework may	1
the runtime polymorphism that	1
the runtime polymorphism: //	1
the last cache level,	1
the last 8 columns	1
the last element outside	1
the last index changes	1
the last index changing	1
the last vector. Organize	1
the last member. This	1
the parts of the	2
the optimizations that we	1
the graphics processing unit	1
the framework and compile	1
the framework itself, during	1
the numbers in b[i]	1
the numbers in question	1
the numbers are powers	1
the dispatch on first	1
the dispatch on every	1
the dispatch branch of	1
the dispatch branches are	1
the dispatch mechanism even	1
the dispatch decision at	1
the calling function can	1
the calling program is	1
the XMM registers for	1
the XMM registers are	3
the XMM registers (see	1
the second result is	1
the second operand is	4
the second generation of	1
the second step where	1
the second step. The	1
the second sum, then	1
the second operand. Likewise,	1
the second sub-vector before	1
the higher bits. There	1
the vectors of 64	1
the vectors into C++	1
the AVX2 instruction set	1
the piece of code	2
the x86 instruction set	2
the x86 CPUs. However,	1
the x86 family of	1
the x86 family can	1
the x86 family have	1
the binary value of	1
the binary decimals of	1
the binary digits. The	1
the advantages of object	1
the advantages of C++	1
the advantages and drawbacks	1
the advantages over the	1
the results of the	1
the results are combined	1
the storage order is	1
the storage methods mentioned	1
the old memory block	1
the old operating systems	1
the old block then	1
the old Pentium 4,	1
the old Pentium 4.	1
the old version. Updating	1
the old fashioned C	2
the options for fast	1
the options -S or	1
the feature that there	1
the feature information, such	1
the link pointers and	1
the appropriate function version	1
the appropriate instruction set	1
the appropriate version of	4
the appropriate version (May	2
the appropriate type of	1
the appropriate header file	2
the constructor itself. Constructors	1
the function, and it	1
the function, but it	1
the operands and add	1
the operands are integer	1
the operands are variables	1
the operands are comparisons,	1
the operands if the	1
the operands have other	1
the operands have no	1
the operands has side	1
the operands because the	1
the innermost loop is	1
the innermost loop and	1
the innermost loop that	1
the innermost loop by	1
the innermost loop A	1
the innermost loop doing	1
the innermost loop bigger	1
the innermost function, then	1
the innermost loop. This	2
the innermost loop. Another	1
the compiler. The compilers	1
the compiler. You can	1
the compiler. Some compilers	1
the compiler. We can	1
the compiler. Loop invariant	1
the compiler. On the	1
the compiler. Remember, therefore,	1
the advanced version on	1
the advanced version on,	1
the advanced programming constructs	1
the advanced principles of	1
the range of code	1
the range of an	1
the start of the	1
the start so that	1
the modules of a	1
the modules are linked	1
the modules appear in	1
the smaller the data	1
the smaller the integer	1
the core with another	1
the core clock cycle	1
the relevant optimization options	1
the relevant books and	1
the negative effects of	1
the reductions that the	1
the reductions manually. I	1
the example: // Example	1
the contentions and the	1
the main memory and	1
the main memory in	1
the main program. See	1
the main executable to	1
the main executable has	1
the main executable because	1
the main reasons why	1
the main feedback comes	1
the positive or the	1
the loop. The following	1
the loop. The loop-branch	1
the loop. It is	1
the loop. Example 12.4b	1
the loop. Example 8.21	1
the loop. If each	1
the loop. In general,	1
the loop. Some implementations	1
the loop. Most compilers	1
the computer is restarted	1
the computer is reset	1
the computer is rebooted.	1
the computer for security	1
the computer has only	1
the computer while he	1
the computer during the	1
the computer starts up,	1
the overhead of the	1
the overhead of parameter	1
the overhead of transferring	1
the overhead of switching	1
the pointer. These conversions	1
the C style string	1
the global offset table	1
the conversions and make	1
the conversions by using	1
the conversions out of	1
the statement was executed.	1
the relative efficiency of	1
the installation process to	1
the installation process can	1
the installation process or	1
the syntax is so	1
the syntax is very	1
the syntax is fully	1
the syntax described in	1
the cases. The equivalent	1
the choice of user	1
the choice of programming	2
the choice of hardware	1
the choice between optimizing	1
the STL is not	1
the STL is designed	1
the STL are universal,	1
the STL has been	1
the STL also costs	1
the STL containers is	1
the STL (Standard Template	1
the profiler may sample	1
the profiler itself. Function	1
the index is out	1
the index by 8.	1
the inlining causes technical	1
the size. However, it	1
the size. Integers of	1
the network is overloaded	1
the network is unstable	1
the network or database	1
the slow GOT lookup	1
the desired function version	1
the desired program structure.	1
the desired instruction set	1
the desired instruction set.	1
the desired version of	1
the desired version in	1
the desired function. The	1
the desired version. Note	1
the desired polymorphism effect	1
the desired functionality without	1
the desired measurement instruments	1
the desired interval is	1
the #pragma vector always	1
the #pragma vector nontemporal	1
the whole program by	1
the whole program execution,	1
the whole loop will	1
the whole software project	1
the whole software package,	1
the whole structure of	1
the whole program. During	1
the inefficient virtual function	1
the level-2 cache is	1
the level-2 cache and	1
the level-2 cache are	1
the level-2 cache as	1
the level-2 cache from	1
the level-2 cache because	1
the level-2 cache cannot	1
the level-2 cache. The	1
the level-2 cache. This	1
the level-2 cache. Using	1
the response time is	2
the response time to	2
the response time under	1
the response times for	1
the hot spots and	1
the hot spots have	1
the hot spot and	1
the hot spot. Sometimes,	1
the code, then you	1
the code, which supposedly	1
the code, cache misses	1
the code, so you	1
the code, including user	1
the instance in main	1
the fact that n	1
the position-independent code flag	1
the position-independent code. These	1
the out-of-order execution mechanism	2
the out-of-order mechanism allows	1
the out-of-order capabilities of	1
the output of the	1
the output are unacceptable.	1
the level-1 and the	1
the level-1 data cache	2
the level-1 data cache,	1
the level-1 cache are	1
the level-1 cache may	1
the level-1 cache from	1
the level-1 cache size.	1
the level-1 cache. The	1
the level-1 cache. We	1
the resources. In this	1
the task in question.	1
the local object is	1
the local object static	1
the local name for	1
the costs of software	1
the costs of dynamic	1
the costs of position-independent	1
the costs to other	1
the costs in terms	1
the costs if it	1
the inlined function and	1
the inlined function for	1
the inlined function. Function	1
the class. Data members	1
the class. Calling a	1
the class. Storing variables	1
the class. Which solution	1
the database anyway if	1
the constants are defined	1
the constants Sunday, Monday,	1
the frame function or	1
the frame function into	1
the special feature that	1
the destructor is called	1
the destructor of x.	1
the destructor to call	1
the destructor for the	1
the destructor by constructing	1
the destructor causes another	1
the preceding one is	1
the preceding one (see	1
the preceding value of	1
the preceding example, this	1
the preceding addition is	1
the preceding addition then	1
the preceding iteration is	1
the preceding label plus	1
the preceding one. This	1
the preceding one. You	1
the preceding paragraph and	1
the preceding row. The	1
the safe formula a[i]	1
the Pentium 4 processor.	1
the efficiency of the	1
the efficiency of 32-bit	1
the repeat count is	4
the repeat count has	1
the unroll factor. If	1
the unroll factor. For	1
the unroll factor. Loop	1
the algorithm in question.	1
the algorithm in question:	1
the sum of 100	1
the strings including the	2
the exponent is a	1
the exponent is an	1
the exponent is biased	1
the exponent if there	1
the possibility of using	1
the possibility of compiling	1
the possibility of algebraic	1
the possibility for other	1
the possibility for further	1
the possibility for significant	1
the possibility that the	2
the possibility that a	1
the discussion of container	1
the maximum loop count	1
the maximum possible memory	1
the maximum repeat count	1
the maximum value. There	1
the alignment is not	1
the alignment explicitly by	1
the alignment requirements are	1
the right in order	1
the right function for	1
the right data into	1
the right vector elements.	1
the right version of	3
the right prediction. The	1
the right format and	1
the right formula in	1
the right positions in	1
the offset of the	2
the offset of a	1
the offset can be	1
the offset as a	1
the offset has to	1
the offset relative to	1
the compatibility with older	1
the macro is referencing	1
the object. The allocation	1
the object. If the	1
the object. Make the	1
the object. 7.17 Structures	1
the library. The application	1
the library. This method	1
the library. Add to	1
the calculations. The time	1
the calculations. The program	1
the operand that is	2
the final program and	1
the final size cannot	1
the final size needed	1
the final array size	1
the final version of	1
the final value of	1
the final result to	1
the final result will	1
the final program. This	1
the final application depends	1
the final program, it	1
the final product. It	1
the sake of the	1
the sake of compatibility	2
the sake of optimization.	1
the sake of parallel	1
the sake of fastest	1
the sake of portability	1
the sake of backwards	1
the sake of efficiency.	1
the sake of security.	1
the sake of cross-platform	1
the sake of modularity.	1
the sake of security,	1
the tasks into multiple	1
the effect of nontemporal	1
the amount of memory	3
the amount of cache	1
the amount of necessary	1
the amount of RAM	1
the variable. This can	1
the variable. For example,	1
the time, but expensive	1
the copying process, and	1
the performance. 14.4 Integer	1
the processing power. Connecting	1
the so-called time stamp	1
the so-called intrinsic functions.	1
the so-called Java virtual	1
the so-called position- independent	1
the so-called partial flags	1
the so-called commpage. These	1
the so-called CPU-dispatcher that	1
the total number of	3
the total time. Optimizing	1
the total execution time	1
the total execution time.	1
the total calculation time.	1
the total amount of	1
the total computation time.	1
the child class name	1
the child class members.	1
the priority back to	1
the disk cache. Files	1
the iteration is repeated	1
the counters when you	1
the stack. The memory	1
the stack. This can	1
the stack. This makes	1
the stack. This behaviour	1
the stack. A static	1
the stack. Each thread	1
the stack. Is the	1
the stack. Deallocation has	1
the stack. String constants	1
the full advantage of	1
the full information about	1
the full 128-bit execution	1
the full declaration of	1
the full generality and	1
the thread. The cost	1
the RAM size is	1
the rows in the	1
the rows are accessed	2
the rows are indexed	1
the least significant bit	1
the least significant n	1
the least recently 4	1
the algebraic reductions explicitly	1
the logical register that	1
the logical structure and	1
the logical architecture of	1
the bitwise operators are	1
the bitwise operators (&	1
the bitwise OR operator,	1
the handle is invalid.	1
the heap is reserved	1
the heap to be	1
the heap has become	1
the heap space to	1
the heap space has	1
the heap manager for	1
the target if the	1
the target address is	1
the target address can	1
the target pointed to	1
the entire program in	1
the entire program will	1
the entire floating point	1
the entire library (or	1
the entire 64 or	1
the entire file in	1
the entire list from	1
the entire level-1 cache	1
the entire object. Any	1
the entire contents copied	1
the executable to be	1
the executable file and	2
the executable file needs	1
the executable file. Only	1
the subexpression c+b can	1
the nontemporal write instruction	1
the nontemporal write instructions	1
the bounds of valid	1
the SSE and SSE2	1
the SSE and later	1
the SSE or SSE2	1
the SSE or higher	1
the updates if the	1
the loading of several	1
the loading of modules	1
the reading of the	1
the reading of x	1
the directly compiled version	1
the simplest possible implementation	1
the simplest code. If	1
the simplest cases, but	1
the simplest cases, composite	1
the simplest expressions and	1
the simplest cases. See	1
the simplest method, but	1
the situation where the	1
the situation where a	2
the message loop of	1
the condition is known	1
the condition can be	1
the condition clause. Comparing	1
the resource use on	1
the PathScale and Intel	1
the previous value as	2
the previous value than	1
the previous link pointer	1
the previous iteration (except	1
the previous chapter (page	1
the previous value. It	1
the previous value. Example:	1
the previous one. It	1
the previous iteration. This	1
the vector. The other	1
the vector. This is	1
the program, and the	1
the program, and one	1
the program, and while	1
the program, for example	1
the program, it is	1
the program, one for	1
the loops if the	1
the SSE4.1 instruction set	2
the chapter "Register usage	1
the risk of memory	1
the risk of losing	1
the risk of activating	1
the header file timingtest.h	1
the header file mathimf.h	1
the header files are	1
the future we may	1
the future due to	1
the fraction is stored	1
the fraction bits: //	1
the sequence of calculations	2
the sequence to be	1
the sequence in a	1
the compiler, and the	1
the compiler, you will	1
the CPU. It can	1
the CPU. If the	1
the CPU. Algebraic reductions	1
the CPU. Unrolling a	1
the length of the	2
the length of a	3
the length of each	1
the module with, e.g.	1
the beginning of the	7
the beginning of a	1
the beginning of list	1
the beginning rather than	1
the alternative version. The	1
the current instruction set.	1
the current array element.	1
the current version satisfies	1
the current .cpp file)	1
the current position. Windows	1
the 'this' pointer. You	1
the problem. This new	1
the row length is	1
the declaration class CChild1	1
the declaration "static" or	1
the series of statements	1
the features of Java	1
the user. Time is	1
the user. Making exception-safe	1
the user. With the	1
the user. Compatibility problems.	1
the user. Feature bloat.	1
the chosen compiler doesn't	1
the chosen version return	1
the chosen expression. Example	1
the device itself is	1
the subsequent times because	1
the subsequent instructions. The	1
the subsequent counts represent	1
the subsequent manuals. Please	1
the subsequent counts. This	1
the low priority of	1
the latter is executed	1
the latter function also	1
the latter has one	1
the latter case the	1
the latter function, but	1
the latter case, the	1
the latter case, you	1
the default integer size	1
the default size when	1
the time-consuming data processing.	1
the diagonal is swapped	1
the diagonal and swap	1
the diagonal are accessed	2
the diagonal have been	1
the diagonal there is	1
the diagonal remain unchanged.	1
the logic structure of	1
the logic behind the	1
the Microsoft, Intel, Gnu	2
the hard disk if	1
the hard disk. A	1
the typical repeat count	1
the derived class in	1
the derived class (see	1
the derived class. This	1
the derived class: //	1
the overflow. Taking the	1
the fully optimized code	1
the factorial function looks	1
the OpenMP directives for	2
the parent class data	1
the value. The loop	1
the memcpy function implicitly	1
the memcpy function. There	1
the procedure linkage table	1
the parallelism is obvious	1
the parallelism is obvious.	1
the prediction turns out	1
the polymorphic member of	1
the polymorphic functions. The	1
the graphical user interface	1
the lower 8 or	1
the lower 16 bits	1
the label $B1$2:. This	1
the iterations and start	1
the misprediction before it	1
the misprediction penalty is	1
the background are unnecessary	1
the background job can	1
the chain of function	1
the PLT and GOT.	1
the PLT entry with	1
the heavy graphics calculations.	1
the heavy background calculations	1
the additions are independent	1
the system. The number	1
the inputs to the	1
the inputs have any	1
the interrupt 3 breakpoint	2
the fastest way to	2
the fastest solution on	1
the fastest first. However,	1
the DLL is relocated	1
the DLL use absolute	1
the factors that decide	1
the factors are generated	1
the Gnu, Clang and	2
the Gnu, Clang, Intel	2
the Gnu, Clang, Intel,	1
the arrays. It is	1
the arrays. An array	1
the branch. It may	1
the required amount of	2
the GOT and PLT	1
the GOT through a	1
the array. This method	1
the array. eax holds	1
the general case where	1
the general case, but	1
the general literature on	1
the preferred programming language	1
the preferred language will	1
the software. You should	1
the software. Smaller microcontrollers	1
the interpreted version of	1
the vectors. This data	1
the YMM register state.	1
the YMM registers. Disadvantages	1
the purpose of finding	1
the -fpic option. Then	1
the D language. D	1
the sections below. The	1
the carry and zero	1
the carry bit is	1
the carry bit must	1
the carry flag or	1
the carry flag then	1
the carry flag (e.g.	1
the debugging options prevent	1
the table. The 16-byte	1
the table. Optimization method	1
the object, and a	1
the trick that N1	1
the disadvantages when deciding	1
the disadvantages mentioned above	1
the update mechanism to	1
the update process. 3.5	1
the body of the	1
the body of a	1
the Java virtual machine	1
the memory, depending on	1
the system, the more	1
the system, as explained	1
the absolute value of	2
the absolute value by	1
the machine code is	1
the CPUID is artificially	1
the CPUID instruction doesn't	1
the CPUID instruction was	1
the CPUID instruction directly,	1
the CPUID information about	1
the CPUID was manipulated	1
the saved variable members	1
the changes of the	1
the processor. This is	1
the processor. Nested loops	2
the linker to a	1
the linker to remove	1
the linker and the	1
the linker makes an	1
the linker extracts the	1
the measurements as accurate	1
the representation of the	1
the factor is a	1
the factor to multiply	1
the core. It is	1
the rules of algebra	1
the rules of algebra,	1
the smallest data size	1
the smallest integer size	3
the smallest list of	1
the smallest members last:	1
the smallest devices, you	1
the responsibility of the	7
the Borland and Digital	1
the Borland compiler with	1
the Borland C++ builder.	1
the sense that the	2
the sense that all	1
the sense that each	2
the sense that C++	1
the latest instruction set	2
the latest compilers from	1
the latest version of	3
the reciprocal of the	2
the reciprocal in the	1
the reciprocal factorials so	1
the log on process	1
the thousand results in	1
the break a few	1
the break will occur	1
the Common Language Runtime,	1
the scope of the	1
the scope of a	1
the scope of this	3
the principle for a	1
the throughput of the	1
the throughput of an	1
the throughput of CPU-intensive	1
the throughput (see p.	1
the expected real-time speed.	1
the application. The availability	1
the application. In example	1
the application. You may	1
the largest vector register	1
the largest available register	1
the largest vector. These	1
the dispatched function is	1
the normal return route.	1
the portability could be	1
the availability of an	1
the availability of x	1
the availability of these	1
the availability of good	1
the availability of powerful	1
the .NET framework as	1
the .NET framework. Obviously,	1
the newest CPU of	1
the newest CPU model,	1
the newest instruction set	1
the newest instruction set.	1
the newest processors. Supports	1
the B values. The	1
the debugger is not	1
the debugger to identify	1
the debugger then it	1
the ^ operator. The	1
the base classes. You	1
the result. You can	1
the compilation is finished.	1
the behavior of the	1
the behavior of static	1
the behavior of signed	1
the 7 program can	1
the form of a	2
the form of templates	1
the worst possible case	1
the worst possible performance.	1
the worst case situation	2
the job of the	1
the job into multiple	1
the job before you.	1
the job fast enough.	1
the biggest time consumers	2
the biggest vectors: for	1
the biggest time-consumer in	1
the users with nagging	1
the structure. Incrementing or	1
the requirements of the	1
the requirements of optimizing	1
the requirements of compatibility	1
the profiler. The result	1
the __fastcall keyword is	1
the increment and decrement	1
the method. A longer	1
the remote data locally.	1
the future. If a	1
the future. 6 The	1
the future. Typically, the	1
the future. To use	1
the swapping of memory	1
the AVX512 instruction set	1
the memset line if	1
the rest of the	5
the Digital Mars compiler	1
the third generation class	1
the CISC instruction set	1
the effort to make	2
the reduction in this	1
the reduction would cause	1
the strict aliasing rule	2
the event of an	1
the event that it	2
the select function, and	1
the actual clock frequency	1
the actual load address.	1
the actual calculations. This	1
the actual processor. However,	1
the console or to	1
the advice in the	1
the advice given here	1
the advice given above.	1
the pow function when	1
the recommendation was the	1
the physical movements of	1
the pitfalls here: The	1
the equivalent if(!(a ||	1
the command line with	1
the relatively small gain	1
the guidelines below. You	1
the excessive memory swapping	1
the latency of the	1
the latency of a	1
the latency and the	1
the latency or by	1
the larger vector size.	1
the larger address space	1
the project at hand.	1
the project window or	1
the 107 number of	1
the upper 32 bits	1
the key values are	1
the combined size of	2
the ever bigger software	1
the division. Some compilers	1
the present manual is	1
the present manual. There	1
the strlen function in	1
the strlen function for	1
the divisor is not	1
the divisor is known	1
the bit-mask: c2 =	1
the highest instruction set	1
the highest level of	1
the eight-element vectors: for	4
the obstacles to optimization	1
the asmlib function library	1
the asmlib library at	1
the modulo operator %.	1
the loader to a	1
the loader will have	1
the loader calls the	1
the SVML and LIBM	1
the "Intel Math Kernel	1
the "Intel Performance Primitives"	1
the drawbacks of the	2
the drawbacks of C++.	1
the commercial compilers. Mixing	1
the x86-64 instruction set	1
the pipeline and later	1
the pipeline then the	1
the pipeline structure has	1
the flush-to-zero mode rather	1
the flush-to-zero mode unless	1
the dispatcher. // After	1
the queue of pending	1
the {} brackets in	1
the appendix at www.agner.org/optimize/cppexamples.zip	1
the empty throw() specification	1
the C-style type-casting without	1
the C-style type-casting. It	1
the bottleneck is file	1
the bottleneck is elsewhere	1
the directive __declspec(cpu_dispatch(...)). See	1
the lrint function is	1
the lrint function: //	1
the user's time. The	1
the user's time. Other	1
the user's needs. The	1
the area of system	1
the consequence of n	1
the assumption that the	1
the assumption that signed	1
the double. Another problem	1
the image base is	1
the worst-case maximum repeat	1
the individual bits of	1
the diagonal. The elements	1
the diagonal. The first	1
the diagonal. The c	1
the diagonal. Each element	1
the original is destroyed.	1
the original pointer actually	1
the original object is	1
the mirror elements matrix[c][r]	1
the functionality of an	1
the counts. It is	1
the unit-test but has	1
the unit-test does not	1
the implicit pointer known	1
the interval from 0	1
the interval 0 <=	1
the interval [1.0, 2.0)	1
the 33 result is	1
the considerations that are	1
the selected instruction set.	1
the selected version FuncType	1
the techniques of multithreading.	1
the techniques in the	1
the resolution of the	1
the advices may apply	1
the 49 first eight	1
the wrong branch is	1
the wrong branch. Microprocessor	1
the compiler-generated code in	1
the combination of a	1
the distance between rows	1
the C/C++ standard specifies	1
the 124 necessary information	1
the basis for this	1
the contents of the	1
the contents of data	1
the unfortunate consequence that	1
the parameter, and the	1
the time- consuming features	1
the divisions (Division is	1
the dividend is unsigned	1
the dividend is unsigned.	1
the dividend to unsigned	1
the stack, which is	1
the stack, which makes	1
the stack, except for	1
the residual error is	1
the residual error and	1
the residual error for	1
the operations: // Example	1
the operands. The advantages	1
the nearest element to	1
the nearest integer. If	1
the 145 SSE2 instruction	1
the correct result because	1
the correct child class	1
the contrary, the code	1
the contrary, you should	1
the contrary, each thread	1
the Internet at regular	1
the Internet where you	1
the easiest and the	1
the track backwards though	1
the ReadTSC function. 154	1
the same. The maximum	1
the same. This is	1
the same. If the	1
the technical details of	1
the specified instruction set.	1
the specified types (See	1
the history of CPU	1
the microprocessor. Integer division	1
the microprocessor. Multiplication takes	1
the micro-op cache. Compilers	1
the linker. The map	1
the linker. Both code	1
the terminating zero and	2
the numerically largest element	2
the AVX-512 instruction set	1
the market for many	1
the logarithm of each	1
the logarithm would be	1
the logarithm again, but	1
the services only when	1
the product makes sure	1
the $B1$2 label if	1
the flags register into	1
the past history of	1
the object's class or	1
the object's class. Make	1
the context. The keyword	1
the goal of 18	1
the screen. There is	1
the screen. However, such	1
the market. But the	1
the market. Such a	1
the dangers of a	1
the external clock. This	1
the CPU-specific versions of	1
the mouse. The .NET	1
the mouse. This task	1
the relocations in the	1
the early planning stage	1
the heap. The space	1
the FDIV bug causes	1
the decimal point is	1
the hint about no	1
the loop, for example	1
the loop: // Example	1
the minimum supported instruction	1
the destination array. But	1
the CPU, which counts	1
the answers in the	1
the Standard Template Library	1
the const_cast operator here	1
the resulting machine code	1
the programmer. 79 Floating	1
the unsafe code is	1
the movements of objects	1
the executable. Most compilers	1
the lowest of the	1
the parentheses manually. The	1
the exponent, and the	1
the exponent, and fffff	1
the cross-platform compatibility is	1
the comments generated by	1
the conflicting considerations of	1
the 61 function calls	1
the sampling generates too	1
the theoretical possibility that	1
the file, especially if	1
the question when efficiency	1
the denormals-are-zero mode if	1
the branching takes time.	1
the caller to the	1
the caller through a	1
the G values, and	1
the creation of temporary	1
the vectorclass manual for	1
the delay. But if	1
the server. These problems	1
the array, which it	1
the "override" feature. This	1
the "worst case" and	1
the "worst case" counts.	1
the first-in-last-out nature of	1
the alignment. See www.agner.org/optimize/cppexamples.zip	1
the template. The powN	1
the container, then a	1
the container. STL deque	1
the container. Can the	1
the inverted bit-mask: bc	1
the inverted mask. The	1
the index, i. This	1
the time-consumers mentioned in	1
the recursion template<> class	1
the planning phase in	1
the R values first,	1
the fraction. The sign	1
the fraction. For example,	1
the ones that are	1
the ones mentioned in	1
the trivial programming work	1
the symbolic link. Use	1
the ability to define	1
the ability to override	1
the bottlenecks can lead	1
the FMA4 instruction set.	1
the processor). Integer division	1
the processor). Optimizing compilers	1
the corresponding instruction set.	1
the corresponding bitwise operators	1
the generic branch, which	1
the reader has a	1
the reader what is	1
the low-level C language	1
the book "Performance Optimization	1
the word static is	1
the obstacle of possible	1
the IDE on some	1
the factorials don't depend	1
the subroutine for the	1
the time-critical part of	1
the "best case" counts	1
the effort. 7.21 Runtime	1
the effort. Square blocking	1
the overall performance of	1
the overall computation time	1
the factorials, but this	1
the reinstallation work to	1
the 512-bit ZMM registers	1
the disassembly window of	1
the FAQ for the	1
the Xnu project. Some	1
the rows, not the	1
the LLVM is a	1
the importance of structured	1
the Boost collection contains	1
the tolerance may be	1
the transformation of example	1
the transitions between the	1
the stack). ecx now	1
the worst- case conditions.	1
the initial value of	1
the workload between multiple	1
the remaining bits represent	1
the formula: (set) =	1
the usual object file	1
the performance, it is	1
the profile. It may	1
the IDE, for debugging	1
the IEEE standard 754	1
the arrays: // Example	1
the capability to reduce	1
the programmers' time, but	1
the processor) when the	1
the CPU-type is already	1
the even-numbered logical processors	1
the __assume_aligned directive to	1
the lifetime of your	1
the "generate map file"	1
the evaluation of the	1
the bias of the	1
the MKL relies on	1
the majority of end	1
the wheel. The containers	1
the self-explaining menus of	1
the resource-hungry applications to	1
the weekdays. The maximum	1
the loader. 2. Position-independent	1
the strongest optimization option	1
the sizeof operator. The	1
the GetTickCount or QueryPerformanceCounter	1
the original, poorly designed	1
the .exe file, is	1
the burdensome position-independent code	1
the scarcity of registers.	1
the other, then put	1
the rightmost 1-bit removed.	1
the insertion of a	1
the hint, but it	1
the spell checking. Any	1
the likelihood that certain	1
the preprocessor can do	1
the Professional and Enterprise	1
the responsi- bility of	1
the "FDIV bug". The	1
the reciprocal: // Example	1
the post-increment operator i++	1
the oldest Pentium CPUs	1
the grandparent class: class	1
the integer-to-float conversion takes	1
the BTB can cause	1
the label. It uses	1
the framework, during start	1
the end. The reason	1
the STL. Some STL	1
the user-written code with	1
the following: 130 Compile	1
the difference, let's say	1
the truth depends on	1
the ADX instructions for	1
the producer will try	1
the iterator in some	1
the standards for the	1
the broader perspective of	1
the EXCLUSIVE OR operator	1
the representation, except in	1
the computational power of	1
the next. The carry	1
the if-branch in example	1
the "Macro loops" chapter	1
the possibilities for optimization.	1
the <, <=, >	1
the non-reduced expression better	1
the startup code and	1
the exponent: // Example	1
the conversion. The constructor	1
the sign, eee is	1
the GOT, and finally	1
the fundamental laws of	1
the design of small	1
the texts they point	1
the dimensions of the	1
the best-case conditions. All	1
the destructor, if any,	1
the wires that connect	1
the _mm_clflush intrinsic function.	1
the SelectAddMul example (12.4e)	1
the beginning. ret returns	1
the former case x	1
the pipeline. If the	1
the sign-bit if the	1
the devirtualization (see page	1
the attention of software	1
the level- 1 cache.	1
the opposite: Don't put	1
the for-loop: i++; }	1
the complication that the	1
the std::unexpected() function in	1
the strictness is required.	1
the application, while dynamic	1
the essential task of	1
the series: ex xn	1
the pros and cons	1
the leftmost column to	1
the DelayFiveSeconds function will	1
the occurrence is rare.	1
the exact time consumption	1
the circumstances around the	1
the Pentium-II or later	1
the device. Any language	1
the single-thread speed. In	1
the newsgroup comp.lang.asm.x86 for	1
the C99 standard. An	1
the columns. Every fourth	1
the Active Template Library	1
the resultant code will	1
the sequence, where r	1
the kind: "what is	1
the unit- test because	1
the granularity is too	1
the BIOS setup. on	1
the task-specific part of	1
is the function we	1
is the code that	1
is the code from	1
is the time it	1
is the vector operations	1
is the same as	7
is the only one	1
is the only way	1
is the loop condition	1
is the loop increment	1
is the one that	1
is the most efficient	4
is the number of	2
is the variable 85	1
is the first in	1
is the case if	1
is the case then	1
is the Windows Template	1
is the best way	1
is the calculation of	1
is the name of	1
is the reason why	4
is the binary decimals	1
is the old fashioned	1
is the feature information,	1
is the range of	1
is the simplest method,	1
is the situation where	1
is the D language.	1
is the responsibility of	7
is the reciprocal of	2
is the job of	1
is the biggest time-consumer	1
is the combination of	1
is the nearest element	1
is the same. This	1
is the minimum supported	1
is the Standard Template	1
is the exponent, and	1
is the "best case"	1
is the scarcity of	1
is the responsi- bility	1
is the sign, eee	1
is a function that	4
is a function which	1
is a loop count.	1
is a cache of	1
is a class with	1
is a class template	1
is a double precision	1
is a pointer to	1
is a pointer or	1
is a library function	1
is a float or	1
is a multiple of	5
is a clock cycle?	2
is a performance penalty	1
is a very efficient	1
is a very user	1
is a very useful	1
is a very good	1
is a branch that	1
is a way of	1
is a way to	1
is a register variable.	1
is a template class	1
is a new compiler	1
is a useful way	1
is a useful source	1
is a part of	1
is a simple integer	1
is a simple pointer	1
is a simple solution,	1
is a constant known	1
is a large cost	1
is a large overhead	1
is a big waste	1
is a specific advantage	1
is a single task	1
is a common way	1
is a common programming	1
is a common error	1
is a common cause	1
is a common source	1
is a small piece	1
is a good way	1
is a good choice	3
is a power of	16
is a problem with	1
is a problem when	1
is a problem then	1
is a few clock	1
is a list of	2
is a structure where	1
is a standard for	1
is a copy constructor	1
is a counter that	1
is a counter inside	1
is a lot to	2
is a complicated process	1
is a dependency chain	1
is a model that	1
is a disadvantage when	1
is a high power	2
is a reference or	1
is a higher risk	1
is a switch between	1
is a positive integer	1
is a positive integer:	1
is a hot spot	1
is a level-1 data	1
is a limited resource.	1
is a sum of	1
is a total waste	1
is a risk that	1
is a risk factor	1
is a significant contribution	1
is a linear function	2
is a penalty for	1
is a matter of	2
is a series of	1
is a waste of	2
is a pure function.	1
is a frequent cause	1
is a frequent source	1
is a kind of	1
is a try block.	1
is a branch. If	1
is a fixed size	1
is a convenient way	1
is a portability issue	1
is a considerable debate	1
is a compromise between	1
is a valid 63	1
is a loop-invariant code	1
is a loop-invariant expression	1
is a scarce resource.	1
is a float, but	1
is a pointer, but	1
is a chip that	1
is a minor error	1
is a 90% chance	1
is a proxy for	1
is a cheap compiler	1
is a precious resource	1
is a compelling security	1
is a staircase function	1
is a bottleneck. Organize	1
is of course a	1
is of course also	1
is of course inefficient.	1
is of course far	1
is to have a	1
is to use the	2
is to use a	2
is to use static	1
is to use inline	1
is to use string	1
is to make the	2
is to make a	5
is to make sure	1
is to set up	1
is to do it	1
is to do multiple	1
is to return from	1
is to always use	1
is to access an	1
is to avoid long	1
is to compile with	2
is to run the	1
is to store all	1
is to replace arrays	1
is to put measurement	1
is to choose a	1
is to turn on	1
is to find the	1
is to rely on	1
is to save time	1
is to divide the	3
is to mix different	1
is to insert the	1
is to enable the	1
is to keep multiple	1
is to allocate variable-size	1
is to help the	1
is to hold only	1
is to remove the	1
is to declare it	1
is to detect if	1
is to roll out	1
is to wrap the	1
is to join all	1
is to resume after	1
is to combine the	1
is and interpreted line	1
is in mathematical iterations	1
is in fact an	1
is in edx, to	1
is for the sake	1
is for C++ for	1
is for advanced programmers	1
is that the code	1
is that the compiler	2
is that the memory	1
is that the CPU	1
is that the cache	1
is that the value	2
is that the variables	1
is that the software	1
is that the order	1
is that the address	1
is that the user	1
is that the compiled	1
is that the list	1
is that the microprocessor	2
is that the next	1
is that the name	1
is that the overhead	1
is that the choice	1
is that the level-2	1
is that the compatibility	1
is that the linker	1
is that the loader	1
is that the C/C++	1
is that a positive	1
is that it is	4
is that it can	1
is that it may	1
is that it makes	2
is that it does	1
is that it allows	1
is that it adds	1
is that if the	1
is that if you	1
is that x is	1
is that you don't	1
is that all variables	1
is that we can	1
is that access times	1
is that branches can	1
is that modern processors	1
is that communication between	1
is that CParent::Hello() has	1
is that r+i/2 could	1
is // erroneously called	1
is it unusual that	1
is by a const	1
is on a PC	1
is on mathematical applications	1
is as efficient as	3
is as fast as	1
is as follows: Instruction	1
is not the case	1
is not the best	1
is not the optimized	1
is not a good	1
is not a power	1
is not a manual	1
is not a problem	1
is not a safe	1
is not a profiler.	1
is not a textbook	1
is not in the	2
is not in use.	1
is not an advantage	1
is not an optimal	1
is not an Intel,	1
is not an issue	1
is not i but	1
is not possible to	3
is not possible if	1
is not possible when	1
is not less than	1
is not even compatible	1
is not always as	1
is not always possible	1
is not always able	1
is not always true.	1
is not always comparable	1
is not always optimal,	1
is not out of	1
is not part of	1
is not accessed by	2
is not necessary to	2
is not necessary for	1
is not necessary when	1
is not necessary because	1
is not good to	1
is not advantageous to	3
is not advantageous then	1
is not known at	5
is not certain to	1
is not shared between	1
is not quite as	1
is not recommended to	3
is not optimal to	1
is not optimal from	1
is not optimal because	2
is not efficient. If	1
is not needed in	2
is not needed for	1
is not needed if	2
is not divisible by	2
is not predicted well.	1
is not intended for	1
is not clear whether	1
is not needed. Obviously,	1
is not needed. Even	1
is not copied because	1
is not significant as	1
is not standardized across	1
is not included in	1
is not resolved when	1
is not allowed to	1
is not allowed in	1
is not evaluated at	1
is not permissible to	1
is not portable to	1
is not necessarily done	1
is not necessarily newer.	1
is not seen in	1
is not necessary. A	1
is not doubled. A	1
is not optimal. Use	1
is not guaranteed to	1
is not expensive. You	1
is not cached. See	1
is not optimized. Jumps	1
is not separated from	1
is not unusual for	2
is not modified. Unlike	1
is not vacant then	1
is not supported. The	1
is not visible in	1
is not allowed. Non-public	1
is not uncommon for	2
is not recognized in	1
is not human readable	1
is not referenced from	1
is not evaluated, because	1
is not detected until	1
is not standardized. It	1
is not traditionally considered	1
is not satisfactory. The	1
is not met then	1
is an integer because	1
is an integer known	1
is an Intel before	1
is an object that	1
is an array index	1
is an even faster	1
is an important part	1
is an important distinction	1
is an extra cost	1
is an extra iteration	1
is an extra layer	1
is an advantage to	1
is an expression that	2
is an advanced high-level	1
is an integer, then	1
is an integer, so	1
is an arithmetic expression.	1
is an n'th degree	1
is an integer). All	1
is time consuming because	1
is more than one	1
is more efficient to	9
is more efficient in	1
is more efficient than	8
is more important than	1
is more common to	1
is more advantageous the	1
is more advantageous if	1
is more likely to	1
is more complicated to	1
is more complicated in	1
is more efficient. The	1
is more efficient. 64-bit	1
is more difficult for	1
is more relevant to	1
is more safe to	1
is more expensive than	1
is more predictable than	1
is more compact and	1
is more compact if	1
is more complex and	1
is more complex if	1
is more focus on	1
is more difficult. The	1
is more complicated. If	1
is more manageable and	1
is then stored at	1
is then de-referenced in	1
is memory pooling. It	1
is data decomposition. It	1
is different for different	1
is because the critical	1
is because the register	1
is because the file	1
is because it can	1
is because we forgot	1
is because modern CPUs	1
is because algebraic manipulations	1
is because computers have	1
is only a negligible	1
is only a hint	1
is only a minimal	1
is only an advantage	1
is only used in	1
is only one call	1
is only possible if	2
is only called once.	1
is only calculated the	1
is only calculated once,	1
is only safe if	1
is only half a	1
is only 10% of	1
is other code that	1
is other work that	1
is all done in	1
is all 1's when	1
is used is branch	1
is used and this	1
is used and popped	1
is used in the	4
is used in a	1
is used in shared	1
is used in almost	1
is used for the	1
is used for all	1
is used for pointer	1
is used for finding	1
is used for debugging	1
is used for Java	1
is used for storing	1
is used for giving	1
is used for converting	1
is used for prefetching	1
is used for jumping	1
is used for relieving	1
is used or if	1
is used by multiple	1
is used by exception	1
is used as an	2
is used more efficiently.	1
is used when it	1
is used only for	1
is used only within	1
is used inside the	1
is used during program	1
is one of the	3
is one that saves	1
is one set of	1
is no more than	1
is no loop if	1
is no such advantage	1
is no performance cost	1
is no performance penalty	1
is no way the	1
is no way to	2
is no operating system,	1
is no need to	6
is no need for	1
is no extra cost	1
is no big difference	1
is no exception handling.	1
is no check for	2
is no problem if	1
is no advantage to	1
is no cost in	2
is no automatic check	1
is no reason to	5
is no difference in	4
is no difference between	1
is no longer used.	1
is no graphics processing	1
is no checking for	1
is no clear correspondence	1
is no risk of	3
is no penalty for	1
is no easy way	2
is no try block	1
is no heavy marketing	1
is no loop-carried dependency	1
is no 51 performance	1
is no doubt obtained	1
is no guarantee that	1
is set in the	1
is set by using	1
is floating point. The	1
is most efficient if	1
is most often true	1
is most useful for	1
is most appropriate for	1
is using a six	1
is using one register	1
is double There is	1
is float 140 a	1
is two or more	1
is number one in	1
is also a cache	1
is also a language	1
is also a common	1
is also a kind	1
is also used in	1
is also used for	1
is also used when	1
is also possible to	2
is also called from	1
is also called Single-Instruction-Multiple-Data	1
is also useful in	1
is also useful for	1
is also available in	1
is also available from	1
is also likely to	1
is also quite efficient,	1
is also recommended to	1
is also relevant to	1
is also discussed which	1
is also treated like	1
is also deallocated. Failure	1
is also de-allocated. This	1
is efficient for simple	1
is efficient when b	1
is many times faster	1
is possible to use	1
is possible to make	5
is possible to do	4
is possible to avoid	1
is possible to compile	1
is possible to get	1
is possible to calculate	1
is possible to store	1
is possible to write	1
is possible to replace	2
is possible to give	1
is possible to reduce	1
is possible to start	1
is possible to insert	1
is possible to implement	2
is possible to vectorize	1
is possible to obtain	1
is possible to utilize	1
is possible to construct	1
is possible to express	1
is possible in some	1
is possible in Linux).	1
is clock cycles per	1
is so long that	1
is so important and	1
is so large that	1
is so big that	1
is so much stronger	1
is so small that	1
is so complicated that	1
is so high that	2
is so kludgy that	1
is 2 GHz then	1
is very time consuming.	1
is very useful when	1
is very important to	2
is very important for	1
is very large or	1
is very small or	1
is very likely to	1
is very likely that	1
is very fast if	1
is very inefficient because	1
is very little overhead	1
is very inefficient. Linear	1
is very fast. The	1
is very limited. There	1
is very problematic because	1
is very old-fashioned. Development	1
is long because the	1
is long does not	1
is branch prediction. Modern	1
is member of the	1
is faster the smaller	1
is faster to use	1
is faster to first	1
is faster to access	1
is faster to calculate	1
is faster to compose	1
is faster // Still	2
is faster if the	4
is faster if a	1
is faster with signed	1
is faster than the	4
is faster than a	1
is faster than x	1
is faster than from	1
is faster than other	1
is faster than signed	1
is faster than division	2
is faster than reading	1
is faster than calculating	1
is faster than multiplying	1
is faster than random	1
is faster than 15.1b,	1
is faster when columns	1
is faster because the	1
is stored in a	1
is stored in memory	1
is stored in stack	1
is stored in x,	1
is stored in memory,	1
is stored in y.	1
is stored on the	1
is stored as the	1
is stored as a	3
is stored at a	1
is stored (or if	1
is called the branch	1
is called a frame	1
is called a leaf	1
is called a loop-carried	1
is called and the	1
is called and how	2
is called in a	1
is called for the	1
is called by the	1
is called with many	1
is called on an	1
is called when the	1
is called from the	1
is called from only	1
is called from many	1
is called only from	1
is called CPU dispatching.	1
is called before the	1
is called register renaming.	1
is called stack unwinding.	1
is called through a	1
is called name mangling.	1
is called core clock	1
is called square blocking	1
is called garbage collection.	1
is called once or	1
is called CodeAnalyst. These	1
is called VTune; AMD's	1
is 4 bytes in	1
is critical when there	1
is 8 kb =	1
is less than the	2
is less than 128	1
is less than 2n	1
is less than 1/50	1
is less efficient if	1
is less efficient than	5
is less efficient when	1
is less useful in	1
is less important on	1
is less advantageous to	1
is less efficient. You	1
is less reliable. Event-based	1
is unsigned Examples: //	1
is often the case	1
is often a lot	1
is often a disadvantage	1
is often an obstacle	1
is often more efficient	1
is often more reliable	1
is often possible to	2
is often faster to	1
is often faster than	1
is often useful to	1
is often necessary to	2
is often implemented as	1
is often easier to	1
is often easier said	1
is often determined by	1
is often preferable to	1
is often reorganized in	1
is often seen, is	1
is how the if	1
is template metaprogramming so	1
is useful to know	1
is useful in situations	1
is useful for the	1
is useful for library	1
is useful for calling	1
is useful for checking	1
is useful for random	1
is useful for preventing	1
is useful if the	1
is useful on servers	1
is useful when the	1
is useful because it	1
is useful whenever a	1
is even more important	1
is sure to be	1
is sure to work	1
is always 0 or	1
is always position-independent because	1
is always inlined even	1
is always resolved at	1
is always enabled in	1
is always one, and	1
is always true/false Loopunrolling	1
is always normalized, if	1
is 16 bits wide,	1
is out of range	2
is out of range.	1
is 32 bits in	1
is 32 bits, so	1
is file access or	1
is part of the	1
is part of a	1
is 0 and the	1
is 0 for positive	1
is short in duration	1
is available in the	1
is available in different	1
is available in newer	1
is available for many	1
is available for free	1
is available for free.	1
is available then it	1
is available then each	1
is available from www.intel.com.	1
is available from www.agner.org/optimize/testp.zip.	1
is constant and known	1
is important to the	1
is important to have	1
is important to make	1
is important to do	1
is important to consider	1
is important to economize	3
is important to distinguish	1
is important to study	1
is important to focus	1
is important to decide	1
is important to note	1
is important to weigh	1
is important to remember	1
is important to realize	1
is important for the	1
is important that the	2
is important that all	1
is accessed in more	1
is accessed by several	1
is accessed with a	1
is accessed from within	1
is accessed most efficiently	1
is accessed much faster.	1
is accessed through a	1
is accessed quite fast.	1
is accessed after it	1
is large or constant.	1
is large then it	1
is large because the	1
is compiled to binary	1
is compiled and distributed	1
is compiled in multiple	1
is compiled for the	1
is compiled for a	1
is compiled for old	1
is compiled with AVX	1
is compiled as position-independent	1
is compiled when it	1
is compiled into an	1
is compiled without AVX	1
is big and is	1
is big enough to	1
is big enough for	2
is best for all	1
is best when the	1
is best suited for	1
is necessary to use	1
is necessary to do	1
is necessary to first	1
is necessary to test	1
is necessary to look	1
is necessary to allocate	1
is necessary to compromise	1
is necessary to reload	1
is necessary to query	1
is necessary to adhere	1
is necessary for verifying	1
is necessary if the	1
is necessary here to	1
is specific to Microsoft	1
is much more efficient	1
is much more dramatic	1
is much faster. In	1
is much faster. Division	1
is much slower than	1
is much simpler in	1
is much faster, except	1
is common to make	2
is common for software	1
is common practice to	1
is exception safe if	1
is allocated is also	1
is allocated and the	1
is allocated dynamically (with	1
is allocated separately. The	1
is small and always	1
is small and changing	1
is small or if	2
is small then a	1
is small enough to	1
is good to do	1
is good for the	2
is good if you	1
is done in connection	1
is done by the	1
is done by copying	1
is done by declaring	1
is done with the	1
is done with an	1
is done at the	1
is done at runtime	1
is done only once.	1
is done every time	1
is done simply by	1
is therefore a good	1
is therefore not possible	1
is therefore more safe	1
is therefore possible for	1
is therefore important to	1
is therefore necessary to	3
is therefore certain to	1
is therefore recommended to	1
is therefore recommended that	1
is therefore equal to	1
is therefore becoming more	1
is therefore safer to	1
is optimized is to	1
is optimized for accessing	1
is optimized away. Note	1
is inside a loop	1
is inside another loop	1
is explained on page	1
is explained below on	1
is calculated the fastest	1
is calculated in advance	1
is calculated as ((a+b)+c)+d.	1
is calculated from the	3
is calculated from a	1
is calculated at compile	1
is calculated fast if	1
is calculated twice because	1
is calculated first, then	1
is calculated internally as	1
is 128 bits (XMM)	1
is 128 bytes or	1
is four places back.	1
is another security problem.	1
is advantageous to use	4
is advantageous to do	1
is advantageous to replace	1
is advantageous to roll	1
is advantageous in most	1
is advantageous in cases	1
is advantageous if the	2
is advantageous because registers	1
is advantageous if, and	1
is implemented in the	1
is implemented in a	2
is implemented with an	1
is implemented as a	2
is implemented simply by	1
is implemented internally as	1
is known to be	4
is known with certainty	1
is known from a	1
is known at compile	5
is known at compile-time	1
is known which version	1
is known before the	1
is supported in the	1
is supported in such	1
is supported in Windows	1
is supported by the	3
is supported by all	1
is supported by most	1
is supported by some	1
is supported by both	1
is supported on all	1
is eight in 32-bit	1
is likely to be	8
is likely to use	1
is likely to work	1
is likely to cause	1
is likely to run	1
is likely to generate	1
is likely to require	1
is likely to go	1
is likely to execute	1
is likely to fail	1
is likely to consume	1
is likely to experience.	1
is likely in a	1
is likely that the	1
is likely that memory	1
is doing an addition	1
is doing multiple logically	1
is doing two iterations	1
is 1 0.5ns. 2GHz	1
is simply the address	1
is simply a matter	5
is simply not appropriate	1
is simply an integer	1
is simply no difference	1
is simply optimized away	1
is simply predicted to	1
is simply identical. For	1
is able to do	1
is able to inline	1
is able to overlap	1
is certain to be	1
is certain to have	1
is certain that a	1
is shared between multiple	1
is quite efficient thanks	1
is quite simple in	1
is quite certain that	1
is quite difficult to	1
is quite inefficient. The	1
is quite expensive -	1
is quite inefficient, and	1
is quite tedious indeed.	1
is used. The operating	1
is used. The advantages	2
is used. A newer	1
is used. It is	1
is used. It takes	1
is used. For example,	1
is used. An optimizing	1
is used. However, this	1
is used. Dynamic linking	1
is recommended to use	8
is recommended to make	1
is recommended to return	1
is recommended to calculate	1
is recommended to put	1
is recommended to turn	3
is recommended to enable	2
is recommended to try	1
is recommended to specify	1
is recommended to wrap	1
is recommended to place	1
is fast and efficient,	1
is fast anyway and	1
is fast enough. A	1
is optimal to use	1
is optimal to inline	1
is optimal in most	1
is optimal for each	1
is optimal on the	1
is optimal only on	1
is typically between 5	1
is typically 64 bytes	1
is typically 64 bytes.	1
is typically implemented by	1
is typically aligned by	1
is typically loaded at	1
is preferably implemented on	1
is automatically deallocated when	1
is implementation dependent. The	1
is never stored in	1
is never used. A	1
is never used. Whenever	1
is never called. This	1
is never called. Unfortunately,	1
is never changed. This	1
is high and decreased	1
is high then the	1
is zero if all	1
is zero by testing	1
is zero } We	1
is Microsoft Visual Studio.	1
is Microsoft Foundation Classes	1
is running in the	1
is running on an	1
is running on, while	1
is running on. Replace	1
is running at, rather	1
is n places back,	1
is better than the	1
is better than its	1
is too important to	1
is too big for	1
is too big. 7.14	1
is too fine then	1
is too high. It	1
is too late. You	1
is needed a few	1
is needed in this	1
is needed for other	1
is needed for setting	1
is needed only if	1
is difficult to predict	2
is difficult to implement	1
is difficult to understand	1
is difficult for the	3
is transferred to the	1
is transferred as an	1
is transferred from one	1
is transferred at runtime	1
is longer than a	1
is aligned #pragma vector	1
is actually more than	1
is actually quite convenient.	1
is actually used. No	1
is actually needed by	1
is actually hidden behind	1
is later ported to	1
is calling itself in	1
is declared or created	1
is declared by specifying	1
is higher for single	1
is bigger than the	3
is divisible by the	4
is divisible by 16	1
is divisible by 16.	1
is 512 kb /	1
is 512 kb, 8	1
is usually the order	1
is usually not able	1
is usually faster to	1
is usually called in	1
is usually called before	1
is usually much faster	1
is usually done in	1
is usually higher than	1
is usually predicted well	1
is usually inlined if	1
is usually divided into	1
is called. The compiler	1
is called. The values	1
is called. This is	1
is called. This has	1
is called. If virtual	1
is called. You may	1
is called. I have	1
is called. Example: //	1
is called. Lazy binding	1
is called. 118 12.7	1
is based on the	1
is based on BSD,	1
is based mainly on	1
is made to the	1
is made to recover	1
is made very big	1
is just a matter	1
is just an arbitrary	1
is just long enough	1
is just easier to	1
is smaller and closer	1
is smaller in a	1
is smaller because relative	1
is relevant for the	1
is relevant when the	1
is relevant when CPU	1
is replaced by the	1
is replaced by its	1
is replaced by x<<3,	1
is negative or -0	1
is predicted if the	1
is predicted well. A	1
is predicted well, of	1
is loaded or at	1
is loaded into memory.	1
is loaded cannot be	1
is loaded rather than	1
is compatible with a	1
is compatible with that	1
is compatible with CPUs	1
is compatible with old	1
is 1. This '1'	1
is intended to be	1
is intended to mimic	1
is intended for CPU	1
is intended for array	1
is intended for variables	1
is intended for 32-bit	1
is intended for detecting	1
is intended as a	1
is intended for. In	1
is intended for. Some	1
is avoided for these	1
is slow // Division	1
is slow // Modulo	1
is slow unless the	1
is inefficient to use	2
is inefficient because the	1
is inefficient because of	1
is inefficient because it	1
is described in more	1
is described below. Make	1
is particularly critical. A	1
is particularly interesting because	1
is particularly risky because	1
is particularly tricky. I	1
is given in example	1
is given as a	1
is outside the critical	1
is outside this interval,	1
is limited is to	1
is limited to well-tested	1
is limited and there	1
is limited by the	1
is limited by physical	1
is sometimes more efficient	1
is sometimes possible to	1
is inlined - no	1
is still the same	1
is still the fastest	1
is still frustrated by	1
is safe to use	1
is safe and flexible,	1
is further explained in	1
is clear that static	1
is clear that p	1
is obtained if the	1
is obtained by using	1
is obtained by choosing	1
is obtained by dropping	1
is obtained with the	1
is obtained with virtual	1
is obtained when the	1
is possibly more serious	1
is overloaded or the	1
is possible. A compiler	1
is OS independent and	1
is needed. The C++	1
is needed. Example: //	1
is needed. These complicated	1
is needed. All the	1
is needed. Objects inside	1
is changed to c	1
is changed so that	1
is true that some	1
is true 50% of	1
is true 10% of	1
is initialized or comes	1
is initialized when the	2
is initialized only the	1
is discussed on page	1
is discussed which of	1
is discussed how to	2
is discussed below. Signed	1
is copied to the	1
is copied to a	1
is copied by assignment,	1
is copied from static	1
is defined in a	2
is defined inside a	1
is Visual Basic .NET,	1
is rarely possible for	1
is rarely necessary to	1
is rarely needed anyway.	1
is rarely needed. 11	1
is rarely enough to	1
is rarely worth the	1
is easier to write	1
is easier to maintain.	1
is easier to understand	1
is identical to one	1
is identical to some	1
is similar to the	1
is similar to a	1
is significant if a	1
is something that can	1
is invalid when i	1
is within a certain	1
is used, for example,	1
is used, it is	1
is used, then use	1
is used, then there	1
is used, but not	1
is organized in a	1
is organized if you	1
is added to the	3
is added to a	1
is added to p	1
is approximately three times	1
is approximately 12 -	1
is approximately six in	1
is easy to make	1
is easy to trace	1
is easy to port	1
is chosen for the	1
is chosen as the	1
is chosen only when	1
is slightly more efficient	2
is slightly less compact.	1
is independent of the	2
is low in order	1
is enabled. The compiler	1
is enabled. The advantage	1
is enabled. A more	1
is enabled. There are	1
is enabled. Conversion from	1
is enabled. Conversions between	1
is enabled. Typically, the	1
is enabled. Volatile The	1
is enabled. Few compilers	1
is near the maximum	1
is provided in manual	1
is provided as a	1
is provided as an	1
is inefficient. Division, square	1
is critical. The fastest	1
is critical. The worst	1
is critical. Optimizing for	1
is available. The number	1
is available. The best	1
is available. The older	1
is brand new today	1
is executed. The compiler	1
is executed. This has	1
is executed. An example	1
is executed. Furthermore, you	1
is executed. Optimizes very	1
is executed. Without static,	1
is faster. In the	1
is pure if the	1
is pure __attribute(( const))	1
is fully standardized and	1
is fully portable in	1
is mispredicted only when	3
is mispredicted only one	1
is standardized allows us	1
is included in the	1
is included in a	1
is included for the	1
is 12 bytes. The	1
is now as follows.	1
is lower than a	1
is converted to a	2
is converted by the	1
is equally fast whether	1
is equally efficient. Simple	1
is designed for a	1
is designed for generality	1
is fragmented and scattered	1
is fast. Value of	1
is fast. Calculating the	1
is fastest on different	1
is fastest because you	1
is required for finding	1
is required for putting	1
is almost always advantageous	1
is almost certain to	1
is almost certain that	1
is almost independent of	1
is preferred to use	1
is preferred to declare	1
is preferred when speed	1
is interpreted in the	1
is interpreted as an	1
is interpreted again and	1
is exactly as efficient	1
is exactly identical for	1
is determined by the	2
is determined where the	1
is resolved when the	1
is resolved at compile	1
is resolved at runtime.	1
is poorly predictable then	1
is poorly predictable. For	1
is poorly predictable, then	1
is important. This can	1
is important. This manual	1
is important. A language	1
is important. Some systems	1
is important. An important	1
is allowed only for	1
is distributed and stored	1
is distributed as it	1
is distributed between multiple	1
is generally possible on	1
is generally faster and	1
is called, a dispatch	1
is called, it is	1
is called, it can	1
is called, it allocates	1
is called, while the	1
is free and open	1
is far from the	1
is hardly any performance	1
is hardly worth the	1
is hardly ever used,	1
is waiting for response	1
is waiting for response.	1
is available, 256 bits	1
is measured in this	1
is measured with millisecond	1
is measured simply by	1
is Intel's term for	1
is equal to the	3
is compact and takes	1
is spent in the	1
is spent on reading	1
is 15 on the	1
is expected to replace	1
is convenient to make	1
is costly if XMM	1
is costly when it	1
is efficient, but risky.	1
is poor if data	1
is evaluated only when	1
is deallocated when the	1
is permissible when it	1
is 4. So the	1
is obvious and the	1
is swapped with element	2
is portable in the	1
is becoming increasingly important.	1
is executed only once	1
is executed even though	1
is executed 10 times	1
is finished. The optimal	1
is finished. Example: //	1
is finished. Obviously, this	1
is finished. Register allocation	1
is split between several	1
is created or modified.	2
is already in the	1
is already known then	1
is already known at	1
is nothing to gain	1
is nothing to clean	1
is increased when the	1
is nonzero } else	1
is equivalent to a	1
is relatively expensive, while	1
is inefficient, of course,	1
is inefficient, especially in	1
is inefficient, however, when	1
is necessarily accessed through	1
is safer to use	1
is safer to calculate	1
is larger than the	1
is unfortunately very common.	1
is divided into many	1
is valid only until	1
is seen in 64	1
is contiguous with other	2
is necessary. 101 Multithreading	1
is increasing faster than	1
is AND'ed with the	1
is AND'ed with this	1
is AND'ed with all	2
is definitely the preferred	1
is doubled. The time	1
is doubled. The length	1
is doubled. This makes	1
is true, and all	1
is true, then the	1
is true, which is	2
is __asm int 3;	1
is currently not up	1
is currently only supported	1
is better. Whenever a	1
is preferable to allocate	1
is preferable for speed-critical	1
is enabled there is	1
is enabled (single precision	1
is sufficiently accurate for	1
is bad The C/C++	1
is said here about	2
is declared. If the	1
is declared. An object	1
is declared. Therefore, it	1
is declared. Avoid multiple	1
is true. The trick	1
is running. The main	1
is running. If there	1
is serial in the	1
is serial because each	1
is guaranteed to be	2
is commonly the case	1
is extended to 64	1
is contained in p1	1
is going to be	1
is cached. Usually it	1
is unsigned. The following	1
is treated as an	1
is treated as bigger	1
is prevented from assuming	1
is prevented from cleaning	1
is seldom used. It	1
is double. Here we	1
is 50% of the	1
is illustrated in example	2
is optimized. We cannot	1
is coded as an	1
is coded as _mm_empty()	1
is represented with 64	1
is kept in the	1
is selected if the	1
is multiplied by the	1
is inferior to the	1
is unable to predict	1
is unable to vectorize	1
is finished using the	1
is run. The time	1
is run. Examples include	1
is run. Both the	1
is simpler than a	1
is simpler when using	1
is deleted when the	1
is deleted properly and	1
is slow, you know).	1
is slow, then the	1
is slow, difficult to	1
is performed on a	1
is performed on multiple	1
is removed from the	1
is unfortunate because truncation	1
is loaded. This method	1
is implemented. The highest	1
is implemented. The recursion	1
is annoying to the	1
is elsewhere then there	1
is filled up, which	1
is supplied with Intel's	1
is translated to just	1
is translated into machine	1
is correct or if	1
is stored. This makes	1
is inlined. An alternative	1
is probably the most	1
is beyond the scope	3
is infinity or NAN.	1
is false, then the	1
is negligible when the	1
is negligible because there	1
is best. These cases	1
is best. 3.11 Other	1
is odd and you	1
is handled at half	1
is handled separately: for	1
is implicitly converting a	1
is valid. For example,	1
is valid. For example:	1
is valid. Re-interpreting the	1
is slow. If the	1
is slow. Value of	1
is limited. Example: //	1
is limited. Dynamic memory	1
is ported to multiple	1
is big. The compiler	1
is extremely complicated and	1
is extremely costly to	1
is extremely inefficient, (4)	1
is certainly a very	1
is certainly more convenient	1
is certainly something that	1
is indeed a very	1
is indeed vectorized as	1
is sufficient to have	1
is sufficient to make	1
is evicted before we	1
is impossible to work	1
is mostly compatible with	1
is type-casted to a	1
is 1024 bytes, so	1
is 400 here. Any	1
is freed when the	1
is biased allows us	1
is reused again and	1
is compiled. This is	1
is compiled. #if directives	1
is volatile. The volatile	1
is supported. For example,	1
is pure. Virtual functions	1
is bypassed by any	1
is -0 (zero with	1
is achieved when none	1
is inserted in the	1
is specified. The code	1
is overwritten, possibly in	1
is false. Likewise, you	1
is small. The number	1
is unsafe because serious	1
is concentrated on CPU	1
is concentrated on arranging	1
is capable of making	1
is worthwhile to invest	1
is eliminated. Loop unrolling	1
is profitable to use	1
is unstable or if	1
is required. The Intel	1
is required. See page	1
is 8192 / 4	1
is lost. This dilemma	1
is obviously influenced by	1
is allowed. The code	1
is (columns * sizeof(float))	1
is defined. This can	1
is known. This information	1
is known. Example: //	1
is restarted anyway. Software	1
is dividing repeatedly with	1
is fed into the	1
is relocated (rebased) once	1
is consistent for the	1
is created. There is	1
is started. It takes	1
is deleted. Smart pointers	1
is needed: // Example	2
is loaded, the loader	1
is loaded, but waits	1
is 0. The constant	1
is rolled out by	1
is busy doing the	1
is busy concentrating on	1
is updated. Most copy	1
is wasted on software	1
is wasted on runtime	1
is stronger when they	1
is fast, compact, and	1
is somewhat more complicated	1
is invalid. Boolean variables	1
is heavily loaded. 21	1
is available: // Example	2
is closed. The same	1
is closed. The file	1
is avoided. The disadvantage	1
is 95 not needed.	1
is repeated until the	1
is accessed, and this	1
is accessed, it is	1
is inherently parallel because	1
is safer. Type casting	1
is 102 also useful	1
is terminated. The purpose	1
is moved, which may	1
is saturated. This can	1
is incremented. See page	1
is insufficient. The user	1
is unacceptable to the	1
is unchanged across a	1
is compiling. This prevents	1
is enabled: // Example	1
is over. Virtualization is	1
is dead code if	1
is InstructionSet().The following example	1
is correlated with preceding	1
is ecx+eax*4. The result	1
is system-independent, in another	1
is occupied throughout the	1
is referencing it twice.	1
is unreasonably large. 156	1
is maintained for the	1
is aiming at explaining	1
is pushed on the	1
is requested. See page	1
is delayed for several	1
is assumed that the	1
is (int)(&list[100]) = (int)(&list[0])	1
is mirrored in the	1
is closest to the	1
is utilized appropriately. Users	1
is developing so fast	1
is supposed to call	1
is copyrighted by Agner	1
is acceptable. 3.6 Dynamic	1
is unnecessarily wasteful in	1
is caught by the	1
is checked before storing.	1
is happening. It is	1
is OK, however, to	1
is opposite). 9.10 Cache	1
is reset or goes	1
is unchanged, while the	1
is reserved for dynamic	1
is ambiguous and may	1
is counting clock cycles	1
is provoked here in	1
is repetitive. The simplest	1
is artificially changed to	1
is advisable to make	1
is inexact if b	1
is exact. Multiple divisions	1
is created, deleted, copied	1
is organized. Floating point	1
is reflected, first and	1
is terminated and the	1
is returned. There is	1
is pipelined, as explained	1
is taken. A const	1
is taken, i.e. if	1
is clearly better. The	1
is destroyed. In 50	1
is shut down and	1
is re-allocated every time	1
is signed, or by	1
is 83 called faster	1
is virtually no cost	1
is expanded like a	1
is fastest. The typical	1
is distributed. The intermediate	1
is unrealistic that you	1
is deprecated. This is	1
is strongly recommended to	1
is obvious. See the	1
is obvious, then it	1
is servicing. A command	1
is inferior. A model	1
is cached, but several	1
is rare. Testing for	1
is "undefined". This allows	1
is admittedly very kludgy.	1
is 8*1024/64 = 128.	1
is stored? If the	1
is Borland's now discontinued	1
is Perl. Several modern	1
is wrong, but it	1
is rebooted. To prevent	1
is unlikely that the	1
is profitable. On the	1
is considerable. If two	1
is costless. It is	1
is responsible for creating	1
is tempting to fine-	1
is minimized. For example,	1
is minimized if the	1
is re-loaded from memory	1
is incurred on all	1
a is true 50%	1
a is true, which	1
a is true. The	1
a is false. Likewise,	1
a a & ~a	1
a a && false	1
a a | -1	1
a a ^ -1	1
a to the constant	1
a to be signed.	1
a to this number	1
a to double before	1
a to b for	1
a to b memcpy(b,	1
a to unsigned in	1
a to zero for	1
a to zero memset(a,	1
a and b in	2
a and b are	3
a and b have	2
a and b will	1
a and b different	1
a and b because	2
a and b should	1
a and b double	1
a and b take	1
a and b overlap.	1
a and r are	1
a and b, and	1
a and edx contains	1
a and b. But	1
a in a column-wise	1
a = a -	1
a = a x	1
a = a *	8
a = x >	1
a = b +	3
a = b *	7
a = b /	4
a = b %	3
a = b ?	1
a = a, a	1
a = b; A	1
a = b; }	1
a = c; }	1
a = 0, b	1
a = 0, b;	1
a = (unsigned int)b	4
a = parabola (2.0f);	1
a = 0x2710 and	1
a = (b ==	1
a = select(b >	2
a = 1.0f +	1
a = sin(0.8); The	1
a = -100, b	1
a = lookup[b]; If	1
a = _mm_or_si128(c2, bc);	1
a = OneOrTwo5[b!=0]; will	1
a = (int)d; //	1
a = (b*c)/d, it	1
a = Func1(2); ...	1
a = -1.0E8, b	1
a = 5.0f; b	1
a = OneOrTwo5[b &	1
a = _mm_blendv_epi8(bc, c2,	1
a = CriticalFunction(b, c);	1
a = 10000, then	1
a = b++; will	1
a = ++b; the	1
a = (*CriticalFunction)(b, c);	1
a = Multiply(10,8); b	1
a = select_gt(b, zero,	1
a = FactorialTable[b]; ...	1
a function is by	1
a function is not	2
a function is called	1
a function is compiled	1
a function is advantageous	1
a function is pure	1
a function is called,	2
a function of a	1
a function to be	1
a function in the	1
a function in a	6
a function in case	1
a function for this	1
a function for different	1
a function for register	1
a function that is	1
a function that has	1
a function that does	1
a function that calls	1
a function that doesn't	3
a function that allocates	1
a function are stored	2
a function can throw.	1
a function or in	1
a function if the	1
a function if it	1
a function with a	1
a function which cannot	1
a function which transposes	1
a function but outside	1
a function should also	1
a function should preferably	1
a function should never	1
a function pointer to	2
a function pointer which	1
a function pointer typically	1
a function pointer points	1
a function into multiple	1
a function library or	1
a function library with	1
a function return value.	1
a function call to	1
a function call by	1
a function call with	1
a function template because	1
a function through a	1
a function uses by	1
a function parameter is	1
a function parameter and	1
a function just because	1
a function library. 78	1
a function call. (2)	1
a function library, but	1
a function opens a	1
a function parameter, or	1
a function prototype to	1
a function local: 1.	1
a code that current	1
a code that copies	1
a code then it	1
a code one line	1
a code version performs	1
a - n.a. -	2
a - n.a. x	1
a - n.a. a-a	1
a - n.a. a*0	1
a - n.a. (-a)*(-b)	1
a - 1; }	2
a - a-a =	1
a - a*0 =	1
a - 0/a =	1
a - a/1 =	1
a compiler to always	1
a compiler to reduce	1
a compiler that can	1
a compiler that supports	1
a compiler can look	1
a compiler with C++0x	1
a compiler may change	1
a compiler option for	1
a compiler generates to	1
a compiler warning for	1
a x - x	1
a time and it	1
a time and show	1
a time and afterwards	1
a time in vectors	1
a time because each	1
a time consumer if	1
a time packed into	1
a time measure. This	1
a use situation where	1
a more efficient way	1
a more clear and	1
a more clear program	1
a more well-structured program	1
a more distant future.	1
a will be 1	1
a will never be	1
a memory address that	2
a memory address which	1
a memory block that	1
a memory block turns	1
a memory pointer. This	1
a memory buffer and	1
a memory address. Pointer	1
a memory pool. 15	1
a memory heap. The	1
a memory pool, as	1
a data member is	1
a data member of	1
a data member pointer	1
a data member relative	1
a program is an	1
a program is compiled	1
a program is bigger	1
a program and concentrate	1
a program for the	1
a program that already	1
a program than to	1
a program may in	1
a program you want	1
a program then you	1
a program has one	1
a program has two	1
a program has many	2
a program has several	1
a program has too	1
a program where the	1
a program uses many	1
a program contains no	1
a program contains many	1
a program contains calls	1
a program reads from	1
a program package is	1
a program repeats 1000	1
a program chooses between	1
a program saying that	1
a program executable: a	1
a program creates or	1
a program dictates that	1
a vector of eight	1
a vector of e.g.	1
a vector of (0,0,0,0,0,0,0,0)	3
a vector of vectors,	1
a vector of (2,2,2,2,2,2,2,2)	3
a vector or the	1
a vector register which	1
a vector implementation is	1
a vector goes faster	1
a vector just as	1
a vector register. The	1
a vector simultaneously. This	1
a vector register, add	1
a make utility. The	1
a make utility. It	1
a different function library.	1
a different code address	1
a different compiler by	1
a different way or	1
a different operating systems	1
a different type by	1
a different implementation when	1
a different name for	1
a different platform is	1
a different compiler. Object	1
a different thread. If	1
a different way. There	1
a different address. A	1
a different module or	1
a different kind of	1
a different array. //	1
a different type. Likewise,	1
a different meaning. 2.	1
a different meaning for	1
a only when b	1
a CPU of unknown	1
a CPU with the	1
a CPU with a	1
a CPU with multiple	1
a CPU dispatcher that	1
a CPU dispatcher based	1
a CPU dispatcher updated.	1
a loop is interpreted	1
a loop of ADC	1
a loop and use	1
a loop in a	1
a loop for trivial	1
a loop that does	1
a loop that contains	1
a loop or not.	1
a loop if it	1
a loop if this	1
a loop with multiple	1
a loop with few	1
a loop where each	1
a loop where almost	1
a loop contains floating	1
a loop counter can	2
a loop counter by	1
a loop count down	1
a loop automatically if	1
a loop needs a	1
a loop becomes a	1
a loop depends on	1
a loop repeats a	1
a loop manually unless	1
a loop counter, comparing	1
a loop count. The	1
a loop counter: //	1
a one parameter. Further	1
a cache is organized	1
a cache of 8	1
a cache that can	1
a cache line that	1
a cache line will	1
a cache line. This	1
a cache line. Some	1
a cache line. 132	1
a cache line: static	1
a cache miss. But	1
a set of test	1
a set of special	1
a class is declared	1
a class are stored	1
a class are accessed	1
a class or structure	3
a class or structure.	1
a class with a	2
a class data member	1
a class member function	1
a class member function.	1
a class template rather	1
a class need not	1
a class Variables declared	1
a class containing the	1
a class definition. Inlining	1
a class (also called	1
a floating point number	5
a floating point variable	1
a floating point counter	1
a floating point multiplication	1
a floating point addition	2
a floating point addition,	1
a floating point addition.	1
a floating point comparison.	1
a double by modifying	1
a double which gives	1
a double takes 8	1
a double without loading	1
a double precision constant.	1
a double uses 64	1
a pointer of a	1
a pointer to the	4
a pointer to a	5
a pointer to an	1
a pointer to one	2
a pointer to its	1
a pointer to another	1
a pointer to it.	1
a pointer in an	1
a pointer in assembly	1
a pointer can be	1
a pointer or a	2
a pointer or reference	7
a pointer or reference,	2
a pointer then its	1
a pointer stored in	1
a pointer does not	1
a pointer well before	1
a pointer points to	1
a + b than	1
a + b +	4
a + 2 thenaandbcannot	1
a + 1; }	4
a + 1; x[1]	1
a + 1; 69	1
a + 1.0f; The	1
a + b;} };	1
a library of math	1
a library function from	1
a library function which	1
a library other than	1
a float or double	2
a float uses 32	1
a float variable. Example:	1
a multiple of the	8
a multiple of 0x800	1
a number of possible	1
a number of arrays	1
a number of dangers	1
a number of sources.	1
a number to be	1
a static object defined	1
a static part of	1
a static link library	1
a static library. A	1
a static buffer or	1
a static library, except	1
a 64-bit integer rather	1
a 64-bit double is	1
a 64-bit double 32	1
a 64-bit version for	1
a 64-bit shared object	1
a 64-bit double, then	1
a C++ program that	1
a C++ program. This	1
a C++ program, you	1
a * 2; }	2
a * 2; return	2
a * 3; }	2
a * 3; return	2
a * (2n /	1
a * a;} float	1
a * 2.5; //	1
a possible point of	1
a possible minor increase	1
a clock cycle is	3
a clock cycle on	1
a clock cycle? In	1
a clock cycle? ......................................................................................	1
a version control tool.	1
a value is less	1
a value that is	2
a value from a	1
a variable is the	1
a variable is never	2
a variable in memory	1
a variable in memory,	1
a variable in parts,	1
a variable for test	1
a variable that could	1
a variable can be	1
a variable or object	2
a variable from address	1
a variable because optimizing	1
a variable which is	1
a variable number of	1
a variable even smaller	1
a variable through a	1
a variable global if	1
a variable until the	1
a variable declaration to	1
a 2 GHz CPU.	1
a table of pointers	3
a table of constants	1
a table of jump	1
a table in the	1
a table // of	2
a table with two	1
a table lookup if	1
a table lookup. For	1
a table lookup: //	2
a performance test that	1
a performance penalty when	1
a very efficient way	1
a very efficient solution	1
a very long time	1
a very user friendly	1
a very useful way	1
a very large number	1
a very large shared	1
a very large runtime	1
a very large positive	1
a very big problem	1
a very good choice	1
a very high resolution	1
a very inefficient way.	1
a very inefficient solution.	1
a very low repeat	1
a very dramatic effect	1
a very contrived example,	1
a very obscure possibility	1
a software optimization issue.	1
a software programming language,	1
a software implementation is	1
a software implementation rather	1
a software framework that	1
a software module for	1
a software package and	1
a software package on	1
a software package several	1
a long time to	1
a long time in	1
a long time when	1
a long time compared	1
a long vector library	1
a long vector library,	1
a long time. It	1
a long list of	1
a long dependency chain.	2
a long time, such	1
a long sequence of	1
a long delay. See	1
a 32-bit integer has	1
a 32-bit number (the	1
a 32-bit number. If	1
a 32-bit (signed) address.	1
a branch that goes	1
a branch that chooses	2
a branch by a	1
a branch will be	1
a branch will go	1
a branch into the	1
a branch inside the	1
a branch (e.g. an	1
a branch misprediction is	1
a branch tree. On	1
a < b because	1
a member of the	3
a member of a	2
a member function is	1
a member function to	1
a member function or	1
a member function which	1
a member function pointer	1
a member function such	1
a member function. Do	1
a member function. 7.12	1
a way of relieving	1
a way to work	1
a way to check	1
a way that can	1
a way that there	1
a way that takes	1
a way that avoids	1
a faster vectorized code.	1
a const function that	1
a const reference if	1
a const reference allows	1
a const reference. A	1
a critical function and	1
a critical part of	1
a critical dependency chain	1
a critical dependency chain,	1
a critical piece of	1
a call to a	1
a call to _endthread()	1
a register to zero	1
a register and prevents	1
a register if its	1
a register variable in	2
a register rather than	1
a register (see below)	1
a register variable. The	2
a register stack. These	1
a register except in	1
a 64 64 matrix	1
a rather unconventional manner	1
a time. This is	1
a time. A simple	1
a time. You may	1
a time. Do not	1
a template has only	1
a template class is	1
a template class which	1
a template parameter rather	1
a template parameter. It	1
a template parameter. There	1
a template parameter. No	1
a template parameter. Templates	1
a template parameter: //	1
a template parameter: template	1
a test program that	1
a test run with	1
a test feature into	1
a test tool for	1
a new and better	1
a new compiler which	1
a new memory block	2
a new vector size	1
a new instruction set	1
a new cache line	1
a new floating point	1
a new object is	1
a new object of	1
a new version without	1
a new value of	1
a new software project,	1
a new branch of	1
a new branch only	1
a new register size	2
a new processor enters	1
a new element in	1
a new addition before	1
a new bigger memory	2
a new instance of	2
a new one. The	1
a new one. I	1
a new physical register	1
a user is waiting	1
a user has to	1
a useful way of	1
a useful source of	1
a system with only	1
a system call (e.g.	1
a file is faster	1
a file in exclusive	1
a file that has	1
a file can be	1
a file by calling	1
a file on a	1
a programming language that	1
a dynamic library is	2
a dynamic library than	1
a dynamic link library	1
a part of the	1
a part of memory	1
a short time then	1
a short vector library,	1
a & a =	1
a & b if	1
a & 0 =	1
a & b; will	1
a & b; d	1
a & -1 =	2
a & ~a =	2
a & 0= 0	1
a & a= a	1
a simple function with	1
a simple integer counter.	1
a simple class containing	1
a simple pointer or	1
a simple array is	1
a simple array can	1
a simple test setup	1
a simple type casting,	1
a simple algorithm can	1
a simple variable. Most	1
a simple variable. Using	1
a simple regular pattern,	1
a simple index. A	1
a simple periodic pattern	2
a simple type, a	1
a simple solution, but	1
a constant is faster	6
a constant to the	2
a constant that is	1
a constant can be	1
a constant with a	1
a constant should be	1
a constant (see page	1
a constant known at	1
a constant reference instead:	1
a constant plus an	1
a constant divisor that	1
a stack frame unless	1
a stack frame, saving	1
a function. Using an	1
a function. Avoid the	1
a large memory model	1
a large part of	1
a large cost to	1
a large runtime framework	1
a large positive number	1
a large overhead cost	1
a large delay due	1
a large fraction of	1
a large object, unless	1
a must be read	1
a ; parameter 2:	1
a ; r ;	1
a ; top of	1
a Windows compiler to	1
a Windows program that	1
a result of other	1
a result of macro	1
a result then we	1
a processor will have	1
a processor has a	1
a big program when	1
a big loop then	1
a big floating point	1
a big matrix happen	1
a big program. Frequent	1
a big waste of	1
a big mainframe computer.	1
a language that allows	1
a specific CPU model	1
a specific CPU feature	1
a specific CPU core	2
a specific instruction set,	1
a specific size is	1
a specific pointer does	1
a specific advantage to	1
a specific graphics framework	1
a specific load address.	1
a specific size. Integer	1
a specific purpose. It	1
a specific purpose, you	1
a specific purpose: Contain	1
a specific interval. A	1
a much more complicated	1
a single function or	1
a single function by	1
a single function from	1
a single object file.	2
a single branch if	1
a single call to	2
a single bit which	1
a single register the	1
a single & operation,	1
a single constant with	1
a single function. Switch	1
a single operation using	1
a single task that	1
a single executable file	1
a single element. The	1
a single step rather	1
a single result. An	1
a single operation. Example:	1
a single instruction. The	1
a single container, preferably	1
a single comparison: //	1
a single result, true	1
a single session. But	1
a virtual function will	1
a virtual function call	1
a virtual table to	1
a virtual table before	1
a virtual member function	1
a virtual member function.	1
a common way of	1
a common programming error	1
a common programming error.	1
a common error that	1
a common cause of	1
a common source of	1
a common denominator can	1
a common denominator: //	1
a thread is terminated.	1
a thread to a	1
a thread that runs	1
a thread jumps between	1
a thread environment block.	1
a thread affinity mask.	1
a small and fixed	1
a small bit at	1
a small test program	1
a small part of	1
a small block for	1
a small piece of	1
a small piece at	1
a small fraction of	1
a += b; In	1
a += 2; Common	1
a good compiler can	1
a good performance for	1
a good way of	1
a good implementation of	1
a good choice for	3
a good idea to	3
a good deal of	2
a good investment. A	1
a good knowledge of	1
a power of 2	22
a power of 2.	3
a power of 2,	1
a power of 2:	1
a power of two.	1
a matrix is the	1
a matrix is a	2
a matrix is so	1
a matrix a power	1
a matrix and stores	1
a matrix in STL	1
a matrix for use	1
a matrix when contentions	1
a matrix using example	1
a matrix line (in	1
a matrix line. The	1
a Linux compiler, or	1
a precision of approximately	1
a line size of	2
a manual on usability,	1
a / b as	1
a 128 bit vector	3
a check before the	1
a problem with vector	1
a problem when mixing	1
a problem then it	1
a problem since we	1
a known CPU model	1
a solution where a	1
a container for a	1
a container for exclusive	1
a container that contains	1
a container that allows	1
a container or memory	1
a container than to	1
a container class that	2
a container class. The	1
a few more integer	1
a few functions that	1
a few clock cycles	5
a few clock cycles,	1
a few cases where	1
a few instructions that	1
a few times may	1
a few extra instructions	1
a few arrays of	1
a few cases, however,	1
a few unused points	1
a few lines should	1
a few machine instructions.	1
a few pitfalls here.	1
a few lines. A	1
a few kilobytes at	1
a few comments about	1
a few places. Constant	1
a list is almost	1
a list of some	1
a list of short	1
a list of titles.	1
a list should preferably	1
a list float a[100];	1
a structure or class	3
a structure or each	1
a structure or class.	1
a structure where data	1
a standard for specifying	1
a standard function library	1
a hardware implementation of	1
a hardware definition language	3
a hardware definition language.	1
a hardware definition language,	1
a : b; }	1
a : b) y	1
a store operation doesn't	1
a store forwarding delay	2
a copy constructor specifying	1
a copy protection scheme	1
a well optimized software	1
a certain modification is	1
a certain tolerance. The	1
a certain interval: //	1
a counter that measures	1
a counter inside the	1
a shared object is	2
a shared object can	1
a shared object which	1
a shared object without	1
a shared object. It	1
a shared object, then	1
a program. The time	1
a program. The profilers	1
a program. This is	1
a program. Avoid unnecessary	1
a program. Whole program	1
a was zero or	1
a space in the	1
a lot of time	2
a lot of data	2
a lot of CPU	1
a lot of cache	2
a lot of optimization	1
a lot of time.	1
a lot of extra	2
a lot of branches	1
a lot of runtime	1
a lot of added	1
a lot of background	1
a lot of computing	1
a lot of resources,	1
a lot of modifications	1
a lot of bookkeeping	1
a lot of jumping	1
a lot of irrelevant	1
a lot of CPU-time	1
a lot to gain	3
a lot in performance.	1
a particular code implementation	1
a particular code version.	1
a particular compiler to	1
a particular memory address	2
a particular CPU or	1
a particular CPU model	1
a particular instruction set	1
a particular instruction set,	1
a particular integer size	1
a particular set of	1
a particular programming language	1
a particular part of	1
a particular processor model.	1
a particular application uses	1
a particular piece of	1
a particular brand is	1
a particular application. If	1
a particular reduction would	1
a particular purpose. The	1
a particular weakness or	1
a particular meaning, then	1
a particular subtask before	1
a particular situation, but	1
a microprocessor in an	1
a microprocessor that supports	1
a microprocessor because the	1
a multiplication and an	1
a multiplication but only	1
a complicated code that	1
a complicated implementation of	1
a complicated process which	1
a dependency chain where	1
a dependency chain. 3.16	1
a Boolean vector. For	1
a Boolean NOT on	1
a signed integer to	1
a signed integer if	1
a signed variable produces	1
a model that was	1
a separate function library	1
a separate function library.	1
a separate version for	1
a separate file than	1
a separate dynamic link	2
a separate function. Sometimes,	1
a separate thread in	1
a separate thread if	3
a separate thread with	1
a separate C or	1
a separate module then	1
a separate subroutine if	1
a separate module, and	1
a block of 16	1
a needs to evaluate	1
a disadvantage for the	1
a disadvantage if the	1
a disadvantage if other	1
a disadvantage when the	1
a high power of	2
a high overhead cost	1
a high repeat count	1
a high level framework	1
a high priority. Other	1
a high degree of	1
a high price, and	1
a parameter is part	1
a parameter of composite	1
a parameter to the	1
a reference to the	1
a reference or a	1
a reference or pointer	1
a string is created	2
a string of bytes	1
a string and then	1
a programmer may prefer	1
a better version of	1
a better result by	1
a better solution to	1
a better solution. It	1
a better understanding of	1
a lookup in a	1
a lookup table is	1
a lookup table if	1
a lookup table instead	1
a lookup table: //	2
a && a =	1
a && b with	1
a && b needs	1
a && b; d	1
a && true =	1
a && false =	1
a && !a =	1
a | a =	1
a | b if	1
a | 0 =	2
a | b; Here,	1
a | -1 =	2
a difference in efficiency.	1
a mechanism called stack	1
a runtime check that	1
a runtime DLL or	1
a means of making	1
a || b with	1
a || b; This	1
a || true =	1
a || false =	1
a || !a =	1
a > b ?	1
a longer size by	1
a graphics function is	1
a graphics function that	1
a graphics library or	1
a graphics processing unit,	1
a graphics card or	1
a graphics accelerator card	1
a graphics coprocessor or	1
a public data object:	1
a public variable in	1
a public variable where	1
a framework in its	1
a framework sometimes have	1
a linked function is	1
a linked list or	1
a linked list has	1
a linked list takes	1
a linked list (see	1
a linked list. Each	1
a linked list. Do	1
a linked list. 94	1
a platform with a	1
a dispatch is made	1
a second application that	1
a second induction variable	1
a second step of	1
a higher instruction set	1
a higher instruction set.	1
a higher number is	1
a higher clock frequency	1
a higher address which	1
a higher risk that	1
a piece of code	6
a piece of program	1
a piece of software	1
a piece of code.	1
a piece of CPU-intensive	1
a binary representation according	1
a binary tree or	1
a binary search, or	1
a binary tree. Is	1
a 512 512 matrix	1
a 512 512 matrix.	1
a union is not	2
a feature for making	1
a feature for reserving	1
a feature called whole	1
a link map or	1
a constructor for the	1
a compiler. Some compilers	1
a compiler. Many algebraic	1
a #define directive never	1
a switch in your	1
a switch between different	1
a switch statement if	1
a switch statement with	1
a smaller memory footprint.	1
a smaller size is	1
a negative list of	3
a negative result. An	1
a positive integer constant.	1
a positive list of	2
a positive list needs	1
a positive integer: //	1
a loop. Example: //	1
a computer with multiple	1
a computer game or	1
a pointer. The pointer	1
a pointer. A variable	1
a pointer. It is	1
a pointer. It may	1
a pointer. It has	2
a change in the	1
a global variable in	2
a global variable means	1
a global const variable	1
a global object. The	1
a relative reference to	1
a relative difference less	1
a syntax restriction, but	1
a profiler to find	2
a profiler that can	1
a profiler which determines	1
a profiler works then	1
a Windows, Linux, BSD	1
a modern CPU. But	1
a network with heavy	1
a network may be	1
a slow and fragmented	1
a slow bit scan	1
a slow CPU, an	1
a whole polygon or	1
a whole workday or	1
a level-2 cache of	1
a level-2 cache miss	1
a response is delayed	1
a hot spot that	1
a hot spot has	1
a hot spot. Use	1
a given instruction set.	1
a given task is	1
a level-1 data cache	1
a task is divided	1
a task into a	1
a task switch occurs	1
a limited number of	1
a limited range then	1
a limited resource. The	1
a limited audience for	1
a local const variable	1
a local variable. This	1
a database for storing	1
a database by a	1
a bool is used	1
a frame function because	1
a frame function, while	1
a special loop predictor.	1
a special cache called	1
a special trick which	1
a shift operation which	1
a shift operation. For	1
a shift operation. x*8	1
a shift operation, which	1
a destructor to make	1
a destructor that makes	1
a destructor that needs	1
a destructor that destroys	1
a destructor if it	1
a safe way in	1
a safe programming practice,	1
a Pentium 4 with	1
a Pentium 4 computer	1
a Pentium 4 computer.	1
a Pentium 4. The	1
a further discussion of	1
a sum of a	1
a discussion of this	1
a discussion of profiling.	1
a non-Intel CPU. If	1
a maximum of four	1
a macro to swap	1
a macro in the	1
a macro so that	1
a reduced number of	1
a variable. Make sure	1
a variable. Efficiency Accessing	1
a time, then the	1
a processing speed exceeding	1
a so-called soft processor.	1
a total offset bigger	1
a total waste of	1
a 128-bit vector so	1
a 128-bit vector register,	1
a 128-bit XMM register	1
a 128-bit XMM register.	1
a full size vector.	1
a thread. You cannot	1
a square brackets index,	1
a little more complicated	1
a little more syntax	1
a little faster than	1
a little explanation. The	1
a little odd here.	1
a logical sequence. If	1
a smart pointer is	1
a smart pointer (see	1
a smart pointer. If	1
a smart pointer. But	1
a smart pointer. Accessing	1
a subexpression to make	1
a bounds check on	1
a message loop in	1
a condition is relatively	1
a parallel structure that	1
a ? b :	2
a previous branch. Example:	1
a vector. If n	1
a vector. 6. If	1
a program, especially if	1
a similar utility for	1
a risk that several	1
a risk factor in	1
a garbage collector which	1
a header file for	1
a future version of	1
a newer instruction set	1
a newer version of	1
a sequence of calculations	1
a sequence of consecutive	1
a sequence where each	1
a significant effect on	1
a significant amount of	1
a significant contribution to	1
a linear function of	2
a linear array for	1
a linear array with	1
a linear array will	1
a linear list with	1
a linear array. No	1
a linear search, is	1
a penalty for mixing	1
a module by compiling	1
a 'this' pointer which	1
a 'this' pointer. It	1
a problem. If the	1
a row to the	1
a matter of programming	4
a matter of interpreting	2
a matter of convenience	1
a matter of habit,	1
a series of branches	1
a series of five	2
a series of calculations:	1
a series of calculations,	1
a series of experiments	1
a waste of the	1
a waste of time	1
a waste of cache	2
a waste of resources.	1
a waste of time,	1
a map file from	1
a 256-bit vector as	1
a device driver. A	1
a non-static member function	2
a low instruction set	1
a low positive result.	1
a low priority thread,	1
a default constructor that	1
a hard disk or	2
a hard disk because	1
a hard disk often	1
a typical set of	1
a typical software project	1
a typical application to	1
a typical degree of	1
a usability problem in	1
a pure function with	1
a pure function. Example:	1
a derived class is	1
a derived class are	1
a derived class through	1
a derived class, it	1
a fully compiled code.	1
a standardized manner. 3.4	1
a parent class and	1
a parent class in	1
a false model number	1
a false vendor string.	1
a temporary object for	1
a temporary array before	1
a temporary variable outside	1
a temporary register for	1
a procedure linkage table	2
a procedure linkage table.	1
a PC and then	1
a PC platform. However,	1
a frequent cause of	1
a frequent source of	1
a prediction or estimate	1
a polymorphic function goes	1
a polymorphic class has	1
a polymorphic member function	1
a polymorphic function. The	1
a register. The above	1
a register. If the	1
a kind of branch	1
a kind of branch.	1
a graphical user interface	1
a graphical user interface.	2
a lower instruction set.	1
a lower priority level,	1
a misprediction every time	1
a misprediction penalty of	1
a just-in-time compiler can	1
a try block. There	1
a background process running	1
a PLT for all	1
a heavy graphics application	1
a hash table for	1
a hash map is	1
a hash map. Do	1
a profiling (see page	1
a DLL can be	1
a DLL with the	1
a DLL goes through	1
a branch. If it	1
a GOT for all	1
a GOT entry. You	1
a fixed size array	1
a fixed address might	1
a fixed breakpoint in	1
a non-sequential order in	1
a non-sequential order. The	2
a non-sequential order. Example:	1
a non-sequential manner then	1
a non-sequential manner. It	1
a jump from a=a*2;	1
a random manner. This	1
a measure that is	1
a poorly predictable branch	1
a vector, uses SSE3.	1
a suitable set of	1
a suitable choice of	1
a suitable pivot element.	1
a suitable duration. The	1
a serious legal issue.	1
a serious legal issue,	1
a far data segment	1
a collection of example	1
a composite type is	1
a composite type can	1
a composite type such	1
a composite object, you	1
a highly optimized program	1
a debug version and	1
a debug version with	1
a factor of 1,	1
a factor 4 in	1
a reliable source so	1
a reliable decision. 13.4	1
a thousand cache misses	1
a thousand times then	1
a thousand times lower;	1
a thousand numbers. With	1
a compile-time polymorphism, which	1
a constant. The compilers	1
a complex framework requiring	1
a dispatched function calls	1
a normal array. The	1
a convenient way of	1
a portability issue to	1
a reference, or void.	1
a self-relative address. (3)	1
a Core i7 processor	1
a debugger and press	1
a ^ b ---xx----	1
a ^ 1; You	1
a ^ -1 =	1
a ^ ~a =	1
a base class is	1
a base address plus	1
a leaf function by	2
a leaf function. Leaf	1
a six years old	1
a structure. The extra	1
a structure. For example:	1
a profiler. A simple	1
a profiler. It is	1
a loss of precision,	1
a remote database, and	1
a considerable amount of	1
a considerable improvement in	1
a considerable job, but	1
a considerable debate about	1
a third thread can	1
a multidimensional array sequentially.	1
a multidimensional structure needed?	1
a strict formalism that	1
a portable way of	1
a computer. The proxy	1
a computer. Security software	1
a list, rolled out	1
a realistic set of	2
a realistic number of	1
a console mode program	1
a console mode program.	1
a hundred or even	1
a hundred clock cycles	1
a hundred times because	1
a hundred times. This	1
a loop-carried dependency chain.	1
a compromise between development	1
a compromise between efficiency,	1
a nonzero floating point	1
a command or do	1
a command line or	2
a relatively primitive programming	1
a latency which is	1
a larger memory footprint	1
a project built with	1
a valid address. Pointers	1
a valid 63 number	1
a loop-invariant code that	1
a loop-invariant expression that	1
a key or moving	1
a key press or	1
a bit-mask: __m128i mask	2
a type. The example	1
a place indicated by	1
a bad dilemma. You	1
a mouse move or	1
a non-inlined copy of	2
a non-inlined copy Function	1
a round function using	1
a pipeline where instructions	1
a Taylor series. The	1
a dispatcher. The dispatcher	1
a class, structure or	1
a queue as a	1
a protected operating system	1
a protected operating system,	1
a dramatic degradation of	1
a contained object because	1
a bottleneck than memory	1
a directive for a	1
a scarce resource in	1
a scarce resource. Do	1
a scarce resource, especially	1
a suboptimal way has	1
a suboptimal way. The	1
a suboptimal way. Here	1
a float, but not	1
a detailed overview of	1
a dedicated test server.	1
a dedicated microprocessor and	1
a dedicated microprocessor core	1
a dedicated physics processor	1
a breakpoint in the	1
a unit-test without taking	1
a virus scanner that	1
a pointer, a reference,	1
a pointer, but it	1
a soft processor is	1
a soft processor activates	1
a hyperthreading processor to	1
a reasonable upper limit	1
a reasonable estimate can	1
a well-defined interface to	2
a well-defined functionality and	1
a wrong type. References	1
a combination of additions	1
a hidden pointer. The	1
a speed-critical program on	1
a high-level language need	1
a multithreaded program, or	1
a parameter, so there	1
a circular buffer with	2
a circular buffer than	1
a register, not even	1
a natural order and	1
a natural ordering? If	1
a sorted list is	1
a sorted list can	1
a sorted list or	1
a negligible contribution to	1
a well-structured C++ program	1
a micro-op cache (e.g.	1
a CPU- specific profiler.	1
a backup copy of	1
a nearby address again	1
a pivot search: //	1
a float. (Both use	1
a built-in test feature	1
a complete redesign of	1
a variable, for example	1
a variable, pointer or	1
a viable solution in	1
a viable compromise when	1
a debugger. You may	1
a debugger. However, the	1
a computationally intensive program	1
a subexpression. For example,	1
a chip that can	1
a biased binary integer,	1
a minor error in	1
a non-member function, means	1
a decimal point in	1
a PC. Nevertheless, it	1
a PC. Similarly, we	1
a hint and the	1
a case: // Example	1
a GOT. Another possibility	1
a string. The old	1
a 90% chance that	1
a proxy for the	1
a floppy disk. A	1
a variable-size array with	1
a buffer. It should	1
a name. #define directives	1
a third-party graphics framework	1
a null reference to	1
a null reference. This	1
a constructor, an overloaded	1
a physics processing unit	1
a re- usable library	1
a programmable logic device	1
a time-consumer even for	1
a high-priority thread can	1
a FIFO queue should	1
a FIFO manner? If	1
a discussion. 7.33 Namespaces	1
a cheap compiler for	1
a division, which is	1
a first-in-last-out fashion. It	1
a coprocessor might also	1
a systematic and well	1
a systematic manner to	1
a ^a = 0	2
a release version of	1
a release version with	1
a distinction between leaf	1
a symbolic link to	1
a parenthesis around the	1
a parenthesis around such	1
a bitfield is less	1
a bitfield by the	1
a slight degradation in	1
a generic version that	1
a word processor the	1
a matrix. For example,	1
a universal algorithm (e.g.	1
a non-virtual member function,	1
a niche in scientific	1
a "move constructor" to	1
a typo in a	1
a user-defined function is	1
a union: // Example	1
a macro, but the	1
a macro. If you	1
a precious resource for	1
a not-too-big upper limit	1
a basic understanding of	1
a "function". Multiple calls	1
a plug-in to Microsoft	1
a hand- written table	1
a low-priority thread steals	1
a monotonically increasing function	1
a top-of-stack index. Are	1
a button or moving	1
a minimal difference between	1
a blend instruction if	1
a wealth of advanced	1
a zigzag course that	1
a constructor. A default	1
a number). Different compilers	1
a sensible balance between	1
a compelling security reason	1
a vector). The first	1
a formalism. The splitting	1
a narrow range then	1
a multitasking environment, between	1
a valuable source of	1
a learning process where	1
a 50-50 chance of	1
a double: // Example	1
a First-In-Last- Out (FILO)	1
a non-const reference, a	1
a key? If the	1
a password. The log	1
a year or two.	1
a lineage of software	1
a server in full	1
a staircase function of	1
a 2'nd order polynomial:	1
a conditional move, depending	1
a polynomial. Scheduling A	1
a ready-made profiler. This	1
a discrete icon signaling	1
a disassembly, probably without	1
a tag on a	1
a balanced mix of	1
a First-In-First- Out (FIFO)	1
a fixed-size array is	1
a lookup-table static. Example:	1
a DLL. Another alternative	1
a request for inlining	1
a #define, const or	1
a plain old data	1
a genuine compiler became	1
a thread-like scheduling in	1
a non-recursing template specialization,	1
a thorough analysis of	1
a zero-terminated ASCII string	1
a polymorphous class? This	1
a technological point of	1
a bottleneck. Organize the	1
a temp1 and temp2.	1
a XOR b Bit	1
a stand alone compiler	1
a zip file of	1
a reply about investigation	1
a graceful way. You	1
a FILO manner? If	1
a driver involves the	1
a Gauss elimination. The	1
a funda- mentally flawed	1
a column-wise manner where	1
a website. 5 Choosing	1
a scalar (Scalar means	1
a higher-priority thread running	1
a destructor. A function	1
a bit-mask which is	1
a pre-calculated table. Even	1
a printer or other	1
a union, as in	1
a square. // This	1
a strategy for saving	1
a million times less	1
a minute if the	1
a textbook on test	1
a level-3 cache. If	1
a unique key. Do	1
a couple of things	1
a template: // Example	1
a ^0 = a	1
a menu click becomes	1
a subset, giving access	1
a BSF (bit scan	1
a queue. It is	1
a constant: Unsigned is	1
a quadratic matrix, i.e.	1
of the function in	2
of the function pointer	3
of the function where	1
of the code is	4
of the code to	1
of the code and	1
of the code in	3
of the code that	2
of the code can	5
of the code have	1
of the code where	1
of the code makes	2
of the code 16	1
of the code together	1
of the code still	1
of the code could	1
of the code only.	1
of the compiler (see	1
of the compiler optimizations	1
of the time is	2
of the time and	2
of the time it	1
of the time on	1
of the time goes	1
of the time stamp	2
of the time slices	1
of the memory is	1
of the memory if	1
of the memory block	2
of the memory block.	1
of the data cache	1
of the data object	1
of the data cache.	1
of the data block	1
of the data members.	1
of the data structure,	1
of the program is	2
of the program of	1
of the program to	1
of the program that	2
of the program are	1
of the program code	1
of the program as	2
of the program -	1
of the program may	2
of the program have	1
of the program then	1
of the program has	1
of the program contains	1
of the program under	1
of the program happen	1
of the program appear	1
of the vector registers	1
of the vector size.	1
of the different instructions	1
of the same class	2
of the same dynamic	1
of the same type	1
of the same structure	1
of the same function,	1
of the same compiler.	1
of the same class.	1
of the same logical	1
of the same features	1
of the same brand.	1
of the same class).	1
of the same algorithm,	1
of the functions are	2
of the CPU is	1
of the CPU time	1
of the CPU clock	1
of the CPU dispatching.	1
of the CPU detection	1
of the instruction code.	1
of the instruction sets	1
of the loop in	1
of the loop counter	1
of the loop count	1
of the loop counter.	1
of the loop index.	1
of the integer in	1
of the integer registers	1
of the class is	1
of the class or	2
of the floating point	2
of the compilers I	3
of the compilers reduced	1
of the most used	1
of the most critical	2
of the most important	2
of the most common	2
of the size of	1
of the Intel compiler	3
of the Intel compiler.	1
of the pointer is	1
of the pointer or	1
of the pointer has	1
of the library that	1
of the library into	1
of the library functions.	1
of the two branches	1
of the two loops	2
of the two AND	1
of the object is	1
of the object or	1
of the object pointed	1
of the number and	1
of the 64-bit systems.	1
of the C++ compiler	1
of the C++ programming	1
of the C++ language	1
of the C++ language......................................................	1
of the array is	2
of the array a	1
of the array to	1
of the array address	1
of the array element	1
of the array i)	1
of the clock frequency.	1
of the clock frequency,	1
of the value of	1
of the value in	1
of the objects should	1
of the variable in	1
of the variable that	1
of the table that	1
of the table has	1
of the performance during	1
of the software development	1
of the software package	1
of the 32-bit integer.	1
of the member function.	1
of the member pointer.	1
of the member relative	1
of the way the	1
of the elements in	1
of the called function.	1
of the address of	1
of the 4 lines	1
of the critical function	1
of the critical code	2
of the critical function.	2
of the critical stride	4
of the operating system	4
of the first element	1
of the first program.	1
of the first application	1
of the register size	1
of the optimization job.	1
of the code. This	2
of the code. It	1
of the code. See	1
of the code. Some	1
of the code. C#,	1
of the code. Inserting	1
of the time. The	1
of the time. This	1
of the time. A	1
of the template function	1
of the template parameter.	1
of the new function.	1
of the new bigger	1
of the user interface,	1
of the following methods	1
of the following conditions	1
of the following solutions,	1
of the 32 sets	1
of the bits for	1
of the type of	1
of the & operation	1
of the simple function,	1
of the processors on	1
of the Gnu directives	1
of the Gnu compiler,	1
of the function. The	1
of the function. This	2
of the function. Copying	1
of the function. Compile	1
of the extra work	1
of the extra bits.	1
of the large overhead	1
of the while loop	1
of the execution units	1
of the compiled versions	1
of the best optimized	2
of the best optimizing	1
of the virtual function	1
of the virtual function.	1
of the virtual functions.	1
of the virtual 53	1
of the exception handler	1
of the power function	1
of the matrix is	1
of the matrix line	1
of the matrix element.	1
of the AVX instruction	2
of the four cache	2
of the problem cannot	1
of the few cases	1
of the structure or	1
of the structure };	1
of the standard PC	1
of the memory. The	1
of the shared resources	1
of the program. The	2
of the program. This	2
of the program. In	1
of the program. 3	1
of the program. Application	1
of the above methods	1
of the problems and	1
of the next function.	1
of the multiplication of	1
of the application program.	1
of the application programmer.	1
of the expression is	1
of the Boolean operators	2
of the Boolean operands	1
of the needs of	1
of the Microsoft directives	1
of the parameter is	1
of the source code,	1
of the induction variable	1
of the string is	1
of the programmer to	6
of the keyword volatile	1
of the end of	1
of the examples I	1
of the difference is	1
of the data. Use	1
of the graphics processing	1
of the framework itself,	1
of the second operand.	1
of the x86 instruction	1
of the advantages of	2
of the advantages and	1
of the storage methods	1
of the old memory	1
of the function, but	1
of the operands and	1
of the operands has	1
of the operands because	1
of the innermost loop	1
of the compiler. The	1
of the advanced programming	1
of the core with	1
of the main reasons	1
of the loop. Example	1
of the loop. Some	1
of the installation process	1
of the cases. The	1
of the STL is	1
of the STL also	1
of the STL containers	1
of the size. However,	1
of the desired interval	1
of the whole structure	1
of the whole program.	1
of the code, then	1
of the code, which	1
of the code, cache	1
of the code, including	1
of the fact that	1
of the position-independent code.	1
of the level-1 cache	1
of the resources. In	1
of the task in	1
of the costs of	1
of the inlined function	1
of the class. Data	1
of the class. Calling	1
of the class. Storing	1
of the preceding one	1
of the preceding addition	1
of the preceding one.	2
of the preceding row.	1
of the exponent is	1
of the possibility that	1
of the maximum possible	1
of the library. The	1
of the library. This	1
of the library. Add	1
of the final size	1
of the final application	1
of the final product.	1
of the variable. For	1
of the time, but	1
of the total time.	1
of the child class	1
of the counters when	1
of the stack. Deallocation	1
of the previous iteration	1
of the program, and	1
of the program, for	1
of the program, it	1
of the header files	1
of the sequence in	1
of the beginning of	2
of the current array	1
of the problem. This	1
of the features of	1
of the latter is	1
of the default size	1
of the derived class	1
of the derived class.	1
of the factorial function	1
of the OpenMP directives	1
of the parent class	1
of the memcpy function.	1
of the polymorphic functions.	1
of the heavy graphics	1
of the arrays. It	1
of the arrays. An	1
of the branch. It	1
of the GOT and	1
of the array. eax	1
of the software. You	1
of the object, and	1
of the memory, depending	1
of the absolute value	1
of the largest vector.	1
of the .NET framework.	1
of the base classes.	1
of the result. You	1
of the increment and	1
of the advice in	1
of the advice given	1
of the pitfalls here:	1
of the present manual	1
of the strlen function	1
of the divisor is	2
of the drawbacks of	1
of the lrint function	1
of the user's time.	1
of the considerations that	1
of the techniques of	1
of the advices may	1
of the residual error	2
of the specified types	1
of the micro-op cache.	1
of the object's class	1
of the object's class.	1
of the const_cast operator	1
of the executable. Most	1
of the comments generated	1
of the question when	1
of the array, which	1
of the alignment. See	1
of the time-consumers mentioned	1
of the fraction. The	1
of the fraction. For	1
of the trivial programming	1
of the subroutine for	1
of the factorials, but	1
of the Xnu project.	1
of the usual object	1
of the programmers' time,	1
of the weekdays. The	1
of the original, poorly	1
of the user-written code	1
of the iterator in	1
of the kind: "what	1
of a and b	3
of a function in	1
of a function for	1
of a function or	1
of a function should	1
of a code then	1
of a compiler can	1
of a will be	1
of a memory block	1
of a data member	1
of a program is	2
of a program and	1
of a program that	1
of a program then	1
of a program has	1
of a program contains	2
of a program executable:	1
of a program dictates	1
of a vector simultaneously.	1
of a different type.	1
of a loop is	1
of a loop if	1
of a loop counter	3
of a loop depends	1
of a cache line.	1
of a class is	1
of a class or	2
of a class data	1
of a class need	1
of a class (also	1
of a floating point	3
of a double which	1
of a pointer well	1
of a 64-bit double	1
of a 64-bit double,	1
of a clock cycle	3
of a variable is	1
of a variable for	1
of a variable number	1
of a variable even	1
of a very large	1
of a very obscure	1
of a long list	1
of a 32-bit integer	1
of a critical function	1
of a critical dependency	1
of a template parameter.	1
of a new register	1
of a new element	1
of a simple class	1
of a function. Avoid	1
of a ; top	1
of a big program	1
of a big program.	1
of a specific size	1
of a specific size.	1
of a virtual function	1
of a matrix line	1
of a matrix line.	1
of a list float	1
of a store forwarding	1
of a copy protection	1
of a shared object	1
of a program. The	2
of a program. This	1
of a program. Avoid	1
of a particular brand	1
of a signed integer	1
of a signed variable	1
of a parameter of	1
of a linked function	1
of a linked list	1
of a piece of	1
of a change in	1
of a program, especially	1
of a row to	1
of a hard disk	1
of a derived class	2
of a parent class	2
of a temporary object	1
of a polymorphic class	1
of a polymorphic member	1
of a graphical user	2
of a vector, uses	1
of a suitable duration.	1
of a composite type	2
of a structure. The	1
of a list, rolled	1
of a relatively primitive	1
of a Taylor series.	1
of a class, structure	1
of a dedicated microprocessor	1
of a variable, for	1
of a debugger. However,	1
of a string. The	1
of a third-party graphics	1
of a re- usable	1
of a bitfield is	1
of a macro. If	1
of a "function". Multiple	1
of a double: //	1
of that branch and	1
of it (&ArraySize) is	1
of function libraries Some	1
of function libraries Test	1
of function pointers if	2
of function calls and	1
of function calls in	1
of function inlining is	1
of function inlining are:	1
of function calls. The	1
of function libraries........................................................................................ 12	1
of code is so	1
of code is intended	1
of code is fastest	1
of code is serial	1
of code to test	1
of code and data	4
of code in which	1
of code in multiple	1
of code in general.	1
of code that are	1
of code that works	1
of code that produces	1
of code can be	1
of code you want	1
of code then you	1
of code into multiple	1
of code compiled with	1
of code gives an	1
of code size. In	1
of code execute faster.	1
of code once the	1
of code optimization", Coriolis	1
of an int is	1
of an integer in	1
of an integer if	1
of an object It	1
of an array can	1
of an array or	1
of an array element	1
of an array element.	1
of an unsigned integer	1
of an unsigned variable	1
of an error then	1
of an execution unit.	1
of an exception or	1
of an exception without	1
of an optimized function,	1
of an intermediate code.	1
of an inlined function.	1
of an overloaded function	1
of an exception. The	1
of an exception. A	1
of an update, or	1
of an error; and	1
of compiler may in	1
of compiler There are	1
of compiler options Table	1
of compiler .................................................................................................... 10	1
of compiler options....................................................................................... 160	1
of x is type-casted	1
of x The syntax	1
of x for approximately	1
of x by using	1
of x must wait	1
of this is to	1
of this function is	1
of this function on	1
of this by preferably	1
of this bit scan	1
of this method is	1
of this solution is	1
of this section for	1
of this fact by	1
of this alignment automatically.	1
of this problem. 7.11	1
of this polynomial can	1
of this method. Your	1
of this manual. You	1
of this manual. 2.3	1
of this option. Use	1
of this bookkeeping depends	1
of this manual, but	1
of this capability: //	1
of time and resolve	1
of time in most	1
of time for software	1
of time so that	1
of time both during	1
of time cleaning up	1
of when they are	1
of when type-casting pointers:	1
of A is not	1
of A is finished.	1
of A is slow,	1
of A and then	1
of memory to disk.	1
of memory and string	1
of memory for a	1
of memory for all	1
of memory that is	1
of memory or other	1
of memory with new	1
of memory will benefit	1
of memory takes much	1
of memory called the	1
of memory inside the	1
of memory addresses is	1
of memory used. You	1
of memory space can	1
of memory needed in	1
of memory required is	1
of memory blocks, for	1
of memory leaks if	1
of memory blocks. A	1
of data in order	1
of data that are	1
of data A variable	1
of data structures to	1
of data members. This	1
of data files. This	1
of data ...................................................................................................... 90	1
of data cache, code	1
of data manipulation is	1
of data shuffling, such	1
of data (low numbers	1
of data decomposition, we	1
of data elements, as	1
of program or data	1
of program code is	1
of program performance because	1
of program efficiency is	1
of program flow. Failure	1
of vector register sizes	1
of vector registers has	1
of vector operations is	1
of vector math libraries:	1
of vector operations, as	1
of different function libraries.	1
of different integer types	1
of different compilers I	1
of different size matrices,	1
of different C++ language	1
of different C++ constructs	1
of different C++ constructs........................................................................	1
of different type conversions	1
of different intrinsic functions	1
of different types or	1
of different types with	1
of different types cannot	2
of different sizes are	2
of different algorithms for	1
of different lengths in	1
of different targets is	1
of different compilers............................................................................. 74	1
of functions in memory	1
of functions that are	1
of functions with integer	1
of functions A macro	1
of only half the	1
of CPU that each	1
of CPU dispatching are:	1
of CPU time, RAM	1
of CPU cores. 60	1
of CPU development, each	1
of other optimizations such	1
of other tasks that	1
of instruction latencies, throughputs	1
of instruction timing, assembly	1
of loop ; a[i]	1
of loop ; unused	1
of loop ; compute	1
of loop iterations are:	1
of which code branch	1
of which functions take	1
of which one is	1
of which method to	1
of which processor models	2
of which optimizations you	1
of all the problems	1
of all data in	1
of all but the	1
of all variables. Obviously,	1
of all cleanup of	1
of one iteration should	1
of one iteration before	1
of cache for the	1
of cache space by	1
of cache space used	1
of cache lines to	1
of cache space. A	1
of cache space. Putting	1
of cache misses is	1
of cache misses and	1
of cache organization for	1
of cache space, as	1
of cache evictions and	1
of integer register variables	1
of integer operations. This	1
of class C1, so	1
of floating point variables	1
of floating point register	1
of floating point registers	1
of floating point operations	1
of floating point expressions	1
of floating point operands	1
of floating point instructions.	1
of floating point expressions.	1
of floating point division.	1
of each function relative	1
of each vector can	1
of each vector register	1
of each integer type.	1
of each object are	1
of each object should	1
of each array is	1
of each array element	1
of each version of	1
of each table element	1
of each run in	1
of each string is	1
of each row by	1
of each factor rather	1
of each step of	1
of each element, bits	2
of each method, it	1
of example container classes	1
of example 15.1b to	1
of example 12.4b and	1
of most library functions	1
of using the vector	1
of using the same	1
of using the register	1
of using the newest	1
of using a software	1
of using a long	1
of using a template	1
of using a common	1
of using an intermediate	1
of using static linking	1
of using static here	1
of using pointers and	1
of using pointers rather	1
of using dynamic memory	1
of using exception handling	1
of using references rather	1
of using classes. 7.2	1
of using bitwise operators	1
of using smart pointers	1
of using powers of	2
of using ready made	1
of Intel vector classes:	1
of Intel C++ compilers.	1
of Intel CPUs cannot	1
of Intel microprocessors are	1
of b is guaranteed	1
of b is 400	1
of b will be	1
of b into a	1
of library functions linked	1
of i to float	1
of i to four	1
of i in order	1
of i will appear	1
of i which can	1
of i which will	1
of i into the	1
of i must be	1
of i ; i	1
of float or double	1
of two different implementations	1
of two double precision	1
of two induction variables:	1
of two double. The	1
of object files and	1
of object p points	1
of object oriented programming	3
of object pointed to	1
of static and global	1
of static data is	1
of static linking is	1
of static libraries. A	1
of 64-bit integer calculations.	1
of 64-bit Windows may	1
of 64-bit integers. The	1
of 64-bit software, but	1
of C++ and assembly	2
of C++ and Fortran	1
of C++ but is	1
of C++ should allow	1
of C++ compilers to	1
of C++ projects can	1
of C++ relates to	1
of such container classes.	1
of such contentions is	1
of such checks makes	1
of efficient container classes.	1
of array elements of	1
of array ; jump	1
of array element a[i]	1
of array bounds is	1
of array elements. Example:	1
of possible pointer aliasing	1
of possible overflow on	1
of possible inputs is	1
of possible inputs. Let's	1
of possible remedies against	1
of clock pulses since	1
of objects is not	1
of objects is often	1
of objects is known	1
of objects is high	1
of objects in a	1
of objects in computer	1
of objects can be	1
of objects they contain	1
of variable size can	1
of variable storage are	1
of variable storage Variables	1
of variable size. The	1
of variable storage............................................................................. 26	1
of any function are	1
of any size other	1
of some of the	1
of some long vector	1
of some help if	1
of variables can be	1
of return prediction). 149	1
of 2 is faster	1
of 2 and the	1
of 2 in example	1
of 2 in order	1
of 2 can be	1
of 2 // Still	2
of 2 or not.	1
of 2 if the	4
of 2 if a	1
of 2 if possible	1
of 2 by using	1
of 2 when multiplying	1
of 2 then the	2
of 2 then N&(N-1)	1
of 2 double Intel	1
of 2 return powN<(N	1
of 2 template <int	1
of 2 does not	2
of 2 Integer division	1
of 2 (See page	1
of 2 applies only	1
of 2 (i.e. 2,	1
of table lookup can	1
of performance on AMD	1
of performance has high	1
of performance monitoring options.	1
of software that dates	1
of software can cause	1
of software with network	1
of software into an	1
of software programmers to	1
of software specifies the	1
of software development, and	1
of software develop- ment	1
of order or do	1
of order execution All	1
of order execution .................................................................................................	1
of 32-bit integers and	1
of branch that can	1
of branch prediction. A	1
of branch prediction. If	1
of member pointers if	1
of elements is small	1
of elements is known	2
of elements to store	1
of elements in a	3
of elements in an	1
of elements in vector	1
of elements in each	1
of elements in table	1
of elements in list	1
of elements per vector.	2
of elements per row	1
of elements Total size	2
of elements Size of	1
of const double A	1
of 4 floats A	1
of 4 floats exp	1
of call and return	1
of 8 - 64	1
of 8 bits each,	1
of 8 bytes each.	1
of 8 kb size	1
of operating system All	1
of operating system......................................................................................... 6	1
of unsigned integers to	1
of register is volatile.	1
of register stack versus	1
of register variables. 9.5	1
of register temp in	1
of register renaming and	1
of 64 bits total	1
of 64 bits each.	1
of 64 bytes. Each	1
of optimization is needed.	1
of optimization is requested.	1
of optimization can sometimes	1
of optimization by executing	1
of how to use	1
of how to make	2
of how to do	1
of how to avoid	1
of how to break	1
of how compilers and	1
of how compilers work.	1
of code. The second	1
of code. Example: //	1
of code. Each compiler	1
of code. Furthermore, most	1
of time. The objects	1
of time. A part	1
of time. You can	1
of template parameters. A	1
of registers is very	1
of registers is doubled.	1
of registers has been	1
of registers used. Conversion	1
of pointers to the	1
of pointers to its	2
of pointers may not	1
of pointers because this	1
of test data and	1
of test data instead	1
of test data. The	1
of test data. That	1
of user interface framework	2
of user interface framework...........................................................................	1
of user input in	1
of user interfaces and	1
of these functions is	1
of these instruction sets.	2
of these cache lines	1
of these compilers can	1
of these two values	1
of these two gives	1
of these also treat	1
of these methods are	1
of these methods then	1
of these directives are	1
of these conditions is	1
of these classes. Size	1
of these purposes. Unfortunately,	1
of these manuals are	1
of these guidelines by	1
of these obstacles and	1
of these categories: File	1
of 16 bits each,	1
of 16 bytes. Some	1
of system code. In	1
of system programming, but	1
of 32 bits each,	1
of programming will typically	1
of programming language is	1
of programming language and	1
of programming language Before	1
of programming language ...............................................................................	1
of programming languages and	1
of programming languages, operating	1
of programming style. The	2
of programming style. It	1
of programming style. Some	1
of programming experience before	1
of dynamic memory allocation	4
of dynamic memory allocation.	1
of dynamic allocation and	1
of dynamic linking are:	1
of bits in an	1
of operations in order	1
of operations can be	1
of type short int	1
of type T //	1
of type int. Therefore,	1
of short vector math	1
of simple types because	1
of instructions for fast	1
of processors is better.	1
of processors that support	2
of processors on which	1
of available registers is	1
of error is to	1
of error known as	1
of error reporting. For	1
of making the number	1
of making the arrays	1
of making the container	1
of making the entire	1
of making two threads	1
of making software more	1
of making sure that	2
of times to test	1
of times each function	1
of times before the	1
of times CriticalFunction is	1
of stack unwinding The	1
of stack unwinding ..............................................................................	1
of its time in	1
of its time on	1
of its time waiting	1
of its members are	1
of its binary representation	1
of its child class	1
of its arguments. This	1
of its simplicity. But	1
of CPUs is increasing	1
of CPUs such as	1
of CPUs increased the	1
of CPUs unequally can	1
of extra instructions for	1
of extra resources. Each	1
of assembly language for	1
of large memory blocks,	1
of large arrays if	1
of arrays and structures.	1
of arrays in C	1
of arrays that you	1
of arrays with bounds	1
of work into each	1
of calls to log,	1
of calculations then you	1
of calculations without the	1
of calculations forms a	1
of execution speed to	2
of processor models on	2
of bytes to find	1
of big memory blocks	1
of threads is discussed	1
of threads with the	1
of necessary communication between	1
of element number i.	1
of specific CPU models	1
of specific processor models	1
of virtual function calls	1
of virtual functions. The	1
of several drivers, configuration	1
of common string functions	1
of exception handling Exception	1
of allocated resources. The	1
of small microcontrollers: Smaller	1
of overflow is "undefined".	1
of overflow and loss	1
of overflow and redo	1
of overflow Integer to	1
of integers to floating	1
of integers and other	1
of integers with a	1
of good development tools,	1
of Linux and perhaps	1
of classes and member	1
of precision for reasons	1
of precision on most	1
of four parameters to	1
of four (or eight)	1
of four floats F32vec4	1
of four float. The	1
of four float's fits	1
of parameters then make	1
of known type, but	1
of container classes are	1
of container classes on	1
of eight 16-bit integers	1
of eight 16-bit integers.	1
of whether you are	1
of whether they are	1
of list plus i*sizeof(S1).	1
of structure and class	1
of structure or class	2
of doing the same	1
of doing floating point	2
of doing type conversions:	1
of doing things only	1
of doing whole program	1
of every intermediate version.	1
of every version. For	1
of standard C, specifying	2
of hardware platform The	1
of hardware platform for	1
of hardware platform has	1
of hardware platform .......................................................................................	1
of optimizing the software	1
of optimizing ............................................................................................... 4	1
of optimizing University courses	1
of memory. See page	1
of memory. These methods	1
of memory. One kilobyte	1
of information about bugs,	1
of intermediate code is	1
of both parent and	1
of programs should be	1
of problems you must	1
of space on the	1
of microprocessor The benchmark	1
of microprocessor ........................................................................................... 6	1
of branches and function	1
of branches and switch	1
of branches that take	1
of branches every time	1
of typically 30 ms	1
of complicated algorithms is	1
of handling errors without	1
of handling cleanup jobs	1
of dependency chains is	1
of their time waiting	1
of their execution time	1
of their 23 software.	1
of their superior performance/price	1
of Boolean operands The	1
of Boolean operands. You	1
of Boolean algebra, it	1
of 256 Kbytes to	1
of intrinsic vectors requires	1
of signed integers in	1
of development are more	1
of mathematical functions that	1
of mathematical purity. In	1
of mathematical purity. For	1
of separate layers of	1
of #include directives and	1
of #include directives. This	1
of various instruction sets	1
of zero within a	1
of parameter transfer is	2
of parameter transfer for	1
of induction variables can	1
of n being out	1
of n floats: float	1
of string classes use	1
of end user's computers.	1
of && is false,	1
of data. The code	1
of data. The need	1
of data. The similarity	1
of data. This is	1
of data. This makes	1
of data. A hash	1
of data. Use an	1
of runtime DLL's (dynamically	1
of || is true,	1
of expressions and other	1
of expressions where operands	1
of longer response times	1
of optimizations is that	1
of optimizations in different	1
of graphics objects in	1
of graphics cards, etc.	1
of public functions and	1
of Intel, AMD and	9
of microprocessors are very	1
of microprocessors from Intel,	1
of platform is obviously	1
of your software. A	1
of bigger vector registers.	1
of << and |	1
of binary data storage	1
of storage is determined	1
of storage space. It	1
of 10 - 20	1
of 10 double xpow10(double	2
of CPUs. The performance	1
of CPUs. These costs	1
of a[i] and shift	1
of advanced development tools.	1
of advanced mathematical functions	1
of advanced features rarely	1
of points is not	1
of range is possibly	1
of range and we	1
of range } }	1
of range (see page	1
of range printf(Greek[n]); }	1
of modules or resource	1
of smaller sizes (char,	1
of things that the	1
of things you can	1
of main memory. A	1
of my experiment are	1
of errors in C++	2
of unused bytes in	1
of unused bytes can	1
of columns a power	1
of columns in a	3
of dynamically linked library	1
of consecutive variables. Example:	1
of modern microprocessors is	2
of modern CPUs, as	2
of modern software, it	1
of 2. The following	1
of 2. Example: //	2
of 2. Using hexadecimal	1
of 2. Objects bigger	1
of 2. Contentions in	1
of variables. Move the	1
of lines is 8*1024/64	1
of position-independent code. 147	1
of out-of-order execution. The	1
of out-of-order execution, you	1
of resources. For these	1
of resources. Consider running	1
of task switching. This	1
of costs to multithreading	1
of S1 in the	1
of S1 aligned //	1
of math functions should	1
of temp before it	1
of inlined functions may	1
of constants is very	1
of constants we can	1
of bool in order	1
of special vector registers.	1
of algorithm is very	1
of sum depends on	1
of Linux, BSD and	1
of registers. This problem	1
of registers. There are	1
of alignment problems. It	1
of compatibility with some	1
of compatibility with existing	1
of compatibility with legacy	1
of compatibility problems and	2
of macro expansions. Programmers	1
of 100 floats for	1
of 100 numbers: //	1
of 100 doubles: union	1
of reduced performance. 25	1
of operations. A complex	1
of time, it also	1
of copying it Use	1
of copying blocks of	1
of optimization. 14 Portability	1
of containers is the	1
of disk caching, but	1
of unknown brand or	1
of counters in each	1
of 2, so the	1
of full optimization. It	1
of N with the	1
of N into the	1
of N template <int	1
of RAM memory may	1
of RAM memory. Big	1
of RAM memory. Efficient	1
of rows and columns	2
of compiling multiple .cpp	1
of compiling without -fpic	1
of precision. Let's repeat	1
of algebraic reduction. For	1
of structures and classes.	1
of structures (without member	1
of logical processors available	1
of logical processors. There	1
of heap management and	1
of smart pointers are	1
of nontemporal write instructions	1
of bounds checking is	1
of resource problems and	1
of cores in order	1
of cores or logical	1
of cores will grow	1
of parallel execution. Example:	1
of calculating the value	1
of ebx that was	1
of e.g. four floats.	1
of sizes other than	1
of sizes 1, 2,	1
of list[i] is equal	1
of statements that you	1
of course a considerable	1
of course be the	1
of course be a	1
of course make the	1
of course also time	1
of course inefficient. Variables	1
of course far from	1
of course system-specific. In	1
of templates where the	1
of templates makes the	1
of CriticalFunction in example	1
of seconds and wait	1
of CPU. These methods	1
of f is set	1
of f cout <<	1
of F1 without returning.	1
of setting a register	1
of added information about	1
of approximately seven significant	1
of order. See page	1
of order. Long dependency	1
of situations where the	1
of 256-bit size are	1
of finding a suitable	1
of purposes such as	1
of usability problems and	1
of overflow. The exception	1
of overflow. Table 8.1	1
of storage. See page	1
of addition, subtraction, multiplication,	1
of everything else. This	1
of everything else. System	1
of (or in addition	1
of parent and child	2
of parent class and	1
of temporary objects for	1
of procedure 4 Most	1
of iterations is not	1
of background processes running,	1
of CPUs, different types	1
of additions and shift	1
of additions and multiplications.	1
of j as index	1
of fastest possible access	1
of devices and machines	1
of branch. After each	1
of zero. A good	1
of multiplying by 3,	1
of software. For more	1
of jump targets. A	1
of vectors. 12.10 Conclusion	1
of lazy loading of	1
of lazy binding is	1
of 1, 2, 4	1
of vector, such as	1
of vector, bits Vector	1
of vector, bits Instruction	1
of algebra in a	1
of algebra are the	1
of suitable containers class	1
of Java and C#	1
of Java are based	1
of optimizations. The results	1
of exceptions a function	1
of machine instructions executed,	1
of changes in the	1
of storing data without	1
of storing strings in	1
of 2: // Example	1
of 2: template <bool	1
of composite type is	1
of bits. The method	1
of bits. This is	1
of speed. Assume that	1
of thousand numbers as	1
of Intel's Math Kernel	1
of course, and causes	1
of course, that you	1
of course, if the	1
of course, because you	1
of course, but this	1
of scope or namespaces.	1
of Func with a	1
of Func ;a ;r	1
of c1 before MemberPointer	1
of portability to 64-bit	1
of comparing signed with	1
of computers and my	1
of B before the	1
of five manuals is	1
of five manuals. See	1
of five manuals: 1.	1
of poor CPU dispatching.	1
of self-relative references in	1
of truncation and make	1
of powerful development tools.	1
of C++, directly compiled	1
of C++, Pascal and	1
of mixed sizes. For	1
of branches. Manual 3:	1
of communication with a	1
of inheritance is now	1
of backwards compatible instruction	1
of backwards compatibility with	1
of memset and memcpy	1
of context switches is	1
of context switches by	1
of reducing the number	1
of development, testing and	1
of abc is a	1
of abc is 12	1
of abc can be	1
of 250 ms. This	1
of computing resources. Typically,	1
of pointers, by initializing	1
of physical processors and	1
of nonzero floating point	1
of unacceptably long response	1
of n! is calculated	1
of Basic is Visual	1
of Basic was too	1
of valid addresses, or	1
of CPU-intensive software is	1
of CPU-intensive programs when	1
of manuals. 7.1 Different	1
of 18 software optimization	1
of two. In the	1
of ebx. The next	1
of ebx. Only the	1
of m and therefore	1
of bad CPU dispatching.	1
of resources, and the	1
of declaring an integer	1
of defining integer types	1
of precision, as explained	1
of precision, especially in	1
of u.f We can	1
of overflow, such as	1
of modifications to the	1
of efficiency. The expression	1
of efficiency. Using unaligned	1
of transferring the variable	1
of structured and object-oriented	1
of structured software development	1
of going either way.	1
of float, double and	1
of alloca over new	1
of unit-testing It is	1
of unit-testing ...................................................................................... 156	1
of sequential instructions, where	1
of error. The calculations	1
of abstraction is a	1
of abstraction in the	1
of abstraction which makes	1
of code). If the	1
of aligning dynamically allocated	1
of numbers: // Example	1
of calculations: // Example	1
of calculations, where each	1
of xxn rather than	1
of int. A short	1
of position- independent code,	1
of C++. Yet, D	1
of A, B and	1
of text strings in	1
of Pascal used an	1
of overflow: // Example	1
of coefficients is calculated	1
of longjmp if possible.	1
of competing brands of	1
of efficiency, platform independence,	1
of bookkeeping in order	1
of technical problems. Some	1
of organizing the data.	1
of measuring performance by	1
of (0,0,0,0,0,0,0,0) __m128i zero	2
of (0,0,0,0,0,0,0,0) Is16vec8 zero(0,0,0,0,0,0,0,0);	1
of microprocessor. These algorithms	1
of returning a composite	1
of security. b &	1
of (2n / b)	1
of vectors, as is	1
of truncation. This is	1
of double, then sizeof(S1)	1
of mispredictions (see page	1
of allocations is limited.	1
of n. The constant	1
of interpreting the same	2
of jumping around and	1
of x. This is	1
of (2,2,2,2,2,2,2,2) __m128i two	2
of (2,2,2,2,2,2,2,2) Is16vec8 two(2,2,2,2,2,2,2,2);	1
of accumulators for floating	1
of interpretation or compilation	1
of expressions, but no	1
of jobs. For example,	1
of c+b will generate	1
of CriticalFunction. You cannot	1
of keeping a CPU	1
of keeping data together.	1
of dangers to be	1
of semaphores, mutexes, etc.	1
of course. A branch	1
of course. It is	1
of it, for example	1
of range"; } else	1
of range"; 134 }	1
of range. The next	1
of range. This may	1
of programming. The CPU	1
of programming. 13.3 Difficult	1
of starting and stopping	1
of underflow. The fact	1
of predefined vector classes	1
of ArraySize by the	1
of experiments on seven	1
of irrelevant software installed,	1
of cross-platform portability. Unfortunately,	1
of iterations. The advantage	1
of Numerically Intensive Codes",	2
of sharing the same	1
of digital building blocks	1
of received data in	1
of matrix[j][0] is calculated	1
of squares: const int	1
of sources. For example,	1
of algebra, we may	1
of factorials: static const	1
of factorials: const int	1
of coprocessors is beyond	1
of removing superfluous code,	1
of relieving a syntax	1
of b+c will be	1
of convenience - there	1
of B. In order	1
of sets). Here, /	1
of strange and unexpected	1
of sets) (line size)	1
of frustration and waste	1
of algebra. For example,	1
of cc[i]+2 is AND'ed	1
of titles. Literature on	1
of 64. Each cache	1
of fine-tuning, testing, verifying	1
of Mathcad (v. 15.0)	1
of simultaneous lookups Max.	1
of view. This instruction	1
of 0x800 apart. I	1
of switching to protected	1
of i&15 is guaranteed	1
of if. This is	1
of solving the problem	1
of (a+b). This can	1
of underflow: // Example	1
of it). This can	1
of randomness in order	1
of &list[100] is (int)(&list[100])	1
of it) load into	1
of doubles by comparing	1
of verifying, debugging and	1
of downloaded program updates	1
of structures: // Example	1
of multithreading. 7.30 Exceptions	1
of 1/n! 1., 1./2.,	1
of N: #define N1	1
of profiling. When a	1
of modularity. For example,	1
of yesterday's big mainframe	1
of identifier names. We	1
of attack for hackers.	1
of security, but may	1
of matrices. An efficient	1
of Denmark. Copyright ©	1
of temp. The compiler	1
of ADC (add with	1
of synchronizing and communicating	1
of habit, it is	1
of CPU-time in library	1
of DLLs, configuration files,	1
of redesign. Some software	1
of -fpic. This will	1
of research on CPU	1
of rows/columns in matrix	1
of inte- ger or	1
of sum. The trick	1
of managing a memory	1
of people. I simply	1
of jumps, calls and	1
of RAM, a lot	1
of data", where it	1
of rounding, but neither	1
of losing precision. The	1
of pending instructions in	1
of usability. This is	1
of ways). If a	1
of range"); or better,	1
of activating the very	1
of occupying a cache	1
to the function through	1
to the function go	1
to the function definition.	1
to the function declaration.	1
to the function prototype:	1
to the code in	1
to the code cache	1
to the compiler at	1
to the time it	2
to the different versions	1
to the same memory	2
to the same cache	2
to the same set	1
to the same object	1
to the same object.	1
to the same resource	1
to the same object,	1
to the CPU than	1
to the instruction set	1
to the instruction set.	1
to the instruction xor	1
to the point where	1
to the integer value	1
to the class or	1
to the most used	1
to the most critical	1
to the Intel libraries.	1
to the library function,	1
to the object instead	1
to the number of	1
to the value 0x2C	1
to the called function.	1
to the address of	3
to the critical function.	1
to the critical stride,	1
to the operating system	1
to the operating system.	1
to the first sum,	1
to the new block.	1
to the new context.	1
to the user and	1
to the user if	1
to the user interface.	1
to the constant 5.	1
to the stack is	1
to the stack when	1
to the stack pointer.	1
to the Gnu compiler	2
to the function. The	1
to the function. In	1
to the calculations are	1
to the best possible	1
to the thread in	1
to the exception handler	1
to the power of	3
to the AVX instructions.	1
to the standard template	1
to the standard calling	1
to the sign bit,	1
to the copy constructor	1
to the allocation process	1
to the next block.	1
to the next step	1
to the dispatcher function.	1
to the programmer that	1
to the end user.	4
to the calling program	1
to the second sum,	1
to the x86 instruction	1
to the old Pentium	1
to the appropriate function	1
to the appropriate version	4
to the desired function	1
to the desired version	2
to the desired function.	1
to the desired version.	1
to the inlined function	1
to the inlined function.	1
to the preceding one	1
to the preceding label	1
to the right in	1
to the right version	2
to the right format	1
to the offset of	1
to the object. The	1
to the object. If	1
to the so-called partial	1
to the total execution	1
to the total calculation	1
to the total computation	1
to the disk cache.	1
to the situation where	1
to the previous value.	1
to the vector. The	1
to the length of	1
to the beginning of	4
to the current position.	1
to the user. Making	1
to the user. Compatibility	1
to the hard disk	1
to the required amount	1
to the general case	1
to the table. Optimization	1
to the rules of	1
to the availability of	1
to the structure. Incrementing	1
to the profiler. The	1
to the rest of	1
to the console or	1
to the modulo operator	1
to the dispatcher. //	1
to the area of	1
to the diagonal. The	1
to the selected version	1
to the parameter, and	1
to the nearest integer.	1
to the $B1$2 label	1
to the CPU-specific versions	1
to the first-in-last-out nature	1
to the container. Can	1
to the reader what	1
to the tolerance may	1
to the IEEE standard	1
to the truth depends	1
to the standards for	1
to the next. The	1
to the exponent: //	1
to the design of	1
to the device. Any	1
to is a power	1
to is identical to	1
to is deleted when	1
to is known. Example:	1
to a = b	1
to a function is	1
to a function in	2
to a function that	1
to a function prototype	1
to a more well-structured	1
to a different code	1
to a different platform	1
to a different address.	1
to a class member	2
to a floating point	1
to a pointer of	1
to a pointer to	4
to a pointer then	1
to a float or	1
to a static object	1
to a clock cycle	1
to a variable in	1
to a variable that	1
to a variable declaration	1
to a table of	1
to a branch tree.	1
to a < b	1
to a const function	1
to a new version	1
to a file is	1
to a function. Using	1
to a specific CPU	3
to a specific load	1
to a virtual table	1
to a signed integer	1
to a better understanding	1
to a longer size	1
to a graphics function	2
to a graphics library	1
to a public variable	1
to a smaller size	1
to a pointer. It	1
to a global variable	1
to a limited audience	1
to a local const	1
to a local variable.	1
to a macro in	1
to a usability problem	1
to a pure function	1
to a derived class,	1
to a base class	1
to a structure. For	1
to a command or	1
to a valid address.	1
to a dispatcher. The	1
to a dramatic degradation	1
to a contained object	1
to a wrong type.	1
to a complete redesign	1
to a non-member function,	1
to a floppy disk.	1
to a matrix. For	1
to a narrow range	1
to a driver involves	1
to a printer or	1
to and you can	1
to be the optimal	1
to be the fastest	1
to be a register	1
to be a bottleneck	1
to be in the	2
to be as small	1
to be an expression	1
to be an obvious	1
to be an annoying	1
to be very long	1
to be faster than	1
to be stored in	2
to be less than	2
to be 0 or	2
to be available in	1
to be compiled with	1
to be done at	1
to be done outside	1
to be calculated with	1
to be able to	3
to be put into	1
to be too small.	1
to be too small,	1
to be transferred in	4
to be read and	1
to be aligned by	1
to be higher due	1
to be divisible by	1
to be called. It	1
to be predicted by	1
to be loaded from	1
to be loaded at	1
to be limited by	1
to be inlined by	1
to be possible. Template	1
to be changed to	1
to be true anyway.	1
to be initialized when	1
to be scattered around	1
to be mispredicted (See	1
to be mispredicted whenever	1
to be false regardless	1
to be converted to	1
to be designed so	1
to be fragmented and	1
to be distributed to	2
to be slower or	1
to be slower than	1
to be aware of	2
to be available, we	1
to be equal to	1
to be updated every	1
to be expressed as	1
to be cleaned up	1
to be cleaned up,	1
to be obsolete. Programmers	1
to be spaced by	2
to be filled up.	1
to be stored. All	1
to be inlined. But	1
to be evicted from	1
to be pure. This	1
to be overwritten, and	1
to be irrelevant within	1
to be profitable (see	1
to be cached more	1
to be deleted. User	1
to be slower. Many	1
to be moved. A	1
to be installed. The	1
to be mispredicted, which	1
to be restored before	1
to be saved. Any	1
to be renewed. Context	1
to be platform-independent and	1
to be reloaded eight	1
to be signed. Be	1
to be noticeable but	1
to be resized in	1
to be annoying. We	1
to are constant. 14.2	1
to can be accessed	1
to can be accessed.	1
to function names. But	1
to by r is	1
to by p is	1
to code the offset	1
to an integer takes	1
to an object of	2
to an array of	1
to an array and	1
to an address divisible	1
to an intermediate file	1
to an output file.	1
to an inlined 15.1b	1
to an integer, and	1
to an integer, or	1
to an existing program.	1
to int in the	1
to int x =	1
to x 43 speculatively	1
to have the same	1
to have the member	1
to have a standard	1
to have a strategy	1
to have no other	1
to have two or	1
to have many different	1
to have separate containers	1
to have just two	1
to have constructors and	1
to this the time	2
to this number we	1
to this manual at	3
to this problem is	2
to this problem are	1
to this argument is	1
to use the same	1
to use the functions	1
to use the most	1
to use the Intel	1
to use the static	1
to use the const	1
to use the bit	1
to use the AVX	1
to use the well	1
to use the high	1
to use the vectors	1
to use the #pragma	1
to use the bitwise	1
to use the default	1
to use the memcpy	1
to use the Gnu,	1
to use the smallest	3
to use the newest	1
to use the lrint	1
to use a compiler	1
to use a different	1
to use a loop	2
to use a set	1
to use a version	1
to use a new	1
to use a constant	1
to use a container	2
to use a lookup	2
to use a systematic	1
to use a union,	1
to use and returns	1
to use in case	1
to use for a	1
to use for each	1
to use for many	1
to use that for	1
to use it for	1
to use an integer	1
to use than pointers	1
to use than others.	1
to use this complicated	1
to use vector operations	1
to use vector instructions	1
to use vector operations.	1
to use vector classes,	1
to use float rather	1
to use multiple CPU	1
to use static linking,	1
to use 64-bit systems	1
to use 32-bit integers	1
to use dynamic memory	2
to use assembly code	1
to use assembly language.	1
to use exception handling	1
to use inline assembly	1
to use intrinsic functions	1
to use induction variables	1
to use string classes,	1
to use later in	1
to use depends on	1
to use vectorized code	1
to use it. Complicated	1
to use algebraic manipulations	1
to use hyperthreading or	1
to use denormal numbers.	1
to use SafeArray: //	1
to use try, catch,	1
to memory without loading	1
to memory management and	1
to at a lower	1
to data in the	1
to data through function	1
to data within the	1
to make the function	2
to make the code	4
to make the compiler	1
to make the data	1
to make the functions	1
to make the most	1
to make the number	1
to make the array	1
to make the address	2
to make the matrix	1
to make the division	1
to make the local	1
to make the rows	1
to make the measurements	1
to make the scope	1
to make the SelectAddMul	1
to make a function	1
to make a CPU	1
to make a loop	1
to make a pointer	1
to make a variable	1
to make a test	1
to make a new	2
to make a single	1
to make a small	1
to make a multiplication	1
to make a piece	2
to make a negative	1
to make a positive	1
to make a misprediction	1
to make a reliable	1
to make a non-inlined	1
to make a variable-size	1
to make a sensible	1
to make a lookup-table	1
to make a thread-like	1
to make a zip	1
to make a destructor.	1
to make a bit-mask	1
to make and therefore	1
to make it in	1
to make it possible	1
to make code that	1
to make this work	1
to make more efficient	1
to make different objects	1
to make one version	1
to make floating point	1
to make multiple code	1
to make two versions	1
to make table of	1
to make software that	1
to make software packages	1
to make member functions	1
to make register variables	1
to make pointers efficient,	1
to make sure the	6
to make sure that	9
to make sure it	1
to make sure its	1
to make sure everything	1
to make overflow checks	2
to make container classes	1
to make support for	1
to make shared objects	1
to make their software	1
to make better use	1
to make aligned arrays	1
to make special versions	1
to make 16-bit programs,	1
to make profiling feasible.	1
to make explicit checks	1
to make CPU- specific	1
to make thread-specific data	1
to make log2 a	1
to make memory-hungry software	1
to different dynamically allocated	1
to different platforms because	1
to different tasks. For	1
to functions and public	1
to CPU dispatching. Underestimating	1
to other parts of	1
to other platforms and	1
to other platforms as	1
to point to a	1
to all of these	1
to all class objects	1
to all allocated objects	1
to all local non-member	1
to all instances of	1
to all zeroes. Example:	1
to one of the	2
to one of these	1
to one class to	1
to one thread than	1
to cache misses, branch	1
to integer can be	1
to integer takes a	1
to integer without SSE2	1
to integer conversion Conversion	1
to integer According to	1
to set the flush-to-zero	1
to set the parentheses	1
to set an array	1
to set number 0x1C.	1
to set up the	1
to set seconds to	1
to class C1 or	1
to floating point is	2
to floating point if	1
to floating point numbers	1
to floating point expressions.	1
to floating point Conversion	1
to floating point. Conversion	1
to floating point: //	1
to each compiler with	1
to each other (not	1
to each new version	1
to each element in	2
to each task or	1
to do the CPU	1
to do the necessary	1
to do the check	1
to do the dispatching	1
to do the reductions	1
to do the algebraic	1
to do the reduction	1
to do the divisions	1
to do the conversion.	1
to do the devirtualization	1
to do is to	1
to do a floating	1
to do a lot	1
to do a thorough	1
to do and which	1
to do it explicitly.	1
to do as much	1
to do an integer	1
to do this optimization	1
to do this optimization.	1
to do this manually.	1
to do more complicated	1
to do more reductions	1
to do when you	1
to do different kinds	1
to do integer operations	1
to do multiple things	1
to do two additions	1
to do two jobs	1
to do such a	1
to do any algebraic	1
to do some measurements	1
to do so is	2
to do so will	1
to do so (i.e.	1
to do operations on	1
to do simple integer	1
to do calculations on	1
to do optimizations such	1
to do things in	2
to do things with	1
to do something about	2
to do this: Use	1
to do this. Unfortunately,	1
to do so. The	1
to do so. See	1
to do so. 58	1
to do manually. It	1
to do interprocedural optimizations	1
to do experiments in	1
to do immediately before	1
to do so). A	1
to do cross-module optimizations	1
to do searches of	1
to example 15.1b and	1
to using a profiler.	1
to using new and	1
to using templates (see	1
to using templates. Two	1
to using templates. Ready	1
to using namespaces. 65	1
to using hyperthreading. On	1
to using hyperthreading, but	1
to using inheritance. There	1
to double In example	1
to double before multiplying	1
to double precision before	1
to b for (i	1
to b memcpy(b, a,	1
to i and shifts	1
to float in this	1
to float conversion Conversion	1
to float conversions can	1
to multiple operating systems.	1
to multiple inheritance class	1
to static or global	1
to 64-bit mode, as	1
to such a formalism.	1
to such an object	1
to efficient use of	1
to array elements. The	1
to many hard working	1
to many users. Firewalls,	1
to any other address	1
to any other number.	1
to any known hardware	1
to some of the	1
to some other variable	1
to some extra complications.	1
to some positive value,	1
to return from the	1
to return from functions	1
to return a+1;. The	1
to 2 by putting	1
to 2 Mbytes. There	1
to very big data	1
to software optimization. Everything	1
to 32-bit integers, and	1
to const definitions when	1
to 4 clock cycles.	1
to call the function	1
to call the library	2
to call the version	1
to call the destructor	2
to call the ReadTSC	1
to call a function	1
to call a virtual	1
to call a polymorphic	2
to call a non-virtual	1
to call or any	1
to unsigned in order	1
to unsigned for fast	1
to unsigned if you	1
to unsigned int before	1
to first look up	1
to first convert the	1
to 64 bits. This	1
to take a whole	1
to take more than	1
to take into account	1
to take branch prediction	1
to take extra precautions	1
to take advantage of	2
to take longer time	1
to take special precautions	1
to take maximum advantage	1
to take care of	2
to optimization are discussed	1
to optimization by compiler	2
to optimization by CPU	1
to optimization by CPU.............................................................................81	1
to optimization MS compiler	2
to optimization are. Dynamic	1
to test the different	1
to test the performance	1
to test the sign	1
to test a software	1
to test in the	1
to test for the	1
to test // Time	1
to test // (time	1
to test on several	1
to test this is	1
to test when software	1
to test all branches	1
to test each function	1
to test 16 bytes	1
to test several different	1
to systems with big-endian	2
to user input never	1
to these problems is	1
to even allocate more	1
to always use the	1
to always true or	1
to always behave according	1
to access the system	1
to access the file	1
to access a floating	1
to access a file	1
to access a public	1
to access a multidimensional	1
to access it the	1
to access an object	1
to access an element	1
to access x as	1
to access these instructions.	1
to 16 bytes by	1
to 16 lines in	1
to 32 bit systems:	1
to 0 and generate	2
to 0 // this	1
to type in the	1
to & unless you	1
to simple things like	1
to simple actions like	1
to error handling. You	1
to stack memory at	1
to stack memory outside	1
to stack memory. Copying	1
to its variables called	1
to its own caller,	1
to its functions, called	1
to its child class.	1
to assembly language modules	1
to ; store result	1
to arrays of structure	1
to arrays that are	1
to work in both	1
to work for very	1
to work with any	1
to work on a	1
to work on all	1
to work best on	1
to work around this	1
to (see page 73).	1
to execution time. 4	1
to avoid the loop	1
to avoid the calls	1
to avoid the overhead	1
to avoid the time-	1
to avoid the burdensome	1
to avoid that the	1
to avoid that some	1
to avoid this problem	1
to avoid this wasteful	1
to avoid multiple threads	1
to avoid long dependency	2
to avoid these problems.	1
to avoid dynamic memory	2
to avoid running the	1
to avoid running two	1
to avoid conversions from	1
to avoid this. See	1
to avoid this. (In	1
to avoid them. Some	1
to avoid modulo operations:	1
to avoid hard-to-find errors,	1
to speed up the	1
to speed up multiplications	1
to c = a	1
to single precision. These	1
to virtual function }	1
to virtual member functions	1
to compile a shared	1
to compile for different	1
to compile with the	1
to compile with -mcmodel=large,	1
to compile for. The	1
to exception handling in	1
to small devices, but	1
to integers of the	1
to integers use truncation	1
to matrix a in	1
to Linux in almost	1
to cause contentions in	1
to cause seven memory	1
to cause overflow, this	1
to four bits, and	1
to another by assignment.	1
to another class. It	1
to another platform. 14.8	1
to get a good	1
to get a realistic	1
to get as much	1
to get an integral	1
to get x to	1
to get more reproducible	1
to get used to	1
to get library versions	1
to get access to	1
to get reliable results	1
to get reproducible results.	1
to get rid of	1
to check the code	1
to check for the	1
to check for all	1
to check for overflow	1
to check for exceptions	1
to check that thrown	1
to check if the	1
to check if an	1
to check if your	1
to check whether an	1
to support different CPUs.	1
to list and make	1
to run the program	1
to run the most	1
to run a little	1
to run a speed-critical	1
to run most of	1
to run two threads	2
to calculate the function	1
to calculate the time	1
to calculate the same	1
to calculate the most	1
to calculate the value	2
to calculate the table	4
to calculate the address	1
to calculate the addresses	1
to calculate the absolute	1
to calculate than the	1
to calculate when long	1
to calculate each value	1
to calculate self-relative addresses	1
to calculate (c+d) before	1
to calculate pow(x,10) with	1
to inline the function	1
to inline the function,	1
to inline a function	1
to inline and optimize	1
to inline this function	1
to hardware interfaces and	1
to add the last	1
to add i to	1
to add new features	1
to add unused columns	1
to add statements like	1
to store the intermediate	1
to store is known	1
to store x in	1
to store data because	1
to store all strings	1
to store each object	1
to store many objects	1
to store objects of	1
to store intermediate data	1
to store intermediate results	1
to store aligned integer	1
to store strings in	1
to store unaligned integer	3
to store help files	1
to store application-specific information	1
to copy the table	1
to copy the entire	1
to copy that the	1
to certain programming principles	1
to addresses divisible by	2
to count how many	1
to count certain events,	1
to program. Many programmers	1
to write the same	1
to write the variable	1
to write the file	1
to write the members	1
to write a +	1
to write 2.0/3.0 than	1
to write _mm_add_epi16(a,b). Two	1
to write if(!a &&	1
to optimize the code	1
to optimize the parts	1
to optimize a piece	1
to optimize for several	1
to optimize code that	1
to optimize this with	1
to optimize this loop?	1
to optimize register allocation	1
to optimize away the	1
to optimize away an	1
to optimize across function	1
to optimize anything else	1
to optimize access, as	1
to optimize caching. Smaller	1
to optimize anything, you	1
to problems of overflow	1
to replace the CPU	2
to replace the branch	1
to replace the Gnu	1
to replace a database	1
to replace a poorly	1
to replace arrays by	1
to replace u[1] by	1
to automatically prefetch data	1
to see the result	1
to see the excessive	1
to see the compiler-generated	1
to see if the	1
to see if a	1
to see if it	1
to see if our	1
to see which part	1
to see which solution	1
to see how well	1
to see whether the	1
to see whether they	1
to see this. It	1
to their 32-bit counterparts.	1
to signed integer doesn't	1
to signed before converting	1
to signed integers before	1
to put the operand	1
to put the task-specific	1
to put a test	1
to put a parenthesis	1
to put a tag	1
to put file access	2
to put time-consuming tasks	1
to put measurement instruments	1
to put time- consuming	1
to zero is sometimes	1
to zero and then	1
to zero for (i	1
to zero that is	1
to zero // Return	1
to zero by using	1
to zero than making	1
to zero at the	1
to zero We can	1
to zero whenever the	1
to zero memset(a, 0,	1
to Microsoft compilers. //	1
to Microsoft Visual Studio	1
to what the preprocessor	1
to end of a	1
to read the performance	1
to read and write	1
to read and understand	1
to read from a	1
to read from memory	1
to give the compiler	1
to give the variable	1
to give each thread	1
to give higher priority	1
to look up the	1
to look up in	1
to actually doing something	1
to load the dynamic	1
to load the framework	1
to load the entire	1
to load a program	1
to load a new	1
to load more than	1
to load several files	1
to load aligned integer	1
to load unaligned integer	3
to control the way	1
to control the addresses	1
to assume the worst	1
to assume that F1	1
to assume that *p+2	1
to assume no pointer	1
to dispatch by CPU	1
to your programming questions	1
to improve the performance	1
to improve cache efficiency,	1
to improve speed without	1
to improve performance. It	1
to improve efficiency. These	1
to binary code and	1
to know how a	1
to know how to	2
to know how this	1
to know whether the	1
to know what the	1
to know about. Function	1
to generate a store	1
to generate a piece	1
to generate an assembly	1
to generate an interrupt,	1
to generate many branch	1
to generate interrupts at	1
to reduce the number	1
to reduce this problem.	1
to reduce example 12.1b	1
to reduce complicated algebraic	1
to reduce various algebraic	1
to reduce (a*b*c)+(c*b*a) to	1
to 10 means that	1
to choose the optimal	1
to choose a software	1
to choose between c2	1
to choose between. It	1
to link with external	1
to just one or	1
to a[i] More examples	1
to require modifications in	1
to switch to protected	1
to start the next	1
to start a new	1
to start and stop	1
to start at an	1
to start calculations on	1
to start up, which	1
to around 1980 where	1
to 5 by another	1
to 5 } }	1
to 5 times faster	1
to go the same	1
to go one way	1
to go away in	1
to go deeper into	1
to change the value	1
to p is not	1
to p is therefore	1
to become fragmented and	1
to become fragmented. An	1
to become invalid, and	1
to become obsolete within	1
to turn on this	2
to turn off the	3
to turn off or	1
to turn off support	2
to network resources, databases,	1
to desired values before	1
to code, you may	1
to find the one	1
to find the address	1
to find the first	1
to find the best	1
to find the optimal	1
to find the right	1
to find and resolve	1
to find out which	1
to find out whether	1
to find hot spots	2
to find elsewhere. Faster	1
to rely on compiler	1
to rely on automatic	1
to produce the same	1
to produce binary code).	1
to produce tables of	1
to out-of-order execution and	1
to platforms that use	1
to temp even though	1
to frame functions then	1
to frame functions. While	1
to prevent memory leaks	1
to prevent cache contention.	1
to prevent such errors	2
to prevent such errors.	1
to prevent optimizing //	1
to save time for	1
to save some information	1
to save time. The	1
to save power. There	1
to save recovery information	1
to tell the compiler	8
to tell a hyperthreading	1
to tell these compilers	1
to tell explicitly what	1
to repeat or to	1
to unroll the loop	2
to unroll a loop	2
to unroll a loop.	1
to exponent } Example	1
to it. This is	1
to it. Therefore, you	1
to optimization. Prefetching data	1
to accessing an object	1
to divide the work	3
to divide the matrix	1
to divide the job	1
to divide the workload	1
to divide i by	2
to mix the two	1
to mix different kinds	1
to mix integer and	1
to mix floating point	1
to mix simple integer	1
to mix signed and	1
to mix mathematical calculations	1
to fit the biggest	1
to fit the actual	1
to fit the eight-element	4
to fit specific needs.	1
to predict the target	1
to predict a switch	1
to predict with certainty	1
to predict which compiler	1
to predict which variables	1
to predict which way	1
to predict which resources	1
to predict whether the	1
to predict correctly whether	1
to 128-bit XMM and	1
to execute the program,	1
to execute then the	1
to execute then measurements	1
to execute it. The	1
to execute CriticalFunction when	1
to execute slower than	1
to execute _mm_empty() after	1
to square by the	1
to fail if the	1
to convert b from	1
to convert float to	1
to convert unsigned integers	1
to handle the strings	2
to handle an unrecoverable	1
to handle only known	1
to handle strings is	1
to handle unknown processors	1
to insert the piece	1
to insert a switch	1
to insert a fixed	1
to insert an instruction	1
to insert optimization hints	1
to consider which method	1
to reading as well	1
to enable the SSE2	2
to enable the desired	1
to enable constant propagation	1
to enable fast floating	1
to e.g. a menu	1
to keep the same	1
to keep the two	1
to keep multiple memory	1
to keep pointers to	1
to keep up with	1
to keep their CPU	1
to keep together on	1
to keep track of	1
to align its b	1
to align large objects	1
to align dynamically allocated	1
to align arrays. //	1
to BSD systems. The	1
to come from example	1
to SSE4.1 and integer	1
to CriticalFunction in example	1
to swap memory to	1
to swap two array	1
to swap two elements:	1
to modify the program	1
to modify a double	1
to F1 only if	1
to gain in speed	1
to gain if such	1
to gain by optimizing	1
to gain by unrolling	1
to apply to. It	1
to allocate the final	1
to allocate a new	2
to allocate a small	1
to allocate more RAM	1
to allocate one big	1
to allocate variable-size arrays	1
to metaprogramming would be	1
to define function names	1
to define 64-bit integers,	1
to define your own	1
to define application-specific instructions	1
to implement the many	1
to implement the dispatch	1
to implement a microprocessor	1
to implement a queue	1
to implement a universal	1
to implement in a	1
to implement this "override"	1
to 256-bit registers named	1
to contain all data	1
to integers. It is	1
to integers. 7.25 Bitfields	1
to help the CPU	1
to help the programmer	1
to transfer a pointer	1
to transfer ownership of	1
to multiply j by	1
to share the same	1
to default constructors, copy	1
to vectorize the code	2
to vectorize the loop	1
to vectorize code explicitly	1
to include the appropriate	1
to include a performance	1
to fully utilize systems	1
to care about the	1
to memcpy rather than	1
to lower case: //	1
to try different libraries	1
to account for unaligned	1
to heavy competition. Processors	1
to general improvements in	1
to zero. The []	1
to zero. You may	1
to zero. 14.3 Use	1
to measure the clock	1
to measure // Number	1
to measure how much	1
to measure exactly what	1
to delete the object.	1
to delete it and	1
to disk. Memory swapping	1
to disk. Software that	1
to disk. Provoke cache	1
to update the program	1
to integer. The conversion	1
to hold the value	1
to hold the numbers	1
to hold only one	1
to 120 ms by	1
to eliminate common sub-expressions.	1
to eliminate everything that	1
to 127 will generate	1
to debug and maintain.	1
to vectorization. The newest	1
to do. The reason	1
to do. This is	1
to do. It is	1
to remove the const	1
to remove the interrupt	1
to remove all disturbing	1
to remove unreferenced functions.	1
to transpose the matrix	1
to transpose a matrix	2
to transpose and copy	2
to transpose matrix //	1
to wait for the	2
to wait for a	1
to wait for another	1
to break a dependency	1
to break down dependency	1
to increase the throughput	1
to increase the likelihood	1
to identify the critical	1
to identify the circumstances	1
to identify a hot	1
to identify and isolate	1
to identify performance bottlenecks	1
to identify individual functions	1
to call. I have	1
to declare the table	1
to declare it locally	1
to declare objects and	1
to dispatched function call	1
to dispatched version return	1
to detect if any	1
to normal afterwards. The	1
to show how tortuous	1
to evaluate the loop	1
to evaluate a only	1
to evaluate and are	1
to evaluate b when	1
to evaluate whether it	1
to five or ten	1
to poor documentation and	1
to prefetch data explicitly	1
to truncation and back	1
to base a software	1
to completely rule out	1
to roll out the	3
to roll out a	2
to anything it has	1
to increment the loop	1
to increment an integer	1
to economize the use	2
to economize the resource	1
to economize resource use	1
to seven times faster	1
to overcome the dangers	1
to overcome the obstacle	1
to overcome this limitation).	1
to overcome these disadvantages	1
to maintain. The time	1
to maintain. If the	1
to maintain. Any specific	1
to maintain. And it	1
to fourteen register parameters.	1
to fourteen parameters to	2
to 122 this the	1
to remote databases usually	1
to memset and memcpy,	1
to install a program	1
to install a software	1
to install automatic updates	1
to consume time at	1
to consume more time	1
to select all installation	1
to recover in the	1
to recover from a	1
to recover from errors.	2
to recover from exceptions.	1
to split the tasks	1
to split up the	1
to limit the range	1
to follow the track	1
to compromise on the	1
to understand and therefore	1
to understand when we	1
to understand how variables	1
to specify the compiler	1
to specify static linking	1
to compare the performance	1
to compare two positive	1
to compare absolute values:	1
to valid values or	1
to CPU-intensive code. But	1
to wrap the allocated	2
to wrap around, (3)	1
to sum1 from time	1
to 15.1c as intended,	1
to 15.1c would of	1
to 15.1c was done	1
to recommend that no	1
to recommend any specific	1
to lead to a	1
to place the user	1
to overlap the call	1
to overlap the calculations	1
to obtain the desired	2
to ebx. The square	1
to modulo calculations: //	1
to round addresses in	1
to protected mode and	2
to distinguish between coarse-grained	1
to distinguish between recoverable	1
to distinguish elements with	1
to distinguish these two	1
to clean up in	1
to clean up then	1
to contained objects? It	1
to unsigned. // Example	1
to sum2 from time	1
to suboptimal code. Intrinsic	1
to uncached memory and	1
to individual array elements	1
to begin calculating a	1
to another. The object	1
to another. These costs	1
to recognize VIA processors	1
to mirror the remote	1
to force the swapping	1
to virus attacks and	1
to alias upon the	1
to well-tested functions, classes,	1
to zero, by setting	1
to reload the value	1
to reload the level-1	1
to reload *p and	1
to 12. Higher inputs	1
to optimization, it does	1
to ignore overflow or	1
to manipulate the data	1
to manipulate the different	1
to study the code	1
to study the available	1
to 0x273F will be	1
to 0x273F into one	1
to 0x273F would still	1
to int. Reinterpret cast	1
to nearest integer int	1
to justify the method.	1
to justify such a	1
to cover the worst	2
to focus the optimization	1
to issue an error	1
to solve this problem	1
to solve this problem.	1
to utilize the multiple	1
to utilize the computational	1
to top of loop	1
to decide which programming	1
to security. There are	1
to security. Standard C++	1
to decrement operators on	1
to determine the worst-case	1
to determine if the	1
to determine whether it	1
to 3-dimensional geometry and	1
to a. I don't	1
to post-increment. There are	1
to invest in ever	1
to invest more efforts	1
to 1024 bits is	1
to override the CPU	1
to override public symbols,	1
to CriticalFunction. If your	1
to exit the loop.	1
to emulate the while	1
to C1::f } 73	1
to worry about loss	1
to worry much about	1
to 15. If i	1
to develop and market	1
to develop and publish	1
to non-AVX code because	1
to non-AVX code. This	1
to -56 which will	1
to assembly: ALIGN 4	2
to construct obscure examples	1
to 15.1c. We can	1
to join all source	1
to join them into	1
to note that this	1
to creating and deleting	1
to reorder instructions without	1
to windows, graphic brushes,	1
to pressing a key	1
to date. A more	1
to date. Mac The	1
to test, maintain and	1
to isolate the hot	1
to 12.1a. Enable the	1
to use. I am	1
to use, incompatible or	1
to read. It is	1
to read. If a	1
to lock a thread	1
to load. A light-weight	1
to push and pop	1
to verify that all	1
to draw the attention	1
to draw each pixel	1
to 155 test. You	1
to distribute function libraries	1
to distribute all the	1
to reserve the amount	1
to reserve resources for	1
to 11.1b automatically, although	1
to test. disable power-save	1
to respond quickly to	1
to provoke error //	1
to interrupts and task	1
to do, at least	1
to organize the code	1
to organize data to	1
to log, and logarithms	1
to low-level optimizations. Most	1
to fix the thread	1
to fix the problem	1
to keyboard and mouse	1
to keyboard or mouse	1
to obey any specific	1
to obey certain rules	1
to 99 read from	1
to flip the sign	1
to me. You will	1
to a[i+2] ; compare	1
to answer questions from	1
to C1::Disp() or C2::Disp()	1
to resume after exceptions:	1
to zero: // Example	1
to seek information elsewhere	1
to mind. In some	1
to finish. 3.8 System	1
to NULL. There should	1
to be. The distinctions	1
to x?" or "how	1
to re-use a container	1
to +127. An integer	1
to relocate, but these	1
to diagnose. It is	1
to 15.1c). 16 Testing	1
to thank the many	1
to trace with a	1
to experience. Occasionally, the	1
to _endthread() cleans up	1
to fine- tune the	1
to date): Microsoft Visual	1
to pool all the	1
to Eclipse when compiling	1
to print out results	1
to obtain, such as	1
to come. Even big	1
to weigh the advantages	1
to truly represent a	1
to express any algorithm	1
to restart the computer	1
to vectorize, or #pragma	1
to remember that your	1
to translate these addresses	1
to query certain operating	1
to compose a bitfield	1
to compensate for the	1
to exchange data or	1
to fetch the variable	1
to facilitate porting between	1
to perform poorly for	1
to T+6, and the	1
to OMF format. Alternatively,	1
to calculate. If there	1
to localize the first	1
to optimize, and reading	1
to T+5, then it	1
to reinvent the wheel.	1
to combine the multiple	1
to pass a pointer	1
to reinstall a software	1
to 36. There may	1
to temporarily lock a	1
to advertise new versions	1
to realize that such	1
to objects) are possible	1
to great lengths to	1
to port to different	1
to controversies over the	1
to deallocate the space	1
to catching hardware exceptions.	1
to Func1, while other	1
to receive new relevant	1
to 12.8b automatically and	1
to ignore, then the	1
to consult the general	1
to minimize the amount	1
to reflect this or	1
to refresh the screen.	1
to adhere to certain	1
to feed into the	1
to 15.1c, but none	1
to a*b*c*2. It is	1
to x^0/0! // n	1
to collect the functions	1
to fake an Intel	1
to develop. It is	1
to 15.1c? We took	1
to relax floating point	1
to Object1.Hello(), though future	1
to 151 15.1c automatically,	1
to vectorize. The pragmas	1
to multithreading that we	1
to C0::f or C1::f.	1
to 100000000. When we	1
to mimic the behavior	1
to adapt to the	1
and the function is	1
and the function stores	1
and the code takes	1
and the code contains	1
and the code becomes	1
and the compiler may	1
and the compiler manual	1
and the time it	1
and the time consumption	1
and the memory released	1
and the data are	1
and the data cache.	1
and the program will	1
and the program logic	1
and the vector class	1
and the other is	1
and the other way	1
and the loop counter	1
and the most often	1
and the most significant	1
and the most reliable	1
and the Intel compiler	1
and the library has	1
and the object files	1
and the number of	3
and the array 800	1
and the elements are	1
and the critical functions	1
and the operating system	3
and the operating system.	2
and the operating system,	1
and the template parameter.	1
and the user will	1
and the system forbids	1
and the type of	1
and the Gnu compiler	2
and the work it	1
and the result is	1
and the result will	1
and the best Java	1
and the speed will	1
and the matrix is	1
and the calculation of	2
and the four B	1
and the dispatching should	1
and the multiplication is	1
and the application software.	1
and the caching conditions	1
and the cost of	1
and the runtime framework	1
and the second operand	1
and the AVX2 instruction	1
and the options -S	1
and the whole loop	1
and the level-2 cache.	1
and the local object	1
and the destructor is	1
and the destructor by	1
and the possibility of	1
and the amount of	1
and the entire contents	1
and the SSE or	1
and the header file	1
and the fraction is	1
and the subsequent counts	1
and the low priority	1
and the derived class	1
and the Gnu, Clang,	1
and the Java virtual	1
and the CPUID instruction	1
and the throughput of	1
and the availability of	1
and the rest of	1
and the Digital Mars	1
and the "Intel Performance	1
and the 49 first	1
and the corresponding bitwise	1
and the 512-bit ZMM	1
and the FAQ for	1
and the transitions between	1
and the loader. 2.	1
and the post-increment operator	1
and the EXCLUSIVE OR	1
and the texts they	1
and the destructor, if	1
and the wires that	1
and the resultant code	1
and is not efficient.	1
and is used in	1
and is called from	1
and is available in	1
and is compiled when	1
and is therefore more	1
and a floating point	1
and a pointer to	1
and a 64-bit version	1
and a table of	1
and a member function	1
and a template parameter:	1
and a hardware definition	1
and a Windows, Linux,	1
and a slow and	1
and a level-2 cache	1
and a processing speed	1
and a waste of	1
and a derived class	1
and a GOT for	1
and a third thread	1
and a well-defined interface	1
and a release version	2
and a generic version	1
and a basic understanding	1
and a server in	1
and to make overflow	2
and to optimize across	1
and to put the	1
and to know how	1
and to mix mathematical	1
and to Eclipse when	1
and in this case	1
and in most libraries	1
and in some cases	2
and in 32-bit systems	1
and for code that	1
and for more advanced	1
and for information stored	1
and for fast and	1
and for saving registers	1
and for minimizing memory	1
and that the value	1
and that there are	1
and that threads can	1
and that measurements are	1
and that computers have	1
and are in fact	1
and are difficult to	1
and are equally likely	1
and can be linked	1
and can calculate the	1
and it is available	1
and it can be	2
and it can calculate	1
and it can move	1
and it may be	2
and it will not	1
and it will generate	1
and it makes it	1
and it needs to	2
and it prevents the	1
and it avoids the	1
and it fills up	1
and it understands only	1
and function libraries that	1
and function libraries have	1
and function pointers It	1
and function calls in	1
and function calls are	1
and function inlining is	1
and if an exception	1
and if you look	1
and by the number	1
and by not using	1
and by avoiding pointer	1
and by changing the	1
and on Intel Atom	1
and code size have	1
and code addresses. The	1
and not not _WIN32	1
and not negative by	1
and not easily ported	1
and not __INTEL_COMPILER __INTEL_COMPILER	1
and an error condition	1
and an FPGA in	1
and an addition. If	1
and compiler makers. 4.	1
and may be sufficient	1
and may produce undesired	1
and you can do	1
and you can rely	1
and you can toggle	1
and you may want	1
and you cannot make	1
and you cannot expect	1
and you want the	2
and you want to	4
and you unroll by	1
and have a temp1	1
and have implemented a	1
and this will make	1
and this will trigger	1
and this pointer is	1
and this value will	1
and this error is	1
and time consuming. A	1
and use the induction	1
and use the local	1
and use a console	1
and use multiple accumulators	1
and use alternative implementations.	1
and more efficient in	1
and more efficient than	1
and more error prone.	1
and more efficient. You	1
and more difficult to	1
and more important. 9.2	1
and more compact than	1
and more complex, that	1
and will have one	1
and then use only	1
and then use binary	1
and then call __intel_cpu_features_init_x().	1
and then calls exit.	1
and then transferred as	1
and then convert the	1
and then think that	1
and then B, and	1
and then interpret that	1
and then 0+1.23456 =	1
and then merge the	1
and memory access are	1
and data in Linux	1
and data are not	1
and data are cached	1
and data can exceed	1
and data A cache	1
and data memory used	1
and data cache are	1
and data cache use	1
and data caching less	1
and data structures for	1
and data ......................................................................................... 87	1
and data decomposition. Functional	1
and vector operations (chapter	1
and vector processors are	1
and make the code	1
and make the next	1
and make a complicated	1
and make a round	1
and make it work	1
and make this extra	1
and make one instance	1
and make sure that	1
and make sure you	1
and make parts of	1
and make appropriate error	1
and make measurements on	1
and different user access	1
and different sizes of	1
and functions consume a	1
and only the Gnu	1
and only if the	1
and only one instance.	1
and only one, auto_ptr	1
and only if, a	1
and CPU hardware. Porting	1
and other data structures	1
and other compilers can	1
and other extra software	1
and other compiled programming	1
and other big objects	1
and other common programming	1
and other container class	1
and other resources than	1
and other resources locally	1
and other things very	1
and other languages in	1
and other resource problems	1
and other resource conflicts.	1
and other features it	1
and other optimizations. In	1
and other protection means	1
and other nearby branches.	1
and other complications that	1
and other hardware-related details	1
and other system- specific	1
and other flaws in	1
and other odd-sized vector	1
and other abuse is	1
and instruction sets. Likewise,	1
and which are cheap,	1
and which optimizations you	1
and which reductions they	1
and which not. You	1
and all the integer	1
and all the dynamic	1
and all three versions	1
and all 0's when	1
and used for an	1
and one for AVX2	1
and one for uninitialized	1
and one that is	1
and one that doesn’t.	1
and one or more	1
and one from me.	1
and one local, and	1
and cache size. If	1
and cache sizes. Fortunately,	1
and integer division. Older	1
and integer representations in	1
and no branches inside	1
and no induction variable	1
and no destructor the	1
and no multiplications. The	1
and page 87 about	1
and class objects can	1
and class members may	1
and floating point calculations	1
and floating point numbers	1
and floating point constants	1
and floating point variables,	1
and floating point numbers.	1
and each CPU model	1
and each value of	1
and most clean solution	1
and most up-to-date solution.	1
and using the integer	1
and using advanced facilities	1
and using overloaded operators	1
and double is bad	1
and double (see page	1
and double precision in	1
and double precision when	1
and double vectors AVX2	1
and double vectors SSE3	1
and double Floating point	1
and double precision. Long	1
and size as template	1
and Intel vector math	1
and Intel compilers for	2
and Intel compilers can	1
and Intel compilers. We	1
and pointer type casting.	1
and b is true	1
and b in a	1
and b in example	1
and b are the	1
and b are 32-bit	1
and b are swapped	1
and b have other	1
and b have been	1
and b will both	1
and b different so	1
and b because b	1
and b because their	1
and b should be	1
and b double precision:	1
and b take the	1
and b overlap. You	1
and i >= size	1
and static variables if	1
and static const int	1
and static data. 148	1
and 64-bit code for	1
and 64-bit operating systems	1
and 64-bit Windows and	2
and 64-bit Linux and	1
and 64-bit Linux as	1
and 64-bit systems. The	1
and 64-bit systems. Applications	1
and 64-bit Windows, Linux	1
and 64-bit Linux, BSD,	1
and 64-bit mode. 16-bit	1
and 64-bit Windows. The	1
and 64-bit Windows. Borland	1
and 64-bit Linux. Has	1
and 64-bit integers, as	1
and there is no	2
and there are no	2
and there are search	1
and there will be	1
and C++ is Microsoft	1
and C++ faster than	1
and also a possible	1
and efficient if the	1
and array indices when	1
and where the size	1
and possible workaround. Supports	1
and objects that are	1
and objects are stored	1
and objects will be	1
and objects should preferably	2
and objects declared in	1
and objects declared inside	2
and takes little space	1
and variable names from	1
and variable names. Remember	1
and any other constructors.	1
and we do not	1
and we don't need	1
and some of these	1
and some other functions	1
and some operating systems	1
and some tips on	1
and so on. 7.31	1
and return a pointer	1
and return and parameter	1
and return operations with	1
and table lookup is	1
and table lookup mechanisms	1
and very useful for	1
and very time- consuming.	1
and software developers who	1
and software engineering principles	1
and long double take	1
and long double reflects	1
and between simple processors	1
and 32-bit and 64-bit	1
and 32-bit Windows in	1
and 32-bit Linux with	1
and branch is executed.	1
and branch mispredictions. When	1
and branch mispredictions. Test	1
and member functions is	1
and makes it point	1
and makes an extra	1
and before any floating	1
and before any constructors	1
and stored in edx.	1
and stored as it	1
and call the std::unexpected()	1
and call it from	1
and 8 floating point).	1
and 8 bytes in	1
and less efficient code	1
and operating systems are	1
and operating systems available	1
and operating systems (but	1
and operating systems. The	1
and operating systems. 3	1
and operating system. See	1
and operating systems". The	1
and operating systems". For	1
and operating systems". 7.16	1
and operating systems"). An	1
and operating systems" for	1
and unsigned integers is	1
and unsigned integers in	1
and unsigned integers int	1
and unsigned integers simply	1
and unsigned variables. A	1
and unsigned integers. But	1
and 64 bits in	1
and 64 bits are	1
and take more time	1
and often inefficient. Objects	1
and often excessively so.	1
and how the microprocessor	1
and how you can	1
and how much time	2
and test their functionality.	1
and new objects can	1
and user settings are	1
and these two functions	1
and these operations are	1
and they are not	1
and they are equally	1
and they can be	1
and they always evaluate	1
and they waste a	1
and without the static	1
and without AVX using	1
and without AVX support.	1
and even worse, it	1
and always the same.	1
and always use this	1
and SSE2 instruction sets	1
and system calls. These	1
and system modules. 3.12	1
and system crash. Furthermore,	1
and system breakdown. Many	1
and 32 bit offsets).	1
and dynamic versions. It	1
and dynamic linking. The	1
and type of data	1
and short vector libraries.	1
and simple to develop.	1
and constant propagation is	1
and constant propagation and	1
and constant propagation An	1
and error handling Exception	1
and error handling ................................................................................	1
and I believe that	1
and making an explicit	1
and stack entries use	1
and want to get	1
and Gnu compilers are	1
and Gnu compilers. //	1
and Gnu compilers. See	1
and its return value	1
and its parameters. This	1
and accessed non-sequentially because	1
and assembly code for	2
and while the program	1
and arrays can be	1
and arrays by the	1
and Windows platforms. The	1
and Windows platforms. This	1
and Windows Template Library	1
and Windows 3.x. These	1
and Windows Server 2008	1
and calls alternately FuncA	1
and execution time. No	1
and execution units. If	1
and avoid dynamic memory	1
and compiled for the	1
and big structures by	1
and doesn't take any	1
and necessary support. Hardware	1
and c are integers,	1
and c can share	1
and c __m128i bc	2
and c first. b+c	1
and much time is	1
and much less efficiently	1
and virtual function tables.	1
and virtual functions or	1
and several other less	1
and AMD processors are	1
and AMD CodeAnalyst. There	1
and compile the program	1
and compile them separately	1
and exception handling. Omitting	1
and small code size	1
and integers Conversion from	1
and integers ................................... 141	1
and Linux operating systems	1
and cause large delays.	1
and cause contentions in	1
and cause delays in	1
and cause fatal errors	1
and classes Nowadays, programming	1
and done by the	1
and therefore the system	1
and therefore it is	1
and therefore not advantageous	1
and therefore not recommended	1
and therefore more error	1
and therefore cannot do	1
and therefore likely to	1
and therefore count as	1
and therefore difficult to	1
and therefore fail to	1
and works only for	1
and optimized function libraries.	1
and manual 3: "The	1
and manual 5: "Calling	1
and uses more cache	1
and another part of	1
and get a good	1
and known to the	1
and supported by the	1
and supported on all	1
and operators Integer sizes	1
and operators Modern microprocessors	1
and operators ...................................................................... 32	1
and whether there is	1
and doing multiple calculations	1
and run any code	1
and calculate it at	1
and calculate *p+2 a	1
and 1 for negative	1
and 1 for true.	1
and add b and	1
and add Divide by	1
and store the result	1
and store the four	1
and store the shared	1
and store it in	1
and copy the contents	1
and copy matrix void	2
and optimizing for speed.	1
and well thought-through approach	1
and simply put 80	1
and addresses in the	1
and shared between multiple	1
and intermediate code for	1
and intermediate results are	1
and write it with	1
and write configuration files	1
and optimize both functions	1
and programs compiled for	1
and microprocessor microarchitecture. A	1
and branches in a	1
and Mac systems normally	1
and Mac programs but	1
and Mac platforms. 2.	1
and Mac platforms By	1
and Mac OS X	1
and Mac OS X,	1
and Mac allow up	1
and Mac systems, this	1
and multiplication are permissible	1
and multiplication may be	1
and multiplication (27 -	1
and multiplication (20 -	1
and see which one	1
and caching becomes inefficient.	1
and sets all other	1
and complicated algorithm if	1
and their implementations reveal	1
and don't modify the	1
and model numbers are	1
and model number. The	1
and model number. I	1
and model number. Failure	1
and model numbers, but	1
and development time. Interpreted	1
and development tool is	1
and development tools. A	1
and mathematical functions are	1
and mathematical functions take	1
and mathematical operations on	1
and mathematical calculations. In	1
and put the different	1
and put an equal	1
and put seldom used	1
and various efficient container	1
and various programming languages.	1
and zero flags on	1
and Microsoft C++ compilers	1
and what it can	1
and parameter transfer are	1
and parameter transfer across	1
and division take longer	1
and automatic vectorization (see	1
and automatic vectorization. It	1
and automatic vectorization. Optimizes	1
and automatic parallelization. Supports	1
and automatic parallelization of	1
and automatic CPU-dispatching (see	1
and resources should be	1
and resources cleaned up.	1
and induction variables (see	1
and string functions and	1
and string instructions. The	1
and string manipulation Mathematical	1
and three times the	1
and better at vectorization.	1
and better processor appears	1
and | operations than	1
and last the second	1
and last all the	1
and || are evaluated	1
and types of elements	1
and difficult to maintain.	1
and difficult to read.	1
and after the piece	1
and after each of	1
and after executing the	1
and after executing a	1
and read or write	1
and give the result	2
and directives which are	1
and public data can	1
and public variables go	1
and microprocessors work. The	1
and assume that the	1
and later instruction sets.	3
and later Intel processors.	1
and later reads from	1
and later deleted by	1
and later discovers that	1
and calling any necessary	1
and interface frameworks. This	1
and 512 bits when	1
and generate a bit-mask:	2
and r in Sum2	1
and r are transferred	1
and b, and the	1
and reduce a to	1
and 10 ms for	1
and choose the type	1
and choose the appropriate	1
and choose this method	1
and link with the	1
and advanced prediction mechanisms.	1
and switch statements The	1
and switch statements should	1
and switch statements............................................................................. 43	1
and start the calculation	1
and replaced by storage	1
and negative inputs give	1
and negative impacts on	1
and go back into	1
and tested it. The	1
and references in the	1
and references are equally	1
and references Pointers versus	1
and references ............................................................................................ 36	1
and loaded into ecx	1
and VIA processors. It	1
and VIA processors. See	1
and VIA processors. Explicit	1
and VIA CPUs. 5.	1
and VIA including the	1
and VIA processors, and	1
and VIA CPUs"). This	2
and VIA CPUs"). Const	1
and VIA CPUs" for	2
and VIA CPUs" gives	1
and VIA CPUs: An	1
and VIA CPUs". A	1
and VIA CPUs". 9.3	1
and C are too	1
and global variables by	1
and my manual will	1
and off by default	1
and columns in matrix	2
and 1. The reason	1
and 1. Note that	1
and turn on all	1
and turn off debugging	1
and inlining the call	1
and network access in	1
and network connections. Temporary	1
and >= operators). The	1
and desired new features.	1
and hot spots. The	1
and position-independent code Function	1
and position-independent code .......................................................	1
and output should be	1
and task switches; so	1
and sometimes it does	1
and sometimes unacceptably long.	1
and local variables in	1
and frame functions. A	1
and prevent it from	1
and prevent legitimate backup	1
and shift out sign	1
and shift operations take	1
and shift Floating point	1
and shift operations. Multiplying	1
and prevents all optimizations	1
and d in assembly	1
and d would all	1
and Linux, 32-bit and	1
and compatibility problems and	1
and compatibility problems into	1
and writing from the	1
and writing data files	1
and copying different size	1
and causes the heap	1
and divide it into	1
and 16-bit Windows, allow	1
and child are typically	1
and child class are	1
and child class. Members	1
and disk space were	1
and disk space. It	1
and possibly also a	1
and possibly save exception	1
and overloaded operators. Function	1
and overloaded operators. Vectorized	1
and classes. The object	1
and % means modulo.	1
and precision. The speed	1
and algebraic reductions in	1
and handle one square	1
and handle text strings	1
and initialized arrays. I	1
and insert the values	1
and insert the reciprocal	1
and insert a code	1
and insert only the	1
and reading the performance	1
and reading them again	1
and message systems. All	1
and enable one or	1
and keep track of	1
and PathScale compilers can	2
and PathScale compilers. Intel	1
and PathScale compilers. 8.3	1
and PathScale compilers. (The	1
and BSD comes at	1
and rarely the other	1
and easier to test,	1
and 20 clock cycles.	1
and expect this to	1
and references. Most importantly,	1
and references. Arrays are	1
and similar objects of	1
and similar methods are	1
and back again. This	1
and back again. If	1
and back again. Obviously,	1
and back again. Accessing	1
and garbage collection can	1
and garbage collection takes	1
and garbage collection. A	1
and garbage collection, as	1
and templates for several	1
and header files. 121	1
and swap these elements	1
and sets. Let me	1
and invalid pointers. The	1
and invalid pointers. This	1
and setting the priority	1
and checks both the	1
and current operating systems	1
and 3 - 4	1
and waste of time	1
and map are prone	1
and easy development of	1
and easy development. For	1
and 256-bit YMM registers.	1
and scattered around in	1
and writes may slow	1
and device drivers are	1
and destructors of each	1
and destructors to call.	1
and destructors A constructor	1
and destructors .................................................................................. 55	1
and stores the time	1
and stores the result	1
and search facilities, binary	1
and usability A better	1
and usability ............................................................................................... 23	1
and vectorize the code	1
and derived class are	1
and standardized file formats	1
and memcpy is unsafe	1
and c2 for elements	1
and misprediction of virtual	1
and just-in-time compilation may	1
and just-in-time compilation. Some	1
and algorithms in the	1
and PLT for internal	1
and PLT tables are	2
and PLT lookups for	1
and profiling support in	1
and fragmented hard disk.	1
and who is still	1
and fixed size arrays	1
and fixed repeat count	1
and interpreted line by	1
and YMM registers The	1
and YMM registers .................................................................	1
and measure how long	1
and lazy binding by	2
and delete is to	1
and delete to allocate	1
and delete or with	1
and delete or malloc	1
and delete (or malloc	1
and distributed as binary	1
and generally used that	1
and Linux. The compiler	1
and Linux. Asmlib My	1
and Open BSD are	1
and free are: There	1
and rounding 137 errors	1
and far procedures are	1
and 120 for discussion	1
and highly compatible with	1
and again for every	1
and Clang compilers. The	1
and log are pure	1
and compile-time while loops,	1
and wait until the	1
and 15 clock cycles	1
and declare all functions	1
and normal unsigned int	1
and show the values	1
and show a disassembly,	1
and c1 for all	1
and efficient, but not	1
and again. If there	1
and deallocated in random	2
and edx can be	1
and edx contains the	1
and soon also 512	1
and edx, respectively. (In	1
and branches. The following	1
and internal functions in	1
and loss of precision	1
and Fortran are based	1
and Fortran code. The	1
and drivers differ a	1
and economize the library	1
and maintain. Most compiler	1
and fourteen in 64-bit	1
and fourteen integer registers	1
and bc for each	1
and Digital Mars compilers	1
and CISC processors, between	1
and 22 one or	1
and searching for vacant	1
and _WIN64 _M_X64 _M_X64	1
and pow at compile-	1
and computing power than	1
and 90 for examples	1
and understand compiler-generated assembly	1
and returns a pointer	1
and frameworks typically used	1
and compare it to	1
and manuals. I want	1
and loop-invariant code motion	1
and loop-invariant code motion.	1
and jumps back to	1
and 13 objects, respectively	1
and written back. The	1
and BSD, the slow	1
and sixteen in 64-bit	2
and enables interprocedural optimizations.	1
and databases with lots	1
and loader (requires binutils	1
and objects. Storage on	1
and mouse inputs when	1
and subtraction (3 -	1
and ownership is transferred	1
and drawbacks of using	1
and x86-64 platforms. AMD	1
and x86-64 platforms. Comparison	1
and Watcom compilers are	1
and 14.9 is changed	1
and maintenance - to	1
and maintenance There are	1
and maintenance .......................................................................................... 126	1
and maintenance easier. I	1
and underflow except in	1
and underflow neutralize each	1
and splitting the dependency	1
and video processing, signal	1
and sum2 are called	1
and avoids many of	1
and image processing. Yeppp.	1
and interfaces to network	1
and aliasing. Operations that	1
and changing then the	1
and smaller. This manual	1
and structures. Useful for	1
and reproducible as possible.	1
and reproducible results. If	1
and operators. Make a	1
and (set) = (0x2710	1
and fine-grained parallelism when	1
and compact. The biggest	1
and FPGA soft cores	1
and earlier Intel processors	1
and 119 for more	1
and compiler-generated code by	1
and perhaps }; //	1
and perhaps Mac OS.	1
and main() are compiled	1
and 14.30 will therefore	1
and keywords relevant to	1
and divisions are given	1
and trigonometric functions. The	1
and 64, depending on	1
and copies them into	1
and 135 show various	1
and leave the last	1
and leave them enabled	1
and c[i] are so	1
and c[i] are too	1
and ZMM registers The	1
and ZMM registers ..........................................................	1
and logarithms take a	1
and pop ebx. 9	1
and s3 can be	1
and open source. It	1
and measuring the overall	1
and read-only data sections	1
and read-only data. The	1
and well-structured code and	1
and multiplications. Subtractions use	1
and market the application	1
and frameworks, rather than	1
and truncation. The missing	1
and truncation. Efficient conversion	1
and deallocation of memory	1
and deallocation of big	1
and decrement operators The	1
and decrement operators. 7.7	1
and free. This can	1
and free. These operators	1
and references, which can	1
and LIBM libraries are	1
and complexity (en.wikipedia.org/wiki/Standard_Template_Library). The	1
and memcpy, at least	1
and Sum3 in 32-bit	1
and Sum3 are doing	1
and lack of advanced	1
and mostly relative references	1
and resolve any branch	1
and resolve compatibility problems.	1
and discovered that many	1
and scientific vector processors.	1
and throw. It is	1
and that's what they	1
and GOT. The symbol	1
and destination both have	1
and 72 for discussions.	1
and 0x4700. These addresses	1
and 14.13b works only	1
and underflow. The range	1
and web browsing that	1
and p2 having different	1
and maintaining a new	1
and maintaining such code	1
and sound processing Memory	1
and servers should be	1
and MOVNTDQ require that	1
and 64-bit. Supports OpenMP	1
and 64-bit. They have	1
and isolate the most	1
and v.f are both	1
and afterwards a BSF	1
and denormals-are-zero mode (SSE2):	1
and machines with embedded	1
and debugging. A command-line	1
and synchronization between the	1
and synchronization between threads,	1
and high-priority threads are	1
and verify than a	1
and searching, or the	1
and restarted anyway. Updates	1
and IDE's for D	1
and fine-tuned for a	1
and redo the calculations	1
and redo the calculation	1
and deleting the object	1
and deleting containers. If	1
and flexible, but quite	1
and Gnu. There is	1
and Mac. The Gnu	1
and Mac. Supports parallel	1
and subtracting 1 from	1
and reusable classes. Security	1
and stop the program	1
and stop the thread.	1
and attempts to translate	1
and recovering from error	1
and direct hardware access.	1
and studying the bottlenecks	1
and press break while	1
and involve a high	1
and statistics, and the	1
and later. The AVX	1
and 9. Multiplications are	1
and "best case" values.	1
and delete, and often	1
and delete, or malloc	1
and BSD. The Windows	1
and BSD. If a	1
and executables. Make sure	1
and clumsy, as you	1
and repagination are running	1
and esp+12 and loaded	1
and "More Effective C++".	1
and IA-32 Architectures Optimization	1
and C# and avoids	1
and FuncB, then FuncC.	1
and Newton-Raphson iterations. Here	1
and |) instead of	1
and object-oriented programming, modularity,	1
and Adolfy Hoisie: "Performance	1
and destructors. The copy	1
and de-allocation of memory	1
and off. It is	1
and unexpected behaviors. Arrays	1
and flexibility of the	1
and A. Hoisie, SIAM	1
and matrixes. Algorithms that	1
and uninstallation of programs	1
and temp++ actually adds	1
and 2B. There are	1
and lrint. Unfortunately, these	1
and communicating between threads.	1
and USB sticks may	1
and finally (4) access	1
and analyzing program performance	1
and disadvantages. The original	1
and fence instructions, but	1
and 12.4c is quite	1
and shared_ptr. auto_ptr has	1
and databases. The operating	1
and Fortran. These directives	1
and investigated by the	1
and error-prone. The program	1
and reorganize: // Example	1
and convoluted template metaprogramming	1
and create a new	1
and popped from the	1
and delete). 88 Object	1
and classes............................................................................................ 51 7.18	1
and decoded in several	1
and 3B. developer.intel.com. AMD:	1
and ||). The bitwise	1
and animations is of	1
and cons of using	1
and "Integrated Performance Primitives".	1
and UNIX shell script.	1
and '$' are allowed	1
and FPGAs. The difference	1
and cryptography (www.intel.com). If	1
and Itanium systems. The	1
and Z. Each dependency	1
and correspondingly two different	1
and hence higher speed.	1
and systematization of the	1
and memcpy: // Example	1
and parsing are provided	1
and 137, respectively. Increment	1
and reorganize the code	1
and micro-operation breakdowns for	1
and _mm_free. A more	1
and non-constant references require	1
and irregular response times.	1
and temp2. Modern CPUs	1
and stopping threads. Don't	1
and double..................................................................................... 140 14.8	1
and operators............................................................................... 29 7.3	1
and tedious. The code	1
and free) causes the	1
and Sum3. Whether you	1
and bb[i]*cc[i] is AND'ed	1
and semicolons in a	1
and intelligible way by	1
and b. But in	1
and VIA. The next	1
and SVML. The IPP	1
and Enterprise editions). Do	1
and fffff is the	1
and closer to the	1
and foremost, in the	1
and list[i].b. It can	1
and flexibility, while execution	1
and 3A and 3B.	1
and shifts one place	1
and y?" then you	1
and suggestions for my	1
and increment. The three	1
and restoring registers, and	1
and newsgroups contain useful	1
and non-recoverable errors; make	1
and concentrate the optimization	1
and down. Remember to	1
and modular. The so-called	1
and WritePrivateProfileString to read	1
and invoked with automatic	1
and Func2 were in	1
and maintainability of C++	1
and relational operators (e.g.	1
and decreased when the	1
and publish a function	1
and mirroring is not	1
and Gnu). Other compilers	1
and suggests methods for	1
and mainframes, and between	1
and ease of development	1
and recompile it. I	1
and planned solutions. Patches	1
and API's. Memory swapping.	1
and shuffling can sometimes	1
and closes the file	1
and well- tested library	1
and similarly sets the	1
and clarity of the	1
and __intel_new_strlen in library	1
and ARM platforms and	1
and getting them into	1
and replaces the PLT	1
in the // parent	1
in the function in	1
in the function library	2
in the function name	1
in the code to	2
in the code and	1
in the code are	2
in the code with	1
in the code then	1
in the code cache	3
in the code memory.	1
in the code cache.	2
in the code section	2
in the code prevent	1
in the code itself	1
in the code carefully	1
in the code section,	1
in the compiler manual	1
in the compiler ..........................................................................................	1
in the compiler 8.1	1
in the data cache.	2
in the program that	1
in the program if	1
in the program by	1
in the program code	1
in the program than	1
in the program under	1
in the program flow	1
in the program flow.	1
in the different microprocessors.	1
in the same time	1
in the same memory	2
in the same way	1
in the same part	3
in the same processor	4
in the same thread	1
in the same source	1
in the same core	1
in the same generation	1
in the same module	1
in the same core.	1
in the same chip	1
in the same chip.	1
in the same directory	1
in the CPU and	1
in the CPU (See	2
in the CPU detection	1
in the CPU chip.	1
in the other volumes	1
in the instruction set	1
in the loop control	2
in the cache so	1
in the set can	1
in the class declaration.	1
in the most critical	3
in the most common	1
in the Intel compiler	2
in the library www.agner.org/optimize/asmlib.zip.	1
in the object file.	1
in the 64-bit extension	1
in the array must	1
in the clock frequency.	1
in the variable Day.	1
in the table are	1
in the order in	3
in the order a[0],	1
in the long double	1
in the branch target	2
in the way of	1
in the way microprocessors	1
in the way m	1
in the critical part	5
in the operating system	1
in the first 128	1
in the code. For	1
in the code. Example:	2
in the code. Many	1
in the code. Let's	1
in the template function,	1
in the test program	1
in the following way.	3
in the following table.	1
in the following way:	3
in the following cases:	1
in the following sections.	1
in the programming manuals	1
in the case a	1
in the case that	1
in the Gnu manual	1
in the Gnu C	2
in the assembly output	1
in the while loop	1
in the Windows system.	1
in the big registration	1
in the best cases.	1
in the thread function	1
in the thread have	1
in the matrix longer	1
in the AVX instruction	1
in the optimized version	1
in the calculation of	1
in the container rather	1
in the list causes	1
in the likely case	1
in the structure to	1
in the values because	1
in the memory. This	1
in the memory. It	1
in the shared object,	1
in the program. Reading	1
in the program. Small	1
in the above example	2
in the above examples	1
in the above sections	1
in the above table.	1
in the optimal order.	1
in the particular application.	1
in the next vector,	1
in the next paragraph.	1
in the next section.	1
in the multiplication b[i]*c[i],	1
in the application software	1
in the expression a	1
in the cache. The	2
in the cache. When	1
in the high level	1
in the Microsoft platform	1
in the source code.	1
in the source files.	1
in the end of	1
in the end in	1
in the end when	1
in the last vector.	1
in the XMM registers	1
in the second generation	1
in the second step	1
in the x86 CPUs.	1
in the x86 family	2
in the old operating	1
in the old block	1
in the old version.	1
in the old fashioned	1
in the innermost loop	3
in the innermost function,	1
in the innermost loop.	1
in the compiler. You	1
in the compiler. Loop	1
in the compiler. Remember,	1
in the relevant books	1
in the main program.	1
in the main executable	2
in the global offset	1
in the choice of	1
in the STL are	1
in the STL (Standard	1
in the level-2 cache	2
in the level-2 cache.	2
in the code, so	1
in the output are	1
in the level-1 data	1
in the level-1 cache	1
in the level-1 cache.	2
in the database anyway	1
in the calculations. The	1
in the final program	1
in the final version	1
in the final program.	1
in the final program,	1
in the copying process,	1
in the so-called commpage.	1
in the logical architecture	1
in the entire program	1
in the simplest cases,	1
in the simplest cases.	1
in the situation where	1
in the condition clause.	1
in the previous chapter	1
in the previous iteration.	1
in the chapter "Register	1
in the future due	1
in the sequence of	1
in the sequence to	1
in the CPU. It	1
in the CPU. If	1
in the subsequent manuals.	1
in the latter case	1
in the latter case,	1
in the fully optimized	1
in the procedure linkage	1
in the background are	1
in the system. The	1
in the array. This	1
in the general case,	1
in the software. Smaller	1
in the vectors. This	1
in the YMM register	1
in the YMM registers.	1
in the sections below.	1
in the carry flag	2
in the table. The	1
in the machine code	1
in the core. It	1
in the sense that	6
in the latest compilers	1
in the scope of	1
in the debugger is	1
in the debugger to	1
in the debugger then	1
in the form of	3
in the future. If	1
in the future. 6	1
in the future. Typically,	1
in the future. To	1
in the rest of	1
in the event of	1
in the event that	2
in the select function,	1
in the project window	1
in the present manual.	1
in the asmlib library	1
in the SVML and	1
in the appendix at	1
in the unit-test but	1
in the interval from	1
in the interval 0	1
in the interval [1.0,	1
in the early planning	1
in the CPU, which	1
in the file, especially	1
in the container, then	1
in the container. STL	1
in the planning phase	1
in the book "Performance	1
in the disassembly window	1
in the profile. It	1
in the arrays: //	1
in the MKL relies	1
in the majority of	1
in the Professional and	1
in the oldest Pentium	1
in the grandparent class:	1
in the BTB can	1
in the end. The	1
in the STL. Some	1
in the broader perspective	1
in the representation, except	1
in the "Macro loops"	1
in the GOT, and	1
in the beginning. ret	1
in the former case	1
in the level- 1	1
in the Active Template	1
in the sequence, where	1
in the unit- test	1
in the BIOS setup.	1
in a function for	1
in a function that	1
in a function should	1
in a use situation	1
in a more efficient	1
in a more clear	1
in a more distant	1
in a memory buffer	1
in a memory pool.	1
in a memory pool,	1
in a program is	1
in a program repeats	1
in a vector or	1
in a vector register	1
in a different way	1
in a different thread.	1
in a different way.	1
in a different module	1
in a different array.	1
in a loop of	1
in a loop with	1
in a loop where	2
in a class are	1
in a class or	1
in a library other	1
in a number of	1
in a static part	1
in a static link	1
in a static buffer	1
in a 64-bit shared	1
in a C++ program.	1
in a very inefficient	1
in a way that	3
in a critical part	1
in a register and	1
in a register if	1
in a register rather	1
in a register (see	1
in a register except	1
in a rather unconventional	1
in a dynamic library	2
in a short time	1
in a simple test	1
in a large memory	1
in a big matrix	1
in a big mainframe	1
in a specific interval.	1
in a single operation	1
in a single executable	1
in a single step	1
in a single operation.	1
in a single instruction.	1
in a single session.	1
in a virtual table	1
in a thread environment	1
in a small part	1
in a matrix is	2
in a matrix a	1
in a matrix for	1
in a structure or	2
in a hardware definition	3
in a shared object	3
in a shared object,	1
in a particular CPU	1
in a particular application.	1
in a particular situation,	1
in a microprocessor because	1
in a separate function	1
in a separate file	1
in a separate dynamic	2
in a separate function.	1
in a separate thread	2
in a separate C	1
in a separate subroutine	1
in a separate module,	1
in a linked list	1
in a binary representation	1
in a 512 512	1
in a compiler. Some	1
in a compiler. Many	1
in a computer with	1
in a computer game	1
in a global object.	1
in a network may	1
in a special cache	1
in a safe way	1
in a message loop	1
in a vector. If	1
in a vector. 6.	1
in a module by	1
in a series of	2
in a low priority	1
in a typical software	1
in a typical application	1
in a standardized manner.	1
in a temporary array	1
in a temporary variable	1
in a procedure linkage	2
in a register. The	1
in a register. If	1
in a DLL can	1
in a DLL goes	1
in a non-sequential order	1
in a non-sequential order.	3
in a non-sequential manner	1
in a non-sequential manner.	1
in a random manner.	1
in a far data	1
in a debugger and	1
in a computer. The	1
in a bad dilemma.	1
in a protected operating	2
in a suboptimal way	1
in a suboptimal way.	2
in a high-level language	1
in a multithreaded program,	1
in a register, not	1
in a well-structured C++	1
in a pivot search:	1
in a computationally intensive	1
in a PC. Nevertheless,	1
in a programmable logic	1
in a high-priority thread	1
in a FIFO manner?	1
in a first-in-last-out fashion.	1
in a systematic manner	1
in a word processor	1
in a union: //	1
in a hand- written	1
in a multitasking environment,	1
in a DLL. Another	1
in a graceful way.	1
in a FILO manner?	1
in a Gauss elimination.	1
in a column-wise manner	1
in a pre-calculated table.	1
in code caching for	1
in an object of	2
in an array grows	1
in an application program	1
in an && expression,	1
in an || expression.	1
in an unused fourth	1
in an STL container	1
in an inefficient way.	1
in an integer, usually	1
in an array. The	1
in an appendix to	1
in an FPGA as	1
in an import table	1
in an array, or	1
in compiler price GNU	1
in this example is	2
in this example can	2
in this example has	1
in this example should	1
in this example so	1
in this table may	1
in this way is	1
in this way includes	1
in this case is	2
in this case it	2
in this case so	1
in this range then	1
in this example: 38	1
in this hot spot.	1
in this series of	1
in this case. The	1
in this case. A	1
in this case. You	1
in this case. Loop	1
in this example. We	1
in this format. Other	1
in this column. Number	1
in this block: 62	1
in this chapter. Using	1
in this respect. 7.15	1
in more than one	1
in more complex cases	1
in more detail in	1
in memory is a	1
in memory or accessed	1
in memory or cache.	1
in memory if organized	1
in memory by requesting	1
in memory then there	1
in memory takes only	1
in memory rather than	2
in program execution may	1
in program memory. This	1
in program memory. If	1
in vector c __m128i	2
in vector c2 with	1
in vector Type of	1
in vector bc with	1
in different C++ compilers	1
in different versions for	1
in different source files	1
in different parts of	1
in different places making	1
in different ways. Example:	1
in different modules. This	1
in different browsers, different	1
in only the lowest	1
in other programming languages,	1
in other threads with	1
in other compilers. #include	1
in other ways than	1
in other modules than	1
in other languages. But	1
in other ways, as	1
in which the array	1
in which the variable	2
in which the elements	1
in which the modules	2
in which data are	1
in which they are	4
in which they appear	2
in which alloca was	1
in all the CPU	1
in all possible cases	1
in all systems that	1
in all cases, while	1
in all operands in	1
in one memory pool.	1
in one way or	1
in one big memory	1
in one source file	1
in one operation rather	1
in one iteration of	1
in one vector. It	1
in one vector, the	1
in one vector, while	1
in one operation. A	1
in one operation. For	1
in one contiguous memory	1
in integer registers. Typical	1
in set number 28.	1
in floating point variables	1
in floating point expressions	1
in each vector depends	1
in each CPU core).	1
in each part of	1
in each set. If	1
in each case. Inlined	1
in each core. For	1
in example 15.1b is	2
in example 13.1 can	1
in example 13.1 page	1
in example 13.1 below.	1
in example 16.2 calls	1
in example 16.2 above,	1
in example 15.1c is	1
in example 14.8 and	1
in example 12.4b can	1
in example 14.28 can	1
in example 14.28 will	1
in example 9.6b. The	2
in example 9.5a goes	1
in example 11.3 is	1
in example 11.3 even	1
in example 14.12b and	1
in example 14.14a with	1
in example 12.4a so	1
in example 8.15a were	1
in example 14.19 below.	1
in example 14.1c is	1
in example 11.2b was	1
in example 11.1a to	1
in example 15.1b. Branches	1
in example 14.23 page	1
in example 14.7b is	1
in example 7.32b. A	1
in example 8.15b. The	1
in example 16.2. The	1
in example 8.23b has	1
in example 14.7b, we	1
in example 8.24 can	1
in example 16.1. This	1
in example 7.35 page	1
in example 12.1b, the	1
in example 7.22. //	1
in example 9.5b. //	1
in example 7.43b is	1
in example 14.21 is	1
in example 9.1b. On	1
in example 7.30b. The	1
in most libraries it	1
in most cases be	1
in most cases you	1
in most cases when	1
in most cases where	1
in most cases they	1
in most cases, an	1
in most cases, but	1
in most cases, even	1
in most cases, regardless	1
in most cases. The	1
in most cases. This	1
in most cases. Don't	1
in most cases: The	1
in using the larger	1
in Intel function libraries	1
in Intel compiler Intel	1
in Intel compiler .........................................................................	1
in Intel compilers has	1
in Intel processors is	1
in Intel header files	1
in b to 0	2
in library functions then	1
in library functions, or	1
in library libircmt.lib. Function	1
in multiple versions for	3
in multiple versions with	1
in multiple versions should	1
in multiple applications, but	1
in multiple versions, each	1
in two different registers.	1
in two other situations:	1
in two libraries It	1
in two ways. The	1
in two versions. A	1
in two steps. All	1
in static memory and	2
in static memory can	1
in static memory. Example:	1
in static memory. Most	1
in 64-bit operating systems.	1
in 64-bit code. However,	1
in 64-bit systems and	1
in 64-bit systems by	1
in 64-bit Windows (See	1
in 64-bit Linux than	3
in 64-bit mode or	2
in 64-bit mode than	1
in 64-bit mode because	3
in 64-bit mode where	1
in 64-bit systems. The	1
in 64-bit systems. It	1
in 64-bit systems. If	1
in 64-bit systems. Some	1
in 64-bit systems. Floating	1
in 64-bit systems. 67	1
in 64-bit mode. A	1
in 64-bit mode. Therefore,	1
in 64-bit mode. Make	1
in 64-bit Windows. The	1
in 64-bit Windows. In	1
in 64-bit device drivers	1
in C++ is quite	1
in C++ and Fortran.	1
in C++ so you	1
in C++ take more	1
in C++ An optimization	1
in C++ programs and	1
in C++ programs. Writing	1
in such a way	1
in such cases. The	1
in such applications. Alternatively,	1
in array ; i++	1
in many different applications.	1
in many cases. For	1
in many cases. Integer	1
in many commercial compilers	1
in many respects and	1
in any of the	1
in any situation where	1
in some very old	1
in some systems because	1
in some cases to	1
in some cases and	1
in some cases be	2
in some cases on	1
in some cases take	1
in some cases even	1
in some cases ignore	1
in some cases, for	1
in some cases, but	1
in some cases, there	1
in some compilers. If	1
in some cases. An	1
in some cases. Multiple	1
in some cases. Does	1
in some embedded systems.	1
in some situations, and	1
in some rare cases	1
in so that they	1
in table The following	1
in table 19 in	1
in table 8.1 below.	1
in table 9.1 show	1
in table 8.1. The	1
in table 9.2. All	1
in table 9.2, such	1
in performance can easily	1
in performance if the	1
in performance between the	1
in performance between 32-bit	1
in performance over other	1
in software writing style	1
in software development. This	1
in order to make	11
in order to test	1
in order to access	1
in order to avoid	3
in order to get	4
in order to calculate	1
in order to optimize	1
in order to improve	2
in order to know	1
in order to find	3
in order to prevent	1
in order to save	1
in order to divide	3
in order to predict	1
in order to enable	1
in order to align	1
in order to implement	1
in order to help	1
in order to increase	1
in order to identify	1
in order to force	1
in order to cover	1
in order to utilize	1
in order to determine	1
in order to emulate	1
in order to reserve	1
in order to minimize	1
in between the calls	1
in 32-bit or 64-bit	1
in 32-bit operating systems	2
in 32-bit systems and	4
in 32-bit systems when	1
in 32-bit systems unless	1
in 32-bit systems gives	1
in 32-bit Windows by	1
in 32-bit Linux is	1
in 32-bit mode so	1
in 32-bit mode unless	1
in 32-bit Mac code	1
in 32-bit systems. Virtual	1
in 32-bit mode. The	3
in 32-bit mode. If	1
in 32-bit mode. Storing	1
in 32-bit systems, but	1
in 32-bit systems, especially	1
in 32-bit mode, and	1
in 32-bit mode, for	1
in member functions is	1
in member functions counts	1
in critical parts of	1
in 64 bit Windows	1
in 64 bit Linux	1
in 64 bit mode	2
in 64 bit mode.	1
in 64 bit mode,	1
in registers in 64-bit	1
in registers are accessed	1
in registers by default	1
in registers only in	1
in registers rather than	5
in registers (see page	1
in registers instead of	1
in registers anyway. Pure	1
in registers (6 integer	1
in registers (8 float	1
in test situations to	1
in systems with only	1
in these manuals can	1
in system code or	1
in system code. Dynamic	1
in 32 bit Linux	1
in 32 bit mode	1
in 32 bit mode.	1
in programming nowadays stress	1
in case the function	1
in case the code	1
in case the array	1
in case of an	5
in case of large	1
in case of overflow	2
in case of overflow.	1
in case of error.	1
in case of mispredictions	1
in case of underflow:	1
in case memory re-allocation	1
in case F2 actually	1
in cases where the	3
in cases where we	1
in cases where they	1
in simple cases where	1
in simple cases. The	1
in simple cases. 7.28	1
in simple cases. Database	1
in stack memory which	1
in Gnu compiler //	1
in Gnu compiler A	1
in Gnu compiler .........................................................................	1
in its own allocated	1
in its API. In	1
in assembly code. Register	1
in assembly language is	1
in assembly language. Here	1
in assembly names. The	1
in assembly language". The	1
in assembly language". While	1
in assembly language", section	1
in assembly language: An	1
in large data structures	2
in large arrays. Array	1
in large applications. The	1
in Windows 7 and	1
in Windows MFC). This	1
in compiled C++ or	1
in compiled languages such	1
in compiled C++. This	1
in big blocks rather	1
in speed by using	2
in speed between using	1
in speed between single	1
in speed between rounding	1
in several stages before	1
in small embedded applications	1
in matrix // function	2
in matrix 96 void	1
in Linux and supported	1
in Linux and BSD	1
in Linux and BSD.	1
in Linux kernel version	1
in classes like string,	1
in optimized programs. The	1
in manual 3: "The	2
in manual 2: "Optimizing	3
in manual 5: calling	1
in manual 5: "Calling	3
in manual 4: "Instruction	2
in another source file.	1
in another array. The	1
in another module. The	1
in eight consecutive elements	4
in list in example	1
in hardware in the	1
in optimizing library functions	1
in optimizing application-specific code.	1
in memory. The renaming	1
in memory. This prevents	1
in memory. It will	1
in memory. Example: //	1
in memory. Function parameters	2
in memory. No information	1
in memory. Variables and	1
in memory. They may	1
in shared objects in	1
in both the level-1	1
in both static and	1
in both Windows and	2
in both cases. This	1
in both compiler, operating	1
in both 16-bit, 32-bit	1
in programs that have	1
in programs with many	1
in programs where security	1
in programs compiled for	1
in microprocessor hardware design.	1
in Mac systems. 14	1
in Mac OS X.	1
in multiplication here: a[i]	1
in mathematical iterations such	1
in separate threads so	1
in separate modules if	1
in various ways depending	1
in applications that can	1
in applications without an	1
in addition to the	1
in addition to) the	1
in your program to	1
in your program, you	1
in XMM registers can	1
in vectors of eight	1
in x86 systems). 42	1
in binary representation of	1
in binary form than	1
in just a few	1
in just one clock	1
in main will be	1
in main will take	1
in main has the	1
in computer games and	1
in computer games. Such	1
in C and C++	1
in my vector class	1
in my test examples.	1
in my blog. Here,	1
in my experiments. Contentions	1
in my crystal ball	1
in STL for accessing	1
in STL as a	1
in dynamically allocated memory,	1
in Windows, you may	1
in turn calls another	1
in fact be less	1
in fact it does	1
in fact an integer	1
in fact only 64-bit	1
in fact using each	1
in fact accessed through	1
in fact doing the	1
in fact represented as	1
in fact addressed relative	1
in vectorized code when	1
in special cases where	1
in special mathe- matical	1
in Linux, BSD and	1
in Linux, sched_setaffinity). The	1
in registers. 64-bit Unix	1
in registers. Except for	1
in performance. A good	1
in performance. There are	1
in performance. I have	1
in performance. Integer size	1
in 16-bit systems or	1
in 16-bit systems: int	1
in 16-bit systems: long	1
in 16-bit systems: unsigned	2
in x, and last	1
in full use rather	1
in RAM memory. This	1
in parallel if certain	1
in either case. Intrinsic	1
in ebx ; shift	1
in BSD work the	1
in BSD Shared objects	1
in chapter 12. If	1
in chapter 12. Most	1
in chapter 9.10, then	1
in chapter 11. Using	1
in newer versions of	1
in sequence are not	1
in linear algebra) require	1
in row 28 share	1
in Windows. It is	1
in situations where the	1
in situations where code	1
in situations where automatic	1
in situations like example	1
in device drivers for	1
in terms of code	1
in terms of program	1
in terms of execution	2
in terms of specific	1
in terms of usability	1
in terms of speed.	1
in terms of development,	1
in addition, set the	1
in PC processors. The	1
in almost all modern	1
in almost all respects	1
in interpreted languages where	1
in interpreted script languages,	1
in vectors. These function	1
in random order. The	1
in random order. This	1
in Linux. 32-bit Mac	1
in Linux. Address calculation	1
in memory, as in	1
in memory, at least	1
in memory, but not	1
in details. The funny	1
in thousand so the	1
in Intel's Math Kernel	1
in registers, not in	1
in registers, regardless of	1
in registers, whereas 64-bit	1
in registers, totaling up	1
in dispatched version return	1
in column 28 because	1
in column 28, the	1
in embedded systems .............................................................................	1
in embedded systems Microcontrollers	1
in 32- bit mode,	1
in edx as a	1
in one. The compiler	1
in edx, to ebx.	1
in Fortran where the	1
in list, the compiler	1
in ever more powerful	1
in b[i] and c[i]	1
in regular patterns with	1
in parallel. Modern CPUs	1
in parallel. Small lightweight	1
in parallel. Fine-grained parallelism	1
in parallel. Coarse-grained parallelism	1
in advance and the	1
in advance and stored	1
in advance which of	1
in advance rather than	1
in efficiency. For example,	1
in aa: StoreVector(aa +	3
in aa: a.store(aa+i); }	1
in C, C++ or	1
in sequential order and	1
in www.agner.org/optimize/cppexamples.zip. An array	1
in www.agner.org/optimize/cppexamples.zip. These may	1
in tests on Intel	1
in detail in manual	1
in detail on page	1
in advance. The frequent	1
in advance. The disadvantages	1
in advance. This reduces	1
in character arrays is	1
in Windows). There are	1
in Windows). Alternatively, you	1
in comparisons, such as	1
in kernel code" in	1
in Unix-like systems use	1
in Unix-like systems. Mac	1
in vectors, but the	1
in Day for signifying	1
in x. The compiler	1
in a. This operation	1
in Sum2 and Sum3.	1
in ASCII form. A	1
in scientific computing, but	1
in stdint.h char 8	1
in non- sequential order.	1
in itself, and the	1
in 36 C++ as	1
in p1 and p2	1
in question. You may	1
in question. For example,	1
in doubt how big	1
in use. The installation	1
in question without generating	1
in develop- ment time	1
in C++: An optimization	1
in C++: Preprocessor directives.	1
in loops. Consider the	1
in Wikipedia under CPU	1
in Java, C#, Visual	1
in reusable and well-	1
in time-critical code. 7.32	1
in exclusive mode, and	1
in precompiled code. The	1
in eax. The loop	1
in popularity when a	1
in y. The purpose	1
in duration compared with	1
in interactive programs because	1
in relation to execution	1
in edx. Furthermore, this	1
in general. Assume that	1
in scope. A macro	1
in advance, because a	1
in two: // Example	1
in 2015 or 2016.	1
in nn ifbit=1 bitofn	1
in Microsoft's .NET framework	1
in F1? Then we	1
in connection with reading	1
in mind, that many	1
in parts, for example	1
in all, it will	1
in applying the various	1
in 2010. This feature	1
in a[] which will	1
in disguise. Enums are	1
in question: Put in	1
in Windows) to determine	1
in isolation have been	1
in parallel: Using multiple	1
in green. It takes	1
in favor of Intel	1
in a[i]. Note how	1
in Linux). Threads are	1
in nature, it is	1
in meaningless event counts	1
The function is also	1
The function is called	1
The function that detects	1
The function code is	1
The function may return	1
The function library at	1
The function call makes	1
The function names in	1
The function F1 is	1
The function rounds a	1
The if branch is	1
The if statement in	1
The code is inlined	1
The code is compact	1
The code is __asm	1
The code in the	1
The code in this	1
The code in example	3
The code for accessing	1
The code that accesses	1
The code can be	1
The code can now	1
The code will read	1
The code has a	1
The code cache works	2
The code examples in	1
The code becomes more	2
The code becomes smaller	1
The code goes through	1
The code section is	1
The code section contains	1
The code section needs	1
The compiler is not	1
The compiler is more	1
The compiler is likely	1
The compiler can use	1
The compiler can then	1
The compiler can also	1
The compiler can replace	1
The compiler can easily	1
The compiler can eliminate	1
The compiler may not	1
The compiler may avoid	1
The compiler may replace	5
The compiler may reduce	2
The compiler may change	1
The compiler may report	1
The compiler may interleave	1
The compiler will always	1
The compiler will calculate	1
The compiler will store	1
The compiler will replace	1
The compiler will choose	1
The compiler will produce	1
The compiler will vectorize	1
The compiler has to	1
The compiler has not	1
The compiler has replaced	1
The compiler makes a	1
The compiler cannot rule	1
The compiler does not	1
The compiler doesn't have	1
The compiler doesn't need	1
The compiler option -fno-pic	1
The compiler supports CPU	1
The compiler comes with	1
The compiler sometimes uses	1
The compiler generates the	1
The compiler inserts extra	1
The this pointer in	1
The time that is	1
The time it takes	9
The time you spend	1
The time when the	1
The time used for	1
The time unit is	1
The time stamp counter	1
The time measurements may	1
The time consumption of	1
The use of vector	1
The use of threads	1
The use of structures	1
The use of coprocessors	1
The } 59 third	1
The memory address at	1
The memory space never	1
The memory space becomes	1
The data in this	1
The data have to	1
The data cache is	1
The data members of	1
The data section is	1
The program is exception	1
The program can check	1
The program or library	1
The program code is	2
The program may have	1
The program will not	1
The program has to	1
The program has an	1
The program should be	1
The program should automatically	1
The program uses a	1
The program logic may	1
The vector class library	1
The vector operations use	1
The vector instructions cannot	1
The different versions of	2
The different threads need	1
The different kinds of	1
The same can be	1
The same can happen	1
The same example using	1
The same register can	1
The same method can	1
The same applies to	2
The same rules apply	1
The same advice applies	1
The same argument does	1
The same coding rules	1
The functions are usually	1
The functions must have	1
The only way to	1
The only allowed inputs	1
The only CPUID information	1
The CPU can hold	1
The CPU will start	1
The CPU dispatcher should	3
The CPU dispatcher does	1
The CPU dispatcher checks	1
The CPU dispatch mechanism	2
The CPU supports this	1
The CPU family and	1
The CPU market is	1
The other STL containers	1
The instruction add ebx,	1
The instruction add eax,1	1
The loop in example	2
The loop can still	1
The loop will use	1
The loop branch should	1
The loop would be	1
The loop counter i	1
The loop count should	1
The loop control condition	1
The loop unrolling in	1
The loop body now	1
The loop body begins	1
The loop initialisation i=0;	1
The cache line size	2
The cache works most	1
The integer size is	1
The integer division prevents	1
The integer representation of	1
The integer comparison is	1
The floating point stack	1
The example on page	1
The compilers are better	1
The compilers are becoming	1
The compilers will not	1
The compilers also have	1
The compilers I have	1
The most efficient vector	1
The most efficient loop	1
The most critical part	1
The most important method	1
The most important disadvantage	1
The most important addition	1
The most important thing	1
The most important remedy	1
The most common mathematical	1
The most common implementations	1
The most common pitfalls	1
The most common time-consumers	1
The most compatible way	1
The most serious problem	1
The most commonly used	2
The size of the	2
The size of an	1
The size of vector	1
The size of all	1
The size of each	1
The size of integers	1
The size should always	1
The size conversion often	1
The size (in bytes)	1
The Intel compiler is	2
The Intel compiler can	1
The Intel compiler has	1
The Intel compiler allows	1
The Intel compiler supports	1
The Intel compiler includes	1
The Intel compiler generates	1
The Intel vector class	1
The Intel compilers and	1
The pointer is simply	1
The library function will	1
The library has preprocessing	1
The float type holds	1
The multiple CPU cores	1
The two comparisons i	1
The two summation variables	1
The object that looses	1
The object oriented programming	1
The object pointed to	1
The number of elements	1
The number of registers	2
The number of branches	1
The number of unused	1
The number of logical	1
The number of context	1
The static memory is	1
The static data area	1
The static keyword has	1
The static keyword also	1
The static declaration makes	1
The 64-bit version is	1
The 64-bit systems can	1
The C++ way of	1
The C++ language is	2
The C++ exception handling	1
The C++ syntax has	1
The clock frequency is	1
The clock frequency of	1
The clock frequency may	1
The clock counts are	1
The version that works	1
The version that performs	1
The value is zero	1
The value of the	1
The value of cc[i]+2	1
The value of i&15	1
The objects are not	1
The objects stored in	1
The return type of	1
The table of coefficients	1
The table can give	1
The table should be	1
The table shows that	1
The table shows whether	1
The performance is inferior	1
The performance can be	1
The performance on non-Intel	1
The performance monitor counters	1
The performance measurement should	1
The order of Boolean	1
The order of inheritance	1
The order in which	1
The branch inside the	1
The branch target buffer	1
The member functions of	1
The way to use	1
The way to increase	1
The elements at the	1
The const keyword tells	1
The address of x	1
The address of list[i]	1
The critical stride is	1
The critical stride for	1
The critical stride can	1
The operating system may	3
The unsigned integer type	1
The first time you	1
The first two integer	1
The first way is	1
The first processors that	1
The first processors with	1
The first eight elements	1
The first count is	1
The first count and	1
The first thing to	1
The first thing we	1
The first generation of	1
The first generation class	1
The register stack also	1
The register keyword is	1
The register keyword can	1
The 64 bit instruction	1
The 64 64 matrix	1
The libraries included with	1
The template parameter should	1
The need for special	1
The test data should	1
The test should be	1
The test tool can	1
The user may not	1
The user interface library	1
The user expects immediate	1
The method is faster	1
The method is somewhat	1
The method of induction	1
The method of bounds	1
The method in example	1
The method used in	1
The method described above	1
The method currently used	1
The access is faster	1
The SSE2 instruction set	3
The following compiler versions	1
The following example shows	10
The following example illustrates	4
The following example explains	1
The following example transposes	1
The following example converts	1
The following table lists	1
The following table summarizes	1
The following list points	1
The following methods may	1
The following examples explain	1
The following algorithm is	1
The following sections describe	1
The following guidelines can	1
The following considerations should	1
The following techniques can	1
The system is likely	1
The file will remain	1
The file http://www.agner.org/optimize/asmlib.zip contains	1
The dynamic libraries are	1
The type of storage	1
The type __m128i defines	1
The type __m128 defines	1
The type __m128d defines	1
The & operator is	1
The instructions mov ebx,eax	1
The constant N1 could	1
The constant (2n /	1
The stack is the	1
The stack is a	1
The stack unwinding mechanism	2
The Gnu function libraries	1
The Gnu compiler is	1
The Gnu compiler and	1
The Gnu compiler can	2
The Gnu compiler often	1
The Gnu compiler allows	1
The Gnu C++ compiler	1
The Gnu libraries support	1
The extra time may	1
The assembly output option	1
The assembly listing reveals	1
The Windows and Linux	1
The Windows version is	1
The calculations may take	1
The execution times per	1
The execution core of	1
The result is the	1
The result of the	1
The result of comparing	1
The result will be	1
The result ebx is	1
The threads have each	1
The best function libraries	1
The best compilers use	1
The best possible version	1
The best performance is	3
The best way to	2
The best solution is	1
The best Java machines	1
The speed is many	1
The speed of CPUs	1
The speed for certain	1
The speed on non-Intel	1
The speed test should	1
The c loop in	1
The virtual processor may	1
The common excuse that	1
The AMD math core	1
The exception is costly	1
The exception is caught	1
The allocated memory is	1
The allocated memory may	1
The AVX instruction set	1
The AVX instructions have	1
The optimized code looks	1
The optimized part of	1
The calculation of this	1
The calculation of expressions	1
The calculation of graphics	1
The calculation of c+b	1
The calculation becomes easier	1
The calculation here gives	1
The parameters a and	1
The problem is that	1
The problem with this	1
The problem only occurs	1
The problem here is	1
The solution a =	1
The container class must	1
The advantage of this	1
The advantage of using	5
The advantage of static	1
The advantage of sharing	1
The operators are inlined	1
The operators &, |,	1
The few clock cycles	1
The standard template library	1
The standard stack frame	1
The standard solution to	1
The hardware definition language	1
The values of nonzero	1
The values are then	1
The values are simply	1
The sign is stored	1
The copy constructor can	1
The copy constructors and	1
The copy constructor, if	1
The intermediate code cannot	1
The intermediate file format	1
The intermediate files are	1
The allocation of memory	1
The allocation and deallocation	1
The above code is	1
The above code can	1
The above code will	1
The above example sets	1
The above examples all	1
The optimal number of	1
The space is automatically	1
The dispatching to C1::Disp()	1
The dispatching mechanism can	1
The next time a	1
The next instruction mov	1
The next example shows	1
The next two instructions	1
The next line provokes	1
The next section (page	1
The next chapter describes	1
The branches may take	1
The multiplication by 2	1
The multiplication by columns	1
The application program will	1
The application program loads	1
The expression a &&	1
The expression that is	1
The expression (Tuesday |	1
The Boolean operations can	1
The Boolean operators produce	1
The intrinsic vector functions	1
The development time and	1
The development time for	1
The name of this	1
The name "position-independent code"	1
The conversion of i	1
The conversion time is	1
The conversion from example	1
The conversion between signed	1
The disadvantage is that	3
The disadvantage of function	1
The disadvantage of using	1
The disadvantage of 64-bit	1
The disadvantage of compiling	1
The high speed of	1
The high priority of	1
The Microsoft and Intel	1
The Microsoft compiler does	1
The division is inexact	1
The source code is	1
The cost of dynamic	1
The cost of task	1
The cost of starting	1
The cost of synchronizing	1
The automatic dispatching can	1
The automatic vectorization works	1
The reason is that	4
The reason for this	2
The reason for using	1
The reason why the	1
The reason why this	1
The reason why compilers	1
The reason is, I	1
The dispatcher function will	1
The dispatcher changes the	1
The string classes allocate	1
The string length function	1
The programmer can use	1
The programmer does not	1
The programmer typically thinks	1
The three functions Sum1,	1
The three clauses are	1
The keyword static, when	4
The keyword __fastcall changes	1
The examples in this	1
The examples are intended	1
The examples on page	1
The difference is simply	1
The difference between a	1
The difference lies in	1
The mechanism of static	1
The mechanism relies on	1
The last line is	1
The load time can	1
The calling function must	1
The XMM vector registers	1
The second way is	1
The second thing we	1
The second generation class	2
The bigger vectors do	1
The AVX2 instruction set	1
The x86 processors are	1
The process of dynamic	1
The 512 512 matrix	1
The advantages of function	1
The advantages of using	5
The advantages of dynamic	2
The advantages of alloca	1
The results of my	1
The results are listed	1
The results are summarized	1
The storage of text	1
The storage principles are	1
The old C-style method	1
The union forces the	1
The link to a	1
The link order is	1
The appropriate version of	1
The constructor or overloaded	1
The constructor sets all	1
The operands of the	1
The range of floating	1
The smaller the system,	1
The core clock cycles	1
The core clock cycle	1
The negative effects of	1
The main advantage of	1
The main reason why	1
The main focus is	1
The positive effects are:	1
The overhead of call	1
The overhead of parameter	2
The overhead of semaphores,	1
The change of a	1
The installation of downloaded	1
The installation program makes	1
The installation process should	1
The syntax is simpler	1
The syntax in example	1
The syntax may seem	1
The choice of compiler	1
The choice of which	1
The choice of hardware	1
The choice of platform	1
The choice of algorithm	1
The profiler counts how	1
The profiler tells the	2
The profiler inserts temporary	1
The profiler measures not	1
The profiler identifies any	1
The modern microprocessors are	1
The network access may	1
The level-2 cache is	1
The fact that the	4
The output goes to	1
The vectorized code should	1
The costs of this	1
The costs of optimizing	2
The preceding paragraph described	1
The safe way to	1
The Pentium 4 (NetBurst)	1
The Pentium Pro instruction	1
The efficiency of the	1
The efficiency of a	1
The efficiency of different	2
The exponent is stored	1
The exponent is always	1
The conditions that make	1
The maximum loop count	1
The maximum size of	1
The maximum number of	3
The alignment of structure	1
The offset of b	1
The effect is much	1
The effect is simply	1
The effect of the	2
The effect of dependency	1
The so-called objects are	1
The so-called nontemporal write	1
The so-called iterators that	1
The total size of	1
The child class is	1
The child classes implement	1
The containers in the	1
The counters will stay	1
The 128-bit XMM registers	1
The 128-bit XMM vectors	1
The names of the	1
The names of inlined	1
The details of cache	1
The details about name	1
The square brackets mean	1
The bitwise operators are	1
The bitwise operators produce	1
The bitwise operators &,	1
The bitwise AND operation	1
The heap can easily	1
The heap space becomes	1
The heap manager can	1
The heap manager will	1
The heap manager has	1
The target of branches	1
The target address is	1
The nontemporal write instructions	1
The simplest and most	1
The simplest possible user	1
The simplest way to	1
The simplest case is	1
The situation is more	1
The delay is less	1
The delay is significant	1
The delay on lazy	1
The newer instruction sets	1
The sequence of backwards	1
The length of a	2
The penalty of cache	1
The reasons for this	1
The alternative solution of	1
The 'this' pointer takes	1
The gain in performance	1
The gain depends on	1
The declaration of the	1
The map file includes	1
The map file tells	1
The microarchitecture of Intel,	1
The 256-bit YMM vectors	1
The subsequent counts give	1
The subsequent sections describe	1
The subsequent manuals are	1
The transfer of a	1
The latter is more	1
The latter is slightly	1
The search for updates	1
The logic of the	1
The Microsoft, Intel and	1
The typical way to	1
The usability may be	1
The procedure to calculate	1
The frequent allocation and	1
The algorithms used for	1
The PLT entry initially	1
The inputs for a	1
The fastest execution is	1
The Gnu, Intel and	1
The preferred method for	1
The volatile keyword makes	1
The volatile keyword specifies	1
The YMM registers are	1
The purpose is to	1
The purpose of the	1
The purpose of this	1
The purpose of using	1
The D language allows	1
The carry bit can	1
The trick is to	1
The trick of using	2
The trick will fail	1
The trick violates the	1
The disadvantages of dynamic	1
The update process should	1
The developers may therefore	1
The profilers are not	1
The linker will generate	1
The representation of float,	1
The Clang compiler is	1
The Clang compiler combined	1
The measured time is	1
The measured results were	1
The factor sizeof(S1) =	1
The rules for prediction	1
The latest versions of	1
The log on process	1
The CodeGear compiler cannot	1
The principle of table	1
The principle of lazy	1
The availability of various	1
The .NET framework and	1
The .NET framework should	1
The newest instruction sets	1
The prefetch instruction can	1
The debugger cannot set	1
The behavior of the	1
The 32- bit x86	1
The worst case is	1
The worst problem of	1
The biggest disadvantage of	1
The third thing that	1
The CISC instruction set	2
The AND operator (&)	1
The context switches after	1
The live range of	1
The OR operator (|)	1
The advice of making	1
The pow function uses	1
The pitfalls of unit-testing	2
The equivalent expression b	1
The Codeplay compiler has	1
The present manual is	1
The highest performance that	1
The highest efficiency is	1
The "Intel Math Kernel	1
The pre-increment operator ++i	1
The older MMX registers,	1
The 17 debug version	1
The empty throw()specification is	1
The missing functions can	1
The powN template is	2
The lengths of the	1
The splitting of software	1
The splitting of N	1
The consequence is that	1
The consequence of such	1
The original method of	1
The returned pointer or	1
The existing object can	1
The explicit use of	1
The MOVNTQ instruction cannot	1
The MOVNTQ instruction must	1
The implicit 'this' pointer	1
The tests were carried	1
The conclusion is that	2
The conclusion to this	1
The C/C++ standard specifies	1
The Intel-based Mac OS	1
The updating mechanism should	1
The exponential function can	1
The generality of the	1
The initialization routine sets	1
The -fpie option is	1
The easiest way to	2
The history of programming	1
The CPU- specific functions	1
The InstructionSet() function is	1
The unrolled loop takes	1
The built-in code is	1
The symbol interposition feature	1
The fastcall modifier can	1
The preprocessing macro INSTRSET	1
The formats can be	1
The FDIV bug is	1
The dynamic_cast operator is	1
The opposite of register	1
The opposite order of	1
The proxy is smaller	1
The const_cast operator is	1
The resulting code will	1
The DLLs are relocated	1
The renaming mechanism works	1
The indirect function feature	1
The theoretical background is	1
The pragmas must be	1
The branching is done	1
The creation of a	1
The integrated development environment	1
The recursion must always	1
The insight you gain	1
The funny looking name	1
The clumsy AND-OR construction	1
The procedures for installation	1
The [] operator will	1
The similarity between the	1
The vulnerability of software	1
The 16-byte instructions MOVNTPS,	1
The dot in the	1
The Core2 processor performs	1
The benchmark performance of	1
The recommendations are based	1
The radical solution of	1
The absence of such	1
The fallacy of measuring	1
The benefits of a	1
The allocation, deallocation and	1
The ?: operator here	1
The lesson we can	1
The FactorialTable in example	1
The CodeGear, Codeplay and	1
The ultimate solution would	1
The official C standard	1
The reinterpret_cast operator is	1
The characters '?', '@'	1
The undocumented Intel library	1
The static_cast operator does	1
The IPP library does	1
The distinctions between RISC	1
The inequality sign must	1
The i<20 loop control	1
The compactness of the	1
The loop-branch is usually	1
The advise of using	1
The sin function is	1
The MASM assembly language	1
for the function call.	1
for the compiler to	6
for the compiler you	1
for the memory model	1
for the vector class	1
for the same cache	2
for the same reason	1
for the same variables.	1
for the same resources.	1
for the same resources,	1
for the functions that	1
for the CPU to	1
for the CPU it	1
for the CPU dispatcher	1
for the other thread.	1
for the instruction set	2
for the loop counter,	1
for the class Vec16s	1
for the size of	1
for the Intel Core	1
for the two functions.	1
for the object x	1
for the C++ language,	1
for the performance then	1
for the 32-bit case.	1
for the critical innermost	1
for the first time	1
for the first two	1
for the new value	1
for the user and	1
for the SSE2 instruction	2
for the following reasons:	3
for the cases described	1
for the error code.	1
for the stack can	1
for the result of	1
for the specific instruction	1
for the specific purpose	1
for the common language	1
for the common entry	1
for the exception handling	1
for the exception handler,	1
for the overflow condition	1
for the AVX and	1
for the AVX instruction	1
for the calculation of	1
for the parameters of	1
for the supported instruction	1
for the hardware definition	1
for the intermediate result	1
for the next step.	1
for the programmer to	4
for the three functions.	1
for the end user	1
for the end user.	1
for the difference between	1
for the link pointers	1
for the appropriate type	1
for the main memory	1
for the installation process	1
for the desired program	1
for the desired instruction	1
for the whole program	1
for the level-2 cache	1
for the level-1 cache	1
for the object. Make	1
for the sake of	13
for the performance. 14.4	1
for the child class	1
for the stack. The	1
for the stack. Is	1
for the logical structure	1
for the simplest cases,	1
for the CPU. Algebraic	1
for the user. Time	1
for the user. With	1
for the Microsoft, Intel,	1
for the purpose of	1
for the latest instruction	2
for the application. You	1
for the availability of	1
for the .NET framework	1
for the project at	1
for the commercial compilers.	1
for the linker. Both	1
for the FDIV bug	1
for the reinstallation work	1
for the IDE, for	1
for the "FDIV bug".	1
for the label. It	1
for the <, <=,	1
for the pros and	1
for the newsgroup comp.lang.asm.x86	1
for is likely to	1
for a and b	1
for a very large	1
for a new object	1
for a Windows compiler	1
for a result then	1
for a specific instruction	1
for a specific purpose.	1
for a specific purpose,	1
for a specific purpose:	1
for a single function	1
for a virtual function	1
for a few functions	1
for a list of	1
for a particular memory	1
for a particular CPU	1
for a particular instruction	1
for a particular set	1
for a particular purpose.	1
for a higher instruction	1
for a higher clock	1
for a 512 512	1
for a given instruction	1
for a given task	1
for a further discussion	1
for a discussion of	2
for a low instruction	1
for a lower instruction	1
for a portable way	1
for a console mode	1
for a discussion. 7.33	1
for a 2'nd order	1
for // multiply //	1
for function libraries distributed	1
for function F1. However,	1
for code that is	1
for code that can	1
for code bloat and	1
for an integer constant,	1
for an example of	2
for an explanation of	5
for an explanation and	1
for an increasing number	1
for an explanation. Note	1
for an explanation. (The	1
for an example. A	1
for x to the	1
for this is that	1
for this instruction set	1
for this manual for	1
for this function, though	1
for this task when	1
for this shift in	1
for this efficiency lies	1
for this purpose. It	1
for this purpose, or	1
for this reason. A	1
for use as pivot	1
for more than one	1
for more information about	1
for more complicated mathematical	1
for more advanced data	1
for more discussion of	1
for vector operations. Algorithms	1
for vector operations, see	1
for vector intrinsics. Digital	1
for different instruction sets	2
for different instruction sets...........................	1
for different Intel CPUs.	1
for different C++ compilers	6
for different objects even	1
for different processors and	1
for different processors are	1
for different arrays even	1
for different matrix sizes	1
for different compilers. This	1
for different CPUs. This	1
for different CPUs. (See	1
for different platforms as	1
for different purposes is	1
for different microprocessors, different	1
for functions that are	1
for CPU dispatching and	1
for CPU brand simply	1
for other integer expressions	1
for other virtual processors	1
for other purposes. The	1
for other purposes. This	1
for other brands of	1
for other purposes than	2
for other reasons, but	1
for other optimizations, as	1
for all the objects	1
for all the necessary	1
for all functions and	1
for all static data,	1
for all these purposes.	1
for all public and	1
for all modules that	1
for all platforms. PathScale	1
for all unknown processors	1
for all applications. 2.8	1
for all suitable functions	1
for all objects. This	1
for all Unix-like platforms.	1
for all major platforms.	1
for all squares: for	1
for one array rather	1
for one segment then	1
for integer vector division.	1
for integer division in	1
for integer overflow. Signed	1
for integer constants. Register	1
for class member functions	1
for floating point calculations	1
for floating point addition	1
for floating point expressions	1
for floating point overflow:	1
for floating 26 point	1
for each function call	1
for each different value	1
for each other in	1
for each instruction set.	1
for each set of	1
for each version void	1
for each version FuncType	1
for each test //	1
for each type of	1
for each processor model	1
for each element __m128i	1
for each thread than	1
for each allocated block.	1
for each line written.	1
for each process when	1
for each object. A	1
for each iteration is	1
for each thread. This	1
for each thread. It	1
for each thread. Thread-local	1
for each version. The	1
for each row or	1
for each process. A	1
for each process. Obviously,	1
for each calculation. In	1
for example to produce	1
for example if you	2
for example when you	1
for example when r	1
for example i =	1
for example 32 bits	1
for example every time	1
for example 9.5 because	1
for compilers that support	1
for most purposes the	1
for using the performance	1
for using an intermediate	1
for using overloaded functions.	1
for double precision. You	1
for double precision. But	1
for size is relevant	1
for size and optimizing	1
for Intel CPUs. New	1
for Intel CPUs, not	1
for pointer conversions. It	1
for library functions. The	1
for float expressions Automatic	1
for multiple variables as	1
for multiple purposes. All	1
for multiple purposes. Floating	1
for 64-bit operating systems	1
for 64-bit Linux and	1
for 64-bit integers. Many	1
for 64-bit Windows). The	1
for C++ for several	1
for such optimizations with	1
for such errors in	1
for such applications, but	1
for array elements Induction	1
for array bounds violations,	1
for array bounds violations	1
for array bounds violation,	1
for array sizes and	1
for many of these	1
for many different purposes.	2
for many common purposes	1
for many standard tasks	1
for many applications even	1
for many computer users	1
for many programmers and	1
for many platforms, including	1
for many years to	1
for objects stored in	2
for any other resource,	1
for any library functions	1
for any compile-time constant	1
for some small low-power	1
for some CPU-intensive applications	1
for some caveats. We	1
for some links. 20	1
for variables that are	1
for variables declared with	1
for performance reasons. Use	1
for very long on	1
for very large data	1
for very large libraries.	1
for software to add	1
for software users as	1
for software teachers to	1
for 32-bit and 64-bit	2
for 32-bit software because	1
for 32-bit Windows and	1
for 32-bit Mac OS	2
for 32-bit Windows, including	1
for 32-bit Windows. Does	1
for 32-bit Windows. Integrates	1
for 32-bit integers, depending	1
for branch prediction are	1
for branch mispredictions. The	1
for member functions. You	1
for elements in a	1
for elements inside sqaure:	1
for address calculation in	1
for critical applications because	1
for less intensive applications.	1
for example, to go	1
for example, to convert	1
for example, that a	1
for example, you can	1
for example, you should	1
for example, you want	1
for register variables are	1
for register variables. This	1
for register storage. The	1
for how to use	1
for how to make	1
for how to test	1
for how to check	1
for how to store	1
for how to align	1
for how to overcome	1
for test purposes. The	1
for test purposes. If	1
for user input or	2
for user input. The	1
for user input. Many	1
for user input. (In	1
for these variables. The	1
for these calculations. Division	1
for these methods. If	1
for even the smallest	1
for sure whether the	1
for SSE2 and later	1
for SSE2 or x64	1
for system code. System	1
for file input and	1
for dynamic allocation. The	1
for simple types such	1
for simple tasks like	1
for simple variables, arrays	1
for simple tasks. Sometimes	1
for making the structure	1
for making a debug	1
for making data more	1
for making multiple versions	1
for making clear and	1
for making plug-ins that	1
for CPUs with only	1
for CPUs with slow	1
for assembly language output.	1
for assembly programmers and	1
for assembly output. The	1
for large data sets.	1
for large libraries where	1
for arrays bigger than	1
for Windows and the	1
for Windows and to	1
for Windows and C++	1
for Windows are fully	1
for Windows applications. The	1
for execution speed and	1
for big objects that	1
for threads that jump	1
for best performance. The	1
for speed is relevant	1
for speed or size.	1
for speed /O2 or	1
for specific CPU brands	1
for specific CPU models.	1
for single precision than	1
for several different CPUs.	1
for several different purposes.	1
for several seconds because	1
for several iterations of	1
for several reasons. C++	1
for common mathematical calculations	1
for AMD CPUs use	1
for AMD CPUs. New	1
for AMD Family 15h	1
for exception handling unless	1
for small x //	2
for small embedded systems.	1
for overflow of the	2
for overflow and works	1
for overflow by checking	1
for overflow before it	1
for overflow outside the	1
for good code performance	1
for matrix a: //	1
for Linux have an	1
for Linux systems. The	1
for Linux platforms if	1
for AVX or later	1
for another memory access.	1
for (i = 0;	26
for (i = 2;	1
for (i = StringLength;	1
for (i = (int)n	1
for support of the	1
for doing two or	1
for doing some calculations	1
for doing parallel calculations	1
for inline assembly on	1
for every element in	1
for every four objects.	1
for every iteration of	1
for standard tasks such	1
for sign and rounding	1
for copy constructors and	1
for optimizing execution speed	1
for optimizing code, as	1
for information stored by	1
for certain tasks on	1
for intermediate results, which	1
for fast and easy	1
for fast 32-bit software	1
for fast access to	1
for fast division c	1
for fast math and	1
for (int i =	13
for (int n =	1
for programs that are	1
for programs implemented in	1
for Mac OS X	1
for multiplication } //	1
for handling a full	1
for Boolean vector operations.	1
for intrinsic functions //	1
for intrinsic functions You	1
for intrinsic functions (i.e.	1
for intrinsic functions, but	1
for mathematical functions such	1
for high precision math	1
for high precision math.	1
for source annotation in	1
for running multiple threads	1
for automatic CPU dispatching.	1
for automatic updates, remote	1
for string searching and	1
for better metaprogramming tools	1
for applications that can	1
for examples of how	3
for char pointers. 144	1
for char pointers). An	1
for runtime type identification	1
for actually making a	1
for Intel, AMD and	1
for later maintenance. However,	1
for calling from other	1
for your compiler for	1
for your application then	1
for XMM registers; see	1
for vectors There are	1
for AVX2 and all	1
for x86 platforms. 3.	1
for old processors without	1
for advanced programmers and	1
for switch statements because	1
for switch statements, as	1
for things like adding	1
for negative numbers. The	1
for example: Use a	1
for positive and 1	1
for positive n. You	1
for my optimization manuals.	1
for my test tool	1
for relative addressing of	1
for installation and uninstallation	1
for Windows, while most	1
for Windows, Linux and	2
for Windows, -msse2, -mavx,	1
for inlining a function	1
for network resources cannot	1
for whole program optimization	1
for whole program optimization.	1
for level-2 cache contentions	1
for response from a	1
for vectorization Not all	1
for checking multiple values	2
for checking how well	1
for level-1 cache contentions	1
for vectorized table lookup	1
for vectorized table lookup.	1
for local objects are	1
for local references. If	1
for local references. Shared	1
for constants that are	1
for special position-independent code	1
for special purposes are	1
for further discussion of	3
for further optimizations. Loops	1
for further explanation. The	1
for further discussion. Integer	1
for further expansions of	1
for discussion of efficient	1
for discussion of aligning	1
for testing multiple conditions	1
for testing single assembly	1
for tasks such as	1
for optimization. For example,	1
for accessing the same	1
for accessing a data	1
for accessing arrays forwards,	1
for accessing container elements	1
for accessing list[i].a and	1
for adding bounds-checking to	1
for 16-bit mode and	1
for disk operations to	1
for classes. The splitting	1
for N a power	1
for N = 0	1
for N = 1.	1
for details on when	1
for details about rounding.	1
for details (www.agner.org/optimize/testp.zip). A	1
for containing thread-specific data	1
for initialized variables that	1
for improved performance. A	1
for updates should be	1
for updates each time	1
for updates every time	1
for parallel processing. Scott	1
for calculating the address	1
for calculating the addresses	1
for calculating the physical	1
for calculating the movements	1
for calculating a polynomial.	1
for calculating row addresses	1
for calculating self- relative	1
for SSE4.1 and one	1
for garbage collection. The	1
for buffer overflow on	1
for future models of	1
for unaligned arrays. There	1
for significant improvements. Making	1
for reasons of mathematical	2
for reasons explained on	4
for setting up a	1
for 'this' is incurred	1
for Windows. 10 Multithreading	1
for approximately two clock	1
for finding the hot	1
for finding the right	2
for finding the numerically	1
for finding problems that	1
for finding hot spots,	1
for finding elements. A	1
for hard disk copying.	1
for usability reasons. The	1
for overflow. This function	1
for overflow. Example: //	1
for false and 1	1
for temporary storage. Variables	1
for prediction and misprediction	1
for background services under	1
for background jobs. The	1
for interrupt 3. The	1
for general function libraries	1
for general purposes in	1
for multiplying the index	1
for random number generators.	1
for D are not	1
for debugging and exception	1
for debugging facilities, easy	1
for Linux. It can	1
for Linux. 82 Keywords	1
for Java today. But	1
for executing the same	1
for free in the	1
for ( ; i	1
for exceptions thrown by	1
for storing function return	1
for storing user data.	1
for storing text or	1
for powers of 2	1
for polymorphism A template	1
for details. The behavior	1
for details. // Example	1
for details. Use function	1
for details. Note that	1
for details. Development time	1
for details. Inheritance from	1
for speed. Optimizing for	1
for giving the function	1
for giving specific optimization	1
for converting the data	1
for converting a pointer	1
for specifying parallel processing	1
for self-relative addressing of	1
for 32- and 64-bit	2
for security reasons before	1
for communication and synchronization	1
for communication between different	1
for avoiding the costs	1
for avoiding infinite loop	1
for internal references. 64-bit	1
for internal references. There	1
for internal references. Therefore,	1
for reducing the time	1
for strict floating point	1
for (c = 0;	4
for lists that are	1
for computing mathematical functions	1
for computing i/2+r. The	1
for Basic soon became	1
for CPU-intensive code, as	1
for present processors rather	1
for turning off all	1
for regular access patterns	1
for true. Boolean variables	1
for defining constants. For	1
for restrictions on using	1
for overflow, and the	1
for transferring composite objects	1
for transferring additional parameters.	1
for saving a backup	1
for saving memory space	1
for saving registers that	1
for (b + c)	1
for mixing different floating	1
for mixing single and	1
for (r = 0;	2
for (r = 1;	2
for detailed instructions. Example:	1
for application-specific code. If	1
for virus scanners to	1
for constants. Integer constants	1
for prefetching data for	1
for aligning data #ifdef	1
for assuming no pointer	1
for speed-critical functions by	1
for speed-critical functions. Many	1
for calculations: for (	1
for multi-core processing. Visual	1
for generality and flexibility,	1
for (i=0; i<100; i++)	1
for (i=0; i<n; i++)	1
for (i=0; i<n; ++i).	1
for implementing a compile-time	1
for implementing polymorphic classes.	1
for cleaning up and	1
for improving the code.	1
for improving code that	1
for organizing data into	1
for metaprogramming, as explained	1
for InstructionSet() #include "asmlib.h"	2
for (x = 0;	2
for (x = 2.0;	1
for free. Visual Studio	1
for interpreting or compiling	1
for jumping out of	1
for modifying the name	1
for vacant spaces. This	1
for supporting multiple platforms	1
for supporting multi-threaded software	1
for uninitialized variables that	1
for putting the right	1
for preventing program errors	1
for creating and deleting	1
for Unix applications and	1
for audio and video	1
for updating. The update	1
for (c2 = r1;	1
for (c2 = c1;	1
for marketing reasons. This	1
for verifying the functionality	1
for WTL applications can	1
for millisecond resolution. A	1
for "assume no pointer	1
for manipulating floating point	2
for parallelization in the	1
for AVX. These suffixes	1
for AVX. 5. The	1
for Tuesday, Wednesday or	1
for dealing with this	1
for trivial tasks such	1
for recovering or for	1
for studying a piece	1
for statistics, signal processing	1
for exclusive access by	1
for assigning different priorities	1
for relieving the const	1
for shared_ptr than for	1
for (r2 = r1;	1
for (r2 = r1+1;	1
for exploiting fine-grained parallelism.	1
for IA-32/Intel64, 2009. Gnu	1
for transposition of different	1
for issuing an error	1
for incrementing a loop	1
for Linux) 4. Align	1
for those who want	1
for investigating performance problems.	1
for vectorization............................................................. 117 12.7	1
for detecting errors that	1
for transposing and copying	1
for foreground jobs and	1
for minimizing memory fragmentation.	1
for (j = 0;	1
for auto_ptr. Smart pointers	1
for response. It is	1
for vectors........................................................................ 119 12.8	1
for holding the pointer.	1
for (c1 = 0;	1
for signifying one of	1
for demonstration purposes. Available	1
for SSE2, preferably 32	1
for hackers. It is	1
for (row = 0;	1
for (r1 = 0;	1
for pow(x,N) where N	1
for both, while the	1
for combining multiple .cpp	1
for (temp = &list[0];	1
for correctness must be	1
for vectorizing mathematical code.	1
for Nerds at Wikibooks.	1
for everything, which is	1
for analysis. If the	1
for fetching a cache	1
for Basic. A compiler	1
for details). The Intel	1
for educational purposes is	1
for correctness. It is	1
for RTTI then turn	1
for 80x86 / x64	1
for speeding up 64-bit	1
for "standard stack frame"	1
for AVX2, or two	1
for "function level linking"	1
for raising an exception	1
for NOT. Instead, you	1
for discussions. Turn on	1
for (column = 0;	1
for reserving memory in	1
for identifying hot spots	1
for distinguishing between the	1
that the function is	3
that the function cannot	1
that the function call	1
that the function must	1
that the if condition	1
that the code is	2
that the code you	1
that the code cache	1
that the code becomes	1
that the compiler has	1
that the compiler takes	2
that the compiler cannot	1
that the compiler uses	1
that the compiler needs	1
that the compiler generates	1
that the compiler sees	1
that the use of	1
that the memory space	1
that the memory footprint	1
that the same function	1
that the only reasonable	1
that the CPU doesn't	1
that the CPU dispatcher	1
that the CPU dispatch	1
that the CPU core	1
that the CPU supports	1
that the loop will	1
that the loop exits,	1
that the cache will	1
that the integer has	1
that the floating point	1
that the compilers may	1
that the compilers cannot	1
that the most critical	1
that the Intel function	1
that the Intel compiler	1
that the Intel CPU	1
that the pointer does	1
that the two constants	1
that the object it	1
that the object owns.	1
that the number of	2
that the 64-bit systems	1
that the clock cycles	1
that the clock frequency	2
that the value is	1
that the value of	4
that the value before	1
that the value pointed	1
that the objects are	1
that the variable always	1
that the variable pointed	1
that the variables might	1
that the table is	1
that the software programming	1
that the order of	1
that the member pointer	1
that the elements are	1
that the address of	1
that the critical stride	1
that the bit scan	1
that the operating system	1
that the first two	1
that the template parameters	1
that the user must	1
that the user actually	1
that the user interface	1
that the system code	1
that the system may	1
that the type conversion	1
that the arrays are	2
that the result can	1
that the processor can	1
that the compiled code	1
that the list does	1
that the values of	2
that the addresses are	1
that the microprocessor can	1
that the microprocessor has	2
that the microprocessor wastes	1
that the next processor	1
that the next instance	1
that the next generation	1
that the name cannot	1
that the conversion is	1
that the dispatcher function	1
that the programmer can	1
that the programmer forgets	1
that the end user	2
that the last index	1
that the numbers in	1
that the operands are	1
that the operands have	1
that the overhead of	1
that the C style	1
that the syntax is	1
that the choice of	2
that the level-2 cache	1
that the response time	2
that the repeat count	1
that the alignment is	1
that the compatibility with	1
that the final result	1
that the amount of	1
that the rows are	1
that the beginning of	1
that the declaration class	1
that the background job	1
that the linker extracts	1
that the representation of	1
that the break will	1
that the portability could	1
that the behavior of	1
that the rest of	1
that the loader will	1
that the original object	1
that the C/C++ standard	1
that the resulting machine	1
that the branching takes	1
that the reader has	1
that the overall computation	1
that the remaining bits	1
that the producer will	1
that the occurrence is	1
that is a power	2
that is a linear	1
that is not part	1
that is an n'th	1
that is more efficient	1
that is used is	1
that is used for	1
that is used by	2
that is used only	1
that is most often	1
that is two or	1
that is member of	1
that is stored in	1
that is called from	1
that is called before	1
that is always true/false	1
that is part of	1
that is compiled for	1
that is compiled as	1
that is big enough	2
that is allocated is	1
that is allocated dynamically	1
that is calculated the	1
that is four places	1
that is shared between	1
that is optimal for	1
that is n places	1
that is difficult to	1
that is longer than	1
that is actually needed	1
that is divisible by	3
that is compatible with	3
that is obtained with	1
that is initialized when	1
that is easier to	1
that is organized in	1
that is added to	1
that is almost independent	1
that is measured in	1
that is larger than	1
that is AND'ed with	2
that is said here	2
that is coded as	1
that is slow, difficult	1
that is ported to	1
that is distributed. The	1
that a is true	1
that a function is	2
that a function opens	1
that a compiler generates	1
that a will never	1
that a program reads	1
that a loop in	1
that a value is	1
that a variable is	2
that a variable can	1
that a call to	1
that a template class	1
that a new bigger	1
that a user has	1
that a must be	1
that a specific pointer	1
that a particular memory	1
that a particular programming	1
that a particular application	1
that a particular reduction	1
that a binary search,	1
that a positive list	1
that a detailed overview	1
that a user-defined function	1
that a low-priority thread	1
that of yesterday's big	1
that for a portable	1
that are not known	1
that are not critical.	1
that are not computationally	1
that are not accessible	1
that are not reproducible.	1
that are only available	1
that are used in	5
that are used by	1
that are used most	1
that are used together	6
that are used near	1
that are no longer	1
that are so small	1
that are very difficult	1
that are stored in	1
that are available to	1
that are up to	1
that are best at	1
that are allocated in	1
that are shared between	1
that are members of	1
that are never used	1
that are never modified	1
that are running in	1
that are too large	1
that are needed from	1
that are difficult to	1
that are declared as	1
that are declared outside	1
that are bigger than	1
that are called. A	1
that are based on	1
that are intended for	1
that are particularly important	1
that are particularly critical.	1
that are scattered around	1
that are missing in	1
that are coded in	1
that are modified should	1
that are read-only can	1
that are impossible with	1
that are fine-tuned for	1
that are inherently serial,	1
that can be used	1
that can be optimized	1
that can be predicted	2
that can be vectorized	1
that can be improved	2
that can be critical.	1
that can be divided	1
that can be coded	1
that can be moved	1
that can be obtained.	1
that can be cross-	1
that can be improved.	1
that can be programmed	1
that can be reduced.	1
that can make dynamic	1
that can do whole	1
that can call all	1
that can take advantage	1
that can reduce any	1
that can go more	1
that can prevent the	1
that can tell how	1
that can possibly be	1
that can possibly throw	1
that can easily be	1
that can benefit from	1
that can skip large	1
that can steal the	1
that it is not	3
that it is more	1
that it is possible	1
that it is very	1
that it is stored	1
that it is necessary	2
that it is difficult	1
that it is relevant	1
that it is intended	1
that it is initialized	1
that it is safer	1
that it is unrealistic	1
that it can be	4
that it can have	1
that it can use	1
that it can start	1
that it can multiply	1
that it can move	1
that it may not	1
that it may cause	1
that it may detect	1
that it will not	1
that it has i	1
that it has chosen	1
that it takes to	1
that it takes six	1
that it takes 40%	1
that it makes program	1
that it makes sure	1
that it cannot be	1
that it cannot access	1
that it does not	1
that it does some	1
that it doesn't have	2
that it doesn't work	1
that it doesn't occur.	1
that it allows the	1
that it allows larger	1
that it becomes full.	1
that it calls. The	1
that it calls. 48	1
that it rarely justifies	1
that it writes only,	1
that it fits into	1
that it adds an	1
that it jumps to.	1
that it attempts to	1
that if the elements	1
that if a piece	1
that if you are	1
that if each addition	1
that code cache and	1
that an object must	1
that an optimizing compiler	1
that compiler makers assume	1
that x is treated	1
that may be used	1
that may be necessary.	1
that may be modified	2
that may need to	1
that may improve the	1
that you are dealing	1
that you can make	1
that you can do	2
that you can turn	1
that you can predict	1
that you have to	1
that you have two	1
that you should look	1
that you want to	3
that you want this	1
that you want them	1
that you compile the	1
that you optimized for	1
that you see in	1
that you don't have	2
that you measure are	1
that you analyze all	1
that have a special	1
that have to be	1
that have floating point	1
that have multiple //	1
that have multiple versions.	1
that have many file	1
that have big data	1
that have support for	1
that have values far	1
that have Boolean variables	1
that have tested the	1
that have Booleans as	1
that this is a	1
that this method works	1
that this part of	1
that use the same	1
that use the zero	1
that use only a	1
that use these methods	1
that use large amounts	1
that use big endian	1
that memory access is	1
that data are aligned	1
that has a good	1
that has to be	1
that has no side-effects	1
that has been accessed	1
that has been allocated	1
that has already been	1
that make it possible	2
that make function calling	1
that make member pointers	1
that make up a	1
that make vectorization less	1
that make vectorization favorable:	1
that make developers choose	1
that different threads are	1
that functions which are	1
that only one constant	1
that all the cache	1
that all code versions	1
that all code branches	1
that all floating point	1
that all variables and	1
that all software be	1
that all allocated objects	1
that all operators that	1
that all destructors for	1
that all destructors are	2
that one function can	1
that one thread can	1
that should not be	2
that no function or	1
that no object is	1
that no variable or	1
that no overflow can	1
that floating point comparisons	1
that each value is	1
that each value depends	1
that each calculation depends	1
that each particular branch	1
that each intrinsic function	1
that each statement that	1
that do not have	1
that do not support	2
that do not 123	1
that do have such	1
that do much of	1
that most function libraries	1
that most variables in	1
that most software runs	1
that double precision calculations	1
that pointer aliasing does	1
that b is always	1
that i can never	1
that two pointers of	1
that static linking is	1
that there is more	1
that there is no	1
that there is often	1
that there is always	1
that there is hardly	1
that there are a	1
that there are no	1
that there are 100	1
that there are inherent	1
that there are smarter	2
that there was hardly	1
that C++ compilers exist	1
that also repeats 1000	1
that such feature will	1
that such devices typically	1
that such contrived examples	1
that many common programs	1
that many users will	1
that takes a long	1
that takes more time	1
that takes advantage of	1
that takes longer time	1
that takes care of	2
that we are running	1
that we can do	1
that we can handle	1
that we can help	1
that we can surely	1
that we may save	1
that we have to	1
that we do not	1
that we want it	1
that we don't have	2
that we know that	1
that we expect to	1
that some compilers will	1
that some expression is	1
that some development tools	1
that some microprocessors have.	1
that variables that are	1
that software performance should	1
that software developers should	1
that software projects have	1
that branch and other	1
that makes code. For	1
that makes sure the	1
that take a lot	1
that take only one	1
that take up cache	2
that need to be	2
that need to call	1
that need relocation. All	1
that need relocation, but	1
that pointers of different	1
that pointers to different	1
that pointers do not	1
that these functions have	1
that these integer operations	1
that these methods are	1
that these directives do	1
that they are deallocated	1
that they cannot use	1
that they cannot make	1
that they always keep	1
that they are. Declare	1
that always goes the	1
that access the saved	1
that access times cannot	1
that I have supplied	1
that I consider it	1
that does the same	1
that does the necessary	1
that does floating point	2
that must be loaded	1
that work on all	1
that calls the function	1
that calls the critical	1
that calls at least	1
that calls other functions	1
that calls it. A	1
that processor model numbers	1
that processor model N	1
that big arrays and	1
that doesn't call any	2
that doesn't cause overflow	1
that doesn't add or	1
that doesn't automatically check	1
that doesn't handle current	1
that doesn't compromise safety	1
that threads can share	1
that several variables happen	1
that exception handling takes	1
that overflow can occur	1
that overflow never occurs,	1
that cause the resource-hungry	1
that works for any	1
that works on all	1
that works best on	2
that works well on	1
that uses the cache	1
that uses a newer	1
that uses pointers because	1
that uses few resources.	1
that uses 90% of	1
that container classes in	1
that support the necessary	1
that support a new	1
that support this instruction	1
that support intrinsic functions.	1
that support it. There	1
that supported 128-bit vector	1
that supported 256-bit instructions	1
that contains only a	1
that contains integer division:	1
that contains several branches	1
that would otherwise go	1
that run in the	1
that run in parallel.	1
that run many processes	1
that every function that	1
that standard library functions	1
that add functionality to	1
that simply prints an	1
that certain calculations are	1
that certain parts of	1
that count how many	1
that was used by	1
that was unknown at	1
that was saved in	1
that particular part. It	1
that branches can be	1
that typically use pointers	1
that typically take much	1
that automatically reduces example	1
that caching becomes a	1
that allows you to	2
that allows less precise	1
that allows bigger segments	1
that allows overriding of	1
that allows direct access	1
that don't need the	1
that signed integer overflow	1
that model N+1 supports	1
that model N-1 is	1
that needs to be	2
that needs to call	1
that needs them. Pure	1
that what is brand	1
that source and destination	1
that n is known	1
that string as code.	1
that requires several layers	1
that requires compilation or	1
that your code is	1
that generate floating point	1
that r points to.	2
that goes one way	1
that goes many times	1
that goes randomly one	1
that 10 is an	1
that were not present	1
that were unknown at	5
that require cleanup before	1
that depends only on	1
that supports automatic vectorization,	1
that supports this). Use	1
that my optimization manuals	1
that p is a	1
that p always points	1
that index is not	1
that modern processors prefetch	1
that gives the simplest	2
that gives the worst	1
that comes to mind.	1
that comes with the	1
that rely on the	2
that rely heavily on	1
that produce Boolean output.	1
that produce streaming audio	1
that macro parameters are	1
that variable. The different	1
that fit the size	1
that fit their CPUs.	1
that includes the critical	1
that allow you to	1
that come with the	2
that come with compilers	1
that similar solutions may	1
that future compilers will	1
that seconds remains zero	1
that something takes 10	2
that F1 will never	1
that checks whether the	1
that programmers write expressions	1
that current compilers may	1
that contain pure function	1
that could benefit from	1
that everything that has	1
that branch. The common	1
that jump between multiple	1
that volatile doesn't mean	1
that measurements are unstable	1
that reads or writes	1
that fits the microprocessor	1
that fits the application.	1
that follows a simple	1
that computers have become	1
that depend on network	1
that communication between threads	1
that memset is deprecated.	1
that specifies how to	1
that select the best	1
that select between two	1
that created a file	1
that already works is	1
that relies on network	1
that runs quite fast	1
that runs under the	1
that runs alone in	1
that belong to each	1
that performs best under	1
that produces a string	1
that produces another C++	1
that u.f and v.f	1
that *p+2 is a	2
that chooses between two	2
that 150 you want	1
that avoids overflow: a[i]	1
that seldom occur and	1
that begin with _mm.	1
that N1 = N&(N-1)	1
that appears in the	1
that behaves like a	1
that behaves like an	1
that consumes most of	1
that reflects the conflicting	1
that lies r places	1
that copies the table	1
that allocates memory on	1
that scans all files	2
that delays execution by	1
that holds a memory	1
that a+b is calculated	1
that decide how advantageous	1
that measures the number	1
that measures the speed	1
that accesses data members	1
that accesses b through	1
that thrown exceptions are	1
that treats different brands	1
that loads the appropriate	1
that waits for user	1
that covered the address	1
that begins with #)	1
that previously required a	1
that CParent::Hello() has multiple	1
that owns the allocated	1
that limits the CPU	1
that transfers ownership of	1
that looses ownership of	1
that hackers often have	1
that dates back to	1
that u < 231	1
that connect them. The	1
that "we don't support	1
that draws a whole	1
that violate or circumvent	1
that (b*c) overflows, even	1
that saves time for	1
that r+i/2 could be	1
that crashes the program.	1
that doesn’t. The undocumented	1
that discriminates between CPU	1
that destroys any memory	1
that relate to CPU-intensive	1
that shares the resources	1
that detects an error	1
that matters rather than	1
be the one that	1
be the optimal choice	1
be the fastest solution	1
be the easiest and	1
be a time consumer	1
be a class containing	1
be a very efficient	1
be a very big	1
be a member of	1
be a register variable.	1
be a simple type,	1
be a constant that	1
be a good idea	1
be a power of	4
be a disadvantage if	1
be a better solution	1
be a better solution.	1
be a difference in	1
be a binary tree	1
be a destructor that	1
be a waste of	2
be a hundred or	1
be a compromise between	1
be a type. The	1
be a bottleneck than	1
be a viable solution	1
be a viable compromise	1
be a time-consumer even	1
be a slight degradation	1
be a million times	1
be a level-3 cache.	1
be of the same	1
be of some help	1
be to include a	1
be in the cache.	1
be in the level-1	1
be in the interval	1
be as small as	1
be as standardized as	1
be an efficient way	1
be an efficient solution.	2
be an advantage to	1
be an advantage because	1
be an expression or	1
be an integer. If	1
be an obvious thing	1
be an annoying time	1
be an infinite loop.	1
be time consuming because	1
be more efficient to	2
be more convenient to	1
be more (128 or	1
be at a disadvantage	1
be different for each	1
be different sizes, and	1
be because the non-reduced	1
be only one statement	1
be only one free	1
be used to avoid	1
be used to speed	1
be used in two	1
be used in 64-bit	1
be used in any	1
be used for function	1
be used for other	1
be used for multiple	2
be used for any	1
be used for vectorized	1
be used for accessing	1
be used for reducing	1
be used for turning	1
be used for saving	1
be used for implementing	1
be used for improving	1
be used for metaprogramming,	1
be used for fetching	1
be used if the	1
be used if instruction	1
be used if there	1
be used if elements	2
be used with other	1
be used on completely	1
be used as a	2
be used as alternatives	1
be used as command-line	1
be used as coprocessors	1
be used when a	1
be used only for	1
be used only when	1
be used where execution	1
be used without restrictions.	1
be used most. The	1
be used freely without	1
be cache contentions if	1
be no extra overhead	1
be no certain limit	1
be set then the	1
be set up to	1
be two or three	1
be efficient whether the	1
be possible to do	2
be possible to replace	1
be possible to improve	1
be possible to select	1
be possible to organize	1
be so many unknown	1
be so high that	1
be 2 In 64-bit	1
be very efficient because	1
be very long and	2
be very useful to	1
be very useful for	1
be very inefficient if	1
be very helpful for	1
be faster than a	1
be faster than making	1
be faster when the	1
be faster despite the	1
be stored in a	4
be stored in one	1
be stored in integer	1
be stored in static	2
be stored in registers	1
be stored in memory,	1
be stored with each	1
be stored on the	1
be stored at an	2
be stored together The	1
be stored together Cache	1
be stored together ......................................	1
be stored together...................................... 88	1
be called when the	1
be called from any	1
be called from programming	1
be called from another	1
be called only first	1
be called before the	1
be called whenever an	1
be 8 and no	1
be less than the	2
be less than 231.	1
be less efficient than	1
be less efficient because	1
be 64 bits (MMX),	1
be useful to make	2
be useful to copy	1
be useful to turn	1
be useful to roll	1
be useful to isolate	1
be useful in the	1
be useful in some	1
be useful in test	1
be useful in compiled	1
be useful in programs	1
be useful in situations	1
be useful for making	2
be useful for large	1
be useful for optimizing	1
be useful for finding	1
be useful if the	1
be useful when the	1
be even faster to	1
be sure that the	1
be sure that all	1
be 0 or 1	1
be 0 or 1.	1
be cases where a	1
be cases where it	1
be available in 2015	1
be important if you	1
be accessed with the	1
be accessed with an	1
be accessed from any	1
be accessed from main	1
be accessed approximately two	1
be accessed sequentially in	1
be while (0 <	1
be compiled with different	1
be compiled as a	1
be compiled three times,	1
be necessary to optimize	1
be necessary to replace	1
be necessary to modify	1
be necessary in the	1
be allocated for an	1
be allocated dynamically with	1
be allocated dynamically when	2
be allocated dynamically. The	1
be allocated dynamically. Arrays	1
be done in big	1
be done by multiplying	1
be done by controlling	1
be done with the	2
be done with a	2
be done with just	1
be done on the	1
be done as a	1
be done at every	1
be done outside the	1
be done manually by	1
be optimized if a	1
be optimized by using	1
be optimized to: //	1
be optimized further. The	1
be inside the innermost	1
be calculated in advance.	1
be calculated by the	1
be calculated by a	1
be calculated by an	2
be calculated by n	1
be calculated by adding	1
be calculated with two	1
be calculated as follows:	1
be calculated as (critical	1
be calculated as (b*2.0)/3.0	1
be calculated more efficiently	1
be calculated at compile	1
be calculated using multiplications	1
be calculated independently. The	1
be advantageous to make	1
be advantageous to do	1
be advantageous to put	2
be advantageous to mix	2
be advantageous to keep	1
be advantageous or not.	1
be advantageous if the	1
be advantageous if a	1
be advantageous when a	1
be implemented in the	1
be implemented in a	1
be implemented in different	1
be implemented in compiled	1
be implemented in various	1
be implemented in PC	1
be implemented with intrinsic	1
be implemented as a	3
be implemented as vector	1
be implemented as follows	1
be implemented like this	1
be implemented either as	2
be known at compile	1
be 1 b =	1
be able to do	2
be able to avoid	1
be able to inline	1
be able to optimize	1
be able to find	1
be able to predict	1
be able to define	1
be able to evaluate	1
be able to completely	1
be able to recover	2
be able do function	1
be certain that a	1
be shared between multiple	1
be quite a good	1
be quite inefficient if	1
be quite time-consuming (see	1
be quite tedious and	1
be quite substantial. This	1
be used. If the	1
be used. We can	1
be used. Web systems	1
be fast in a	1
be both cheaper and	1
be optimal to use	1
be optimal to mirror	1
be optimal in special	1
be signed or unsigned.	1
be separate for each	1
be put into the	1
be put away in	1
be three or four,	1
be better to do	1
be better to join	1
be better than RISC	1
be better because the	1
be too small. Are	1
be too worried about	1
be too small, then	1
be needed for communication	1
be needed because the	1
be difficult to get	1
be difficult to find	1
be difficult to measure	1
be transferred in registers	3
be transferred in registers.	1
be transferred in registers,	1
be longer than a	1
be read and written	1
be read into one	1
be read before p	1
be aligned by the	1
be aligned by at	1
be aligned by 16,	1
be linked into the	1
be linked into projects	1
be linked together with	1
be linked either as	1
be declared in the	1
be declared const in	1
be declared inside the	2
be declared volatile. This	1
be higher due to	1
be bigger than the	1
be divisible by the	1
be divisible by TILESIZE	1
be called. It is	1
be based on which	1
be made for all	1
be made more compact	1
be made available to	1
be made about whether	1
be made much more	1
be made smaller by	1
be made local. This	1
be just as fast	1
be smaller as well.	1
be relevant when testing	1
be replaced by the	1
be replaced by a	4
be replaced by //	1
be replaced by more	1
be replaced with: //	2
be negative so that	1
be tested in different	1
be tested with a	1
be tested on a	1
be tested on different	1
be tested under worst-case	1
be predicted or if	1
be predicted by the	1
be predicted quite well	1
be predicted depends on	1
be predicted well. Even	1
be predicted perfectly on	1
be predicted perfectly varies	1
be predicted perfectly. As	1
be loaded from memory	1
be loaded at an	2
be loaded only when	1
be loaded into an	1
be loaded every time	1
be loaded until the	1
be loaded anyway. If	1
be C or C++.	1
be compatible with all	1
be compatible with old	1
be compatible with structured	1
be dynamically created by	1
be avoided in 64-bit	1
be avoided by using	1
be avoided by making	2
be avoided by calling	1
be avoided by inlining	1
be avoided by copying	1
be avoided by joining	1
be avoided by rolling	1
be avoided by replacing	1
be avoided on processors	1
be avoided when speed	1
be avoided because of	1
be avoided because they	1
be avoided unless you	1
be 2. The result	1
be particularly time consuming.	1
be given a false	1
be given in advance.	1
be limited by the	1
be vectorized if the	1
be vectorized if you	1
be vectorized with the	1
be vectorized as follows	1
be vectorized automatically. For	1
be inlined for improved	1
be inlined or cannot	1
be inlined by declaring	1
be safe to make	1
be safe if there	1
be further tested and	1
be reduced to 2	1
be reduced to always	1
be reduced to: //	1
be clear from this	1
be obtained in a	1
be obtained by the	1
be obtained with the	2
be overloaded or limited	1
be possible. Template meta-	1
be changed to a	1
be changed to truncation	1
be changed by another	1
be changed without the	1
be changed to: //	2
be changed freely. The	1
be true anyway. It	1
be initialized to zero	1
be initialized to desired	1
be initialized when the	1
be improved is that	1
be improved in the	1
be improved by a	1
be improved by using	3
be improved by inlining	1
be improved by adding	1
be improved by modifications	1
be improved by consistent	1
be loading the entire	1
be below the maximum	1
be copied or moved	1
be copied into registers.	1
be copied simply by	1
be invalid and cause	1
be invalid in a	1
be invalid if a	1
be used, but any	1
be used, even when	1
be organized as a	1
be organized into vectors.	1
be organized so that	2
be enough to identify	1
be added to a	1
be added at any	1
be situations where a	1
be chosen based on	1
be scattered around at	2
be applied to a	1
be applied to all	1
be applied to integers.	2
be critical. The branch	1
be critical. Therefore, the	1
be mentioned here: A	1
be mispredicted for this	1
be mispredicted even if	1
be mispredicted (See manual	1
be mispredicted whenever it	1
be mispredicted 50% of	1
be standardized and done	1
be false regardless of	1
be converted to a	2
be converted to an	1
be converted to OMF	1
be designed so as	1
be fragmented and involve	1
be 8, 16 or	1
be preferred to use	1
be interpreted as a	1
be determined in advance,	1
be determined by the	1
be determined by a	1
be determined with system	1
be easily available from	1
be allowed and which	1
be distributed to the	2
be called, or what	1
be called, even if	1
be slower or require	1
be slower than the	1
be expensive in some	1
be saved in registers,	1
be saved from one	1
be saved either in	1
be aware of when	1
be aware of these	1
be aware of situations	1
be aware that there	2
be aware of. Big	1
be available, we may	1
be measured separately. The	1
be equal to the	1
be expected to be	1
be expected for further	1
be expected that the	1
be convenient to have	1
be convenient for adding	1
be poor because it	1
be static, as explained	1
be evaluated if a	2
be completely contained in	1
be completely unrolled to	1
be permissible if the	1
be mixed with x87	1
be turned into a	1
be overcome by defining	1
be worth the effort.	2
be obvious to the	1
be obvious to do	1
be swapped to the	1
be portable to platforms	1
be executed as it	1
be executed faster in	1
be split up into	1
be increased to 16	1
be increased by more	1
be divided into multiple	1
be divided into small	1
be seen in the	1
be necessary. If F1	1
be updated to a	1
be updated every time	1
be combined into a	1
be written in C,	1
be preferable to keep	1
be said that the	1
be true. template<> class	1
be needed, however, if	1
be extended to the	1
be expressed as a	2
be expressed as an	1
be expressed as follows:	1
be cleaned up include:	1
be cleaned up, as	1
be cached. This can	1
be prevented in other	1
be prevented by calling	1
be eliminated if the	3
be eliminated completely. For	1
be illustrated by the	1
be returned in registers	1
be returned in registers.	1
be found in my	1
be found in Wikipedia	1
be found elsewhere. 13.5	1
be coded in a	1
be represented with or	1
be represented as an	1
be identified by their	1
be kept small in	1
be kept entirely inside	1
be selected during the	1
be multiplied by the	2
be obsolete. But if	1
be obsolete. Programmers very	1
be unable to access	1
be unable to respond	1
be modified by the	2
be carried out independently	1
be hidden by using	1
be performed with a	1
be removed after debugging	1
be considered a container	1
be considered metaprogramming in	1
be spaced by a	2
be filled up if	1
be filled up. This	1
be expected. The 64	1
be solved by making	2
be stored. All identical	1
be inlined. But beware	1
be inlined. (In the	1
be infinity or NAN	1
be taken into account	3
be handled in a	1
be moved out of	2
be joined into a	1
be joined into one	1
be joined together in	1
be placed in a	1
be placed in separate	1
be placed immediately before	1
be sufficient for less	1
be evicted when we	1
be evicted from the	1
be manipulated with C	1
be freed before the	1
be justified in case	1
be justified for general	1
be vectorized, because a	1
be vectorized, but the	1
be disabled in the	1
be ruled out or	1
be ruled out by	1
be reused elsewhere. In	1
be pure. This allows	1
be bypassed when the	1
be achieved more efficiently	1
be visible at all	1
be overwritten, and even	1
be annoyingly high for	1
be controlled. The network	1
be controlled. Small hand-held	1
be worthwhile to unroll	1
be irrelevant within a	1
be careful when swapping	1
be profitable (see page	1
be negative. The method	1
be negative. The last	1
be defined. The cost	1
be obtained. If a	1
be obtained. In the	1
be predicted. The target	1
be predicted. This is	1
be fed directly to	1
be cached more efficiently	1
be shared. You can't	1
be shared. Any writable	1
be optional and off	1
be deleted. User work	1
be left out if	1
be wrapped into a	1
be slower. Many compilers	1
be optimally aligned. See	1
be fetched from the	1
be avoided, if possible,	1
be avoided, there are	1
be avoided. 37 A	1
be misleading reports of	1
be repeated 1024/4 =	1
be moved. A binary	1
be installed. The installation	1
be mispredicted, which causes	1
be tolerated. PGI C++	1
be regarded as a	1
be obeyed. Copy protection.	1
be restored before the	1
be undesired. Example: //	1
be passed as parameters	1
be broken up. The	1
be arranged in regular	1
be cross- compiled on	1
be combined. For example:	1
be improved. 3.2 Use	1
be rounded to 100000000.	1
be straightforward. The MASM	1
be prepared for several	1
be non-zero, and therefore	1
be saved. Any other	1
be programmed in a	1
be reached with a	1
be renewed. Context switches	1
be weighed against the	1
be reduced. This may	1
be recycled? There is	1
be postponed until the	1
be omitted, of course,	1
be considered. A realistic	1
be speeded up significantly	1
be used: // Example	1
be added. This method	1
be adjusted if you	1
be platform-independent and compact.	1
be made) then it	1
be reloaded eight times	1
be evicted. Don't mix	1
be mitigated by making	1
be signed. Be sure	1
be emphasized that the	1
be noticeable but not	1
be reinstalled and user	1
be ameliorated by using	1
be scheduled in a	1
be followed by an	1
be caused by random	1
be wired for a	1
be responded to at	1
be ignored if the	1
be re-calculated every time	1
be accomplished by doing	1
be mainstream next year.	1
be resized in the	1
be overridden in Linux	1
be huge). Far storage,	1
be reversed if c	1
be propagated through a	1
be annoying. We may	1
be accessed. Pointer arithmetic	1
are the same in	1
are the same for	1
are the same after	1
are the integers from	1
are the following: 130	1
are a number of	2
are a few cases	1
are a few cases,	1
are a few pitfalls	1
are a scarce resource	1
are a scarce resource,	1
are a couple of	1
are of course system-specific.	1
are in fact using	1
are in fact accessed	1
are in fact doing	1
are in fact represented	1
are in fact addressed	1
are in doubt how	1
are for those who	1
are that software projects	1
are as fast as	1
are as follows: Instruction	1
are not used for	2
are not very good	1
are not stored contiguously	1
are not sure you	1
are not always fully	1
are not always avoiding	1
are not always accurate,	1
are not always sequential,	1
are not necessary if	1
are not optimized for	1
are not known at	1
are not supported at	1
are not doing divisions.	1
are not well documented.	1
are not able to	1
are not used. The	1
are not recommended for	1
are not compatible with	2
are not compatible across	1
are not enough registers	1
are not critical. It	1
are not fully optimized	1
are not suitable for	1
are not permissible for	2
are not backwards compatible	1
are not necessarily stored	1
are not optimal. There	1
are not cached. The	1
are not satisfied with	1
are not overlapping or	1
are not computationally intensive	1
are not suited for	1
are not testing. Trying	1
are not accessible from	1
are not yet as	1
are not safe, of	1
are not affected by	1
are not used). You	1
are not reproducible. Such	1
are time consuming. Therefore,	1
are more efficient than	1
are more efficient alternatives	1
are more useful methods	1
are more important than	1
are more frequent if	1
are more predictable than	1
are then you may	1
are then linked together	1
are then output after	1
are different for each	1
are different ways of	1
are different opinions on	1
are only available if	1
are only available with	1
are only four cache	1
are only slightly less	1
are other cache control	1
are other possible ways	1
are used in the	4
are used in a	1
are used in multiple	1
are used in so	1
are used in STL	1
are used for doing	1
are used for giving	1
are used for implementing	1
are used by many	1
are used by thousands	1
are used with other	1
are used at all	1
are used only for	1
are used most for	1
are used many times	1
are used together are	2
are used together should	4
are used near each	1
are used twice for	1
are one byte longer	1
are integer expressions rather	1
are no cache problems.	1
are no long dependency	1
are no instructions for	1
are no big arrays,	1
are no copy constructors	1
are no caching problems	1
are no longer used	1
are no longer used.	1
are no checks for	1
are set to relax	1
are floating point-to-integer conversions	1
are most efficient for	1
are most efficient if	1
are most critical. However,	1
are using the same	2
are using and turn	1
are using an Intel	2
are using vector classes	1
are using functions such	1
are using single precision	1
are using advanced algorithms	1
are using 8-bit integers	1
are using __fastcall. Function	1
are using unions rather	1
are double precision by	1
are two or more	2
are two different kinds	1
are two versions of	1
are two things to	1
are two main principles	1
are two commonly used	1
are there between x	1
are also other advantages	1
are also other details	1
are also stored together	1
are also stored near	3
are also 4 unused	1
are also situations where	1
are also available. Microsoft	1
are also available, such	1
are also deallocated in	1
are also third-party profilers	1
are also included. Combining	1
are efficient because the	1
are many function calls,	1
are many functions scattered	1
are many cases where	1
are many allocations of	1
are many branches): if	2
are possible only if	1
are objects in the	1
are some differences due	1
are some examples: strlen	1
are so many different	1
are so big that	1
are so small that	1
are so fast that	1
are so expensive that	1
are variables than if	1
are very difficult to	1
are very similar thanks	1
are very fast. This	1
are very expensive. A	1
are very smart. They	1
are 32-bit integers, then	1
are faster than floating	1
are faster than linked	1
are stored in the	1
are stored in a	2
are stored in different	1
are stored in static	1
are stored in registers	2
are stored in memory.	1
are stored in binary	1
are stored in ASCII	1
are stored can be	1
are stored on the	3
are stored as 8-bit	1
are stored together in	1
are stored near each	1
are stored consecutively in	1
are called and resources	1
are called from the	1
are called every time	1
are called global variables.	1
are called near each	1
are called accumulators. Current	1
are critical time consumers.	1
are critical resources. Modern	1
are less efficient and	1
are less efficient in	1
are less efficient (see	1
are less likely to	1
are less efficient. In	1
are less strict when	1
are less expensive. Using	1
are less susceptible to	1
are first compiled to	1
are 64 bits wide,	1
are often used for	1
are often used by	1
are often used as	1
are often much more	1
are often inlined automatically	1
are often waiting for	1
are often conflicting with	1
are often mispredicted. A	1
are often abusing the	1
are often fluctuating and	1
are often unreliable. They	1
are useful for copy	1
are useful for Boolean	1
are useful for finding	1
are useful for supporting	1
are useful for assigning	1
are useful for vectorizing	1
are useful for identifying	1
are useful when doing	1
are sure the code	1
are sure to have	1
are sure to make	1
are sure to point	1
are sure to produce	1
are sure that the	1
are sure that it	1
are sure you know	1
are always stored together	1
are always available from	1
are always calculated with	1
are always transferred as	1
are always resolved at	1
are out of the	1
are part of the	1
are cases where it	1
are available to fit	1
are available in all	1
are available in 64-bit	1
are available in both	1
are available for the	1
are available for many	1
are available for Linux	1
are available for doing	1
are available if the	1
are available as an	1
are available from a	1
are available from Intel.	1
are available at compile	1
are up to five	1
are making a shared	1
are making programs that	1
are making branches that	1
are accessed in the	1
are accessed in a	4
are accessed in sequential	1
are accessed in non-	1
are accessed on a	2
are accessed very fast.	1
are accessed through the	1
are accessed through pointers	3
are accessed through pointers,	1
are accessed equally fast.	1
are accessed backwards and	1
are accessed consecutively and	1
are accessed sequentially. The	1
are accessed sequentially. It	1
are accessed column-wise. Assume	1
are accessed row-wise, then	1
are compiled with different	1
are compiled without any	1
are best at doing	1
are necessary then it	1
are specific advantages that	1
are much higher than	1
are single instructions that	1
are several different C++	1
are several different ways	1
are several different profiling	1
are several ways to	1
are several factors that	2
are allocated and deallocated	2
are allocated in sequence	1
are allocated resources that	1
are integers or floating	1
are good for making	1
are good for optimizing	1
are done with long	1
are done with single	1
are done at compile	1
are done only once,	1
are done under the	1
are done implicitly when	1
are therefore as efficient	1
are therefore as fast	1
are optimized for execution	1
are optimized well, others	1
are explained in manual	1
are explained in detail	1
are explained on page	1
are calculated faster than	1
are calculated much faster	1
are four kinds of	1
are advantageous for applications	1
are implemented in hardware	1
are implemented by (partial)	1
are implemented with interpretation.	1
are implemented as three	1
are implemented as recursive	1
are supported by the	2
are supported by Microsoft,	1
are eight floating point	1
are likely to be	1
are doing the same	1
are doing a sequence	1
are doing different kinds	1
are doing exactly the	1
are simply put there	1
are simply treated as	1
are able to do	2
are able to run	1
are able to calculate	1
are able to automatically	1
are able to generate	1
are able to mix	1
are able to do,	1
are certain that u	1
are certain restrictions on	2
are shared between multiple	1
are quite costly because	1
are used. a and	1
are used. It is	1
are used. See page	2
are used. Example: //	1
are used. Such variables	1
are used. Do not	1
are used. Conversions of	1
are fast in most	1
are both positive. It	1
are cases, however, where	1
are particular advantageous as	1
are typically stored in	1
are typically small pieces	1
are typically specified on	1
are preferably aligned by	1
are members of the	1
are members of a	1
are intrinsic instructions for	1
are never used at	2
are never called. The	1
are never modified by	1
are various function libraries	1
are various methods for	1
are various ways to	4
are various ways around	1
are various things you	1
are various discussion forums	1
are various profilers available	1
are various alternatives to	1
are running in other	1
are running in parallel.	1
are running this code	1
are three ways to	2
are better at reducing	1
are too large for	1
are too big before	1
are too small to	1
are needed from the	1
are needed even when	1
are difficult to find	1
are difficult to maintain.	1
are transferred in registers	5
are transferred in registers,	2
are transferred by value	1
are transferred on the	2
are aligned to an	1
are aligned or not.	1
are aligned by 16,	1
are aligned at round	1
are actually called in	1
are actually able to	1
are actually quite powerful	1
are actually reducing example	1
are linked together. The	1
are declared in a	1
are declared as constant	1
are declared outside of	1
are declared whenever an	1
are higher for shared_ptr	1
are bigger than the	1
are usually stored in	1
are usually included as	1
are usually dealt with	1
are called. The program	1
are called. The safe	1
are called. A considerable	1
are called. Therefore, the	1
are based on the	1
are based on an	1
are based on big	1
are based on hardware	1
are based on compilers.	1
are based on my	1
are based on just-in-time	1
are based on hacks	1
are just as fast	1
are core clock cycles	1
are replaced by their	1
are negative or if	1
are predicted most of	1
are predicted well only	2
are loaded at round	1
are loaded into memory	1
are relative to the	1
are intended to work	1
are intended for system	1
are slow unless the	1
are inefficient when the	1
are described in detail	1
are including a header	1
are particularly critical because	1
are particularly important on	1
are particularly fast on	1
are particularly critical. 129	1
are particularly problematic because	1
are given in manual	1
are given in www.agner.org/optimize/cppexamples.zip.	1
are given on page	1
are given below. The	1
are sometimes more efficient	1
are sometimes able to	1
are inlined so that	1
are special cases such	1
are further described in	1
are testing contains debug	1
are 100 floating point	1
are writing to uncached	1
are adding -100 to	1
are containers 93 themselves.	1
are discussed in the	1
are discussed in manual	1
are discussed below. Many	1
are discussed below. Cannot	1
are reading and writing	1
are defined with enum,	1
are defined as powers	1
are identical to Linux	1
are identical so that	1
are used, there is	1
are used, while the	1
are not. Supports 32-bit	1
are organized as 32	1
are organized into lines	1
are approximately six integer	1
are situations where a	1
are scattered around in	2
are scattered everywhere in	1
are scattered randomly around	1
are independent then you	1
are provided in the	1
are provided in an	1
are provided below, on	1
are 6 unused bytes	1
are inefficient. If a	1
are search requests for	1
are executed. However, the	1
are usability issues, and	1
are pure functions, but	1
are mentioned below. Microsoft	1
are fully compatible on	1
are included in the	1
are temporary intermediates, loop	1
are frequent sources of	2
are now used in	1
are equally efficient because	1
are equally efficient because,	1
are equally likely to	1
are equally efficient. If	1
are equally near then	1
are designed to handle	1
are designed to solve	1
are listed in the	1
are listed in table	2
are listed in manual	1
are listed on page	1
are preferred because of	1
are zero. Zero can	1
are exactly the same.	1
are exactly as efficient	1
are resolved before the	1
are poorly predictable. It	1
are allowed to have	1
are allowed in assembly	1
are serious limitations to	1
are disadvantages of using	1
are generally not thread	1
are generally very fast.	1
are instances of structures	1
are hardly relevant to	1
are saved in a	1
are integers, while the	1
are highly system dependent	1
are highly optimized for	2
are highly optimized, using	1
are waiting for better	1
are available, i.e. in	1
are powers of 2.	1
are constant. 14.2 Bounds	1
are expected to be	1
are converting a to	1
are costly and which	1
are evaluated in the	1
are evaluated every time	1
are deallocated when the	1
are permissible in all	1
are swapping column 29	1
are swapped then both	1
are becoming more popular	1
are becoming better and	1
are becoming increasingly blurred	1
are finished. This method	1
are generated from the	1
are equivalent to const	1
are relatively costly because	1
are relatively cheap if	1
are frameworks that typically	1
are safer to use	1
are combined by some	1
are currently available, one	1
are sufficiently large to	2
are needed, and new	1
are needed, or they	1
are needed, but only	1
are running. Such frameworks	1
are optimal. Best-case testing	1
are guaranteed to wrap	1
are missing in the	1
are missing in many	1
are extended to 256-bit	1
are cleaned up in	1
are image processing, sound	1
are uncached or even	1
are returned by copying	1
are coded in a	1
are smaller. The lengths	1
are identified by a	1
are identified by consecutive	1
are kept in different	1
are incompatible with floating	1
are incompatible with debugging.	1
are normally compiled with	1
are inferior to their	1
are auto_ptr and shared_ptr.	1
are modified should be	1
are satisfied with more	1
are satisfied with making	1
are assuming that the	1
are long. This is	1
are implemented. Use the	1
are spaced a multiple	1
are comparisons, etc. For	1
are separated by commas.	1
are separated by semicolons,	1
are annoying to the	1
are supplied in Intel's	1
are overriding Intel's CPU	2
are stored. The storage	1
are competing for the	1
are read-only can be	1
are indeed of the	1
are impossible with references.	1
are type-casted to a	1
are aligned. It is	1
are disabled will crash	1
are CPU-specific and each	1
are inherent performance costs	1
are uninitialized or come	1
are summarized in table	1
are summarized below. Intrinsic	1
are smarter ways of	2
are capable of register	1
are eliminated. Code caching	1
are unstable due to	1
are lost. It is	1
are mutually incompatible. A	1
are mutually incompatible. You	1
are properly aligned or	1
are fine-tuned for specific	1
are sharing the same	1
are cached as good	1
are relocated by the	1
are dealing with in	1
are created. Far Systems	1
are covered in manual	1
are overdetermined in the	1
are overdetermined Boolean variables	1
are unnecessary for the	1
are produced regularly. Intel:	1
are produced regularly. AMD:	1
are lots of things	1
are wrapped into a	1
are fetched and decoded	1
are accessible from compilers	1
are primitive operations in	1
are inherently serial, such	1
are common, and there	1
are constructed. All non-static	1
are prone to even	1
are wrapper classes with	1
are sufficient, and the	1
are advised to seek	1
are seeing an increasing	1
are doing. See the	1
are among the most	1
are cumbersome to use	1
are dominating and there	1
are instantiated at compile	1
are universal, flexible, well	1
are undocumented. 2.7 Choice	1
are aligned, and make	1
are offering profiling tools	1
are areas where speed	1
are unavoidable. It may	1
are indexed in a	1
are feeding an array	1
are unacceptable. Each of	1
are hundreds of different	1
are modified, if necessary,	1
are compiler-specific. You cannot	1
are dominating. At least,	1
are short. In Windows,	1
are met: the object	1
are cheap, in relation	1
are costless in terms	1
are obscured in optimized	1
are different. 64-bit Windows	1
are risking to insert	1
are confined to a	1
are satisfied. The conditions	1
are satisfied: 1. Use	1
are breaking out of	1
are CPLDs and FPGAs.	1
are relying on the	1
are uninitialized, if pointer	1
are removed, all resources	1
are incremental or iterative	1
are limiting factors for	1
are unrelated to each	1
can in most cases	1
can be a time	1
can be a very	2
can be a good	1
can be a viable	1
can be a time-consumer	1
can be an efficient	1
can be an advantage	2
can be time consuming	1
can be different sizes,	1
can be used to	2
can be used in	2
can be used for	7
can be used if	2
can be used as	2
can be used where	1
can be used without	1
can be used freely	1
can be set then	1
can be set up	1
can be very long	1
can be very useful	2
can be very inefficient	1
can be stored in	2
can be called from	1
can be less efficient	1
can be 64 bits	1
can be useful to	1
can be useful in	6
can be useful for	4
can be useful when	1
can be important if	1
can be accessed with	1
can be accessed from	2
can be accessed approximately	1
can be accessed sequentially	1
can be necessary in	1
can be allocated dynamically	3
can be allocated dynamically.	2
can be done by	1
can be done with	5
can be done as	1
can be optimized if	1
can be optimized to:	1
can be optimized further.	1
can be calculated in	1
can be calculated by	5
can be calculated as	2
can be calculated more	1
can be calculated using	1
can be calculated independently.	1
can be advantageous to	3
can be implemented in	5
can be implemented with	1
can be implemented as	2
can be implemented like	1
can be implemented either	2
can be shared between	1
can be quite inefficient	1
can be quite time-consuming	1
can be quite tedious	1
can be quite substantial.	1
can be used. If	1
can be used. We	1
can be signed or	1
can be difficult to	1
can be read before	1
can be linked together	1
can be linked either	1
can be made for	1
can be made more	1
can be made available	1
can be made about	1
can be made much	1
can be replaced by	4
can be replaced with:	2
can be predicted depends	1
can be predicted perfectly	2
can be predicted perfectly.	1
can be loaded at	1
can be loaded until	1
can be avoided in	1
can be avoided by	7
can be particularly time	1
can be given in	1
can be vectorized if	1
can be further tested	1
can be reduced to	2
can be obtained with	2
can be changed by	1
can be changed to:	2
can be changed freely.	1
can be initialized to	2
can be improved is	1
can be improved in	1
can be improved by	6
can be copied or	1
can be copied into	1
can be copied simply	1
can be invalid and	1
can be used, but	1
can be organized as	1
can be added to	1
can be added at	1
can be chosen based	1
can be applied to	2
can be critical. The	1
can be critical. Therefore,	1
can be mentioned here:	1
can be mispredicted for	1
can be mispredicted even	1
can be converted to	3
can be 8, 16	1
can be determined by	1
can be determined with	1
can be expensive in	1
can be saved either	1
can be expected to	1
can be expected for	1
can be expected that	1
can be completely contained	1
can be permissible if	1
can be turned into	1
can be overcome by	1
can be increased to	1
can be increased by	1
can be divided into	2
can be updated to	1
can be combined into	1
can be said that	1
can be extended to	1
can be expressed as	3
can be prevented in	1
can be prevented by	1
can be eliminated if	2
can be illustrated by	1
can be returned in	2
can be found in	2
can be coded in	1
can be represented with	1
can be represented as	1
can be carried out	1
can be considered metaprogramming	1
can be expected. The	1
can be solved by	2
can be inlined. (In	1
can be moved out	1
can be joined into	1
can be placed in	1
can be manipulated with	1
can be justified for	1
can be vectorized, because	1
can be disabled in	1
can be ruled out	1
can be reused elsewhere.	1
can be bypassed when	1
can be annoyingly high	1
can be defined. The	1
can be obtained. If	1
can be predicted. The	1
can be fed directly	1
can be shared. Any	1
can be left out	1
can be wrapped into	1
can be fetched from	1
can be broken up.	1
can be arranged in	1
can be cross- compiled	1
can be combined. For	1
can be improved. 3.2	1
can be programmed in	1
can be reduced. This	1
can be omitted, of	1
can be speeded up	1
can be used: //	1
can be made) then	1
can be ameliorated by	1
can be wired for	1
can be accomplished by	1
can be overridden in	1
can be propagated through	1
can be accessed. Pointer	1
can not only improve	1
can not do. The	1
can you assume that	1
can have one addition	1
can have no other	1
can have any brand	1
can have eight numbers	1
can have quite dramatic	1
can use the same	5
can use the header	1
can use the GetTickCount	1
can use a lot	1
can use a linear	1
can use for recovering	1
can use it for	1
can use this function	1
can use this library	2
can use vector operations	1
can use only compilers	1
can use 64-bit integers	1
can use any of	1
can use standard user	1
can then be placed	1
can then use this	1
can then run on	1
can make a Boolean	1
can make function calls	1
can make an update	1
can make an approximate	1
can make this reordering	1
can make use of	1
can make two different	1
can make sure that	1
can make dynamic link	1
can make arrays of	1
can make certain kinds	1
can make thread-local storage	1
can only be applied	2
can only have four	1
can only hope that	2
can set multiple bits	1
can set up and	1
can do the job	1
can do is to	1
can do a lot	2
can do to make	1
can do to take	1
can do and what	1
can do with bitwise	1
can do this by	1
can do this every	1
can do because it	1
can do simple algebraic	1
can do while waiting	1
can do calculations while	2
can do four additions	1
can do another addition	1
can do mathematical calculations.	1
can do whole program	1
can do out-of-order execution.	1
can do arithmetic operations	1
can double the speed	1
can also be a	1
can also be used	4
can also be advantageous	1
can also be predicted	1
can also be vectorized	1
can also be convenient	1
can also be eliminated	1
can also be huge).	1
can also use vector	1
can also find more	1
can also eliminate i	1
can return with an	1
can call the polymorphic	1
can call all code	1
can call C1::f directly	1
can take the absolute	1
can take more than	1
can take several seconds	1
can take several minutes	1
can take advantage of	6
can take quite a	2
can take care of	2
can often be optimized	1
can often be made	1
can often be executed	1
can often optimize the	1
can often happen that	1
can often reveal things	1
can test or manipulate	1
can even be used	1
can access internal variables	1
can avoid the problem	1
can avoid the conversions	1
can avoid the inefficient	1
can avoid this by	1
can avoid this error	1
can avoid virtual functions	1
can avoid it. Global	1
can avoid hyperthreading by	1
can cause the memory	1
can cause other variables	1
can cause all kinds	1
can cause cache contentions	1
can cause branch mispredictions	1
can cause problems if	1
can cause caching problems	1
can cause contentions in	1
can cause errors if	1
can cause overflow. For	1
can cause unpredictable errors	1
can cause complications with	1
can cause severe delays	1
can cause holes of	1
can therefore be advantageous	2
can therefore suffer from	1
can therefore conclude that	1
can get the exact	1
can get very expensive	1
can get answers to	1
can check the order	1
can check the final	1
can check if a	1
can run in both	1
can run only if	1
can run eight threads	1
can run optimally on	1
can calculate the address	1
can calculate a vector	1
can calculate that the	1
can calculate which set	1
can calculate each address	1
can calculate how much	1
can store the values	1
can optimize away the	1
can optimize specifically for	1
can replace a function	1
can replace an integer	1
can replace all occurrences	1
can replace j *	1
can automatically replace a	1
can automatically generate multiple	1
can automatically detect opportunities	1
can see the delay.	1
can see that the	2
can never be sure	1
can never be negative	1
can block the execution	1
can read about in	1
can give some indication	1
can look like and	1
can actually reduce speed	1
can assume that the	1
can assume that there	2
can assume that these	1
can improve the performance	2
can improve the speed	1
can improve this by	1
can improve performance in	1
can improve optimizations in	1
can improve search times	1
can reduce the performance	1
can reduce the problem	1
can reduce other types	1
can reduce any expression,	1
can reduce some types	1
can reduce simple algebraic	1
can reduce them all.	1
can start a new	1
can go more than	1
can change the sign	1
can change the value.	1
can change the behavior	1
can change their clock	1
can change what a	1
can become a serious	1
can become very big.	1
can become imprecise or	1
can turn on and	1
can rely on only	1
can rely on automatic	1
can produce no other	1
can sometimes be replaced	1
can sometimes be avoided	1
can sometimes be obtained	1
can sometimes be eliminated	1
can sometimes take more	1
can still be used	1
can still be vectorized,	1
can still run on	1
can still give a	1
can prevent the compiler	1
can shift out the	1
can save a lot	1
can save cache space	1
can save several clock	1
can tell it this	1
can tell how many	1
can divide by 2n	1
can clear or mask	1
can predict the loop	1
can predict where the	1
can possibly be compiled	1
can possibly be obtained	1
can possibly block the	1
can possibly improve the	1
can possibly throw an	1
can execute the loop	1
can execute a code	1
can execute instructions out	1
can convert an integer	1
can convert example 15.1a	1
can handle eight elements	1
can occur in the	1
can occur if a	1
can occur at random	1
can insert nontemporal writes	1
can align the arrays	1
can expect a particular	1
can expect 64-bit programs	1
can modify x *const_cast<int*>(&x)	1
can modify x, while	1
can not. Static cast	1
can happen in the	1
can happen that (b*c)	1
can happen if the	1
can happen with the	1
can define in this	1
can contain either sixteen	1
can help the compiler	1
can multiply a nonzero	1
can multiply by a	1
can share the same	3
can now be vectorized	1
can easily be organized	1
can easily optimize away	1
can easily become fragmented	1
can easily justify a	1
can spend a lot	1
can generally assume that	2
can hold many renamed	1
can hold 8 double's	1
can hold four double	1
can hold e.g. four	1
can eliminate this jump	1
can eliminate one division	1
can eliminate common subexpressions	1
can eliminate branches, as	1
can increase the time	1
can detect that the	1
can prefetch the data.	1
can benefit from its	1
can benefit from setting	1
can consume a lot	2
can lead to a	3
can overlap the iterations	1
can obtain most of	1
can obtain much more	1
can move out loop-invariant	1
can move outside the	1
can disable exception handling	2
can begin the calculation	1
can force a member	1
can run. Some implementations	1
can skip large expressions	1
can probably be improved	1
can open the possibility	1
can bypass the virtual	1
can bypass the check	1
can compute a /	1
can proceed unattended. Uninstallation	1
can emulate a 256-bit	1
can throw. In fact,	1
can occur, but the	1
can influence the performance	1
can add, remove or	1
can see, it is	1
can be, for example,	1
can subtract this value	1
can roughly estimate that	1
can build code for	1
can steal the user's	1
can incur a large	1
can surely rely on	1
can toggle multiple bits	1
can handle. Waiting for	1
can learn from this	1
can safely assume that	1
can overwrite the return	1
can exceed 2 Gbytes.	1
// of function pointers	2
// The child classes	1
// The purpose of	1
// or from example	1
// function to transpose	3
// function prototypes for	1
// if above doesn't	1
// if above line	1
// This is the	2
// This is used	1
// This is slow	2
// This function stores	1
// This function adds	1
// This triangle is	1
// this function can	1
// will give -2.0	1
// It will look	1
// Example 13.1 //	1
// Example 16.2 #include	1
// Example 14.9 struct	1
// Example 14.8 const	1
// Example 16.1 #include	1
// Example 9.3 #include	1
// Example 8.26a void	1
// Example 12.2 __declspec(align(16))	1
// Example 14.6 float	1
// Example 14.28 union	1
// Example 14.30 const	1
// Example 7.2 a	1
// Example 7.1 float	1
// Example 7.8 if	1
// Example 14.10 int	1
// Example 14.11 int	1
// Example 8.4 double	1
// Example 8.7 int	1
// Example 7.21 int	1
// Example 9.6b. #include	1
// Example 9.5a const	1
// Example 7.7 unsigned	1
// Example 7.11 bool	1
// Example 7.12 void	1
// Example 11.3 const	1
// Example 7.22 short	1
// Example 7.23 int	1
// Example 7.20 int	1
// Example 7.27 float	1
// Example 7.24 float	1
// Example 7.25 unsigned	1
// Example 7.28 class	1
// Example 9.4 const	1
// Example 7.14 class	1
// Example 7.16 float	1
// Example 7.17 const	1
// Example 7.13 struct	1
// Example 7.19 int	1
// Example 7.18 int	1
// Example 12.5. Aligned	1
// Example 8.26b void	1
// Example 14.12b int	1
// Example 14.14b double	1
// Example 15.1c. Calculate	1
// Example 14.14a double	1
// Example 8.15a struct	1
// Example 14.13b int	1
// Example 9.6a const	1
// Example 12.1a. Automatic	1
// Example 14.19 static	1
// Example 14.1c void	1
// Example 14.23b union	1
// Example 11.2b const	1
// Example 11.1a float	1
// Example 11.1b float	1
// Example 7.15b SafeArray	1
// Example 15.1b. Calculate	1
// Example 14.26 union	1
// Example 14.27 union	1
// Example 14.23 union	1
// Example 8.21 void	1
// Example 14.5b if	1
// Example 14.5a const	1
// Example 7.6. Set	1
// Example 9.5b void	1
// Example 13.2. CPU	1
// Example 7.40a struct	1
// Example 7.40b union	1
// Example 7.40c x.abc	1
// Example 14.3a int	1
// Example 14.3b int	1
// Example 11.2a const	1
// Example 12.4a. Loop	1
// Example 8.9b int	1
// Example 8.9a int	1
// Example 8.23b. Calculate	1
// Example 14.1b int	1
// Example 14.1a int	1
// Example 8.3a float	1
// Example 12.4c. Same	1
// Example 12.6. Function	1
// Example 7.29b floata;	1
// Example 7.29a float	1
// Example 7.34a. Use	1
// Example 14.13c int	1
// Example 14.13a int	1
// Example 8.15b struct	1
// Example 7.10b char	1
// Example 7.10a bool	1
// Example 12.4e. Same	1
// Example 8.5b a	1
// Example 8.5a void	1
// Example 7.31b char	1
// Example 7.31a char	1
// Example 7.43b. Compile-time	1
// Example 14.4b if	1
// Example 15.1a. Calculate	1
// Example 8.13a int	1
// Example 8.13b int	1
// Example 14.15b if	1
// Example 9.1a int	1
// Example 9.1b int	1
// Example 7.33b const	1
// Example 8.11b int	1
// Example 8.11a int	1
// Example 7.38b. Alternative	1
// Example 8.1b float	1
// Example 8.1a float	1
// Example 12.9b. Taylor	1
// Example 8.16 float	1
// Example 8.17 char	1
// Example 8.18 float	1
// Example 7.42 int	1
// Example 7.45 //	1
// Example 7.44 class	1
// Example 7.4. Signed	1
// Example 12.8a. Sum	1
// Example 7.35b struct	1
// Example 7.35a struct	1
// Example 8.23a. Loop	1
// Example 12.8b. Sum	1
// Example 14.18c double	1
// Example 8.2a double	1
// Example 8.2b a	1
// Example 14.7b. Testing	1
// Example 7.9b char	1
// Example 7.9a bool	1
// Example 8.25 void	1
// Example 8.20 module1.cpp	1
// Example 8.22 #ifdef	1
// Example 12.9a. Taylor	1
// Example 8.3b a	1
// Example 7.38a. Multiple	1
// Example 7.43a. Runtime	1
// Example 14.21. //	1
// Example 7.32a double	1
// Example 14.22b unsigned	1
// Example 14.22a unsigned	1
// Example 15.1d. Integer	1
// Example 14.18a float	1
// Example 14.18b float	1
// Example 9.2b void	1
// Example 9.2a void	1
// Example 8.24. Integer	1
// Example 7.32b double	1
// Example 8.6a int	1
// Example 8.6b int	1
// Example 7.15a. Array	1
// Example 7.5. Set	1
// Example 14.17b double	1
// Example 14.7a. Testing	1
// Example 14.16a double	1
// Example 7.26b float	1
// Example 7.26a float	1
// Example 8.19. Devirtualization	1
// Example 8.10b a	1
// Example 8.10a if	1
// Example 7.30b int	1
// Example 7.30a int	1
// Example 7.3. Explain	1
// Example 7.39 union	1
// Example 7.37 class	1
// Example 7.36 class	1
// Example 12.1b. Vectorization	1
// Example 8.12a int	1
// Example 8.12b int	1
// Example 12.4b. Vectorized	1
// Example 12.4d. Same	1
// Example 14.12a int	1
// Example 8.14b int	1
// Example 8.14a int	1
// Example 7.33a const	1
// Example 8.8b double	1
// Example 8.8a double	1
// Example 12.7. Vector	1
// Example 7.34b. Replace	1
// Example 14.16b double	1
// Example 14.17a double	1
// Example 14.15a if	1
// Example 14.2a float	1
// Example 14.2b float	1
// Example 14.29 union	1
// Example 14.24 union	1
// Example 14.25 union	1
// Example 14.20 double	1
// Example 14.4a const	1
// Example 7.41a class	1
// Example 7.41b a.x	1
// vector class library	1
// make dispatcher in	1
// CPU dispatching on	1
// loop for //	1
// loop through rows	2
// loop columns below	2
// If Microsoft compiler	1
// used for multiplication	1
// set a to	2
// set sign bit	2
// do nothing while	1
// number of rows	2
// number of rows/columns	1
// C++ casting operator	1
// return 0 if	1
// return y =	1
// return x^10 //	1
// 2 unused bytes	1
// 2 bytes. first	2
// You may insert	1
// table of 1/n!	1
// 32-bit Windows, Intel/MASM	1
// 32-bit Linux, Gnu/AT&T	1
// makes intermediate object	1
// 4 unused bytes	1
// 4 bytes. first	3
// call polymorphic child	1
// call transpose function	1
// 8 bytes. first	2
// For unused returns	1
// test bits 0	1
// test sign bit	1
// always 1 if	1
// SSE2 // SSE4.1	1
// SSE2 version int	2
// SSE2 supported return	1
// SSE2 supported CriticalFunction	1
// constant data //	1
// Gnu compiler, etc.	1
// Windows syntax or	1
// result = b	2
// Use template to	1
// Use signed when	1
// Use mask to	1
// Use ReadTSC() from	1
// specific version of	1
// Linux syntax 90	1
// AVX version int	1
// AVX version 127	1
// AVX supported return	1
// AVX supported CriticalFunction	1
// get next each	1
// check if nonzero	1
// Function to store	4
// Function to load	4
// Function pointer initially	1
// Function pointer serves	1
// Function template for	1
// Function prototype CriticalFunctionType	1
// add the four	1
// add 2 to	1
// add elements };	1
// add n to	1
// sign bit };	1
// copy a to	2
// ... for (int	1
// ... } }	1
// next four x^n	1
// n factorial }	1
// Make the dispatcher	1
// Make a vector	6
// Make all instances	1
// Make array of	1
// Make dynamic array	1
// Make three aligned	1
// Table of factorials:	2
// Table // Loop	2
// Table lookup }	1
// Floating point overflow	1
// AVX2 // specific	1
// constructor // sum	1
// constructor initializes x	1
// go to dispatched	1
// Loop to print	1
// Loop with branch	1
// Loop through array	1
// Loop counter //	1
// Loop counter //=2*A	1
// Loop r1 and	1
// Loop r2 and	1
// No cache contentions.	1
// No error return	1
// sum operator //	1
// exponent + 0x3FF	1
// exponent + 0x3FFF	1
// exponent + 0x7F	1
// Define function type	1
// Define function name	1
// Define vector objects	1
// Define vector classes	3
// Define size of	1
// Define SSE2 intrinsic	1
// Define vectors of	1
// Define macro to	1
// Define macro for	1
// Define biggest possible	1
// square x //	1
// Any function that	1
// align by cache	1
// align table by	1
// SSE4.1 // AVX2	1
// header for intrinsic	1
// swap elements //	1
// swap elements }	1
// Store the result	4
// Store result //	1
// f is zero	1
// f is nonzero	1
// define a macro	1
// define function type	1
// define matrix //	1
// define fprintf //	1
// Load eight consecutive	8
// multiply // square	1
// 6 unused bytes	1
// default constructor //	1
// Time // Serialize	1
// Time before test	1
// Time difference for	1
// everything is double	1
// everything is float	1
// parent class. The	1
// Virtual function //	1
// Virtual call to	1
// Template for pow(x,N)	1
// Cache contentions expected.	1
// Now call the	1
// Now 1.0 <=	1
// Add 2 to	2
// Number of times	1
// SSE3 required //	1
// Set function pointer	1
// Set pointer to	2
// Set sign bit	1
// INSTRSET == 2	1
// Roll out loop	5
// Critical function to	1
// Critical innermost loop:	1
// AND each element	2
// SIZE must be	1
// OR the results	1
// Array of 100	1
// Array with N	1
// Array size Alignd	1
// Calculate polynomial The	1
// Only for SSE2	1
// Division by a	1
// n! // Table	1
// n! int i,	1
// s += x^n/n!	1
// Writes "Hello 2"	2
// Writes "Hello 1"	2
// x^4 // Define	1
// x^4 // x^8	1
// x^4 F32vec4 s(0.f,	1
// Multiply b and	2
// u.f > v.f	1
// Header file for	2
// C-style type casting	1
// Bounds checking (see	1
// Same as example	1
// MOVNTQ _mm_empty(); //	1
// Still faster if	4
// Faster if divisor	2
// After first call	2
// Return the size	1
// Return a null	1
// Return reference to	1
// fractional part unsigned	2
// fractional part 142	1
// Index out of	1
// At the diagonal	1
// Get supported instruction	2
// Get upper 32	1
// sum, initialize to	1
// Check that index	1
// Check if level-2	1
// Call to virtual	1
// Call critical function	2
// Structure of 4	1
// 400 bytes. first	1
// x^2 // x^4	1
// x^2 float x4	1
// Full template specialization	2
// (N & N-1)==0	1
// Enable exception for	1
// Lowest version int	2
// Initialize to zero	1
// Initialize loop counter	1
// x^n // sum,	1
// (time after) -	1
// Volatile to prevent	1
// x^10 // return	1
// _controlfp(0, _EM_OVERFLOW); //	2
// Polynomial coefficients //	1
// Polynomial coefficients double	1
// Increment loop counter	1
// Overflow may occur	1
// General case, N	1
// ipow faster than	1
// (This is faster	1
// Returns a pointer	1
// Returns time stamp	1
// Portability note: This	1
// Catch floating point	1
// Catch exceptions in	1
// Update induction variable	2
// Mixing float and	1
// Or #include <ia32intrin.h>	1
// EMMS } const	1
// Approximate exp(x) for	2
// initialize sum for(inti=0;i<16;i+=4){	1
// Remove right-most 1-bit	1
// Compare each element	2
// flip sign bit	1
// incremented every second	1
// Repeat NumberOfTests times	1
// Prevent optimizing away	1
// Dispatcher void SelectAddMul_dispatch(short	1
// Re-do the calculation	1
// x^8 // x^10	1
// Non-polymorphic functions go	1
// Error: lowest instruction	1
// Safe [] array	1
// Output array element	1
// Generic version CriticalFunction	1
// polynomial(x) = 2.5*x^2	1
// u.d is negative	1
// Called directly //	1
// Round to nearest	1
// versions: class CChild1	1
// Entry to dispatched	1
// Truncation is slow.	1
// Implicit type conversion	1
// Constructor // Initialize	1
// Modulo by a	1
// Branch/loop function vectorized:	1
// Detect supported instruction	1
// Place non-polymorphic functions	1
// Print heading You	1
// x,y coordinates //	1
// Reset floating point	1
// x^1, x^2, x^3,	1
// Serialize // Prevent	1
// Convert to unsigned	1
// Find numerically largest	1
// Faster, but risk	1
// continue in dispatched	1
// erroneously called with	1
// Read time You	1
// Dispatcher. Will be	1
// Constructor-style type casting	1
// 2-dimensional vector 56	1
// Partial template specialization	1
// instrset_detect function //	1
// Rounding is fast.	1
// Prototype for the	1
// abs(u.f) > abs(v.f)	1
// Main loop for	1
// (Some compilers use	1
// Default version return	1
= a a &&	1
= a a |	1
= a a ^	1
= a - n.a.	6
= a - a-a	1
= a - a*0	1
= a - 0/a	1
= a - a/1	1
= a x -	1
= a + b	4
= a + 2	1
= a + 1;	1
= a + 1.0f;	1
= a * 2;	4
= a * 3;	4
= a * 2.5;	1
= a & b;	2
= a ; parameter	1
= a && b;	1
= a | b;	1
= a || b;	1
= a ? b	2
= a ^ b	1
= a ^ 1;	1
= a XOR b	1
= int 4 AVX2	1
= int 8 AVX2	1
= x * x;	1
= x > y	1
= x *x; double	1
= { // table	1
= { "Alpha", "Beta",	1
= A + A;	1
= A + B;	1
= A | (B	1
= point to end	1
= double 2 AVX2	1
= double 4 AVX2	1
= b + c	1
= b + 1	1
= b + 1;	1
= b + 2.0	1
= b + 0.666666666666666666667;	1
= b * b	2
= b * 5	1
= b * 2.5	1
= b * 3.5;	1
= b * 1.2;	2
= b * (1.	1
= b * 1.2f;	1
= b / c;	1
= b / 10;	1
= b / 16;	1
= b / 1.2345;	1
= b > 0	2
= b % c;	1
= b % 10;	1
= b % 16;	1
= b ? 1.5f	1
= i = 0	1
= i * 9	1
= i % 3;	1
= float or int	2
= float 4 AVX2	1
= float 8 AVX2	1
= 2 * 5;	1
= 4 rows. Let's	1
= 0; for (i	1
= 0; for (int	1
= 0; for (i=0;	1
= 0; // Initialize	1
= 0; int i;	2
= 0; int i,	1
= 0; x <	2
= 0; } if	1
= 0; } else	1
= 0; i <	39
= 0; while (seconds	1
= 0; c <	4
= 0; r <	2
= 0; row <	1
= 0; j <	1
= 0; column <	1
= 0; c1 <	1
= 0; 14.6 Floating	1
= 0; list[i+1] =	1
= 0; r1 <	1
= 8 * 4	1
= 64 kb. This	1
= 16 is actually	1
= 0 a &	1
= 0 a ^	1
= 0 that r	1
= 0 // This	1
= 0 - n.a.	5
= 0 - Divide	1
= 0 - a*1	1
= 0 - a+0	1
= 0 because this	1
= 0 a+0=a a*0=0	1
= & obj1; p->f();	1
= c + b	1
= i; } }	1
= i; } Here,	1
= a, a &	1
= a, a |	2
= a, a ||	1
= a, but they	1
= b; A branch	1
= b; } else	1
= b; c =	1
= 1; for (i	1
= 1; } This	1
= 1; } else	1
= 1; n <=	1
= 1; r <	2
= 1; list[i+2] =	2
= 1; a[1] =	1
= 256 times and	1
= y + 1.;	3
= c; } Can	1
= char 16 SSSE3	1
= char 16 XOP,	1
= x; float sum	1
= 100; // Array	1
= 100; int i;	1
= 100; int matrix[NUMROWS][NUMCOLUMNS];	1
= 100; float list[size],	2
= 100; float list[ARRAYSIZE];	1
= 100; S1 list[size];	1
= r + 2;	1
= r + i/2;	1
= r ebx, eax	1
= 0, b =	1
= 0, b; b	1
= 0, c, d;	1
= 0, sum2 =	1
= 0, s3 =	1
= 0, s2 =	1
= 0, sum; for	1
= 0, (a&b) |	1
= 0, s1 =	1
= 2; } The	1
= 2; } list[300]	1
= 2; i <=	1
= 2; Unfortunately, some	1
= a[i] + b[i];	1
= a; b =	1
= a; y =	1
= p + i;	1
= 1. This ends	1
= 1. / (b1	1
= temp * temp;	2
= temp / 4;	1
= shift and add	1
= d + 3.5;	1
= d + e	1
= divide by 2	1
= 2, Tuesday =	1
= true a &&	2
= temp; } 70	1
= temp; temp +=	1
= u; If you	1
= row + column;	1
= 3; for (i	1
= multiply and shift	1
= multiply by -	1
= multiply by xx-xx--x-	1
= *p + 2;	2
= *p + 2;}	1
= false where it	1
= 4, we have:	1
= 4, Wednesday =	1
= -1 - n.a.	1
= -1 x -	1
= -1 (a&~b)|(~a&b)=a^b ---------	1
= 8, Thursday =	1
= (unsigned int)b /	2
= (unsigned int)b %	2
= (unsigned int)a /	1
= 10; int i;	1
= 10; Templates are	1
= 1, Monday =	1
= 256; // Array	1
= (a + b)	1
= (a >= b)	1
= Induction ; edx	1
= int64_t 2 AVX2	1
= int64_t 4 AVX2	1
= log (b[i] *	1
= 16; int i;	1
= x- x- x	1
= (float *)alloca(n *	1
= 1.0; for (x	1
= 1.0; int i;	1
= 1.0; while (n	1
= 1.0; list[i].b =	1
= 1.0; temp->b =	1
= 250 μs on	1
= a[i]; It is	1
= ~a a ^a	1
= b[i] + 2;	1
= C; double Z	1
= C; Assuming that	1
= 1000; int i;	1
= 1000; int List[ArraySize];	1
= 1000; float a[size],	1
= 1000; unsigned int	1
= parabola (2.0f); b	1
= 2.0; x <=	1
= 2.0; } The	1
= 2.0; } In	1
= 2.0; i >=	1
= s; An integer	1
= 0x2710 and (set)	1
= (n & 0x7FFFFF)	1
= (b == 0)	1
= Induction; ; parameter	1
= Induction; ; a[i+1]	1
= Induction; a[i+1] =	1
= Induction; Induction++; }	1
= 100, c =	1
= 100, y; y	1
= 100, max =	1
= 100, NUMCOLUMNS =	1
= LoadVector(cc + i);	3
= LoadVector(bb + i);	3
= r; for (i	1
= 100. Now, according	1
= x2 * x2;	1
= 28. This means	1
= 28. We take	1
= b;} vector operator	1
= 8; // SIZE	1
= 8; float matrix[rows][columns];	1
= (number of sets)	1
= false, a ||	2
= 1024; int a[size],	2
= 1024; struct Sab	1
= r1; c2 <	1
= r1; r2 <	1
= a*b - n.a.	1
= ReadTSC() - time1;	1
= *(p++) is more	1
= 0x1C. Reading or	1
= _mm_set1_epi16(2); // Roll	2
= a2 * b1	1
= a2 / b2;	1
= a1 * b2	1
= a1 / b1;	1
= ((a*x+b)*x+c)*x+d x*x*x*x*x*x*x*x =	1
= (a+b)+(c+d) a*b+a*c=a*(b+c) a*x*x*x	2
= cos(x); } z	1
= cos(x); z =	1
= a+(b+c) - n.a.	1
= a+(b+c) - a*b+a*c	1
= N&(N-1) gives the	1
= 3.3; // Polynomial	1
= 3.3; double Table[100];	1
= 2.0f; x.i |=	1
= {1, 1, 2,	2
= StringLength; i >	1
= 32. This is	1
= string; int i,	1
= string; while (*p	1
= &Object1; p1->Hello(); CChild2	1
= &Object1; p->NotPolymorphic(); p->Hello();	1
= a*(b+c) - n.a.	1
= a*(b+c) - -(-a)	1
= (bb[i] > 0)	1
= order(i); matrix[j][0] =	1
= order(i); list[j].a =	1
= 2048 bytes =	1
= InstructionSet(); // Set	2
= ((x2) 2) 2	2
= 512; // number	2
= 20, columns =	2
= bb[i] + 2;	1
= (memory address) /	1
= log(b[i]) + log(c[i]);	1
= log(b[i]) + log(c[i]);.	1
= _mm_set1_epi16(0); // Make	2
= a&&(b||c) !a &&	1
= a&&(b||c) (a&&!b) ||	1
= (a&b) | (~a&c)	1
= 8192 bytes, 4	1
= _mm_cmpgt_epi16(b, zero); //	2
= (double)(signed int)u; //	1
= (double)(signed int)u; 14.9	1
= &CriticalFunction_386; } //	1
= select(b > 0,	2
= sin(x); } 68	1
= sin(x); z =	1
= 1.f; for (int	1
= 1.f; float nfac	1
= A; x.b =	1
= _mm_add_epi16(c, two); //	2
= 2.2, C =	2
= &CriticalFunction_SSE2; } else	1
= 1.23456. But we	1
= 1.1, B =	2
= &Object2; p->Hello(); }	1
= &Object2; p2->Hello(); //	1
= 80. The difference	1
= c1; c2 <	1
= 0x40 }; Weekdays	1
= !(a || b)	1
= _mm_mullo_epi16 (b, c);	2
= (a<b && b<c)	1
= B; x.c =	1
= 1.0f + b	1
= b*a - n.a.	1
= b*a (a+b)+c=a+(b+c) a+b+c=c+b+a	1
= &CriticalFunction_AVX; } else	1
= (a+1) * (a+1);	1
= (a+1) / 4;	1
= a&(b|c) - n.a.	1
= a&(b|c) x-xxxx--x (a|b)&(a|c)	1
= 10, columns =	1
= b+a a*b =	1
= x8*x2; return x10;	1
= 128. These lines	1
= i+1; The compiler	1
= -abs(x);. There are	1
= b.y + c.y	1
= sin(0.8); The sin	1
= x∙xn-1, and each	1
= 6.0f; Constant folding	1
= a1/b1 + a2/b2;	1
= &SelectAddMul_AVX2; (iset >=	1
= 64; // number	1
= list[j].b + list[j].c;	1
= 1.23456, y; y	1
= x2*x2; double x8	1
= -100, b =	1
= {2.6f, 1.5f}; a	1
= (int)n - 2,	1
= a[i].u[1] * 2;	1
= 110; int i;	1
= lookup[b]; If a	1
= pow(x,n) As we	1
= 2.5*x^2 - 8*x	1
= a<<(b+c) - n.a.	1
= {1.1, 0.3, -2.0,	1
= A*x*x + B*x	1
= 1.0E8, c =	1
= (short int)i; This	1
= (s0+s1)+(s2+s3); Now s0,	1
= &SelectAddMul_dispatch; // Dispatcher	1
= (a&b)&(c&d) a ^0	1
= n∙(n-1)!. If we	1
= (total cache size)	1
= _mm_or_si128(c2, bc); //	1
= (a1*b2 + a2*b1)	1
= OneOrTwo5[b!=0]; will also	1
= b[r][c]; } }	1
= *(++p) because in	1
= array[++i] because in	1
= (10000 / 64)	1
= {1.0f, 2.5f}; a	1
= (int)d; // Truncation	1
= absvalue; largest_index =	1
= _mm_andnot_si128(mask, bc); //	1
= 0x20, Saturday =	1
= instrset_detect(); 116 //	1
= (b*c)/d, it can	1
= Y; Y +=	1
= Func1(2); ... }	1
= &list[0]; temp <	1
= a|(b&c) x-xxxx--x ~a&~b=~(a|b)	1
= 32; float matrix[rows][columns];	1
= WhateverFunction(i); // ...	1
= array[i++] is more	1
= 100000001.23456. The float	1
= Func(a[i]); } The	1
= -1.0E8, b =	1
= 0x10, Friday =	1
= y.d + 4.;	1
= y.a + 1.;	1
= y.b + 2.;	1
= y.c + 3.;	1
= (float)i; f =	1
= 0.0; // copy	1
= &CriticalFunction_Dispatch; // Lowest	1
= 5.0f; b =	1
= lrint(d); // Rounding	1
= 123; are equally	1
= OneOrTwo5[b & 1];	1
= MAX(f(x), g(x)); In	1
= Func(ab[i].a); } There	1
= log(2.0); ... }	1
= 50; float matrix[rows][columns];	1
= (int)(&list[0]) + 100*16,	1
= MultiplyBy<8>(10); a and	1
= &SelectAddMul_SSE2; // Error:	1
= b+a, a*b =	1
= _mm_blendv_epi8(bc, c2, mask);	1
= CriticalFunction(b, c); ...	1
= _mm_hadd_ps(x, x); s	1
= r1+1; r2 <	1
= 10000, then we	1
= (A & 0x0F)	1
= !a; can be	1
= __rdtsc(); return clock;	1
= b++; will make	1
= a*4 - n.a.	1
= float(i); f =	1
= ++b; the compiler	1
= (*CriticalFunction)(b, c); ...	1
= Multiply(10,8); b =	1
= b.x + c.x	1
= select_gt(b, zero, c	1
= (0x2710 / 0x40)	1
= x4*x4; double x10	1
= _mm_hadd_ps(s, s); return	1
= ((x2)2)2 a+a+a+a=a*4 -(-a)=a	1
= ReadTSC(); CriticalFunction(); timediff[i]	1
= FactorialTable[b]; ... }	1
= static_cast<float>(i); // Implicit	1
= a&&b (a&&b) ||	1
= 18, then the	1
= 1.6; int a,	1
= &SelectAddMul_SSE41; (iset >=	1
= _mm_and_si128(c2, mask); 110	1
= dummy[0]; clock =	1
= a+1; b =	1
or the function could	1
or the other with	1
or the loop unroll	1
or the number of	1
or the user is	1
or the error code	1
or the specific literature	1
or the negative effects	1
or the series of	1
or the __assume_aligned directive	1
or a function library.	1
or a make utility.	1
or a CPU with	1
or a static library.	1
or a member function	1
or a simple variable.	1
or a few arrays	1
or a few machine	1
or a few places.	1
or a separate module	1
or a binary tree.	1
or a pointer. A	1
or a smart pointer.	1
or a similar utility	1
or a hash map	1
or a hash map.	1
or a reasonable upper	1
or a nearby address	1
or a not-too-big upper	1
or a non-const reference,	1
or to an output	1
or to exit the	1
or in the programming	1
or in a separate	1
or in a register.	1
or in a high-priority	1
or for the sake	1
or for issuing an	1
or for combining multiple	1
or function call (other	1
or function libraries is	1
or function calls. The	1
or if the first	1
or if the new	1
or if the type	1
or if the calculation	1
or if the prediction	1
or if the 7	1
or if it is	3
or if it opens	1
or if this is	1
or if different versions	1
or if one is	1
or if there is	1
or if pointers are	1
or if they are	1
or if they come	1
or if its body	1
or by an executable	1
or by memory access.	1
or by using a	1
or by making a	1
or by type-casting i	1
or by turning the	1
or by extending with	1
or by keys within	1
or with the functions	1
or with an index	1
or with compile-time polymorphism.	1
or code lines. The	1
or as a function	1
or not in a	1
or not at all	1
or an integer can	1
or an assembly listing.	1
or an input file.	1
or an anonymous object.	1
or an over- loaded	1
or int 4 AVX	1
or int 8 AVX2	1
or you may use	1
or use the CPU	1
or use objconv or	1
or more of the	1
or more then the	1
or more integer units,	1
or more performance monitor	2
or more template instances	1
or more dynamic libraries	1
or more versions of	2
or more threads writing	1
or more iterations back.	1
or more complex integer	1
or more jobs simultaneously	1
or more cores, and	1
or more constants. For	1
or when the SSE2	3
or when code caching	1
or when accessing an	1
or from example 16.1	1
or from knowing that	1
or memory pool. Alignment?	1
or at run time.	1
or data used in	1
or data exceeds 64	1
or program size, while	1
or vector classes is	1
or vector classes than	1
or make files smaller.	1
or because the programmer	1
or CPU cores, we	1
or other data structure	1
or other error condition.	1
or other hardware often	1
or other hardware conditions.	1
or other resources. There	1
or other device should	1
or one clock cycle.	1
or cache access rather	1
or no other branches.	1
or no overhead while	1
or no offset at	1
or no idea how	1
or class is less	1
or class is 128	1
or class is responsible	1
or class for containing	1
or class that is	1
or class with members	1
or class should be	1
or class into an	1
or class declaration and	1
or class separately in	1
or class elements. The	1
or class objects. The	1
or floating point numbers.	1
or each of its	1
or do more than	1
or do other input/output	1
or double to int	1
or double to integer	2
or double because all	1
or double takes 4	1
or double plus 6	1
or double precision, and	1
or double precision, but	1
or Intel compiler. Use	1
or pointer to the	1
or library has an	1
or library files. Use	1
or multiple times in	1
or multiple configurations with	1
or multiple elements? If	1
or two floating point	2
or two integers of	1
or two 128- bit	1
or object is accessed	1
or object that is	1
or object as if	1
or object through a	1
or static or by	1
or static storage Variables	1
or 64-bit integers in	1
or 64-bit mode. Much	1
or 64-bit systems). 28	1
or C++ code. Compilers	1
or C++ file and	1
or C++ based on	1
or array coincides with	1
or variable is accessed	1
or variable having the	1
or any other cleanup	1
or any higher instruction	1
or any particularly slow	1
or performance problems. Avoid	1
or long dependency chains	1
or between different parts	1
or member function because	1
or member functions. A	1
or const reference cannot	1
or cannot be calculated	1
or See page 95	1
or critical parts of	1
or less each time.	1
or unsigned 2 2	1
or unsigned 4 4	1
or unsigned 8 8	1
or unsigned 1 1	1
or first in an	1
or libraries that come	1
or pointers to data	1
or they may be	1
or without the sign	1
or even a linear	1
or even a thousand	1
or even swapped to	1
or even telling the	1
or method should be	1
or always false: //	1
or 16 8 or	1
or 16 bits of	1
or 16 Table 7.2.	1
or SSE2 instruction set,	1
or out of order.	1
or 32 bits (rarely	1
or 32 bytes). This	1
or dynamic link libraries,	2
or error prone. All	1
or Gnu compilers without	1
or accessed in a	1
or does so in	1
or assembly language and	1
or assembly language. It	1
or threads simultaneously. If	1
or specific models then	1
or common names. Use	1
or thread are smaller.	1
or thread does not	1
or small sequences of	1
or line separately through	1
or optimized away. It	1
or four single precision	1
or four float's when	1
or another error has	1
or get ReadTSC as	1
or container is too	1
or container without dynamic	1
or eight single precision	1
or structure is a	1
or structure is simply	1
or structure is created.	1
or structure are stored	1
or structure object takes	1
or every code line.	1
or 1 and that	1
or 1 by XOR'ing	1
or 1 (see page	1
or add an extra	1
or simply zero. Execution	1
or addresses that need	1
or shared objects), resource	1
or write it in	1
or write less than	1
or replace it with	1
or operator that transfers	1
or Mac operating system	1
or cache. Most compilers	1
or 256 bytes) on	1
or model the best	1
or mathematical functions such	1
or Microsoft compiler for	1
or what a function	1
or reference is valid	1
or reference to the	2
or reference to a	3
or reference to such	1
or reference to it.	1
or reference to anything	1
or reference can be	1
or reference may be	1
or reference parameters). The	1
or three levels of	1
or too long. If	1
or transferred from one	1
or after the last	1
or give it a	1
or graphics accelerator card.	1
or assume that it	1
or later // Header	1
or later with code	1
or later instruction set	5
or later instruction set.	1
or higher instruction set.	1
or goes into sleep	1
or union can use	1
or require a lot	1
or require more resources,	1
or require runtime type	1
or #define makes no	1
or switch statement leads	1
or modules with a	1
or references then tell	1
or VIA processor and	1
or global arrays require	1
or global variables. (See	1
or 1. The AND	1
or 1. This makes	1
or 1. See page	1
or 1. Writing a	1
or turn off requirements	1
or size. Today, it	1
or network resources. This	1
or #pragma optimize("a",on). Specifies	1
or #pragma novector to	1
or hot spot but	1
or comes from a	1
or limited in scope.	1
or class. The transfer	1
or class. This makes	1
or database is heavily	1
or strings of different	1
or writing a variable	1
or writing a file	1
or writing a small	1
or writing to a	1
or writing big blocks	1
or writing small bits	1
or accessing databases, network	1
or until the computer	1
or full speed. A	1
or overloaded operator is	1
or models that were	1
or fail completely because	1
or compiling the intermediate	1
or structures are accessed	1
or logical processors available	1
or logical processors usually	1
or subexpression containing only	1
or reading disk files.	1
or resource files from	1
or enable the SSE2	1
or PathScale compiler for	1
or references. It is	1
or come from unknown	1
or modify the ones	1
or modify objects simultaneously.	1
or setting an array	1
or input data. A	1
or not. The loop	1
or not. The Intel	1
or not. The following	1
or not. The advise	1
or not. There are	1
or not. See page	1
or not. I will	1
or approximately so. It	1
or easy linking to	1
or writes a file	1
or writes to any	1
or non-static member functions.	1
or false (0); and	1
or 8, but not	1
or __restrict or #pragma	1
or 1, but operators	1
or update automatically when	1
or int64_t MS compiler:	1
or log off the	1
or compile-time generation of	1
or remove any objects	1
or constant. If the	1
or reads to the	1
or reference, the compiler	1
or reference, or the	1
or reference, 64-bit mode	1
or reference, 32-bit mode	1
or compilation before it	1
or completely absent in	1
or structure. The situation	1
or structure. This is	1
or loss of precision,	1
or multidimensional array is	1
or multidimensional array should	1
or lists of specific	1
or created it will	1
or key in the	1
or key press. 19	1
or malloc is typically	1
or malloc and free	1
or malloc and free.	1
or division. The compiler	1
or __asm ("int 3");	1
or two. Often, it	1
or sixteen vector registers	1
or estimate of the	1
or mouse input. It	1
or mouse move. It	1
or *.so). The program	1
or *.so). The installation	1
or video should also	1
or unsigned. The following	1
or another. Therefore, micro-	1
or mask out multiple	1
or structures. Accessing a	1
or otherwise optimize across	1
or uint64_t MS compiler:	1
or API function which	1
or multi-core CPUs, as	1
or manipulate all the	1
or bypassing syntax checks.	1
or C++. Critical device	1
or (requires no specific	1
or moving the mouse.	2
or infinity or NAN	1
or reference. Registers are	1
or micro-op cache. The	1
or moved with a	1
or bypass the CPU	1
or typedef instead of	1
or inline. This will	1
or modified. This can	2
or 3-dimensional vectors RGB	1
or 3-dimensional vectors .......................................................	1
or post-increment. The effect	1
or interpretation on the	1
or send data from	1
or ten years old.	1
or four, depending on	1
or NAN (not a	1
or NAN (Not A	1
or -0 } It	1
or namespaces. Therefore, you	1
or microseconds as a	1
or re- allocating when	1
or column. The access	1
or integrated in the	1
or -Ofast /O3 -O3	1
or Friday is set	1
or x64 141 #include	1
or 0x40 bytes from	1
or later. Example: //	1
or better, make your	1
or circumvent operating system	1
or CString uses new	1
or she is busy	1
or .a), but not	1
or more. Many software	1
or QueryPerformanceCounter functions for	1
or decrementing a pointer	1
or __debugbreak();. If you	1
or "frame pointer". The	1
or -axAVX. This will	1
or bitmap than to	1
or double) /arch:SSE2 -msse2	1
or network. Various development	1
or clearing arrays It	1
or PSDK). Supports the	1
or friend function or	1
or g(x) is calculated	1
or seemingly simultaneously. If	1
or remotely. If frequent	1
or -fno-strict-overflow. You may	1
or while-loop is also	1
or animation. It is	1
or Espresso) that can	1
or "__attribute__((visibility ("hidden")))". A	1
or inttypes.h is available	1
or __attribute__((fastcall)). The fastcall	1
or C1::f. But an	1
or C2::Disp() is done	1
or hide them for	1
or p->member is equally	1
or /Ox -O3 or	1
or intranet for automatic	1
or PathScale. 2. Use	1
or 2016. The same	1
or NAN. Avoiding the	1
or tiling. This technique	1
or *.so) that belong	1
or modifies many strings.	1
or __attribute__((aligned(16))). Specifies alignment	1
or bottleneck, it is	1
or memory-intensive functions such	1
or CString. This is	1
or "how many elements	1
or removable media such	1
or glitches in the	1
or (5) make the	1
or First-In-Last-Out access, sort	1
or aliasing, but the	1
or void. Returning objects	1
or references: If the	1
or /Fa for assembly	1
or Verilog. Common devices	1
or sizes? It is	1
or iterative in nature,	1
or malloc. Handles to	1
or malloc) is necessarily	1
or __restrict__, if supported	1
or vice versa. But	1
or C2, then we	1
or .so). There is	1
or YMM) which can	1
or -fsource-asm). This option	1
or makefile. You can	1
or __declspec(thread). Such variables	1
or malloc/free should be	1
it the first time.	1
it is the responsibility	1
it is the "best	1
it is the responsi-	1
it is a register	1
it is a valid	1
it is a staircase	1
it is to choose	1
it is and interpreted	1
it is on a	1
it is not the	1
it is not in	2
it is not possible	3
it is not accessed	1
it is not necessary	1
it is not advantageous	2
it is not optimal	1
it is not clear	1
it is not needed.	1
it is not portable	1
it is not necessary.	1
it is not cached.	1
it is not unusual	1
it is not uncommon	2
it is not human	1
it is an integer).	1
it is more efficient	3
it is more complicated	1
it is more relevant	1
it is only called	1
it is only calculated	1
it is used and	2
it is also likely	1
it is also recommended	1
it is also discussed	1
it is possible to	13
it is very important	1
it is very likely	1
it is very inefficient.	1
it is long does	1
it is faster to	1
it is stored in	1
it is stored on	1
it is stored at	1
it is called from	1
it is called only	1
it is less advantageous	1
it is often possible	1
it is often necessary	1
it is even more	1
it is sure to	1
it is short in	1
it is available from	1
it is important to	9
it is accessed by	1
it is accessed much	1
it is accessed through	1
it is accessed quite	1
it is necessary to	8
it is necessary here	1
it is much more	1
it is small or	1
it is good for	2
it is done in	1
it is done only	1
it is inside a	1
it is advantageous to	6
it is known with	1
it is known at	1
it is known which	1
it is likely to	1
it is likely that	2
it is doing two	1
it is certain that	1
it is quite certain	1
it is recommended to	7
it is optimal to	2
it is never used.	1
it is running on,	1
it is running on.	1
it is too late.	1
it is difficult for	1
it is usually faster	1
it is relevant for	1
it is intended to	1
it is intended for.	1
it is inefficient to	2
it is outside the	1
it is still the	1
it is safe to	1
it is clear that	2
it is possible. A	1
it is true that	1
it is initialized or	1
it is initialized only	1
it is discussed which	1
it is rarely necessary	1
it is slightly more	1
it is independent of	1
it is executed. An	1
it is almost certain	1
it is preferred to	1
it is poorly predictable	1
it is hardly worth	1
it is convenient to	1
it is deallocated when	1
it is safer to	1
it is preferable to	1
it is finished using	1
it is run. Examples	1
it is filled up,	1
it is certainly more	1
it is certainly something	1
it is sufficient to	2
it is evicted before	1
it is impossible to	1
it is compiled. This	1
it is worthwhile to	1
it is profitable to	1
it is compiling. This	1
it is correlated with	1
it is advisable to	1
it is unrealistic that	1
it is servicing. A	1
it is cached, but	1
it is unlikely that	1
it a pointer or	1
it a template: //	1
it to the exception	1
it to the tolerance	1
it to a branch	1
it to any other	1
it to signed before	1
it to do. It	1
it to begin calculating	1
it and create a	1
it in the form	1
it in a temporary	1
it in one operation	1
it in order to	1
it for lists that	1
it for improving the	1
it can be a	1
it can be an	1
it can be useful	2
it can be done	1
it can be advantageous	1
it can be implemented	1
it can be difficult	1
it can be predicted	1
it can be initialized	1
it can be expected	1
it can be said	1
it can be represented	1
it can be disabled	1
it can not do.	1
it can have no	1
it can use the	2
it can do another	1
it can also be	1
it can call C1::f	1
it can take more	1
it can often happen	1
it can cause errors	1
it can calculate each	1
it can start a	1
it can save cache	1
it can happen that	1
it can multiply by	1
it can move out	1
it can move outside	1
it can run. Some	1
it can handle. Waiting	1
it can overwrite the	1
it by a table	1
it by 100 so	1
it with the calculated	1
it with many decimals.	1
it with 1: //	1
it with 2n -1.	1
it as a subexpression.	1
it may be a	1
it may be more	1
it may be possible	1
it may be useful	3
it may be necessary	1
it may be quite	1
it may be optimal	2
it may be better	2
it may be difficult	2
it may be smaller	1
it may be preferred	1
it may be convenient	1
it may be preferable	1
it may be freed	1
it may not be	2
it may take only	1
it may take 3	1
it may cause a	1
it may cause cache	1
it may go through	1
it may detect the	1
it may involve the	1
it this by making	1
it more clear to	1
it will be compatible	1
it will not be	1
it will not have	1
it will not use	1
it will point to	1
it will often take	1
it will run the	1
it will run an	1
it will run faster	1
it will generate a	1
it will generate relocations	1
it will still take	1
it will break at	1
it will recognize that	1
it from a project	1
it from making optimizations	1
it from fully utilizing	1
it at the diagonal.	1
it at compile time.	1
it has the disadvantage	1
it has the correct	1
it has to assume	1
it has not been	1
it has an instruction	1
it has i instead	1
it has many advanced	1
it has allocated with	1
it has been called	1
it has been deallocated.	2
it has been brutally	1
it has done by	1
it has calculated in	1
it has chosen the	1
it has finished the	2
it has incomplete information	1
it only once. Example:	1
it point to the	1
it used to be.	1
it should be true.	1
it should save one	1
it into multiple threads,	1
it also makes the	1
it possible to use	2
it possible to do	1
it possible to compile	1
it possible to store	1
it possible to see	1
it possible to come	1
it possible for the	1
it takes to make	2
it takes to do	2
it takes to call	3
it takes to calculate	3
it takes to add	1
it takes to load	1
it takes to start	1
it takes to execute	2
it takes to transpose	1
it takes to install	2
it takes to recover	1
it takes to reload	2
it takes to develop	2
it takes to refresh	1
it takes more time	1
it takes only a	1
it takes before the	1
it takes too much	1
it takes six times	1
it takes 40% more	1
it takes hours to	1
it some heavy work	1
it so that it	1
it makes it possible	1
it makes program development	1
it makes no difference	1
it makes floating point	1
it makes sure the	1
it makes dispatching on	1
it makes sense to	1
it cannot be known	1
it cannot be shared.	1
it cannot access any	1
it cannot inline the	1
it cannot rule out	1
it less efficient. The	1
it often contains writeable	1
it often gives more	1
it does not spend	1
it does have some	1
it does some funny	1
it does not, and	1
it does incredibly stupid	1
it must return to	1
it work cannot be	1
it Use a "move	1
it doesn't have the	1
it doesn't have to	2
it doesn't need the	1
it doesn't need a	1
it doesn't work with	1
it doesn't work well	1
it doesn't generate any	1
it doesn't matter if	1
it doesn't depend on	1
it doesn't occur. In	1
it necessary to load	1
it works well on	1
it inside {} brackets.	1
it uses more clock	1
it would be even	1
it would be obvious	1
it count up to	1
it was executed. It	1
it was programmed. But	1
it was programmed. Therefore,	1
it was assigned previously	1
it allows the compiler	1
it allows larger floating	1
it needs to load	1
it needs to switch	1
it needs to follow	1
it needs an extra	1
it needs only calculate	1
it becomes invalid as	1
it becomes full. This	1
it requires the loading	1
it requires that the	1
it requires an extra	1
it actually is. This	1
it goes the other	1
it goes another way	1
it goes automatically when	1
it points to the	1
it points to is	1
it points to. A	1
it off and use	1
it gives more reliable	1
it comes to optimization,	1
it comes before the	1
it still uses a	1
it prevents the compiler	1
it prevents the use	1
it prevents certain optimizations.	1
it calls. The best	1
it calls. 48 Use	1
it rarely justifies the	1
it easier for the	2
it might be possible	1
it might not be	1
it checks which instruction	1
it checks whether the	1
it returns. But what	1
it writes only, then	1
it to. It is	1
it could free the	1
it involves the risk	1
it involves allocation of	1
it involves pure function	1
it had a different	1
it is. It is	1
it fits into a	1
it follows a simple	1
it defines electrical connections	1
it adds an extra	1
it gets from the	1
it jumps to. Example:	1
it avoids the branch	1
it is, and is	1
it is, but must	1
it appears to be	1
it opens the possibility	1
it takes. The version	1
it takes. Debugging. The	1
it explicitly. In example	1
it optimizes the code.	1
it occurs, but this	1
it occurs, (2) use	1
it allocates the required	1
it unusual that a	1
it took several minutes	1
it expects a GOT	1
it locally in the	1
it increases the amount	1
it handles eight elements	1
it obviously takes time	1
it decides whether to	1
it attempts to set	1
it sees a relative	1
it compares the array	1
it exits. For example,	1
it unwise to use	1
it uses. There are	1
it fills up the	1
it twice. You can	1
it lacks the self-explaining	1
it (&ArraySize) is taken.	1
it feeds a branch	1
it matters: Division by	1
it says. A code	1
it changes. A branch	1
it understands only the	1
it has. Assuming that	1
it supports. An inferior	1
it directly. The reason	1
function is a function	3
function is a few	1
function is by a	1
function is as fast	1
function is not accessed	1
function is not resolved	1
function is not allowed	1
function is not referenced	1
function is time consuming	1
function is also called	1
function is also available	1
function is so important	1
function is faster than	2
function is called a	1
function is called and	3
function is called for	1
function is called on	1
function is called through	1
function is less than	1
function is always inlined	1
function is available in	1
function is compiled in	1
function is big and	1
function is small or	1
function is advantageous if	1
function is doing multiple	1
function is never called.	2
function is usually called	1
function is usually inlined	1
function is called. The	1
function is called. This	2
function is called. If	1
function is called. You	1
function is called. I	1
function is called. Example:	1
function is called. Lazy	1
function is called. 118	1
function is replaced by	1
function is intended for	1
function is given in	1
function is OS independent	1
function is needed. Example:	1
function is defined in	2
function is pure if	1
function is pure __attribute((	1
function is called, a	1
function is called, it	2
function is called, while	1
function is simpler than	1
function is inlined. An	1
function is big. The	1
function is pure. Virtual	1
function is inserted in	1
function is InstructionSet().The following	1
function is 83 called	1
function is expanded like	1
function a = CriticalFunction(b,	1
function a different name	1
function a member of	2
function a constructor for	1
function of the loop	1
function of the Intel	1
function of the absolute	1
function of a loop	2
function of i which	1
function of 2 double	1
function of 4 floats	1
function to be inlined	1
function to be pure.	1
function to use and	1
function to test //	1
function to work with	1
function to measure the	1
function to transpose and	2
function to transpose matrix	1
function to another. These	1
function and the function	1
function and to optimize	1
function and you want	1
function and branch is	1
function and these two	1
function and calculate it	1
function and later deleted	1
function and replaces the	1
function in the main	1
function in a library	1
function in a dynamic	2
function in a shared	2
function in a DLL	1
function in which the	1
function in which they	2
function in which alloca	1
function in Intel function	1
function in system code	1
function in case of	1
function in case F2	1
function in terms of	1
function in isolation have	1
function for the next	1
function for the sake	1
function for a particular	1
function for this purpose,	1
function for different Intel	1
function for each different	1
function for register storage.	1
function for CPUs with	1
function that is used	1
function that is member	1
function that is called	1
function that is longer	1
function that has no	1
function that I have	1
function that does the	1
function that calls at	1
function that calls other	1
function that doesn't call	2
function that doesn't add	1
function that simply prints	1
function that needs to	1
function that needs them.	1
function that reads or	1
function that allocates memory	1
function that draws a	1
function that detects an	1
function are stored on	2
function are called global	1
function are simply treated	1
function can be calculated	1
function can be turned	1
function can be inlined.	1
function can use for	1
function can modify x	1
function can modify x,	1
function can throw. In	1
function // Function pointer	1
function // Call to	1
function or in a	1
function or by turning	1
function or class is	1
function or class that	1
function or class into	1
function or class separately	1
function or variable is	1
function or variable having	1
function or method should	1
function or every code	1
function or operator that	1
function or hot spot	1
function or otherwise optimize	1
function or friend function	1
function if the inlining	1
function if it is	1
function by inlining all	2
function by adding throw()	1
function with the same	2
function with a pointer	1
function with a lookup	1
function on a thousand	1
function on CPUs with	1
function code is not	1
function as described below.	1
function may be the	1
function may be called	1
function may return an	1
function when the exponent	2
function will be called,	1
function will most likely	1
function will return the	1
function will wait until	1
function } }; //	1
function then the dispatch	1
function from the library	1
function from www.agner.org/optimize/asmlib.zip. //	1
function at runtime. Polymorphism	1
function has only a	1
function has only one	1
function because the compiler	1
function because the stack	1
function because it doesn't	2
function because this may	1
function which in turn	1
function which then calls	1
function which we assume	1
function which cannot be	1
function which returns a	1
function which transposes a	1
function but outside the	1
function should also be	1
function should preferably be	1
function should never use	1
function should never return	1
function using assembly language.	1
function pointer is the	1
function pointer is simply	1
function pointer a =	1
function pointer to the	2
function pointer and makes	1
function pointer if else	1
function pointer has changed	1
function pointer has changed.	1
function pointer which initially	1
function pointer typically takes	1
function pointer points to.	1
function pointer follows a	1
function into a leaf	1
function into multiple smaller	1
function library and the	1
function library and you	1
function library for a	1
function library that has	1
function library that takes	1
function library that works	1
function library or a	1
function library with a	2
function library with CPU	1
function library then make	1
function library at www.agner.org/optimize/asmlib.zip.	1
function library at www.agner.org/optimize/asmlib.zip	1
function library made for	1
function library asmlib, which	1
function also has something	1
function such as ReadB	1
function In some cases,	1
function where you want	1
function many times with	1
function version // Get	1
function version CriticalFunctionType *	1
function we want to	1
function so that it	1
function return a pointer	1
function return addresses (i.e.	1
function return value. The	1
function cannot be called	1
function cannot access any	1
function cannot rely on	1
function cannot modify data	1
function called only from	2
function address in the	1
function call is translated	1
function call to a	1
function call to count	1
function call if it	1
function call by the	1
function call with a	1
function call so that	1
function call makes the	1
function call inline void	1
function call statement always	1
function call statement occupies	1
function call (other than	1
function libraries is more	1
function libraries and drivers	1
function libraries and compiler-generated	1
function libraries in this	1
function libraries for many	1
function libraries for computing	1
function libraries that are	2
function libraries are not	1
function libraries are useful	1
function libraries are available	1
function libraries are discussed	1
function libraries are highly	2
function libraries with internal	1
function libraries have CPU	1
function libraries have features	1
function libraries do not	1
function libraries available use	1
function libraries Some applications	1
function libraries available. The	1
function libraries distributed as	1
function libraries Test Processor	1
function libraries published by	1
function template because partial	1
function pointers if there	2
function pointers It is	1
function they are used	1
function type and its	1
function type with desired	1
function type typedef void	1
function does not throw	1
function must then check	1
function must check if	1
function calls is the	1
function calls to check	1
function calls and it	2
function calls in the	4
function calls are saved	1
function calls can be	1
function calls may run	1
function calls more efficient.	1
function calls because the	1
function calls faster and	1
function calls faster in	1
function calls another dispatched	1
function through a function	1
function through a pointer	1
function through function pointer	1
function uses by looking	1
function uses logarithms in	1
function parameters to be	1
function parameters are transferred	1
function parameters because of	1
function was called from),	1
function name is not	1
function name ; start	1
function name depending on	1
function name Instruction set	1
function name ;startofFunc ;	1
function parameter is that	1
function parameter and a	1
function means that it	1
function instead of a	1
function dispatch mechanism is	1
function dispatch process. This	1
function calling more efficient	1
function calling method in	1
function calling conventions are	1
function calling conventions. FreeBSD	1
function goes in the	1
function feature is used	1
function just because it	1
function #define MAX(a,b) (a	1
function go to the	1
function relative to the	1
function inlining is that	1
function inlining is done	1
function inlining and constant	1
function inlining are: The	1
function #pragma optimize(...) Fastcall	1
function calls. The Gnu	1
function calls. The calculation	1
function calls. The principle	1
function calls. The consequence	1
function calls. It is	1
function calls. If the	1
function calls. There are	1
function calls. Example: //	1
function calls. Unfortunately, the	1
function calls. Internal references	1
function library. The radical	1
function library. If the	1
function library. 78 Therefore,	1
function libraries. C++ is	1
function libraries. Use Gnu	1
function libraries. Several special	1
function libraries. Numbers in	1
function names and code	1
function names and variable	2
function names in the	1
function names are not	1
function directly if the	1
function modify an existing	1
function F1 is supposed	1
function returns. The next	1
function returns. The preferred	1
function returns. This is	1
function returns. There is	1
function returns. Make the	1
function returns. Alternatively, you	1
function returns. alloca may	1
function returns. Global or	1
function returns. Every time	1
function writes to matrix	1
function stores the thousand	1
function stores a double	1
function could be a	1
function parameter. But it	1
function body inside the	1
function call. Load library	1
function call. Algebraic reduction	1
function call. (2) find	1
function __fastcall __attribute(( fastcall))	1
function names. But a	1
function 250 times with	1
function library, but this	1
function adds the elements	1
function returns even though	1
function _mm256_zeroupper() before any	1
function opens a file	1
function parameters, local variables,	1
function parameters, pointers, references,	1
function libraries, but who	1
function parameter, or as	1
function looks like this:	1
function scans a string	1
function definition. This tells	1
function longjmp is used	1
function ReadTSC listed below	1
function F2 that can	1
function argument to be	1
function implicitly when copying	1
function Size of each	1
function inline. This may	1
function inline. Replacing a	1
function ten times and	1
function construct an object	1
function prototype to tell	1
function declaration. This is	1
function decides which function	1
function swapd(a[r][c], a[c][r]); void	1
function body. A function	1
function libraries........................................................................................ 12 2.7	1
function local: 1. Add	1
function __intel_cpu_features_init_x() does the	1
function calls, if there	1
function inlining, common subexpression	1
function prototype: void F1()	1
function billions of times	1
function rounds a floating	1
function F1. However, if	1
function add_horizontal) static inline	1
function prototypes for each	1
function bodies above, it	1
function (n!) as an	1
function __intel_cpu_features_init() sets the	1
function vectorized: void SelectAddMul(short	1
function inlining. Reducible expressions	1
function tables. The static	1
function scanf. Violation of	1
function calling. __fastcall or	1
if the function is	3
if the function has	1
if the code is	3
if the code can	1
if the code contains	1
if the code involves	1
if the compiler does	1
if the compiler doesn't	1
if the time slices	1
if the data are	3
if the data fit	1
if the program is	2
if the program uses	2
if the program had	1
if the program runs	1
if the same operation	1
if the CPU clock	1
if the loop is	2
if the loop counter	1
if the loop count	2
if the loop control	1
if the loop body	1
if the integer is	1
if the class of	1
if the most time-consuming	1
if the size is	1
if the size of	2
if the size parameter	2
if the library is	1
if the object is	1
if the object can	1
if the object doesn't	1
if the number of	4
if the array or	1
if the array element	1
if the clock frequency	1
if the value of	5
if the objects are	1
if the objects stored	1
if the variable is	1
if the table is	1
if the software contains	1
if the branch is	1
if the member function	1
if the elements are	1
if the elements matrix[r][c]	1
if the address can	1
if the critical part	1
if the critical innermost	1
if the first operand	2
if the template parameters	1
if the new version	1
if the user has	2
if the user never	1
if the SSE2 instruction	2
if the following conditions	1
if the type T	1
if the case labels	1
if the constant is	1
if the processor is	2
if the processor has	1
if the threads are	1
if the threads use	1
if the threads write	1
if the threads share	1
if the necessary library	1
if the AVX instruction	1
if the AVX 32	1
if the calculation time	1
if the uses of	1
if the problem is	1
if the list is	1
if the inline keyword	1
if the branches are	1
if the application can	1
if the application has	1
if the expression contains	1
if the conversion to	1
if the parameter has	1
if the source is	1
if the cost of	1
if the programmer has	1
if the results are	1
if the operands are	2
if the operands have	1
if the index is	1
if the inlining causes	1
if the network is	1
if the network or	1
if the constants Sunday,	1
if the destructor causes	1
if the repeat count	2
if the offset of	1
if the full generality	1
if the RAM size	1
if the rows are	2
if the handle is	1
if the target address	1
if the target pointed	1
if the subexpression c+b	1
if the condition is	1
if the condition can	1
if the SSE4.1 instruction	1
if the sequence of	1
if the length of	1
if the current version	1
if the typical repeat	1
if the prediction turns	1
if the inputs have	1
if the changes of	1
if the dispatched function	1
if the 7 program	1
if the bottleneck is	1
if the image base	1
if the distance between	1
if the dividend is	2
if the goal of	1
if the unsafe code	1
if the time-critical part	1
if the evaluation of	1
if the bias of	1
if is resolved at	1
if a is true.	1
if a is false.	1
if a and b	4
if a program has	2
if a program creates	1
if a loop repeats	1
if a floating point	1
if a simple algorithm	1
if a large fraction	1
if a thread jumps	1
if a matrix is	1
if a certain modification	1
if a was zero	1
if a lot of	1
if a high degree	1
if a parameter is	1
if a piece of	1
if a reasonable estimate	1
if and compile-time while	1
if it is a	2
if it is not	3
if it is an	1
if it is only	1
if it is possible	1
if it is stored	2
if it is called	2
if it is short	1
if it is accessed	1
if it is small	1
if it is good	2
if it is done	1
if it is inside	1
if it is known	2
if it is certain	1
if it is independent	1
if it is correlated	1
if it is cached,	1
if it can save	1
if it has the	1
if it has an	1
if it has been	1
if it has incomplete	1
if it cannot be	1
if it involves allocation	1
if it had a	1
if it is. It	1
if it follows a	1
if it opens the	1
if an int uses	1
if an array index	1
if an exception occurs	2
if an overflow or	1
if you are not	1
if you are using	1
if you are sure	4
if you are making	1
if you are doing	1
if you are satisfied	1
if you can use	1
if you can take	1
if you can avoid	1
if you have big	2
if you cannot find	1
if you take into	1
if you want to	5
if you avoid the	1
if you write a	1
if you don't want	1
if you don't understand	1
if you look at	1
if you change pre-increment	1
if you expect the	1
if you had used	1
if you declare an	1
if you follow the	1
if you forget to	1
if this is possible	1
if this is obvious,	1
if this can eliminate	1
if this prevents a	1
if this appears to	1
if time intervals are	1
if memory access is	1
if data are scattered	1
if data access can	1
if different versions have	1
if because #if is	1
if functions that are	1
if functions have more	1
if only you make	1
if other nearby parts	1
if instruction sets are	1
if all the additions	1
if all the inputs	1
if all the factors	1
if all of the	1
if all functions called	1
if all bits except	1
if one is 0	1
if no other threads	1
if no other modules	1
if no exception ever	1
if each bit of	1
if each addition depends	1
if pointer arithmetic calculations	1
if b is an	3
if b and c	1
if i < 100.	1
if multiple threads are	1
if multiple threads can	1
if static linking is	1
if there is a	2
if there is more	1
if there is only	1
if there is other	1
if there is no	4
if there is something	1
if there is nothing	1
if there are no	1
if there are many	5
if there are specific	1
if there are allocated	1
if there are wrapper	1
if such a response	1
if such dependency chains	1
if possible and by	1
if any of the	1
if any objects declared	1
if we use hexadecimal	1
if we want to	2
if we change the	1
if we specify the	1
if branch is eliminated.	1
if branch in example	1
if elements have a	1
if elements have no	1
if unsigned The same	1
if unsigned // Faster	2
if unsigned You can	1
if pointers are type-casted	1
if they are often	1
if they are sure	1
if they are members	1
if they are never	1
if they are predicted	1
if they are uninitialized	1
if they are uninitialized,	1
if they don't need	1
if they come from	1
if they otherwise would	1
if SSE2 is available:	1
if out of range	1
if dynamic linking is	1
if I write that	1
if its address is	1
if its body is	1
if speed is important.	1
if c < 0.	1
if a, b, c	1
if AVX is supported	1
if implemented on other	1
if (i < 0	1
if (i < ARRAYSIZE	1
if (i >= min	1
if (i >= N)	1
if (i % 2	1
if supported by the	2
if certain options are	1
if certain conditions are	1
if intermediate calculations can	1
if above doesn't work	1
if above line doesn't	1
if both are negative	1
if both positive }	1
if else if else	2
if else { (iset	1
if their live-ranges do	1
if your optimization effort	1
if your modifications actually	1
if XMM registers are	2
if statement and all	1
if statement in this	1
if level-2 cache contentions	1
if possible. The AVX	1
if possible. This also	1
if possible. See page	1
if possible. SSE2 is	1
if possible. Use inline	1
if possible. Don't rely	1
if possible. Smaller microprocessors	1
if true ; unused	1
if N is a	1
if condition can be	1
if statements (called static	1
if F1 has saved	1
if F1 calls another	1
if alternative implementations are	1
if organized as follows:	1
if available. See page	1
if required for performance	1
if (b) { a	4
if (b) { return	1
if (b) { y	2
if exceptions can be	1
if (a * c	1
if (a > b	1
if (a == 0)	1
if (a != 0)	1
if possible, and make	1
if possible, and avoid	1
if possible, and replaced	1
if possible, or the	1
if possible, so that	1
if portability is important.	1
if protection against overflow	1
if ((unsigned int)i <	1
if ((unsigned int)i >=	1
if ((unsigned int)n <	2
if ((unsigned int)(i -	1
if nonzero and normal	1
if nonzero u.i +=	1
if pieces of data	1
if b[i] and c[i]	1
if divisor is a	2
if (u.i * 2	1
if (u.i & 0x7FFFFFFF)	2
if (u.i > v.i)	1
if powN is //	1
if unsigned. This typically	1
if (n & 1)	1
if (n > 0)	1
if (b == 0)	1
if (b != 0)	1
if (level >= 4)	2
if (level >= 11)	2
if necessary, to fit	1
if necessary, by using	1
if necessary, each compiled	1
if (Day & (Tuesday	1
if (Day == Tuesday	1
if (y) { int	1
if (y) { F1(a);	1
if appropriate. 8. Avoid	1
if any, is usually	1
if any, must be	1
if (handle != INVALID_HANDLE_VALUE	1
if (true) { a	1
if (absvalue > largest_abs)	1
if (u.i[1] < 0)	1
if (SIZE > 256	1
if our estimate is	1
by the function body.	1
by the code inside	1
by the compiler to	1
by the compiler in	1
by the compiler you	1
by the compiler have	1
by the use of	3
by the memory page	1
by the program logic.	1
by the vector size	3
by the same constant.	1
by the CPU and	2
by the loop control	1
by the cache line	2
by the floating point	1
by the size of	2
by the size (in	1
by the Intel and	1
by the number of	2
by the clock period	1
by the value 1000.	1
by the branch prediction	1
by the critical code	1
by the operating system	2
by the operating system.	1
by the operating system,	1
by the test program	1
by the following example:	1
by the Gnu utilities	1
by the processor and	1
by the calculated result.	1
by the program. The	1
by the microprocessor and	1
by the application program.	1
by the methods described	1
by the constructor itself.	1
by the compiler. We	1
by the compiler. On	1
by the unroll factor.	3
by the processing power.	1
by the heap manager	1
by the program, and	1
by the program, one	1
by the compiler, you	1
by the user. Feature	1
by the Gnu, Clang,	1
by the body of	1
by the linker to	1
by the linker and	1
by the throughput of	1
by the requirements of	2
by the rest of	1
by the latency of	1
by the latency or	1
by the 107 number	1
by the loader to	1
by the programmer. 79	1
by the caller through	1
by the formula: (set)	1
by the application, while	1
by the series: ex	1
by is (columns *	1
by a float variable.	1
by a multiple of	2
by a variable because	1
by a variable until	1
by a table with	1
by a table lookup.	1
by a table lookup:	2
by a const reference.	1
by a system call	1
by a constant is	6
by a constant can	1
by a constant with	1
by a constant should	1
by a single &	1
by a single comparison:	1
by a power of	3
by a list should	1
by a second induction	1
by a shift operation	1
by a variable. Make	1
by a factor of	1
by a factor 4	1
by a macro, but	1
by a blend instruction	1
by a key? If	1
by a conditional move,	1
by a plain old	1
by a unique key.	1
by a constant: Unsigned	1
by // Example 8.5b	1
by // Example 14.15b	1
by // Example 8.2b	1
by // Example 8.3b	1
by // Example 8.6b	1
by // Example 8.8b	1
by not using position-independent	1
by - reciprocal n.a.	1
by an induction variable	1
by an induction variable.	1
by an executable file	1
by an interrupt should	1
by an EMMS instruction	1
by compiler There are	1
by compiler ....................................................................... 77	1
by more than 33%	1
by more efficient container	1
by memory access. The	1
by at least the	1
by vector size. Unpredictable	1
by only 50% or	1
by CPU Modern CPUs	1
by CPU brand. The	1
by other constants because	1
by all other processes	1
by all means avoid	1
by all modern CPUs.	1
by one function and	1
by one makes the	1
by cache line size	1
by each thread. Pointers	1
by most CPUs and	1
by using the keyword	3
by using the |	1
by using the so-called	2
by using the bitwise	1
by using the declaration	1
by using the smallest	1
by using the directive	1
by using a compiler	1
by using a different	1
by using a 64-bit	1
by using a constant	1
by using a particular	1
by using a lookup	1
by using a shift	1
by using a pipeline	1
by using function inlining,	1
by using an inline	1
by using vector operations	1
by using different types	1
by using only the	1
by using one or	1
by using static linking	1
by using short int	1
by using assembly language	1
by using intrinsic functions	1
by using vectors if	1
by using references instead	1
by using nontemporal writes.	1
by using rounding instead	1
by using indexes, working	1
by using memset: //	1
by Intel have similar	1
by Intel but is	1
by multiple threads should	1
by multiple threads Parallelization	1
by two and making	1
by two then there	1
by two gives: //	1
by many users in	1
by value in most	1
by any of these	1
by any other form	1
by any other modules.	2
by some very good	1
by some formula into	1
by 2 in example	1
by 2 ; add	1
by 2 (See page	1
by 4 float a[100];	1
by 4 ; mangled	1
by 8 in order	1
by 8 rather than	1
by template template <typename	1
by pointers or references.	1
by 16 is required.	1
by 16 to fit	1
by 16 for SSE2,	1
by 16 float Exp(float	1
by 16 (see below).	1
by 16 __declspec( align(16))	1
by 32 and the	1
by constant = shift	1
by constant = multiply	3
by making the code	1
by making the data	1
by making the most	1
by making the constant	1
by making the full	1
by making a and	1
by making a common	1
by making an additional	1
by making i an	1
by making objects inside	1
by making critical functions	1
by making sure that	1
by making another function	1
by making longer time	1
by making them static	1
by its value at	1
by calls to memset	1
by element 0 in	1
by several different functions	1
by exception handlers for	1
by line when it	1
by another function and	1
by another thread void	1
by another thread. This	1
by another thread. If	1
by eight to fit	4
by doing the heavy	1
by optimizing the first	1
by optimizing database access.	1
by both the CPU	1
by preferably using powers	1
by their address and	1
by their values before	1
by their index or	1
by their actual values	1
by n and reorganize	1
by n additions and	1
by better standardization of	1
by means of #include	2
by calling the intrinsic	1
by calling vector::reserve with	1
by calling WritePrivateProfileString, which	1
by piece in a	1
by r is re-loaded	1
by storage on the	1
by my comments, in	1
by columns in this	1
by p is identical	1
by consecutive indices or	1
by inlining the frame	1
by inlining the latter	1
by inlining all the	2
by 2. The compiler	1
by 2. The instruction	1
by 2. (See page	1
by including the library	1
by checking if b[i]	1
by testing and analyzing	1
by testing all bits	1
by 100 so that	1
by copying the code	1
by copying the return	1
by copying the entire	1
by copying all data	1
by copying them into	1
by adding the length	1
by adding a constant	2
by adding an integer	1
by adding one more	1
by adding n to	1
by adding throw() to	1
by compiling the module	1
by compiling in two	1
by unrolling the loop	2
by F1 also have	1
by setting the sign	1
by setting the fraction	1
by setting a thread	1
by setting pointers to	1
by setting these variables	1
by default in 64-bit	1
by default unless there	1
by default anyway in	1
by *p or p->member	1
by Microsoft, Intel, PathScale	1
by OpenMP directives 32	1
by multiplying with the	1
by random events that	1
by executing instructions out	1
by storing the elements	1
by storing intermediate results	1
by 16. This is	1
by 16. In example	1
by 16. You can	1
by 16. Library versions	1
by 16. Alignment of	1
by giving it some	1
by Agner Fog. Public	1
by Agner Fog The	1
by specifying the type	1
by comparing bits 32-62.	1
by comparing them as	1
by avoiding the virtual	1
by avoiding pointer arithmetics	1
by avoiding any public	1
by type-casting i to	1
by type-casting its 'this'	1
by type-casting its address:	1
by physical factors. The	1
by unacceptably long response	1
by increasing the thread	1
by 16, i.e. stored	2
by 8. The size	1
by 8. The number	1
by 8. There are	1
by 8. 71 The	1
by itself. But a	1
by turning the frame	1
by turning off the	2
by one, into an	1
by declaring the function	1
by declaring the table	1
by declaring it inside	1
by defining a container	1
by defining _mm_malloc and	1
by choosing the best	1
by choosing a programming	1
by modifications of the	1
by transferring 'this' in	1
by default, which makes	1
by default, so 1.2	1
by default, even when	1
by default, conform to	1
by 2n by adding	1
by 2n by subtracting	1
by individual installation tools.	1
by unit-testing is unfortunately	1
by me manually, but	1
by changing the dividend	1
by changing this to:	1
by considerations such as	1
by reordering the data	1
by well-tested container classes.	1
by step. In most	1
by 64, but the	1
by bypassing the so-called	1
by F2 and call	1
by organizing the data	1
by measuring the time	1
by returning a null	1
by joining the operations:	1
by joining a and	1
by joining identical pieces	1
by modifying only half	1
by four, we will	1
by rolling out the	2
by invoking the compiler	1
by putting the smallest	1
by TILESIZE // Loop	1
by S. Goedecker and	1
by __fastcall. The implicit	1
by looking at a	1
by default. This is	1
by default. Position-independent code	1
by consistent modularity and	1
by performing an illegal	1
by extending the sign-bit	1
by extending with zero-bits	1
by subtracting n from	1
by 3, 5 and	1
by replacing a function	1
by replacing an integer	1
by removing the call	1
by assigning a new	1
by writing: 103 //	1
by writing: __declspec(align(64)) int	1
by ignoring the higher	1
by (partial) template specialization.	1
by x<<3, which is	1
by assignment, as a	1
by assignment. shared_ptr allows	1
by u[0]. 14.10 Mathematical	1
by requesting a map	1
by emulating the so-called	1
by controlling the order	1
by inverting the sign	1
by initializing pointers to	1
by dropping the graphical	1
by keys within a	1
by commas. There should	1
by hand and insert	1
by constructing the object	1
by wrapping the vectors	1
by summing up the	1
by selecting optimize performance	1
by fetching, decoding and	1
by causing return addresses	1
by XOR'ing it with	1
by semicolons, while multiple	1
by AND'ing it with	1
by CPU.............................................................................81 8.5 Compiler	1
by xx-xx--x- reciprocal Boolean	1
by allowing two data	1
by 5-10% for some	1
by thousands of people.	1
with the function ReadTSC	1
with the time it	1
with the time stamp	1
with the use of	2
with the same precision	1
with the same source	1
with the same priority	2
with the same name.	1
with the same arguments	1
with the same template.	1
with the same divisor.	1
with the functions malloc	1
with the functions lrintf	1
with the other compilers).	1
with the double precision	1
with the Intel C++	1
with the pointer it	1
with the static modifier	1
with the static keyword,	1
with the C++ language	1
with the value 0	1
with the performance of	1
with the way a	1
with the operating system	1
with the & operator;	1
with the constant 2.5,	1
with the Gnu compiler	1
with the Gnu compiler.	1
with the best compiler	1
with the option -fpic	1
with the option -fno-pic	1
with the option -fpie	1
with the option -mveclibabi=acml.	1
with the option -ftrapv,	1
with the option -read_only_relocs	1
with the option -mveclibabi=svml.	1
with the calculated value.	1
with the four R	1
with the operators new	1
with the sign bit	1
with the problems of	1
with the last index	1
with the appropriate instruction	1
with the SSE and	1
with the loops if	1
with the compiler, and	1
with the beginning of	1
with the current instruction	1
with the Gnu, Clang	1
with the Borland C++	1
with the expected real-time	1
with the application. The	1
with the ^ operator.	1
with the requirements of	1
with the ever bigger	1
with the bit-mask: c2	1
with the highest instruction	1
with the resolution of	1
with the correct result	1
with the AVX-512 instruction	1
with the inverted bit-mask:	1
with the inverted mask.	1
with the LLVM is	1
with the sizeof operator.	1
with the rightmost 1-bit	1
with the reciprocal: //	1
with a different compiler	1
with a different compiler.	1
with a pointer or	1
with a table lookup	1
with a very large	1
with a very low	1
with a 32-bit (signed)	1
with a branch inside	1
with a 64 64	1
with a & b	1
with a simple index.	1
with a constant (see	1
with a single call	1
with a small and	1
with a line size	2
with a well optimized	1
with a lot of	1
with a high repeat	1
with a better version	1
with a lookup table	1
with a | b	1
with a graphics coprocessor	1
with a higher instruction	1
with a higher number	1
with a relative difference	1
with a profiler which	1
with a slow bit	1
with a slow CPU,	1
with a special trick	1
with a shift operation,	1
with a destructor that	1
with a total offset	1
with a square brackets	1
with a little more	1
with a default constructor	1
with a fully compiled	1
with a prediction or	1
with a suitable set	1
with a suitable choice	1
with a constant. The	1
with a remote database,	1
with a realistic set	2
with a well-defined interface	1
with a well-defined functionality	1
with a combination of	1
with a micro-op cache	1
with a debugger. You	1
with a decimal point	1
with a top-of-stack index.	1
with a wealth of	1
with a 50-50 chance	1
with a password. The	1
with a lineage of	1
with a non-recursing template	1
with and without AVX	2
with in a particular	1
with in assembly language.	1
with that branch. The	1
with or without the	1
with code compiled without	1
with an error code	1
with an inline assembly	1
with an intermediate code	1
with an Intel, AMD	1
with an index of	1
with an offset that	1
with an example. My	1
with an extended number	1
with this code is	1
with this instruction set?".	1
with this problem: 1.	1
with this rule. Splitting	1
with this mask, and	1
with more RAM than	1
with more heuristic guidelines.	1
with memory access. 12	1
with vector integer operations,	1
with vector operations when	1
with vector classes Agner's	1
with vector parameters Vec4f	1
with vector access. 12.9	1
with vector operands: minimum,	1
with different set values	1
with different compilers then	1
with different versions of	1
with different matrix sizes.	1
with different compilers. Dispatch	1
with different brands of	1
with different strides. Therefore,	1
with different priorities then	1
with only the SSE2	1
with only one CPU	1
with only one logical	1
with only four multiplications.	1
with CPU dispatching. Add	1
with CPU dispatching, then	1
with other compilers or	1
with other compilers at	1
with other objects on	1
with other calculations to	1
with other compilers. This	1
with other local variables	1
with other microprocessors. Many	1
with other subtasks is	1
with all the relevant	1
with all the R	1
with all CPUs that	1
with all compilers. Use	1
with all x86 platforms.	2
with all relevant optimization	3
with all 0's gives	1
with all 1's is	1
with integer parameters. Floating	1
with floating point code.	1
with floating point multiplication,	1
with floating point numbers:	1
with each their smart	1
with each instance of	1
with compilers and development	1
with most modern C++	1
with most distributions of	1
with Intel C++ compiler,	1
with Intel processors. A	1
with multiple memory blocks	1
with multiple CPU cores	1
with multiple CPUs or	1
with multiple overloaded operators	1
with multiple cores are	1
with multiple cores. 3.15	1
with multiple counters, as	1
with two decimals, for	1
with two entries. This	1
with many of the	1
with many function calls	1
with many function calls.	1
with many different factors	1
with many such programs	1
with many branches and	1
with many Boolean expressions.	1
with many instances makes	1
with many features, but	1
with many labels that	1
with many decimals. It	1
with any function or	1
with any type of	1
with some of the	1
with some changes for	1
with some legacy software.	1
with long double precision.	1
with long latencies. 8.5	1
with branch // Loop	1
with branch void SelectAddMul(short	1
with member pointers and	1
with member functions, where	1
with unsigned integers is	1
with unsigned integers (see	1
with 64 bits, but	1
with template metaprogramming. Don't	1
with template metaprogramming, but	1
with pointers that are	1
with new and return	1
with new and delete	1
with new and delete,	2
with new or malloc	1
with new or malloc.	1
with SSE2 #include <emmintrin.h>	1
with system calls (e.g.	1
with dynamic memory allocation.	1
with short or common	1
with making software in	1
with its value. However,	1
with its limit, etc.	1
with CPUs that are	1
with large data sets.	1
with execution units same	1
with execution units smaller	1
with element matrix[c][r] at	1
with element matrix[c][r]. //	1
with single or double	1
with virtual functions class	1
with virtual member functions.	1
with option -fpie because	1
with option -fwrapv or	1
with option -Wstrict-overflow=2, or	1
with AVX support and	1
with AVX support calls	1
with line 29. Each	1
with four numbers at	1
with four cores can	1
with another vector register	1
with another dynamic library	1
with another thread will	1
with another compiler. 2.6	1
with few or no	1
with 1 for the	1
with sign bit set).	1
with both static and	1
with programs written in	1
with sets rather than	1
with members of mixed	1
with Boolean variables as	1
with intrinsic functions for	1
with signed than with	1
with Microsoft or Gnu	1
with Microsoft compiler. Some	1
with automatic CPU dispatching	1
with automatic CPU dispatching.	2
with automatic vectorization. The	1
with induction variables const	1
with induction variables. It	1
with end of array	1
with old CPUs is	1
with old microprocessors that	1
with old microprocessors without	1
with old CPUs. The	1
with just two additions	1
with #define is certain	1
with C or C++	1
with C functions such	1
with Windows, Linux, BSD	1
with network access to	1
with slow bit scan	1
with desired parameters typedef	1
with out-of-order capabilities are	1
with out-of-order capabilities can	1
with out-of-order capabilities (see	1
with limited resources. Most	1
with preceding branches and	1
with non-Intel CPUs. Includes	1
with alignment problem void	1
with 100 and jumps	1
with 100 in the	1
with reduced speed or	1
with accessing 32 bits	1
with 16-bit programs. It	1
with full debugging support	1
with N elements of	1
with little or no	1
with bitwise operators using	1
with bounds checking and	1
with bounds checking template	1
with bounds checking, as	1
with reading the value	1
with references. You can	1
with SSE4.1 // Function	1
with templates // Place	1
with templates instead of	1
with invalid pointers can	1
with destructors to take	1
with low power consumption	1
with low priority. In	1
with Microsoft, Intel and	1
with lower priority than	1
with lower priority. If	1
with heavy traffic and	1
with profiling support. Then	1
with j << 5.	1
with fixed size to	1
with fixed size, not	1
with fixed strides. Uncached	1
with non-sequential access and	1
with -fpic and it	1
with hardly any loss	1
with profilers are: Coarse	1
with compile-time polymorphism. It	1
with Intel's compilers and	1
with normal writes or	1
with column 28 above	1
with embedded microcontrollers. I	1
with internal multi-threading, e.g.	1
with CISC instruction sets	1
with contiguous memory. See	1
with macros is that	1
with older microprocessors is	1
with 1: // Example	1
with structured exception handling.	1
with pointers. The advantages	1
with 2n -1. The	1
with existing systems and	1
with sequential labels is	1
with fine-grained parallelism because	1
with earlier CPUs. The	1
with big-endian storage. Example	1
with big-endian storage. All	1
with big-endian storage. Optimizing	1
with character arrays. Strings	1
with external libraries. www.agner.org/optimize/#vectorclass	1
with 14.14b automatically but	1
with suffixes such as	1
with coarse-grained parallelism than	1
with debugging. A debugger	1
with millisecond resolution and	1
with alloca. This is	1
with Gnu. It is	1
with lots of data.	1
with legacy code, specific	1
with certainty that the	1
with certainty which version	1
with interpretation. The program	1
with x87 style floating	1
with -mcmodel=large, but this	1
with C++0x support. Make	1
with segmented memory, such	1
with _mm. These functions	1
with real time applications.	1
with zero-bits if unsigned.	1
with enum, const, or	1
with First-In-First-Out or First-In-Last-Out	1
with profiling, but it	1
with carry) instructions where	1
with full-size execution units.	1
with alloca: // Example	1
with alloca, because it	1
with #) are costless	1
with _finite()) and redo	1
with nagging pop-up messages	1
with double's. It is	1
with u.i[1] ^= 0x80000000;	1
with widely different priority	1
with IsPowerOf2 = false	1
with massively parallel vector	1
with truncation, and %	1
with these. The CodeGear,	1
on the compiler to	1
on the compiler bypassing	1
on the time consuming	1
on the same machine.	1
on the same computer,	1
on the CPU family	1
on the other hand,	1
on the size and	1
on the Intel compiler	1
on the object file	1
on the number of	1
on the value that	1
on the way the	1
on the first sub-vector.	1
on the user interface	1
on the type of	1
on the processors that	1
on the available instruction	1
on the stack and	2
on the stack in	2
on the stack for	1
on the stack at	1
on the stack before	1
on the stack rather	1
on the stack always	1
on the stack (see	1
on the stack Variables	1
on the stack (three	1
on the work load.	1
on the calculations inside	1
on the execution time	1
on the result of	3
on the processor and	1
on the option for	1
on the standard PC	1
on the hardware platform	1
on the values of	1
on the intermediate expression	1
on the microprocessor hardware	1
on the next generation	1
on the Mac platform,	1
on the data. This	1
on the second sub-vector	1
on the x86 family	1
on the old Pentium	1
on the compiler. Some	1
on the advanced principles	1
on the costs of	1
on the preceding value	1
on the Pentium 4	1
on the efficiency of	1
on the variable. This	1
on the total execution	1
on the stack. This	2
on the stack. A	1
on the stack. Each	1
on the stack. String	1
on the PathScale and	1
on the previous one.	1
on the CPU. Unrolling	1
on the device itself	1
on the hard disk.	1
on the system, as	1
on the CPUID information	1
on the processor. This	1
on the processor. Nested	2
on the newest CPU	2
on the newest processors.	1
on the strict aliasing	1
on the actual processor.	1
on the assumption that	1
on the stack, which	2
on the stack, except	1
on the Internet where	1
on the specified instruction	1
on the microprocessor. Integer	1
on the microprocessor. Multiplication	1
on the past history	1
on the context. The	1
on the screen. However,	1
on the market. But	1
on the market. Such	1
on the processor). Integer	1
on the processor). Optimizing	1
on the stack). ecx	1
on the processor) when	1
on the essential task	1
on is the feature	1
on a program saying	1
on a CPU with	1
on a variable which	1
on a 2 GHz	1
on a system with	1
on a Linux compiler,	1
on a store operation	1
on a particular processor	1
on a particular subtask	1
on a graphics card	1
on a graphics accelerator	1
on a platform with	1
on a modern CPU.	1
on a network with	1
on a Pentium 4	3
on a Pentium 4.	1
on a non-Intel CPU.	1
on a sequence of	1
on a hard disk	2
on a typical set	1
on a PC and	1
on a PC platform.	1
on a thousand numbers.	1
on a complex framework	1
on a computer. Security	1
on a command line	1
on a unit-test without	1
on a First-In-Last- Out	1
on a First-In-First- Out	1
on and off. It	1
on that particular part.	1
on that variable. The	1
on function calls in	1
on with a password.	1
on code optimization Intel:	1
on an Intel CPU.	1
on an Intel processor.	1
on an object of	1
on an interpreter which	1
on compiler optimization than	1
on compiler optimization. en.wikipedia.org/wiki/Compiler_optimization.	1
on x so we	1
on this part of	1
on this option. This	1
on this option. 8.4	1
on this topic, see	1
on when objects can	1
on program performance. The	1
on different test examples.	1
on different processors. In	1
on different platforms, different	1
on only the most	1
on CPU dispatching and	1
on CPU efficiency then	1
on other platforms with	1
on instruction set #if	1
on which a code	1
on which it is	1
on which this code	1
on which instruction sets	1
on which imprecisions should	1
on all the compilers	1
on all data in	1
on all 64-bit CPUs	1
on all C++ compilers	1
on all elements of	1
on all compilers. Some	1
on all relevant options.	1
on all platforms and	1
on all sizes of	1
on all newer models	1
on all non-static member	1
on all brands of	1
on all major platforms.	1
on one computer is	1
on integer code. It	1
on integer expressions than	1
on integer expressions (except	1
on integer variables. 31	1
on page 8 below.	1
on page 16. If	1
on page 134 and	1
on page 146 below.	2
on page 164 below.	1
on page 136 and	1
on page 15. C++	1
on page 39 shows	1
on page 105. Floating	1
on page 93. Avoid	1
on page 93. 7.10	1
on page 26. Avoid	1
on page 122. The	1
on page 58 shows	1
on page 72. It	1
on page 72. You	1
on page 22. Avoid	1
on page 153. A	1
on page 107. A	1
on page 60. In	1
on page 62. If	1
on page 96. 14.5	1
on page 44. The	1
on page 134. The	1
on page 132. Unfortunately,	1
on page 87. This	1
on page 130. It	1
on page 158. This	1
on page 27. An	1
on floating point code	1
on floating point expressions.	2
on compilers that rely	1
on most other microprocessors.	1
on most processors (when	1
on most newer processors.	1
on most microprocessors. Multiplication	1
on using the optimization	1
on using the instructions	1
on using alloca. 9.7	1
on Intel compiler versions	1
on Intel processors. The	1
on Intel processors. Details	1
on Intel CPUs: use	1
on Intel CPU’s. Another	1
on Intel Atom processors,	1
on b can be	1
on multiple data elements	1
on static or global	1
on C++ Performance for	1
on C++ Performance". www.open-	1
on such systems than	1
on such processors requires	1
on such small devices	1
on such small devices,	1
on any brand of	1
on some processors that	1
on some systems. If	1
on some processors. On	1
on some microprocessors when	1
on variables in memory	1
on table lookup or	1
on very small loops	1
on software that is	1
on branch predictions in	1
on first call //	1
on first call method	1
on first call. The	1
on optimization of C++	3
on how to test	1
on how they are	1
on how well the	1
on how predictable the	1
on test theory. Advice	1
on these data. It	1
on instructions that use	1
on processors that were	2
on processors with a	1
on processors with this	1
on stack ; ecx	1
on its own CPU	1
on its final destination,	1
on its family and	1
on important work. The	1
on CPUs with a	1
on CPUs with full-size	1
on CPUs without the	1
on large data sets	1
on Windows platforms. The	1
on calculations inside the	1
on processor X?" rather	1
on big runtime frameworks,	1
on several different CPUs	1
on AMD and VIA	3
on AMD CPUs (See	1
on AMD CPUs. The	1
on AMD processors, but	1
on exception handling. 8.6	1
on small devices with	1
on overflow and underflow.	1
on Linux platforms, and	1
on another computer. The	1
on whether CriticalFunction is	1
on every call of	1
on every call method.	1
on every call. A	1
on hardware identification. Such	1
on certain Intel CPUs,	1
on intermediate code is	1
on intermediate code and	1
on Mac platform. Intel	1
on complicated criteria or	1
on signed and unsigned	1
on mathematical applications with	1
on what is most	1
on what instruction sets	1
on what fits best	2
on automatic vectorization. The	1
on automatic prefetching so	1
on n here because	1
on runtime dispatch to	1
on compilers. Several other	1
on bigger systems. The	1
on vectors of two	1
on vectors and matrixes.	1
on process is known	1
on process may take	1
on old operating systems	1
on advanced C++ programming,	1
on my own research,	1
on my study of	1
on network resources and	1
on network resources are	1
on Pentium 4 processors,	1
on non-Intel processors can	1
on non-Intel processors (see	1
on non-Intel CPUs was	1
on non-Intel CPUs unless	2
on non-Intel processors, as	1
on non-Intel machines? Possible	1
on non-Intel processors). It	1
on it. Instead of	1
on alignment and the	1
on until you turn	1
on performance. 7.18 Class	1
on access. Sequential forward	1
on access. Run multiple	1
on bounds checking). An	1
on reading and writing	1
on future processors. There	1
on future CPUs. Half	1
on future processors, and	1
on newer processors. Many	1
on input data is	1
on current Intel CPUs	1
on PC platforms. Graphics	1
on just-in-time compilation of	1
on algorithms and data	1
on lazy binding leads	1
on executing library functions.	1
on executing instructions are	1
on registers, not on	1
on CodeGear compiler). Fastcall	1
on CodeGear compiler) integer	1
on deciding which version	1
on completely independent divisions.	1
on anything else being	1
on seven different compilers.	1
on seven different brands	1
on remote or removable	1
on BSD, but the	1
on n, including the	1
on older processors and	1
on structured exception handling	1
on mixing code compiled	1
on multi-core CPUs, but	1
on contemporary processors. The	1
on contemporary 106 CPUs	1
on longjmp in time-critical	1
on improving performance. Stefan	1
on x. It is	1
on hacks that violate	1
on non- standardized details	1
on servers that run	1
on usability, but I	1
on publicly available information.	1
on system-specific graphical interface	1
on arranging data in	1
on Intel/x86-compatible microprocessors. The	1
on redesigning a program	1
on correction for the	1
code the offset as	1
code is the same.	1
code is a risk	1
code is that the	1
code is that it	2
code is that if	1
code is not copied	1
code is not optimal.	1
code is not optimized.	1
code is not separated	1
code is more difficult	1
code is used in	1
code is so high	2
code is very inefficient	1
code is critical when	1
code is compiled and	1
code is compiled for	2
code is compiled into	1
code is optimized is	1
code is implemented as	1
code is likely to	2
code is fast anyway	1
code is running in	1
code is running on	1
code is needed for	1
code is later ported	1
code is smaller because	1
code is intended for.	1
code is limited to	1
code is inlined -	1
code is chosen only	1
code is executed. Optimizes	1
code is included in	1
code is fragmented and	1
code is fastest because	1
code is exactly identical	1
code is distributed and	1
code is distributed as	1
code is distributed between	1
code is compact and	1
code is inefficient, especially	1
code is __asm int	1
code is serial in	1
code is serial because	1
code is selected if	1
code is translated into	1
code is indeed vectorized	1
code is repetitive. The	1
code of the next	1
code to the device.	1
code to a specific	1
code to be able	1
code to call the	1
code to test in	1
code to access these	1
code to check that	1
code to support different	1
code to see which	1
code to give the	1
code to tell the	1
code to non-AVX code	1
code to non-AVX code.	1
code to test. disable	1
code and for fast	1
code and can be	1
code and you can	1
code and data are	2
code and data can	1
code and data A	1
code and data memory	1
code and data .........................................................................................	1
code and table lookup	1
code and how the	1
code and doesn't take	1
code and compile them	1
code and intermediate code	1
code and put the	1
code and divide it	1
code and just-in-time compilation	1
code and just-in-time compilation.	1
code and lazy binding	2
code and main() are	1
code and read-only data.	1
code in the above	1
code in the disassembly	1
code in a way	1
code in a separate	1
code in a typical	1
code in this example	1
code in which the	1
code in example 16.2	1
code in example 15.1c	1
code in example 14.8	1
code in example 14.14a	1
code in example 11.1a	1
code in example 14.21	1
code in multiple versions	3
code in multiple versions,	1
code in order to	1
code in addition to	1
code in either case.	1
code in details. The	1
code in general. Assume	1
code for the common	1
code for the three	1
code for the Microsoft,	1
code for the .NET	1
code for this instruction	1
code for Intel CPUs.	1
code for making the	1
code for AMD CPUs.	1
code for actually making	1
code for vectorization Not	1
code for accessing a	1
code for vectorization............................................................. 117	1
code that the compiler	1
code that is not	1
code that is compiled	1
code that is difficult	1
code that is ported	1
code that is distributed.	1
code that a compiler	1
code that are used	1
code that can be	1
code that can benefit	1
code that it jumps	1
code that you see	1
code that use only	1
code that makes code.	1
code that does floating	1
code that works for	1
code that uses the	1
code that uses pointers	1
code that contains integer	1
code that allows you	1
code that current compilers	1
code that produces a	1
code that copies the	1
code that accesses data	1
code that accesses b	1
code that matters rather	1
code are compiled with	1
code are relative to	1
code are uncached or	1
code are modified, if	1
code can be optimized	1
code can be implemented	1
code can be made	1
code can be further	1
code can be improved	1
code can be applied	1
code can be completely	1
code can be vectorized,	1
code can then be	1
code can therefore suffer	1
code can become very	1
code can possibly be	1
code can now be	1
code can probably be	1
code or in a	1
code or use objconv	1
code or not. I	1
code if no other	1
code if we specify	1
code if possible, or	1
code by making another	1
code by default. This	1
code by emulating the	1
code with a 64	1
code with an inline	1
code with CPU dispatching,	1
code with automatic CPU	2
code as example 12.4b,	1
code may be stored	1
code may run with	1
code you are testing	1
code you want to	1
code have been reordered,	1
code more efficient in	1
code more efficient when	1
code more complicated and	1
code more efficient. 64	1
code more compact so	1
code more efficient, and	1
code more complex, but	1
code when the #pragma	1
code when you compile	1
code will be efficient	1
code will be very	1
code will be less	1
code will not be	1
code will work only	1
code will run faster	1
code will read four	1
code will load the	1
code will fail if	1
code will catch an	1
code then it is	1
code then you can	1
code then you may	1
code from example 8.26a	1
code from example 8.26b:	1
code from example 9.5a:	1
code at each function	1
code at all. This	1
code has a branch	2
code has a parallel	1
code has a jump	1
code has to obey	1
code has no pointer	1
code because of a	1
code because it doesn't	1
code because they fail	1
code which the calling	1
code one line at	1
code cache is used	1
code cache and the	1
code cache and it	1
code cache and data	1
code cache or micro-op	1
code cache if there	1
code cache use and	1
code cache works most	1
code cache works less	1
code should be written	1
code should have #if	1
code should therefore preferably	1
code size or data	1
code size have got	1
code size has higher	1
code into multiple threads.	1
code where speed is	1
code version is implemented	2
code version on, then	1
code version performs well.	1
code version performs poorly.	1
code takes no extra	1
code so that you	1
code so that each	1
code performance is to	1
code branch to use	1
code branch for a	1
code branch for test	1
code faster because testing	1
code makes caching more	1
code makes caching less	1
code cannot be executed	1
code address and back	1
code less clear and	1
code 64 bit code	1
code often contains a	1
code rather than by	1
code rather than using	1
code optimization Intel: "Intel	1
code 16 will not	1
code up to 5	1
code must compute (FuncRow(i)*columns	1
code versions for different	1
code versions work correctly.	1
code compiled for AVX	1
code compiled with and	1
code compiled with AVX	1
code compiled without AVX,	1
code big and uses	1
code works only for	1
code inside square: //	1
code uses an unfortunate	1
code Function libraries can	1
code contains only simple	1
code contains natural parallelism.	1
code memory. The functions	1
code branches works correctly.	1
code branches separately and	1
code automatically in simple	1
code automatically or does	1
code caching is critical.	2
code caching and data	1
code caching for the	1
code implementation works particularly	1
code like the one	1
code cache. The register	1
code cache. The subsequent	1
code examples in these	1
code examples for these	1
code difficult to read.	1
code instead of the	1
code becomes the same	1
code becomes more efficient	1
code becomes more readable	1
code becomes bigger if	1
code becomes smaller if	1
code becomes simpler because	1
code becomes contiguous. The	1
code becomes bulky and	1
code together near each	1
code goes through the	1
code smaller and more	1
code section is always	1
code section and read-only	1
code section can be	1
code section will be	1
code section so that	1
code section contains no	1
code section needs one	1
code section position-independent, makes	1
code gives an 9	1
code size. In fact,	1
code still needs careful	1
code prevent the CPU	1
code further by using	1
code Assume that a	1
code optimization. See www.agner.org/optimize	1
code execute faster than	1
code execute faster. The	1
code containing pure function	1
code version. 2. Check	1
code to: // Example	1
code could benefit from	1
code involves multiplication or	1
code once the hot	1
code explicitly by using	1
code line. Time-based sampling:	1
code itself is a	1
code Shared objects in	1
code automatically. It is	1
code Static linking (multithreaded)	1
code generated by the	2
code relies on structured	1
code addresses. The names	1
code itself. Another disadvantage	1
code flag in the	1
code lines. The 17	1
code incompatible with old	1
code cache, branch target	1
code only. This can	1
code motion A calculation	1
code motion Induction variables	1
code motion manually when	1
code explicitly. There are	1
code looks like this:	1
code caching. This problem	1
code took 50 clock	1
code carefully to make	1
code ....................................................... 20 3.7	1
code everywhere by default.	1
code (option -fno-pic). 64	1
code generality. The most	1
code bloat and complexity	1
code mixes float and	1
code (release version) in	1
code slower, especially when	1
code optimization", Coriolis group	1
code (byte code). The	1
code motion. See page	1
code section, but it	1
as the function returns.	1
as the compiler itself	1
as the other thread	1
as the example below	1
as the size of	1
as the number of	1
as the error doesn't	1
as the standard PC	1
as the Microsoft compiler.	1
as the difference between	1
as the binary digits.	1
as the Microsoft, Intel,	1
as the Gnu, Clang	1
as the latency of	1
as the "Intel Math	1
as the C-style type-casting.	1
as the basis for	1
as the operands. The	1
as the .exe file,	1
as is often seen,	1
as is commonly the	1
as a function in	1
as a function library	1
as a function return	1
as a function call	1
as a function parameter,	1
as a time measure.	1
as a memory pointer.	1
as a vector of	2
as a make utility.	1
as a pointer in	1
as a library function	1
as a * (2n	1
as a table of	1
as a very large	1
as a 32-bit number	1
as a 32-bit number.	1
as a member function	1
as a member function.	2
as a register variable	1
as a register stack.	1
as a template parameter.	1
as a template parameter:	1
as a dynamic link	1
as a large positive	1
as a result of	2
as a single bit	1
as a virtual member	1
as a structure or	1
as a Boolean vector.	1
as a parameter to	1
as a runtime DLL	1
as a means of	1
as a linked list.	3
as a global variable	1
as a shift operation.	1
as a so-called soft	1
as a temporary register	1
as a normal array.	1
as a base address	1
as a circular buffer	3
as a subexpression. For	1
as a biased binary	1
as a plug-in to	1
as a valuable source	1
as a learning process	1
as a stand alone	1
as a scalar (Scalar	1
as a subset, giving	1
as to the AVX	1
as to make pointers	1
as in example 13.1	1
as in example 16.2	1
as in example 14.23	1
as in example 7.32b.	1
as in example 7.22.	1
as in Linux kernel	1
as in Linux. 32-bit	1
as for switch statements,	1
as for (i=0; i<n;	1
as it is and	1
as it is done	1
as it is, and	1
as it is, but	1
as function parameters because	1
as function parameter. But	1
as function inlining. Reducible	1
as if it had	1
as if you had	1
as an integer if	1
as an example in	1
as an object of	1
as an array of	1
as an array index	1
as an array index.	1
as an unsigned integer	1
as an integer. The	1
as an integer. But	1
as an integer. 158	1
as an example. The	1
as an appendix to	1
as an implicit parameter	1
as an 8-bit signed	2
as you are not	1
as you can read	1
as you have even	1
as you will see	1
as you avoid an	1
as you don't need	1
as this is not	1
as when contentions do	1
as memory leak. An	1
as memory leaks. It	1
as vector operations. 105	1
as vector register. Factors	1
as different functions. There	1
as loop counter when	1
as cache and execution	1
as integer arithmetic operations.	1
as floating point. Use	1
as example 7.15b below	1
as example 12.4b, rewritten	1
as example 13.1, Requires	1
as most sorting algorithms,	1
as using a function	1
as i modulo 16.	1
as multiple inheritance where	1
as two 32-bit integers,	1
as two 128-bit vectors.	1
as object or library	1
as static arrays in	1
as static link libraries	2
as C++ for doing	1
as C++ compilers. 2.5	1
as efficient as a	3
as efficient as using	1
as efficient as any	1
as efficient as integers.	1
as efficient functions for	1
as many encryption algorithms,	1
as possible for usability	1
as possible or when	1
as possible at compile	1
as possible into the	1
as any other member	1
as very time-consuming tasks	1
as long as the	1
as long as it	1
as long as you	3
as long as this	1
as long as their	1
as long time to	1
as 32-bit integer multiplication	1
as code. Metaprogramming can	1
as template parameters then	1
as template parameter. In	1
as template parameters, as	1
as pointers and references.	1
as pointers unless they	1
as 32 sets 4	1
as part of the	1
as simple variables, loop	1
as constant references accept	1
as error handling in	1
as important usability problems	1
as much as possible	1
as much data as	1
as single precision. And	1
as common subexpression elimination,	1
as AMD and VIA.	1
as small as possible	1
as good as the	2
as good as possible.	1
as good as expected.	1
as explained in the	4
as explained in example	1
as explained in chapter	1
as explained on page	12
as explained at page	1
as explained below. The	1
as explained below. There	1
as explained below. Shared	2
as explained above, so	1
as explained above. Examples	1
as parameters to a	1
as supported instruction sets	1
as few branches as	1
as inline function #define	1
as well as the	1
as well as in	1
as well as efficient	1
as well as pointers	1
as well as important	1
as well as writing	1
as well as directly	1
as well as Intel-based	1
as well use a	1
as well specify the	1
as well developed as	1
as fast as a	1
as fast as integer	1
as fast as single	1
as fast as calling	1
as fast as accessing	1
as fast as additions.	1
as their uses (live	1
as Boolean vectors, and	1
as string or CString.	1
as three branches. They	1
as last time the	1
as last time it	1
as calling a simple	1
as bigger than it	1
as binary executable code.	1
as p and r	1
as intended (see page	1
as dynamically allocated memory,	1
as index then the	1
as described in the	1
as described in this	1
as described in chapter	2
as described below. The	1
as position-independent has the	1
as given in the	1
as output can produce	1
as task switches and	1
as writing data. Multidimensional	1
as copying an array	1
as accessing it directly.	1
as possible. The first	1
as possible. However, there	1
as possible. Typically it	1
as little work as	1
as discussed on page	1
as directly compiled code.	1
as e.g. .R. for	1
as well. The conversion	1
as well. This is	1
as input less efficient	1
as input check if	1
as integers. 7.5 Booleans	1
as mentioned above. The	1
as addition, subtraction, comparison,	1
as standardized as possible	1
as heavy mathematical calculations,	1
as Gnu, Clang, Intel	1
as listed in the	1
as xn = x∙xn-1,	1
as follows: // Example	1
as follows: struct Sfloat	1
as follows: Instruction set	2
as follows: Type of	1
as follows: Matrix size	1
as follows: floatvalue (	1
as machine code to	1
as powers of 2:	1
as possible, and the	1
as follows in 64-bit	1
as follows (using Intel	1
as soon as the	1
as int, float, double,	1
as list, set and	1
as -(-a) = a,	1
as n! = n∙(n-1)!.	1
as true, if any	1
as macros are sometimes	1
as well, but the	1
as Taylor expansions and	1
as alternatives to the	1
as illustrated in this	1
as 8-bit integers with	1
as entry point. //	1
as Intel-based Mac OS	1
as character arrays. Note	1
as expected. I believe	1
as DOS and 16-bit	1
as logarithms and trigonometric	1
as C#, Visual Basic	1
as pivot in a	1
as memcpy, memmove, memset,	1
as shown in the	1
as shown in example	1
as semaphores, mutexes and	1
as floppy disks and	1
as arguments while pointers	1
as price, compatibility, second	1
as pragmas in the	1
as _mm_empty() as shown	1
as logarithms, exponential functions,	2
as additions. When used	1
as additions. Divisions take	1
as command-line versions without	1
as Java, use dynamic	1
as 0/a = 0	1
as accurate and reproducible	1
as sorting and searching,	1
as coprocessors to take	1
as sqrt and pow	1
as b*(2.0/3.0) unless you	1
as C- style type-casting	1
as 2eee 1.fffff, where	1
as (int)&matrix[0][0] + j	1
as eliminating the if-branch	1
as buffers for storing	1
as spell-checking and repagination	1
as GetPrivateProfileString and WritePrivateProfileString	1
as sorting, searching, and	1
as strcpy, strcat, strlen,	1
as x4∙xn-4. There is	1
as (critical stride) =	1
as VHDL or Verilog.	1
as recursive templates. The	1
as versatile. Fortran is	1
as flush and fence	1
as pow, log, exp,	1
as email and web	1
as required, but in	1
as <. The result	1
as (b*2.0)/3.0 rather than	1
as ((a+b)+c)+d. This is	1
as replacements for switch	1
as integers: // Example	1
as ReadB needs to	1
as gates, flip-flops, multiplexers,	1
as 'this'. We can	1
as OneOrTwo5[(b!=0) ? 1	1
as follows. The first	1
as reflecting it at	1
as AQtime, Intel VTune	1
as intended, while the	1
not the more complicated	1
not the case we	1
not the compiled code.	1
not the best optimizer.	1
not the optimized version	1
not the columns. Every	1
not a good idea	1
not a power of	1
not a manual on	1
not a problem since	1
not a safe programming	1
not a profiler. It	1
not a vector). The	1
not a textbook on	1
not to mix signed	1
not to vectorize. The	1
not in the same	1
not in the cache.	1
not in a shared	1
not in a particular	1
not in some very	1
not in memory. The	1
not in use. The	1
not for other brands	1
not be necessary to	1
not be advantageous if	1
not be able to	4
not be optimal to	1
not be too worried	1
not be compatible with	2
not be safe to	1
not be safe if	1
not be evaluated if	2
not be worth the	2
not be portable to	1
not be cached. This	1
not be visible at	1
not be negative. The	1
not be optimally aligned.	1
not be passed as	1
not if the loop	1
not if it is	1
not if b is	1
not if static linking	1
not by the application	1
not with a branch	1
not with earlier CPUs.	1
not on Intel processors.	1
not on variables in	1
not on AMD CPUs	1
not on publicly available	1
not as a linked	1
not not _WIN32 n.a.	1
not an advantage if	1
not an optimal solution	1
not an Intel, even	1
not an issue because	1
not have the disadvantages	1
not have the selected	1
not have to unroll	1
not have to worry	1
not have this problem.	1
not have such a	1
not have its own	1
not have inherent support	1
not use the same	1
not use the best	1
not use the source	1
not use a stack	1
not use a linked	1
not use one container	1
not use lookup tables	1
not use runtime type	1
not use STL containers.	1
not use GOT and	1
not use branches, provided	1
not at all on	1
not make the program	1
not make a destructor	1
not make this kind	1
not make variables global	1
not make induction variables	1
not only the time	1
not only a single	1
not only be a	2
not only when called	1
not only improve the	1
not all libraries have	1
not used for internal	2
not do such obvious	1
not do so unless	1
not using position-independent code	1
not i but i*12,	1
not possible to do	1
not possible to add	1
not possible to contain	1
not possible to distribute	1
not possible if the	1
not possible when parts	1
not any other factor.	1
not very good at	1
not long enough to	1
not stored contiguously in	1
not call WriteFile if	1
not less than ARRAYSIZE.	1
not take the hint,	1
not need the updates	1
not need to be	1
not need any patch.	1
not need updating in	1
not need relocation at	1
not even compatible with	1
not even temporarily. This	1
not sure you need	1
not always for application-specific	1
not always as good	1
not always possible to	1
not always work well	1
not always able to	1
not always apply to	1
not always fully optimized.	1
not always avoiding this.	1
not always true. The	1
not always work. Data	1
not always accurate, however,	1
not always comparable to	1
not always sequential, and	1
not always optimal, though.	1
not out of range	1
not dynamic libraries (.dll	1
not part of a	1
not up to date.	1
not making any specific	1
not accessed by any	2
not work in example	1
not work on compilers	1
not necessary to have	1
not necessary to unroll	1
not necessary for your	1
not necessary if you	1
not necessary when no	1
not necessary because the	1
not thread safe if	1
not good to have	1
not been a power	1
not been tested in	1
not been given a	1
not been updated since	1
not been updated lately.	1
not optimized for 16-bit	1
not get the same	1
not get any answer.	1
not check for overflow	1
not check if XMM	1
not advantageous to use	2
not advantageous to split	1
not advantageous by itself.	1
not advantageous then it	1
not known at compile	6
not support the SSE	1
not support static linking.	1
not support SSE. Several	1
not supported at all.	1
not supported fprintf(stderr, "\nError:	1
not doing divisions. It	1
not add to the	1
not well documented. The	1
not able to do	1
not able to see	1
not certain to be	1
not shared between multiple	1
not quite as versatile.	1
not used. The method	1
not recommended to use	1
not recommended to make	1
not recommended to modify	1
not recommended for critical	1
not recommended if portability	1
not optimize as good	1
not optimize well. Open	1
not optimal to do	1
not optimal from a	1
not optimal because it	2
not cost anything here	1
not efficient. If the	1
not needed in 64-bit	2
not needed for the	1
not needed if the	2
not read or write	1
not give the full	1
not look at CPU	1
not load all the	1
not declared volatile then	1
not improve the execution	1
not divisible by the	2
not know that double	1
not appropriate here. It	1
not require a multiplication	1
not negative by AND'ing	1
not predicted well. A	1
not compatible with the	1
not compatible with other	1
not compatible across compilers.	1
not intended for finding	1
not turn on correction	1
not produce any extra	3
not safe unless the	1
not clear whether r	1
not mix single and	1
not fit into a	1
not needed. You may	1
not needed. Obviously, the	1
not needed. Even better,	1
not copied because the	1
not allow vector objects	1
not expect to 99	1
not swap the order	1
not significant as long	1
not enough registers then	1
not apply to floating	1
not apply to very	1
not allocate more space	1
not critical. It is	1
not vectorize automatically. The	1
not include any part	1
not fully optimized yet.	1
not standardized across platforms.	1
not included in the	1
not easily ported to	1
not resolved when the	1
not allowed to change	1
not allowed in C++	1
not suitable for example	1
not spend time on	1
not free the memory	1
not do. The following	1
not evaluated at all	1
not edx but the	1
not permissible to assume	1
not permissible for reasons	2
not overlap. If c	1
not overlap. You can	1
not overlap. See page	1
not overlap. 27 The	1
not backwards compatible with	1
not portable to systems	1
not _WIN64 not _WIN64	1
not _WIN64 64 bit	1
not necessarily stored sequentially	1
not necessarily done by	1
not necessarily stay in	1
not necessarily newer. The	1
not divided into threads	1
not seen in the	1
not wrap around on	1
not necessary. A virtual	1
not all. Fortunately, there	1
not doubled. A thread	1
not present in the	1
not overlap or if	1
not optimal. There are	1
not optimal. Use 12	1
not guaranteed to be	1
not expensive. You may	1
not going to recommend	1
not __INTEL_COMPILER __INTEL_COMPILER 161	1
not cached. The subsequent	1
not cached. See page	1
not optimized. Jumps between	1
not normally use this	1
not satisfied with the	1
not alias any elements	1
not alias anything by	1
not separated from the	1
not cover graphics processors.	1
not unusual for the	2
not solve all the	1
not occur. The reason	1
not occur. See page	1
not _WIN32 n.a. MS	1
not throw exceptions throw()	1
not modified. Unlike a	1
not overlapping or aliasing,	1
not computationally intensive may	1
not vacant then the	1
not suited for vector	1
not supported. The calculation	1
not visible in the	1
not allowed. Non-public distribution	1
not testing. Trying to	1
not uncommon for software	1
not uncommon for virus	1
not 123 correspond to	1
not accessible from other	1
not noticed that i	1
not recognized in 64-bit	1
not human readable and	1
not yet as well	1
not referenced from any	1
not selected. Compiler has	1
not evaluated, because the	1
not detected until 10	1
not supported"); return; }	1
not safe, of course.	1
not standardized. It is	1
not affected by __fastcall.	1
not aliased #pragma optimize("a",	1
not backwards. Copying or	1
not traditionally considered a	1
not used). You may	1
not satisfactory. The following	1
not met then it	1
not alias, if appropriate.	1
not reproducible. Such events	1
This is the function	1
This is the code	1
This is the time	1
This is the variable	1
This is the first	1
This is the case	1
This is the best	1
This is the reason	4
This is the simplest	1
This is a function	1
This is a very	2
This is a useful	1
This is a simple	1
This is a common	2
This is a power	1
This is a problem	1
This is a counter	1
This is a dependency	1
This is a linear	1
This is a frequent	1
This is a cheap	1
This is of course	2
This is not a	1
This is not an	1
This is data decomposition.	1
This is because the	3
This is because it	1
This is because we	1
This is because modern	1
This is because algebraic	1
This is because computers	1
This is only an	1
This is only possible	1
This is only safe	1
This is all done	1
This is used only	1
This is one of	2
This is no problem	1
This is also called	1
This is efficient for	1
This is very problematic	1
This is faster if	1
This is faster than	1
This is called the	1
This is called CPU	1
This is called register	1
This is called stack	1
This is called name	1
This is called square	1
This is called garbage	1
This is less efficient	1
This is often the	1
This is often a	1
This is how the	1
This is useful in	1
This is useful on	1
This is useful when	1
This is sure to	1
This is necessary if	1
This is small enough	1
This is done by	2
This is advantageous in	1
This is advantageous because	1
This is quite inefficient.	1
This is optimal in	1
This is typically implemented	1
This is actually quite	1
This is usually done	1
This is just an	1
This is intended for	1
This is slow //	2
This is inefficient because	1
This is safe and	1
This is approximately three	1
This is equally efficient.	1
This is efficient, but	1
This is inefficient, of	1
This is coded as	1
This is unfortunate because	1
This is annoying to	1
This is supplied with	1
This can be a	1
This can be an	1
This can be useful	5
This can be necessary	1
This can be done	3
This can be quite	1
This can be replaced	2
This can be avoided	3
This can be changed	1
This can be improved	2
This can be permissible	1
This can be ameliorated	1
This can be accomplished	1
This can have quite	1
This can cause the	1
This can cause all	1
This can cause cache	1
This can cause severe	1
This can actually reduce	1
This can improve the	1
This can save several	1
This can lead to	1
This function is so	1
This function is intended	1
This function is OS	1
This function writes to	1
This function stores a	1
This function adds the	1
This code will work	1
This code has a	1
This code works only	1
This code took 50	1
This compiler is a	1
This compiler does not	1
This may be because	1
This may be faster	1
This may be useful	1
This may be advantageous	1
This may take up	1
This may cause the	1
This may cause a	1
This may typically look	1
This may improve the	1
This may require that	1
This may enable the	1
This time is included	1
This will be very	1
This will make all	1
This will make multiple	1
This will make any	1
This will make applications	1
This will generate relative	1
This will prevent the	1
This will enable the	1
This will allow the	1
This will happen if	1
This will provoke an	1
This memory space is	1
This data conversion and	1
This has the advantage	2
This has the disadvantage	2
This has a very	1
This has a long	1
This has a significant	1
This has three advantages:	1
This has hardly any	1
This has influence on	1
This instruction set is	2
This instruction set was	1
This loop repeats 20	1
This loop calculates four	1
This should be taken	1
This example is specific	1
This pointer is 4	1
This library has a	1
This library has reduced	3
This library contains many	1
This also makes testing	1
This also applies to	1
This makes the code	1
This makes the use	1
This makes a critical	1
This makes it possible	2
This makes it easier	1
This makes function calls	1
This makes code caching	1
This makes data caching	7
This makes sure that	3
This makes operations with	1
This makes inlining more	1
This makes position- independent	1
This new insight can	1
This method is faster	1
This method is useful	3
This method is explained	1
This method is advantageous	1
This method is described	2
This method is inefficient,	1
This method is illustrated	1
This method can be	2
This method may be	1
This method also involves	1
This method works with	1
This method requires that	1
This method requires OS	1
This extra check on	1
This extra cost is	1
This does not fit	1
This does not solve	1
This large memory model	1
This processor has four	1
This option makes the	2
This works in the	2
This works by compiling	1
This manual is for	1
This manual is based	2
This manual does not	1
This manual discusses how	1
This calculation requires n-1	1
This check makes dynamic_cast	1
This problem can be	1
This problem has been	1
This solution is clearly	1
This solution can incur	1
This advantage comes automatically.	1
This would not only	1
This would double the	1
This would require two	1
This structure or class	1
This standard is used	1
This information is contained	1
This above code will	1
This typically takes one	1
This typically happens if	1
This allows the compiler	2
This allows it to	1
This allows common subexpression	1
This expression is calculated	1
This implementation uses a	1
This needs a little	1
This conversion takes no	1
This cost is minimized	1
This mechanism is also	1
This means that the	1
This means that a	2
This means that it	1
This means that if	2
This means that all	1
This requires a compiler	1
This requires that you	1
This requires no modification	1
This framework typically uses	1
This results in meaningless	1
This feature is intended	1
This feature uses an	1
This section discusses how	1
This index must be	1
This gives a measure	1
This operation will then	1
This task must have	1
This prevents the compiler	2
This prevents the CPU	2
This prevents it from	1
This alignment can cause	1
This effect can be	1
This so-called virtual table	1
This so-called symbol interposition	1
This includes the libraries	1
This includes static variables,	1
This includes pointers and	1
This includes languages such	1
This delay is just	1
This chapter is aiming	1
This garbage collection may	1
This penalty should be	1
This gain in performance	1
This series of five	1
This applies to reading	1
This applies to default	1
This tool is not	1
This tool can make	1
This principle is useful	1
This happens when a	1
This tells the compiler	1
This enables the compiler	2
This enables interprocedural optimizations.	1
This non-inlined copy is	1
This unit-testing is necessary	1
This normally belongs to	1
This reordering has made	1
This removed the contentions	1
This wasteful behavior can	1
This reflects the order	1
This reduces the code	1
This safety problem can	1
This worked sufficiently fast	1
This technique is illustrated	1
This dilemma can be	1
This fragmentation of the	1
This ends the recursion	1
This corresponds to 16	1
This closely follows the	1
This behaviour is implementation	1
This requires, of course,	1
This triangle is handled	1
This '1' is not	1
- a & a	1
- a & -1	1
- a & ~a	1
- a & 0=	1
- a | -1	1
- a ^a =	1
- to make a	1
- in terms of	1
- - - -	46
- - - x	14
- - - n.a.	5
- - - xxxxxxxxx	1
- - - x-xx----x	1
- - - 76	1
- - x -	15
- - x x	11
- - x 74	1
- - n.a. n.a.	32
- - Integer XMM	1
- - xxxxxxxxx --	1
- - x-xx----x x-xxxxxx-	1
- - 76 Boolean	1
- x - -	19
- x - x	8
- x x -	12
- x x x	24
- x x Loop	1
- x 74 x	1
- no need to	1
- n.a. - -	5
- n.a. - x	3
- n.a. - n.a.	4
- n.a. x x	2
- n.a. x n.a.	2
- n.a. n.a. -	32
- n.a. n.a. x	3
- n.a. Floating point	1
- n.a. -(-a) =	1
- n.a. a-a =	1
- n.a. x*x*x*x*x*x*x*x =	1
- n.a. a+b =	1
- n.a. a*0 =	1
- n.a. a*1 =	1
- n.a. a+0 =	1
- n.a. a*b+a*c =	1
- n.a. !(a <	1
- n.a. (-a)*(-b) =	1
- n.a. (a+b)+c =	1
- n.a. a+a+a+a =	1
- there is no	1
- 2 clock cycles	1
- 4 clock cycles	1
- 8 clock cycles.	1
- 64 Kbytes and	1
- they are guaranteed	1
- 16 clock cycles,	1
- Integer XMM (vector)	1
- preferably isolated into	1
- 1; } }	2
- Table 8.1. Comparison	1
- 10 clock cycles,	1
- 5 clock cycles	1
- 100 clock cycles.	1
- 2, x =	1
- 20 clock cycles	1
- 20 clock cycles.	1
- 6 clock cycles,	1
- reciprocal n.a. -	1
- x-xxxx--x x-xxxx--x x-xx-----	1
- 80 clock cycles	1
- 80 clock cycles,	1
- xxxxxxxxx -- -	1
- -(-a) = a	1
- 5. www.amd.com. 163	1
- 45 clock cycles.	1
- 45 clock cycles).	1
- a-a = 0	1
- Divide by constant	1
- 30 // f	1
- ----- x---- x----	1
- 25 clock cycles,	1
- a*0 = 0	1
- a*1 = a	1
- time1; // This	1
- a+0 = a	1
- (time before) }	1
- vectorclass www.agner.org/optimize/#vectorclass. The	1
- a*b+a*c = a*(b+c)	1
- 0/a = 0	1
- (a&b)|(a&c) = a&(b|c)	1
- masm=intel /FA -S	1
- a<<b<<c = a<<(b+c)	1
- x-xxx - xx(-)x-	1
- min) <= (unsigned	1
- a/1 = a	1
- a+b+c = a+(b+c)	1
- xx x x-	1
- x-xx----x x-xxxxxx- x-xxxx-x-	1
- andnot(a,a) = 0	1
- xx(-)x- - x-xxxx--x	1
- 2014. Last updated	1
- 8*x + 2	1
- 76 Boolean XMM	1
- min)) { ...	1
- 8.0f) * x	1
an int is 32	1
an int is 4.	1
an int uses more	1
an instruction that the	1
an instruction set that	1
an integer is within	1
an integer is added	1
an integer of a	1
an integer to a	1
an integer to zero	1
an integer in the	1
an integer in one	1
an integer in disguise.	1
an integer that holds	1
an integer can be	1
an integer if the	1
an integer if it	1
an integer with a	1
an integer because the	1
an integer size that	1
an integer takes a	1
an integer variable by	1
an integer constant with	1
an integer known at	1
an integer counter and	1
an integer addition, a	1
an integer variable, it	1
an integer comparison, which	1
an integer constant, unless	1
an example of how	3
an example in the	1
an Intel function library	1
an Intel before it	1
an Intel Pentium 4.	1
an Intel compiler, then	1
an Intel CPU. See	1
an Intel processor. The	1
an object is copied	1
an object is moved,	1
an object of the	3
an object of a	2
an object of class	1
an object of known	1
an object to a	1
an object that behaves	1
an object by *p	1
an object with new	1
an object It is	1
an object file disassembler.	1
an object must be	1
an object through a	1
an object after it	1
an object oriented programming	1
an efficient way of	1
an efficient solution. Is	1
an efficient solution. Sort	1
an array of structure	1
an array of thousand	1
an array of structures:	1
an array to all	1
an array to zero.	1
an array and for	1
an array can cause	1
an array or the	1
an array or setting	1
an array with bounds	1
an array element if	1
an array index is	1
an array index than	1
an array index then	1
an array element. In	1
an array index. The	1
an array grows during	1
an address divisible by	5
an address below 2	1
an operating system this	1
an operating system. The	1
an unsigned int or	1
an unsigned integer and	1
an unsigned integer takes	1
an unsigned variable produces	1
an even faster way	1
an error can return	1
an error if the	1
an error code if	1
an error code which	1
an error then there	1
an error simply by	1
an error message and	1
an error message in	2
an error message if	1
an error message when	1
an error condition terminates	1
an error handler calls	1
an error message. It	1
an important part of	1
an important distinction between	1
an extra cache for	1
an extra register to	1
an extra register available	1
an extra cost whenever	1
an extra framework can	1
an extra iteration that	1
an extra level of	1
an extra jump through	1
an extra dummy element	1
an extra layer of	1
an assembly language output,	1
an assembly output option	1
an assembly listing. Use	1
an execution unit. For	1
an element in list,	1
an exception in case	2
an exception or other	1
an exception then F1	1
an exception without using	1
an exception occurs in	1
an exception occurs somewhere	1
an overflow and give	1
an overflow or another	1
an overflow check. There	1
an option for source	1
an option for whole	1
an option for assuming	1
an option for RTTI	1
an option for "standard	1
an option that allows	1
an option (Windows: /Gy,	1
an optimized function, but	1
an advantage to using	1
an advantage to unroll	1
an advantage in the	1
an advantage in applications	1
an advantage if the	1
an advantage because integer	1
an inline function instead	1
an inline assembly instruction	1
an optimizing compiler can	2
an optimizing compiler will	2
an optimizing compiler would	1
an intermediate code is	2
an intermediate code and	1
an intermediate code like	1
an intermediate code (byte	1
an intermediate code. The	1
an intermediate file format	1
an intermediate code, which	1
an optimal solution because	1
an application to a	1
an application program without	1
an expression that should	2
an expression or an	1
an induction variable because	1
an induction variable unless	1
an induction variable. The	1
an && expression, or	1
an addition to sum1	1
an addition with another	1
an || expression. Assume,	1
an Intel, even if	1
an Intel, AMD or	1
an old computer with	1
an appropriate error message	1
an advanced and complicated	1
an advanced high-level language	1
an unused copy of	1
an unused fourth value	1
an STL vector turned	1
an STL container are	1
an index of memory	1
an index multiplied by	1
an inefficient way. See	1
an instance of the	1
an output file. A	1
an inlined function. The	1
an inlined 15.1b and	1
an algorithm of sequential	1
an offset that is	1
an operand is infinity	1
an unknown CPU based	1
an overloaded function are	1
an overloaded operator is	1
an overloaded assignment operator,	1
an entire cache line	1
an executable file stub.	1
an input file. The	1
an explanation of this	1
an explanation of return	1
an explanation of branch	2
an explanation of register	1
an explanation and possible	1
an integer, and this	1
an integer, or an	1
an integer, then you	1
an integer, so that	1
an integer, usually 32.	1
an interrupt should preferably	1
an interrupt occurs in	1
an arithmetic expression. The	1
an array. The values	1
an update when the	1
an integer. The compiler	1
an integer. If a	1
an integer. But the	1
an integer. 158 Integer	1
an equal amount of	1
an 9 extra overhead	1
an int, without specifying	1
an obvious thing to	1
an excessive number of	3
an increasing number of	2
an explanation. Note that	1
an explanation. (The Microsoft	1
an explanation. Please skip	1
an exception. The costs	1
an exception. A frame	1
an exception. Therefore, you	1
an additional integer counter.	1
an additional floating point	1
an example. The only	1
an example. A union	1
an example. My example	1
an appendix to this	2
an empty throw() statement	1
an empty throw() specification.	1
an IDE. Does not	1
an IDE. Free trial	1
an extended number of	1
an underflow and give	1
an assumption is that	1
an uncached read because	1
an existing object rather	1
an existing program. Weighing	1
an explicit CPU dispatching	1
an explicit induction variable.	1
an implicit parameter to	1
an implicit 'this' pointer	1
an 8-bit signed number.	1
an 8-bit signed number,	1
an inferior version on	1
an arbitrary memory address	1
an arbitrary cache line.	1
an arbitrary name that	1
an FPGA in the	1
an FPGA as a	1
an error. // You	1
an addition. If the	1
an addition. Comparing two	1
an unfortunate method that	1
an approximate comparison of	1
an annoying time consumer	1
an up-to-date function library	1
an up-to-date version. The	1
an initialization routine that	2
an issue because an	1
an odd number then	1
an insufficient amount of	1
an import table and	1
an import table or	1
an anonymous object. The	1
an anonymous namespace. 3.	1
an infinite loop. The	1
an immediate response to	1
an array, or approximately	1
an interpreter for Basic.	1
an interpreter which interprets	1
an EMMS instruction before	1
an obstacle to vectorization.	1
an IDE with many	1
an update, or update	1
an acceptable limit, then	1
an over- loaded type	1
an integral number of	1
an MFC application. The	1
an attribute which can	1
an imported pointer, but	1
an ordinary procedure linkage	1
an if-else structure), the	1
an estimated calculation time	1
an illegal operation that	1
an hour. Neither is	1
an unrecoverable error without	1
an antivirus program that	1
an n'th degree polynomial	1
an integer). All intermediate	1
an interrupt, e.g. every	1
an error; and make	1
int is 16 bits	1
int is 32 bits,	1
int is 4. So	1
int a = Func1(2);	1
int in the critical	1
int in one vector,	1
int in 16-bit systems:	4
int or by type-casting	1
int if (i >=	1
int int 256 unsigned	1
int x = 2	1
int x = 10;	1
int one : 1;	1
int size = 100;	5
int size = 256;	1
int size = 16;	1
int size = 1000;	2
int size = 1024;	3
int i = 0;	1
int * p) {	1
int * __restrict bb)	1
int before dividing by	1
int 4 AVX _mm256_permutevar_ps	1
int 4 AVX2 _mm256_i32gather_epi32	1
int 8 AVX2 _mm_i32gather_epi32	1
int 8 AVX2 _mm_i64gather_epi32	1
int unsigned int 64	1
int unsigned char 8	1
int 64 0 264-1	1
int 64 Is32vec2 32	1
int 64 Is16vec4 16	1
int 64 Iu16vec4 32	1
int 16 4 64	1
int 16 8 128	1
int 16 16 256	1
int 16 0 65535	1
int 16 -32768 32767	1
int 32 2 64	1
int 32 4 128	1
int 32 8 256	1
int 32 16 512	1
int 32 -231 231-1	1
int & r) {	2
int i; for (i	6
int i; if ((unsigned	1
int i; int Induction	1
int i; } x;	1
int i; } u;	5
int i; } u,	2
int i; float x;	1
int i; float f;	1
int i; float a[size],	2
int i; float list[size];	1
int i; float i2;	1
int i; long long	1
int i; const int	1
int i; short int	2
int i; ... for	1
int i; ... if	1
int i; ... list[i	1
int i; p =	1
int i; for(i=0; i<300;	3
int i; for(i=0; i<100;	1
int i; for(i=0; i<301;	1
int i; 45 for	1
int i; 84 for	1
int a, b; a	2
int a, b; double	1
int a, b, c;	5
int a, b, c,	1
int 128 Is16vec8 Vec8s	1
int 128 Iu32vec4 Vec4ui	1
int 128 Is32vec4 Vec4i	1
int 128 Iu16vec8 Vec8us	1
int uses more bits	1
int b; a =	1
int b; // 4	1
int b; int c;	1
int b; int c;};	1
int b; int Sum1()	1
int b; static const	1
int sign : 1;	1
int sign :1;//signbit };	2
int 256 unsigned 256	1
int c; int UnusedFiller;	1
int c; }; Replace	1
int c; }; 7.23	1
int instead of int.	1
int x; for (x	1
int x; const double	1
int x; public: c1()	1
int b, c; x[0]	1
int i, a, b;	1
int i, sum =	1
int i, f =	1
int i, a[100]; for	1
int i, i_div_3; for(i=i_div_3=0;	1
int i, j; int	1
int i, j; float	1
int i, j; ...	1
int i, a[100], b;	1
int i, a[100], b,	1
int i, a[100], temp;	1
int i, StringLength; for	1
int i, a[2]; for	1
int i, largest_index =	1
int a; // 2	1
int a; int b;	2
int a; double b;	1
int a; Plus2 (&a);	1
int d; // 2	1
int d; // 4	1
int exponent : 8;	1
int exponent : 15;	1
int exponent : 11;	1
int rows = 20,	2
int rows = 10,	1
int level = InstructionSet();	2
int u; double d;	3
int CriticalFunction (); __asm__	1
int fraction : 23;	1
int fraction : 52;	1
int fraction : 63;	1
int declaration may in	1
int 3; or __asm	1
int n; static char	1
int n; switch (n)	1
int n; #if defined(__unix__)	1
int n; u.i =	1
int n; 143 if	1
int factorial (int n)	2
int bb[], short int	9
int aa[], short int	9
int cc[]) { for	1
int cc[]) { //	6
int cc[]) { Vec16s	1
int a[100]; // 400	1
int a[100]; int i,	1
int Induction = r;	1
int parm2) { //	1
int parm2) {...} //	6
int int64_t 256 uint64_t	1
int SomeFunction (int a,	5
int SIZE = 512;	2
int SIZE = 64;	1
int a[size], b[size]; //	1
int a[size], b[size], i;	1
int list[300]; int i;	3
int list[300]; int i,	1
int Multiply (int x,	1
int n) { double	1
int s; s =	1
int s; 40 i	1
int lrint (double const	2
int N> class powN	1
int N> class SafeArray	1
int r, c; for	2
int r, c; double	2
int b;}; Sab ab[size];	1
int main() { int	2
int list[100]; Func1(list, &list[8]);	1
int A, B, C;	2
int (16 bits), unless	1
int CriticalFunction_386(int parm1, int	2
int a[2]; a[0] =	1
int b:2; int c:2;	2
int MultiplyBy (int x)	1
int c:2; }; char	1
int c:2; }; Bitfield	1
int TILESIZE = 8;	1
int Func(int); const int	2
int a[1000]; float b[1000];	1
int a[1000]; F1(a); }	1
int CriticalFunction_SSE2(int parm1, int	2
int lrintf (float const	1
int ArraySize = 1000;	1
int ABC = 123;	1
int parm2); // Function	1
int NumberOfTests = 10;	1
int min = 100,	1
int Func2() { int	1
int order(int x); const	1
int order(int x); 136	1
int a:4; int b:2;	2
int ARRAYSIZE = 100;	1
int FactorialTable[13] = {1,	2
int CriticalFunction_AVX(int parm1, int	2
int matrix[NUMROWS][NUMCOLUMNS]; int row,	1
int CriticalFunctionType(int parm1, int	1
int Sum2(S3 * p)	1
int c;}; abc *	1
int dummy; double a[arraysize],	1
int row, column; for	1
int Sum3(S3 & r)	1
int r1, r2, c1,	1
int BigArray[1024] __attribute__((aligned(64))); //	1
int FuncRow(int); int FuncCol(int);	1
int bb[size] ); Alignd	1
int NUMROWS = 100,	1
int UnusedFiller; }; int	1
int List[ArraySize]; ... for	1
int Func1(int x) {	1
int absvalue, largest_abs =	1
int BigArray[1024]; // Windows	1
int cc[size] ); //	1
int u[2]} a[size]; unsigned	1
int m) { return	1
int arraysize = 1000;	1
int CriticalFunction_Dispatch(int parm1, int	1
int x[]) { int	1
int DontSkip; long long	1
int list[301]; int i;	1
int c1::*MemberPointer; Here, the	1
int Size() { return	1
int ReadB() {return b;}	1
int iset = instrset_detect();	1
int aa[size] ); //	1
int 832 256 16	1
int Sum1() {return a	1
int i[2]; } u;	1
int dummy[4]; volatile int	1
int FuncCol(int); const int	1
int seconds; // incremented	1
int cc[]); // function	1
than the function add_horizontal)	1
than the code itself.	1
than the time it	3
than the time you	1
than the program itself	1
than the vector register	1
than the CPU supports	1
than the other then	1
than the one it	1
than the cache then	1
than the cache size.	2
than the library that	1
than the number of	2
than the variable m.	1
than the table lookup.	1
than the 32-bit version.	1
than the user interface.	1
than the simple function	1
than the Gnu compiler	1
than the speed of	1
than the specific event	1
than the hardware implementation	2
than the programs they	1
than the application itself	1
than the complicated address	1
than the Boolean operators	1
than the intrinsic hardware	1
than the runtime polymorphism	1
than the parts of	1
than the main memory	1
than the level-2 cache	1
than the level-1 data	1
than the alternative version.	1
than the subsequent times	1
than the subsequent counts.	1
than the throughput (see	1
than the largest available	1
than the actual calculations.	1
than the equivalent if(!(a	1
than the C-style type-casting	1
than the product makes	1
than the external clock.	1
than the heap. The	1
than the destination array.	1
than the ones mentioned	1
than the other, then	1
than a function template	1
than a function parameter	1
than a program where	1
than a floating point	1
than a static library,	1
than a simple type	1
than a thread that	1
than a small piece	1
than a few lines	1
than a few lines.	1
than a few kilobytes	1
than a hardware implementation	1
than a certain tolerance.	1
than a frame function	1
than a linear array	1
than a non-static member	2
than a hundred clock	1
than a dedicated test	1
than a dedicated microprocessor	1
than a float. (Both	1
than a polymorphous class?	1
than a minute if	1
than to use this	1
than to access it	1
than to type in	1
than to calculate the	1
than to store each	1
than to write the	1
than to write _mm_add_epi16(a,b).	1
than to execute it.	1
than to allocate a	1
than to delete it	1
than to draw each	1
than to temporarily lock	1
than in the big	1
than in a static	1
than in a register	1
than in a microprocessor	1
than in a register.	1
than in a PC.	1
than in other programming	1
than in 64-bit Windows	1
than in 64-bit Windows.	2
than in 32-bit mode,	1
than in 32 bit	1
than in optimizing application-specific	1
than in memory. Function	1
than for double precision.	1
than for level-1 cache	1
than for auto_ptr. Smart	1
than it is on	1
than it is intended	1
than it can handle.	1
than it used to	1
than it takes to	1
than it actually is.	1
than it says. A	1
than if the data	1
than if the operands	1
than if because #if	1
than by the loop	1
than by the processing	1
than by the latency	1
than by a macro,	1
than by using assembly	1
than by pointers or	1
than by optimizing the	1
than by 16. This	1
than by individual installation	1
than with unsigned integers	1
than with fine-grained parallelism	1
than on the stack	1
than on the stack.	3
than on the stack).	1
than on the essential	1
than on floating point	1
than code generality. The	1
than as a linked	1
than as b*(2.0/3.0) unless	1
than an uncached read	1
than an MFC application.	1
than an hour. Neither	1
than x = -abs(x);.	1
than x = *(++p)	1
than x = array[++i]	1
than when a fixed-size	1
than when compiled with	1
than when n is	1
than from the loop	1
than from floating point	1
than memory access and	1
than at runtime if	1
than at runtime. Example	1
than CPU time. Another	1
than other CPUs for	1
than other methods of	1
than other languages that	1
than other kinds of	1
than other CPUs, but	1
than one variable if	1
than one way in	1
than one call to	1
than one line at	1
than one instance of	1
than one thing at	1
than integer comparisons. The	1
than floating point operations.	1
than floating point expressions,	1
than each time the	2
than example 12.4a, depending	1
than most other libraries	1
than using a ready-made	1
than double if the	1
than double precision when	1
than two 32-bit integers	1
than two ways. Switch	1
than static memory. If	1
than static link libraries.	1
than 64-bit Windows if	1
than there are objects	1
than there is, in	1
than any non-vector library.	1
than 2 gigabytes of	1
than 2 GB. When	1
than 32-bit programs if	1
than pointers to objects)	1
than pointers because in	1
than pointers are: The	1
than 16 bytes should	1
than 32 bits. This	1
than dynamic linking are:	1
than 0 and 1.	2
than 0 or 1	1
than 0 or 1.	3
than 0 or 1,	1
than type casting of	1
than short int (16	1
than making a new	1
than making a separate	1
than making it count	1
than its name at	1
than its brand, family	1
than its reputation. The	1
than processor features. The	1
than single precision. When	1
than done to choose	1
than 128 because the	1
than four parameters. There	1
than functions. See page	1
than doing arithmetic operations.	1
than standard PCs. The	1
than optimizing CPU use	1
than Boolean expressions. There	1
than signed when you	1
than signed integers. It	1
than division by a	2
than end users have.	1
than addition and subtraction	1
than needed in order	1
than last time. Newer	1
than linked lists in	1
than calling the function	1
than references are: When	1
than C if you	1
than intended because of	1
than frame functions for	1
than accessing a member	1
than accessing a simple	1
than processing the data	1
than needed. This makes	1
than mov eax,0. The	1
than reading or writing	2
than calculating the logarithm	1
than future processors. Consider	1
than seconds or microseconds	1
than 65 bytes of	1
than finding the most	1
than addition, subtraction and	2
than once then the	1
than 8, 16, 32	1
than multiplying by other	1
than random access. Reading	1
than rounding unless the	1
than 127 bytes is	1
than speed. This includes	1
than normal on some	1
than half the single-thread	1
than half speed because	1
than comparing it to	1
than comparing i with	1
than truncation when the	1
than anything else on	1
than third party security	1
than pow The method	1
than 250 ms. If	1
than necessary. Take the	1
than two. Some compilers	1
than 2n and not	1
than another. Therefore, it	1
than RISC in situations	1
than moving each object	1
than allocating more space	1
than allocating piecewise or	1
than "what works best	1
than post-increment. For example,	1
than Sum2 and Sum3	1
than generating denormal numbers	1
than rounding. This is	1
than PCs. Therefore, it	1
than loops, etc. Optimizing	1
than 1.23456. The conclusion	1
than 99% of the	1
than normal. This happens	1
than normal. 157 17	1
than relocation, especially in	1
than sequences of operations.	1
than non-virtual functions. Avoid	1
than 231. This extra	1
than 1/50 of the	1
than 2-20, but this	1
than ARRAYSIZE. Another example:	1
than 1% goes to	1
than 20. The fact	1
than investing in a	1
than nine, even though	1
than 200. Next, we	1
than rendering graphics on	1
than looping through a	1
than log) inside the	1
than others. While some	1
than -156. Surprisingly, we	1
than 33% when the	1
than non-object oriented programs.	1
than 15.1b, and in	1
than isolating a single	1
than self-styled hacks and	1
than normally. There are	1
than doubled for this	1
compiler is a very	1
compiler is a good	3
compiler is that the	1
compiler is not always	1
compiler is more likely	1
compiler is less efficient	1
compiler is available for	2
compiler is likely to	1
compiler is able to	2
compiler is usually not	1
compiler is used, then	1
compiler is prevented from	1
compiler is unable to	2
compiler is mostly compatible	1
compiler is capable of	1
compiler to the value	1
compiler to be able	1
compiler to make more	1
compiler to make register	1
compiler to do and	1
compiler to do more	1
compiler to do any	1
compiler to do interprocedural	1
compiler to do cross-module	1
compiler to always behave	1
compiler to work on	1
compiler to inline the	1
compiler to store x	1
compiler to optimize code	1
compiler to optimize register	1
compiler to optimize away	2
compiler to assume that	1
compiler to assume no	1
compiler to reduce example	1
compiler to reduce complicated	1
compiler to predict with	1
compiler to evaluate whether	1
compiler to ignore overflow	1
compiler to vectorize, or	1
compiler and the Intel	1
compiler and it understands	1
compiler and call it	1
compiler in the following	1
compiler in many respects	1
compiler in favor of	1
compiler for 32-bit Windows,	1
compiler for 32-bit Windows.	2
compiler for Windows and	1
compiler for Windows applications.	1
compiler for Linux have	1
compiler for Mac OS	1
compiler for Windows, while	1
compiler for 32- and	2
compiler for Basic soon	1
compiler for restrictions on	1
compiler for Unix applications	1
compiler that the function	1
compiler that the arrays	1
compiler that a specific	1
compiler that can do	1
compiler that you want	1
compiler that this is	1
compiler that automatically reduces	1
compiler that supports automatic	1
compiler can use the	2
compiler can use this	2
compiler can then use	1
compiler can make this	1
compiler can do and	1
compiler can also use	1
compiler can often optimize	1
compiler can optimize away	1
compiler can optimize specifically	1
compiler can replace a	1
compiler can replace an	1
compiler can replace all	1
compiler can replace j	1
compiler can automatically replace	1
compiler can automatically generate	1
compiler can see that	2
compiler can look like	1
compiler can insert nontemporal	1
compiler can align the	1
compiler can easily optimize	1
compiler can eliminate this	1
compiler can eliminate common	1
compiler can bypass the	1
compiler can safely assume	1
compiler // Same as	1
compiler if the uses	1
compiler by including the	1
compiler with the application.	1
compiler with other compilers	1
compiler with many features,	1
compiler with C++0x support.	1
compiler on the Mac	1
compiler not to vectorize.	1
compiler may in some	2
compiler may be able	1
compiler may not be	3
compiler may not take	1
compiler may avoid the	1
compiler may calculate it	1
compiler may replace the	1
compiler may replace this	4
compiler may actually add	1
compiler may reduce this	2
compiler may change the	1
compiler may change this	1
compiler may try to	1
compiler may reorder instructions	1
compiler may report that	1
compiler may interleave the	1
compiler you are using	1
compiler you will notice	1
compiler have been replaced	1
compiler when called from	1
compiler A feature called	1
compiler will make only	1
compiler will do the	1
compiler will always select	1
compiler will calculate (1./1.2345)	1
compiler will store the	1
compiler will optimize this	1
compiler will replace this	1
compiler will see that	1
compiler will choose the	1
compiler will change the	1
compiler will produce the	1
compiler will convert example	2
compiler will convert these	1
compiler will vectorize the	1
compiler will vectorize a	1
compiler will recognize that	1
compiler from the command	1
compiler from making a	1
compiler from making an	2
compiler from making optimizations	1
compiler from doing the	1
compiler from doing optimizations	1
compiler from aligning the	1
compiler at compile time.	1
compiler has to use	1
compiler has to make	1
compiler has to take	1
compiler has not noticed	1
compiler has an option	2
compiler has no information	1
compiler has some support	1
compiler has replaced i	1
compiler has chosen for	1
compiler has solved this	1
compiler because it has	1
compiler which is similar	1
compiler should produce the	1
compiler Intel compiler Windows	1
compiler Intel compilers have	1
compiler There are several	2
compiler takes the hint	1
compiler takes care of	1
compiler makes a distinction	1
compiler cannot make floating	1
compiler cannot know for	1
compiler cannot know that	1
compiler cannot rule out	2
compiler often inserts built-in	1
compiler optimization than to	1
compiler I have ever	1
compiler does not have	1
compiler does not produce	1
compiler does not allow	1
compiler does It can	1
compiler does some things	1
compiler does quite ingenious	1
compiler does what you	1
compiler does ............................................................................. 84	1
compiler must calculate its	1
compiler must convert it	1
compiler (see page 103),	1
compiler Windows Intel compiler	2
compiler Windows Gnu compiler	3
compiler Windows Linux __INTEL_COMPILER	1
compiler versions were tested:	1
compiler versions 7 through	1
compiler doesn't have the	1
compiler doesn't have to	1
compiler doesn't have an	1
compiler doesn't have information	1
compiler doesn't make such	1
compiler doesn't need induction	1
compiler doesn't know the	1
compiler doesn't know what	1
compiler doesn't provide the	1
compiler option for all	1
compiler option for assembly	1
compiler option -fno-pic when	1
compiler option -fno-pic apparently	1
compiler option "assume no	1
compiler Linux Intel compiler	3
compiler Linux Align by	1
compiler Linux Optimize for	1
compiler works only for	1
compiler manual for details.	1
compiler manual or in	1
compiler uses a different	1
compiler uses position-independent code	1
compiler would be able	1
compiler would assume that	1
compiler optimize example 8.26a	1
compiler allows you to	1
compiler allows "__attribute__((visibility("hidden")))". Use	1
compiler needs to make	1
compiler needs to look	1
compiler mechanism because it	1
compiler optimizations that it	1
compiler options to enable	1
compiler options Table 18.1.	1
compiler #define Alignd(X) __declspec(align(16))	1
compiler supports this option	1
compiler supports vector intrinsics,	1
compiler supports CPU dispatching	1
compiler supports intrinsic functions,	1
compiler comes with some	1
compiler output can often	1
compiler sometimes uses 32-bit	1
compiler reduced 15.1b to	1
compiler reduced 15.1a to	1
compiler optimization. en.wikipedia.org/wiki/Compiler_optimization. ISO/IEC	1
compiler includes standard function	1
compiler e.g. how often	1
compiler might store the	1
compiler explicitly that pointers	1
compiler itself is. The	1
compiler generates the following	2
compiler generates is to	1
compiler generates to see	1
compiler manual. This option	1
compiler .......................................................................................... 66 8.1	1
compiler combined with the	1
compiler additional information about	1
compiler 8.1 How compilers	1
compiler documentation for the	1
compiler documentation for detailed	1
compiler inserts extra code	1
compiler optimizes a piece	1
compiler bypassing the dispatch	1
compiler packages include a	1
compiler ......................................................................... 128 13.7	1
compiler ......................................................................... 130 14	1
compiler became available. It	1
compiler .................................................................................................... 10 2.6	1
compiler warning for such	1
compiler sees the constant	1
compiler treat a variable	1
compiler interpret the bits	1
compiler recognizes it as	1
compiler technology, and microprocessor	1
compiler price GNU General	1
compiler puts the programmer	1
compiler options....................................................................................... 160 19	1
compiler (parallel composer) This	1
compiler ....................................................................... 77 8.4	1
compiler knows that it	1
compiler makers assume that	1
compiler makers. 4. Instruction	1
x is treated as	1
x is type-casted to	1
x to the power	3
x to 0 //	1
x and y?" then	1
x in memory rather	1
x The syntax may	1
x for approximately two	1
x can be read	1
x // get next	1
x // align table	1
x // x^n //	1
x = a +	1
x = 2 *	1
x = 10; Templates	1
x = 2.0; i	1
x = *(p++) is	1
x = -abs(x);. There	1
x = *(++p) because	1
x = array[++i] because	1
x = array[i++] is	1
x by using the	1
x as an integer.	1
x - - -	15
x - - x	12
x - - n.a.	6
x - - Integer	1
x - x -	9
x - x x	26
x - n.a. n.a.	3
x - 8.0f) *	1
x x - -	14
x x - x	24
x x x -	23
x x x x	82
x x x x-	3
x x x (x)	1
x x x ((a*x+b)*x+c)*x+d	1
x x x --	1
x x Loop invariant	1
x x x- x	3
x x (x) x	1
x x ((a*x+b)*x+c)*x+d x*x*x*x*x*x*x*x	1
x x -- -	1
x when it returns.	1
x + 1.0f;} The	1
x + 1.0f;} 66	1
x + 2.0f; }	1
x n.a. - -	1
x n.a. - n.a.	1
x n.a. x x	1
x n.a. x n.a.	1
x n.a. Constant folding	1
x * x +	2
x * x; //	1
x * m;} int	1
x * m;} template	1
x so we can	1
x < 100; x++)	2
x must wait until	1
x > y &&	1
x Loop invariant code	1
x *= x; n	1
x <= n; x++)	1
x x- x x	3
x x- x -----	1
x 43 speculatively executing	1
x x-- x x--	1
x x-- x ---	1
x ----- - x-xxx	1
x (x) x x	1
x (x) x (x)	1
x (x) x-xx--xx- x--x-----	1
x ((a*x+b)*x+c)*x+d x*x*x*x*x*x*x*x =	1
x 74 x x	1
x -- - -	1
x *const_cast<int*>(&x) += 2;}	1
x *x; double x4	1
x --- - -----	1
may of course make	1
may in some cases	4
may in fact be	1
may be the one	1
may be a better	1
may be a difference	1
may be a binary	1
may be a hundred	1
may be a viable	1
may be a slight	1
may be of some	1
may be more efficient	2
may be more convenient	1
may be at a	1
may be because the	1
may be only one	1
may be used for	3
may be used if	1
may be used as	2
may be used when	1
may be no certain	1
may be two or	1
may be possible to	2
may be so many	1
may be so high	1
may be faster than	1
may be faster despite	1
may be stored in	1
may be called from	1
may be called whenever	1
may be useful to	5
may be useful for	1
may be useful if	1
may be cases where	2
may be necessary to	2
may be advantageous to	1
may be advantageous if	1
may be able to	3
may be quite a	1
may be fast in	1
may be both cheaper	1
may be optimal to	1
may be optimal in	1
may be three or	1
may be better to	2
may be needed for	1
may be difficult to	2
may be bigger than	1
may be just as	1
may be smaller as	1
may be replaced by	1
may be loaded only	1
may be given a	1
may be inlined for	1
may be changed to	1
may be enough to	1
may be situations where	1
may be scattered around	1
may be preferred to	1
may be convenient to	1
may be poor because	1
may be completely unrolled	1
may be obvious to	1
may be swapped to	1
may be necessary. If	1
may be preferable to	1
may be needed, however,	1
may be selected during	1
may be modified by	2
may be removed after	1
may be considered a	1
may be moved out	1
may be sufficient for	1
may be freed before	1
may be justified in	1
may be worthwhile to	1
may be undesired. Example:	1
may be mitigated by	1
may be caused by	1
may as well use	1
may as well specify	1
may not be necessary	1
may not be advantageous	1
may not be able	3
may not be optimal	1
may not be compatible	1
may not be safe	2
may not be worth	2
may not be cached.	1
may not be visible	1
may not be optimally	1
may not take the	1
may not need the	1
may not work on	1
may not load all	1
may not vectorize automatically.	1
may have a function	1
may have a reduced	1
may have a larger	1
may have to be	1
may have to do	1
may have to test	1
may have to fix	1
may have big endian	1
may have undesired effects.	1
may use the Intel	1
may use the upper	1
may use the _mm_clflush	1
may use a sorted	1
may use an object	1
may use more resources	1
may use double precision	1
may use 64-bit integers	1
may use single precision	1
may make multiple versions	1
may make some tests	1
may make member functions	1
may make separate executables	1
may also be a	1
may also be an	1
may also see emulated	1
may also look at	1
may some day be	1
may return an error	1
may very well spend	1
may call the CPUID	1
may take a long	1
may take more than	1
may take more time	1
may take only 5	1
may take up to	1
may take 3 -	1
may need to be	2
may need to lock	1
may need extra overhead	1
may need assembly language.	1
may need modification to	1
may need metaprogramming. The	1
may even be a	1
may even have a	1
may even add dummy	1
may want to use	1
may want to make	1
may work with both	1
may avoid the multiplication	1
may avoid this method	1
may avoid multiple inheritance	1
may cause the software	1
may cause a lot	1
may cause a waste	1
may cause a loss	1
may cause cache contentions.	1
may cause slight imprecision	1
may therefore fail to	1
may get a better	1
may get a misprediction	1
may run with reduced	1
may run at less	1
may run slightly faster	1
may calculate it only	1
may add the static	1
may add counter variables	1
may store the information	1
may store all strings	1
may write your own	1
may write FatalAppExitA(0,"Array index	1
may replace the call	1
may replace this by	4
may replace this line	1
may typically look like	1
may preferably be a	1
may preferably avoid global	1
may put the desired	1
may read the time	1
may give inconsistent results	1
may look at the	1
may look like this:	2
may actually be better	1
may actually add extra	1
may improve the performance	3
may improve the possibilities	1
may improve efficiency by	1
may reduce this to:	2
may choose the compilers	1
may choose the method	1
may choose a newer	1
may choose to make	1
may choose to align	1
may choose one of	1
may choose either C	1
may require a very	1
may require that a	1
may start at unpredictable	1
may go through multiple	1
may go undetected. The	1
may change the expression	1
may change this to:	1
may slow down the	1
may slow down a	1
may produce undesired results.	1
may save by avoiding	1
may save RAM space,	1
may possibly be more	1
may fail to distinguish	1
may fail in the	1
may occur in multiplication	1
may occur as a	1
may insert any other	1
may consider the following	1
may consider if the	1
may consider if it	1
may consider whether it	1
may consider whether others	1
may enable the compiler	1
may come unpredictably at	1
may happen quite often.	1
may apply to other	2
may define a structure	1
may contain pointers or	1
may try to do	1
may remove the memset	1
may declare the function	1
may detect the misprediction	1
may prefer to use	1
may prefer to write	1
may move the object	1
may think that exception	1
may mirror the entire	1
may behave differently on	1
may catch programming errors	1
may seem a little	1
may seem illogical that	1
may ignore the problem	1
may skip this section	1
may decide to do	1
may reorder instructions for	1
may report that memset	1
may interfere with real	1
may involve the loading	1
may reuse the same	1
may sample more data	1
may fill up the	1
may interleave the two	1
may actively invalidate the	1
may occasionally predict that	1
may deviate from the	1
may view the software	1
may write: y =	1
may neverthe- less be	1
may argue that it	1
may supply such a	1
may vary dynamically and	1
you to use the	1
you to define 64-bit	1
you to manipulate the	1
you to override the	1
you to reserve the	1
you are in doubt	1
you are not sure	1
you are not doing	1
you are not satisfied	1
you are not testing.	1
you are using the	1
you are using and	1
you are using an	2
you are using vector	1
you are using functions	1
you are using single	1
you are using __fastcall.	1
you are sure the	1
you are sure that	2
you are sure you	1
you are making a	1
you are making programs	1
you are making branches	1
you are doing a	1
you are certain that	1
you are including a	1
you are testing contains	1
you are satisfied with	1
you are overriding Intel's	2
you are dealing with	1
you are doing. See	1
you are feeding an	1
you are risking to	1
you can have one	1
you can have eight	1
you can use the	2
you can use a	1
you can use it	1
you can use only	1
you can make a	1
you can make an	1
you can make arrays	1
you can only have	1
you can set multiple	1
you can do is	1
you can do to	1
you can do with	1
you can do this	2
you can do arithmetic	1
you can double the	1
you can also find	1
you can take advantage	1
you can avoid the	1
you can avoid virtual	1
you can avoid it.	1
you can avoid hyperthreading	1
you can get the	1
you can get very	1
you can get answers	1
you can read about	1
you can assume that	2
you can reduce the	1
you can turn on	1
you can rely on	2
you can clear or	1
you can predict where	1
you can expect a	1
you can expect 64-bit	1
you can generally assume	1
you can increase the	1
you can obtain most	1
you can obtain much	1
you can toggle multiple	1
you may of course	1
you may as well	2
you may have to	1
you may use the	1
you may use a	1
you may use 64-bit	1
you may make multiple	1
you may make some	1
you may also look	1
you may call the	1
you may want to	2
you may get a	2
you may store all	1
you may write FatalAppExitA(0,"Array	1
you may put the	1
you may read the	1
you may improve the	1
you may improve efficiency	1
you may consider the	1
you may consider if	2
you may consider whether	2
you may define a	1
you may reuse the	1
you may actively invalidate	1
you may view the	1
you have to do	3
you have to call	2
you have to avoid	1
you have to store	1
you have to replace	1
you have to execute	1
you have to vectorize	1
you have to identify	1
you have this problem	1
you have two different	1
you have even a	1
you have big data	1
you have big arrays	1
you have special reasons	1
you have ample resources.	1
you use is a	1
you use pre-increment or	1
you will be loading	1
you will have only	1
you will get one	1
you will get no	1
you will see shortly.	1
you will never spend	1
you will notice that	2
you will soon get	1
you make a test	1
you make sure it	1
you make your own	1
you only need a	1
you should be aware	1
you should be prepared	1
you should by all	1
you should not call	1
you should test the	1
you should avoid any	1
you should avoid making	1
you should avoid macros	1
you should look at	1
you should choose an	1
you should apply the	1
you should apply CPU	1
you should multiply it	1
you should disable it	1
you do use the	1
you cannot be sure	1
you cannot make any	1
you cannot always rely	1
you cannot avoid conversions	1
you cannot replace a	1
you cannot assume that	1
you cannot find the	1
you cannot rely on	1
you cannot expect the	1
you cannot swap the	2
you cannot increase the	1
you take into account	1
you need to use	1
you need to do	1
you need to test	1
you need to remove	1
you need it. In	1
you access a variable	1
you access to all	1
you access part of	1
you want the function	1
you want the code	1
you want the executable	1
you want a number	1
you want to be	1
you want to make	3
you want to call	1
you want to avoid	1
you want to compile	1
you want to check	1
you want to calculate	1
you want to optimize	2
you want to see	1
you want to improve	1
you want to know	1
you want to find	2
you want to prevent	1
you want to keep	1
you want to compare	1
you want to 155	1
you want to flip	1
you want to optimize,	1
you want it to.	1
you want as static	1
you want this to	1
you want when the	1
you want vectorization then	1
you want them to	1
you must be careful	1
you must make sure	1
you must make your	1
you must do the	1
you must consider if	1
you avoid the large	1
you avoid an excessive	1
you compile the program	1
you compile the output	1
you compile with the	1
you optimized for is	1
you get four float	1
you would have spent	1
you run the optimized	1
you write a 64-bit	1
you see in the	1
you don't have to	3
you don't need a	1
you don't need conversions	1
you don't even have	1
you don't want this	1
you don't care to	1
you don't understand it.	1
you put a parenthesis	1
you read the value	1
you look at the	3
you assume that model	1
you know that processor	1
you know what you	1
you choose to use	1
you just want the	1
you start to program.	1
you start to optimize	1
you start to code,	1
you change pre-increment to	1
you turn them off	1
you unroll by two	1
you divide the data	1
you divide an integer	1
you consider making highly	1
you expect the table	1
you expect the &&	1
you gain in speed	1
you gain by testing	1
you could calculate *p+2	1
you had used intrinsic	1
you measure are much	1
you spend on redesigning	1
you declare an int,	1
you follow the guidelines	1
you specify an option	1
you prefer is a	1
you forget to make	1
you forget to delete	1
you know). The code	1
you discover that there	1
you analyze all pointers	1
you activate a particular	1
{ a = a	8
{ a = b;	1
{ a = c;	1
{ The effect of	1
{ for (int i	2
{ for (c =	3
{ for (c2 =	2
{ for (c1 =	1
{ // function to	1
{ // loop through	2
{ // loop columns	1
{ // do nothing	1
{ // table of	1
{ // test bits	1
{ // test sign	1
{ // SSE2 supported	2
{ // AVX supported	2
{ // check if	1
{ // Make a	3
{ // Make dynamic	1
{ // Table of	1
{ // Floating point	1
{ // go to	1
{ // Loop to	1
{ // Loop through	1
{ // Loop r2	1
{ // No cache	1
{ // Define vector	1
{ // Define macro	1
{ // f is	1
{ // Load eight	4
{ // Cache contentions	1
{ // Array with	1
{ // n! //	1
{ // n! int	1
{ // u.f >	1
{ // Bounds checking	1
{ // Get supported	1
{ // Get upper	1
{ // Check that	1
{ // (N &	1
{ // Overflow may	1
{ // Returns a	1
{ // Catch exceptions	1
{ // Remove right-most	1
{ // Safe []	1
{ // Generic version	1
{ // polynomial(x) =	1
{ // Round to	1
{ // Detect supported	1
{ // 2-dimensional vector	1
{ // abs(u.f) >	1
{ // Main loop	1
{ if (i %	1
{ if (b) {	4
{ if (n &	1
{ if (n >	1
{ if (b ==	1
{ if (b !=	1
{ if (y) {	1
{ int a =	1
{ int i; for	1
{ int i; int	1
{ int i; 84	1
{ int a, b,	2
{ int b, c;	1
{ int a; int	1
{ int r, c;	2
{ int list[100]; Func1(list,	1
{ int a[1000]; F1(a);	1
{ int a:4; int	2
{ int dummy[4]; volatile	1
{ has the same	1
{ double b; //	1
{ double y =	1
{ double d; int	1
{ double x2 =	1
{ float a, b,	1
{ float f; int	7
{ float f; unsigned	1
{ float xn =	1
{ float b[1000]; F2(b);	1
{ static float list[]	1
{ static const double	1
{ return a -	1
{ return a +	1
{ return a *	1
{ return a >	1
{ return x *	4
{ return 0; //	1
{ return x; }	1
{ return 1.0; }	1
{ return _mm_loadu_si128((__m128i const*)p);	2
{ return _mm_loadu_si128((__m128i const*)p);}	1
{ return Func1(x) *	1
{ return pow(x,10); }	1
{ return IntegerPower<10>(x); }	1
{ return x*x +	1
{ return ipow(x,10); //	1
{ return powN<true,N/2>::p(x) *	1
{ return _mm_load_si128((__m128i const*)p);	1
{ return square(x) +	1
{ return _mm_cvtss_si32(_mm_load_ss(&x));} static	1
{ return N; }	1
{ return vector(x +	1
{ return _mm_cvtsd_si32(_mm_load_sd(&x));} The	1
{ const int x;	1
{ const int arraysize	1
{ unsigned int fraction	3
{ case 0: printf("Alpha");	1
{ short int a;	1
{ c = 1;	1
{ ... a =	1
{ ... can be	1
{ ... } }	1
{ ... There is	1
{ ... Here, you	1
{ ... Here you	1
{ ... Conversions between	1
{ y = cos(x);	2
{ y = sin(x);	2
{ public: int c;	1
{ public: int a;	1
{ public: int a[100];	1
{ public: static double	4
{ public: void Disp()	2
{ public: void Hello()	1
{ public: void NotPolymorphic();	2
{ public: virtual void	4
{ public: ... ~C1();	1
{ public: B2 b2;	1
{ r = r	1
{ union { 89	1
{ a[i] = b	1
{ a[i] = i	1
{ a[i] = r	1
{ a[i] = temp;	2
{ a[i] = *p	1
{ a[i] = b[i]	1
{ a[i] = Induction;	1
{ S1 x, y;	1
{ temp = a[i]	1
{ d = 0;	1
{ sum += xn	1
{ struct { int	1
{ list[i] += 1.0f;	2
{ cout << 1;	2
{ cout << 2;	2
{ cout << "Hello	2
{ cout << "Error:	2
{ seconds = 0;	1
{ *p = *p	2
{ try { F1();	1
{ j = order(i);	2
{ C1 x; ...	1
{ C1 obj1; C0	1
{ C1 Object1; C2	1
{ sum1 += list[i];	1
{ b[i] = Func(a[i]);	1
{ __declspec(align(16)) static const	1
{ CChild1 Object1; CChild2	1
{ 89 int a[1000];	1
{ _mm_storeu_si128((__m128i *)d, x);	2
{ _mm_storeu_si128((__m128i *)d, x);}	1
{ Vec16s a, b,	1
{ (iset >= 8)	1
{ __m128 s; s	1
{ F2(b); } }	1
{ aa[i] = (bb[i]	1
{ aa[i] = bb[i]	1
{ FuncA(i); } else	1
{ FuncA(i); FuncC(i); FuncB(i+1);	1
{ s0 += a[i];	1
{ F1(a); } else	1
{ goto CFALSE; }	1
{ goto DTRUE; }	1
{ DoThisThreeTimesAWeek(); } 135	1
{ DoThisThreeTimesAWeek(); } By	1
{ list[i].a = 1.0;	1
{ swapd(a[r2][c2],a[c2][r2]); } }	2
{ memset(a, 0, sizeof(a));	1
{ Sunday, Monday, Tuesday,	1
{ largest_abs = absvalue;	1
{ Table[x] = A*x*x	1
{ Table[x] = Y;	1
{ b.load(bb+i); c.load(cc+i); a	1
{ Sunday = 1,	1
{ time1 = ReadTSC();	1
{ protected: T a[N];	1
{ FuncB(i); } FuncC(i);	1
{ CFALSE: c =	1
{ DTRUE: d =	1
{ "Alpha", "Beta", "Gamma",	1
{ __declspec(__align(64)) double matrix[SIZE][SIZE];	1
{ ab[i].b = Func(ab[i].a);	1
{ _mm_store_si128((__m128i *)d, x);	1
{ F1(); } catch	1
{ StoreNTD(&a[c][r], b[r][c]); }	1
{ temp->a = 1.0;	1
{ a[c][r] = b[r][c];	1
{ _mm_stream_pi((__m64*)dest, *(__m64*)&source); //	1
{ 92 DynamicArray[i] =	1
have the time to	1
have the same value.	1
have the member functions	1
have the following disadvantages	1
have the best and	1
have the necessary information	1
have the line number	1
have the disadvantage of	1
have the disadvantages mentioned	1
have the selected instruction	1
have a = 0x2710	1
have a function for	1
have a standard function	1
have a high priority.	1
have a graphics processing	1
have a feature for	1
have a feature called	1
have a special loop	1
have a destructor to	1
have a destructor that	1
have a reduced number	1
have a 'this' pointer	1
have a false vendor	1
have a strict formalism	1
have a larger memory	1
have a non-inlined copy	1
have a dedicated physics	1
have a natural order	1
have a natural ordering?	1
have a built-in test	1
have a physics processing	1
have a niche in	1
have a balanced mix	1
have a temp1 and	1
have a strategy for	1
have to be compiled	1
have to be done	1
have to be put	1
have to be aligned	1
have to be designed	1
have to be restored	1
have to be renewed.	1
have to make sure	1
have to set the	1
have to do the	2
have to do is	1
have to do a	1
have to do manually.	1
have to call the	2
have to take into	1
have to test several	1
have to avoid long	1
have to check if	1
have to calculate each	1
have to add the	1
have to store the	1
have to replace u[1]	1
have to save some	1
have to save recovery	1
have to unroll a	1
have to execute _mm_empty()	1
have to vectorize the	1
have to include the	1
have to care about	1
have to wait for	1
have to identify the	1
have to prefetch data	1
have to distinguish between	1
have to worry about	1
have to worry much	1
have to push and	1
have to distribute all	1
have to fix the	1
have to obey any	1
have to reinvent the	1
have to consult the	1
have to adapt to	1
have as few branches	1
have not been tested	1
have an operating system.	1
have an extra cache	1
have an assembly output	1
have an option for	3
have an option (Windows:	1
have an empty throw()	1
have an up-to-date version.	1
have an attribute which	1
have an estimated calculation	1
have this problem when	1
have this problem. Vectors	1
have more than four	1
have more references to	1
have more powerful computers	1
have memory caches. Typically,	1
have vector instructions that	1
have functions for integer	1
have only one floating	1
have only one addition	1
have CPU dispatching 125	1
have other values if	1
have other values than	2
have used the trick	1
have used char (or	1
have one and only	1
have one addition every	1
have one instance for	1
have no more threads	1
have no other value	1
have no other values	2
have no cache (see	1
have no branch prediction	1
have no specific order	1
have no specific recommendation	1
have no check for	2
have no checking for	1
have no out-of-order execution.	1
have no explanation why	1
have no native floating	1
have floating point capabilities	1
have each their stack.	1
have multiple // versions:	1
have multiple versions. This	1
have two or more	2
have two different versions	1
have two different types	1
have such a feature	1
have such checks. But	1
have efficient table-based methods	1
have many different CPUs	1
have many file input/output	1
have many keywords and	1
have variable lengths that	1
have any other value	1
have any brand name	1
have some disadvantages that	1
have very different speeds.	1
have very good performance	1
have very few restrictions	1
have long double precision	1
have less computing resources	1
have even a single	1
have access to the	1
have its pointer set	1
have its own IDE.	1
have execution units, memory	1
have big data structures	1
have big data structures.	1
have big arrays and	1
have big endian storage	1
have much less memory	1
have several versions for	1
have several advantages over	1
have been stored in	1
have been replaced by	1
have been tested only	1
have been initialized to	1
have been defined in	1
have been added and	1
have been added? If	2
have been lost at	1
have been reordered, inlined,	1
have been found, then	1
have been unsatisfied with	1
have been identified. My	1
have done the job	1
have done a good	1
have four numbers of	1
have implemented a separate	1
have implemented a collection	1
have support for intrinsic	1
have support for whole	1
have eight numbers of	1
have values far from	1
have information about functions	1
have certain instructions that	1
have addresses divisible by	1
have quite dramatic consequences.	1
have fast ways of	1
have Boolean variables as	1
have separate containers for	1
have put the whole	1
have various optimization options	1
have various options to	1
have three values per	1
have public variables in	1
have made a series	1
have just two branches:	1
have tested the strlen	1
have tested the capability	1
have tested can convert	1
have tested were able	1
have tested implement OneOrTwo5[b!=0]	1
have tested seem to	1
have become more powerful.	1
have become bigger and	1
have inefficient code-based methods	1
have described some of	1
have particularly slow implementations	1
have special reasons to	1
have names that begin	1
have names with suffixes	1
have little or no	1
have similar CPU dispatch	1
have features for automatic	1
have added a bounds	1
have provided several examples	1
have #if directives around	1
have family number 6!	1
have exactly the same	1
have spent fighting with	1
have powerful facilities that	1
have mixed precision require	1
have mixed types or	1
have constructors and destructors.	1
have unacceptably long response	1
have seen many examples	1
have AND'ed b with	1
have ever seen can	1
have facilities for making	1
have finished the time-consuming	1
have (set) = (10000	1
have supplied in the	1
have undesired effects. This	1
have discovered that there	1
have developed a test	1
have extern "C" declaration	1
have inherent support for	1
have got low priority.	1
have got RISC cores,	1
have inserted UnusedFiller in	1
have difficulties making floating	2
have worked well in	1
have Booleans as output	1
have occurred. This makes	1
have ample resources. For	1
have studied do not	1
have confirmed this by	1
have sent me corrections	1
have little-endian storage, but	1
have exploited. A good	1
have gone to great	1
have tested. The reason	1
have tried. The Microsoft,	1
this the time it	2
this the time before	1
this is the most	1
this is the case	1
this is the job	1
this is a pure	1
this is to make	1
this is to help	1
this is that the	1
this is that all	1
this is not the	1
this is not a	2
this is not an	1
this is not possible	1
this is not always	1
this is not necessary	1
this is only possible	1
this is possible in	1
this is often faster	1
this is likely to	1
this is permissible when	1
this is sufficiently accurate	1
this is extremely inefficient,	1
this is obvious, then	1
this to be the	1
this to be a	1
this to i and	1
this in a protected	1
this in a pivot	1
this for testing single	1
this can be implemented	1
this can cause contentions	1
this can eliminate branches,	1
this or for the	1
this function is InstructionSet().The	1
this function to measure	1
this function and calculate	1
this function can modify	1
this function on CPUs	1
this by // Example	5
this by using an	1
this by making i	1
this by preferably using	1
this by measuring the	1
this by invoking the	1
this by assigning a	1
this by writing: 103	1
this with an example.	1
this with induction variables.	1
this code is that	1
this code can be	1
this code with a	1
this code version performs	1
this may work with	1
this may improve the	1
this time has been	1
this time lag. Thinking	1
this will use full	1
this will make the	1
this will trigger the	1
this memory block is	1
this only happens rarely.	1
this instruction set and	1
this instruction set or	1
this instruction set?". A	1
this loop by using	1
this loop will take	1
this example is a	1
this example is called	1
this example can be	2
this example has three	1
this example only to	1
this example should be	1
this example so that	1
this pointer is then	1
this pointer in member	1
this library with the	2
this number of iterations.	1
this number we get	1
this value will propagate	1
this value from the	1
this table may be	1
this way is equal	1
this way includes the	1
this makes the code	1
this address is not	1
this example, the sign	1
this example, the conversion	1
this example, the DelayFiveSeconds	1
this example, we are	1
this example, a, b	1
this example, f(x) or	1
this bit scan instruction.	1
this first manual. The	1
this optimization automatically in	1
this optimization explicitly. Divisions	1
this code. For example,	1
this method is that	1
this method is extremely	1
this method is safer.	1
this method for all	1
this method if memory	1
this method only for	1
this method doesn't work	1
this method works only	1
this part of the	2
this case is to	1
this case is faster	1
this case it may	1
this case it will	1
this case it doesn't	1
this case you have	1
this case there is	1
this case we need	1
this case so we	1
this error is easy	1
this error by avoiding	1
this important new update	1
this extra element zero.	1
this does not work	1
this work on non-Intel	1
this result in a[i].	1
this language gained remarkably	1
this option only in	1
this line by any	1
this works and suggests	1
this works only if	1
this manual for reasons	1
this manual at www.agner.org/optimize/cppexamples.zip	2
this manual at www.agner.org/optimize/cppexamples.zip.	1
this calculation implemented with	1
this problem is to	3
this problem are the	1
this problem by defining	1
this problem by bypassing	1
this problem when the	1
this solution is using	1
this solution is too	1
this solution can still	1
this would be invalid	1
this would give annoyingly	1
this every time a	1
this information to optimize	1
this multiplication will be	1
this complicated template method.	1
this requires static linking	1
this feature is rarely	2
this feature is seldom	1
this function, though not	1
this range then the	1
this section for some	1
this section if you	1
this section by summing	1
this example: 38 //	1
this statement so that	1
this hot spot. Repeating	1
this fact by replacing	1
this task when the	1
this shift in software	1
this prevents a faster	1
this efficiency lies in	1
this discussion that the	1
this alignment automatically. The	1
this effect is so	1
this time, any processor	1
this optimization. 8.2 Comparison	1
this address. Step (1)	1
this might be a	1
this problem. The most	1
this problem. If a	1
this problem. These instructions	1
this problem. 7.11 Type	1
this problem. Vectors of	1
this series of manuals.	1
this to: // Example	5
this brand was less	1
this involves the problems	1
this unit is pipelined,	1
this kind of instructions	1
this kind of problems	1
this kind of optimizations	1
this jump by copying	1
this case. The best	1
this case. A binary	1
this case. You cannot	1
this case. Loop unrolling	1
this polynomial can be	1
this principle for objects	1
this method. Your measurement	1
this manual. You have	1
this manual. 2.3 Choice	1
this case, the performance	1
this example. We might	1
this option. This requires	1
this option. Use the	1
this option. 8.4 Obstacles	1
this appears to be	1
this unit-test may have	1
this manually. This principle	1
this format. Other compilers	1
this reordering easier for	1
this distance the critical	1
this wasteful copying of	1
this purpose. It just	1
this condition. In general,	1
this bookkeeping depends very	1
this argument is that	1
this problem: 1. Relocation.	1
this problem: (1) check	1
this purpose, or you	1
this column. Number 17	1
this "override" feature. All	1
this initialization, or if	1
this manual, but you	1
this manual, I am	1
this limitation). 14.11 Static	1
this interval, for example	1
this did not improve	1
this works, here's an	1
this topic, see my	1
this rule. Splitting up	1
this delaying process is	1
this limitation and other	1
this block: 62 __try	1
this chapter. Using the	1
this loop? Certainly not!	1
this reason. A program	1
this reason, you can	1
this mask, and bb[i]*cc[i]	1
this place. This can	1
this respect. 7.15 Function	1
this capability: // Example	1
this chapter, I have	1
time the function is	8
time the function pointer	1
time the program is	1
time the program starts.	1
time the variable pointed	1
time the software was	2
time the critical function	1
time the computer starts	1
time the statement was	1
time is so long	1
time is typically between	1
time is needed for	1
time is actually more	1
time is included in	1
time is interpreted in	1
time is determined by	1
time is measured with	1
time is spent in	1
time is spent on	1
time is doubled. The	1
time is consistent for	1
time is wasted on	2
time a function is	2
time a new and	1
time a new object	1
time a new processor	1
time a string is	2
time a thousand cache	1
time of programming will	1
time of 250 ms.	1
time of programming. The	1
time of programming. 13.3	1
time to call a	1
time to user input	1
time to calculate when	1
time to copy the	1
time to load a	1
time to execute then	1
time to e.g. a	1
time to share the	1
time to eliminate everything	1
time to transpose the	1
time to transpose a	1
time to evaluate and	1
time to load. A	1
time to answer questions	1
time to calculate. If	1
time and it avoids	1
time and b is	1
time and compatibility problems	1
time and insert the	1
time and rarely the	1
time and show the	1
time and resolve any	1
time and afterwards a	1
time and maintainability of	1
time in the unit-test	1
time in most cases,	1
time in library functions	1
time in case of	1
time in vectors of	1
time in thousand so	1
time for the user.	2
time for software users	1
time for WTL applications	1
time that is measured	1
time that it takes	1
time can be annoyingly	1
time or a reasonable	1
time or a not-too-big	1
time it is used	1
time it is filled	1
time it takes to	22
time it takes before	1
time it was executed.	1
time it was programmed.	2
time it takes. The	1
time it takes. Debugging.	1
time it uses. There	1
time if and compile-time	1
time if it is	1
time on the user	1
time on processors that	2
time on executing library	1
time on deciding which	1
time as the other	1
time as long as	1
time an object is	1
time int CriticalFunction_Dispatch(int parm1,	1
time than the table	1
time than the actual	1
time than other kinds	1
time than single precision.	1
time than addition and	1
time than accessing a	1
time than processing the	1
time than addition, subtraction	2
time than rounding unless	1
time than normal on	1
time than anything else	1
time than looping through	1
time than normally. There	1
time may be justified	1
time you would have	1
time you spend on	1
time you activate a	1
time when the floating	2
time when the CPUID	1
time when code and	1
time when performance is	1
time then the sampling	1
time then there is	2
time at unpredictable intervals	1
time has been wasted.	1
time because the memory	1
time because the cache	1
time because of the	1
time because it needs	1
time because each call	1
time which version of	1
time but avoids the	1
time used for file	1
time used by all	1
time each part takes.	1
time we are swapping	1
time so that the	1
time so that it	1
time You can use	1
time before the end	1
time before and after	1
time rather than at	2
time they are used.	1
time Some developers feel	1
time while if is	1
time doing the division.	1
time both during installation	1
time unless the SSE2	1
time too small or	1
time goes to cache	1
time loading files or	1
time delay that the	1
time under worst-case conditions.	1
time loops or compile-time	1
time unit is clock	1
time applications. Remember that	1
time stamp counter in	1
time stamp counter can	1
time stamp counter //	1
time stamp counter before	1
time stamp counter becomes	1
time stamp counter. The	1
time stamp counter. This	1
time consuming because it	2
time consuming parts only.	1
time consuming updates may	1
time T to T+5,	1
time measurements to avoid	1
time measurements may require	1
time waiting for user	2
time spent in the	1
time spent on function	1
time Func is executed.	2
time here. It may	1
time regardless of whether	1
time consuming. A collection	1
time consuming. Therefore, the	1
time consuming. Therefore, you	1
time consuming. Sometimes it	1
time searching for updates	1
time consumption of different	1
time consumption of each	1
time consumption as the	1
time consumption was down	1
time slices is determined	1
time slices of typically	1
time slices to 120	1
time slices allocated to	1
time cleaning up spaces	1
time compared to the	1
time consumers ................................................................................ 16	1
time consumers 3.1 How	1
time intervals are short.	1
time MemberPointer is declared.	1
time consumer to many	1
time consumer if it	1
time T+1 to T+6,	1
time slices. This will	1
time consumers. Choose the	1
time consuming, especially if	1
time intervals. Some programs	1
time packed into a	1
time lag. Thinking in	1
time measurement. If time	1
time slice are quite	1
time measure. This is	1
time measurements: warm up	1
use the same memory	2
use the same member	1
use the same register	3
use the same space	1
use the same induction	1
use the same unit	1
use the same register.	1
use the same DLL	1
use the same principle	1
use the functions memset	1
use the CPU detection	1
use the most complicated	1
use the Intel compiler	1
use the Intel math	1
use the static version	1
use the 64-bit vectors	1
use the value in	1
use the software implementation	1
use the const keyword	1
use the bit scan	1
use the best possible	1
use the AVX instructions.	1
use the copy of	1
use the well optimized	1
use the name _alloca)	1
use the high processing	1
use the zero flag	1
use the source annotation	1
use the induction variable	1
use the XMM registers	1
use the vectors of	1
use the core clock	1
use the #pragma vector	1
use the local name	1
use the safe formula	1
use the so-called position-	1
use the bitwise operators	1
use the header file	1
use the default integer	1
use the memcpy function	1
use the Gnu, Clang,	1
use the smallest data	1
use the smallest integer	2
use the newest instruction	1
use the upper 32	1
use the lrint function:	1
use the GetTickCount or	1
use the _mm_clflush intrinsic	1
use is a matter	1
use a function library,	1
use a compiler option	1
use a different operating	1
use a different kind	1
use a loop for	1
use a loop counter:	1
use a set of	2
use a version control	1
use a table //	2
use a new register	1
use a constant reference	1
use a stack frame	1
use a container that	1
use a container or	1
use a lot of	1
use a lookup table	1
use a lookup table:	1
use a linked list	1
use a negative list	1
use a database for	1
use a smart pointer	1
use a linear array	1
use a linear list	1
use a hash table	1
use a console mode	1
use a sorted list	1
use a systematic and	1
use a #define, const	1
use a union, as	1
use a queue. It	1
use of the data	1
use of the extra	1
use of the micro-op	1
use of vector operations	1
use of integer operations.	1
use of floating point	1
use of Intel vector	1
use of two induction	1
use of register variables.	1
use of assembly language	1
use of arrays in	1
use of threads is	1
use of classes and	1
use of intrinsic vectors	1
use of << and	1
use of RAM memory.	1
use of structures (without	1
use of templates makes	1
use of software. For	1
use of memset and	1
use of longjmp if	1
use of coprocessors is	1
use and data cache	1
use and returns a	1
use in system code.	1
use in case the	1
use in programs that	1
use for a particular	1
use for each processor	1
use for many programmers	1
use for recovering or	1
use that for a	1
use can be critical.	1
use it for lists	1
use it for improving	1
use on such systems	1
use as pivot in	1
use an integer size	1
use an object file	1
use an object oriented	1
use an intermediate code	1
use an advanced and	1
use than pointers because	1
use than others. While	1
use this function to	1
use this library with	2
use this number of	1
use this method only	1
use this information to	1
use this complicated template	1
use this principle for	1
use time searching for	1
use more time loading	1
use more resources than	1
use vector operations on	1
use vector operations where	1
use vector operations automatically	1
use vector instructions (see	1
use vector operations. You	1
use vector classes, as	1
use different memory spaces	1
use different memory areas,	1
use different execution units.	1
use only the lower	1
use only a small	1
use only compilers and	1
use one container for	1
use one 256-bit vector	1
use integer operations for	1
use double precision without	1
use Intel VTune, for	1
use float rather than	1
use multiple CPU cores	1
use multiple CPUs or	1
use multiple accumulators if	1
use static variables. See	1
use static linking, as	1
use 64-bit systems if	1
use 64-bit integers if	1
use 64-bit integers with	1
use such methods only	1
use any of the	1
use 32-bit integers in	1
use unsigned integers -	1
use 64 bits rather	1
use rather than a	1
use pointers may be	1
use these methods to	1
use 32 bits in	1
use dynamic memory allocation	4
use dynamic memory allocation.	2
use assembly code or	1
use assembly language. In	1
use large amounts of	1
use big endian storage.	1
use single precision if	1
use single precision. Using	1
use AMD CodeAnalyst. Unfortunately,	1
use exception handling even	1
use AVX only when	1
use inline assembly code	1
use standard user interface	1
use standard API calls	1
use intrinsic functions or	1
use induction variables for	1
use string classes, such	1
use lookup tables if	1
use runtime type identification	1
use linked lists. A	1
use later in the	1
use binary search for	1
use depends on what	1
use STL containers. See	1
use #pragma vector aligned	1
use position-independent code by	1
use position-independent code everywhere	1
use vectorized code or	1
use it. Complicated code	1
use full 64-bit addresses	1
use algebraic manipulations on	1
use situation where the	1
use alternative implementations. 7.22	1
use standardized installation tools.	1
use #if instead of	1
use just-in-time compilation of	1
use just-in-time compilation. The	1
use GOT and PLT	1
use absolute references in	1
use truncation towards zero,	1
use excessive loop unrolling	1
use pre-increment or post-increment.	1
use hyperthreading or not	1
use branches, provided that	1
use relocation. The DLLs	1
use internet or intranet	1
use denormal numbers. You	1
use hexadecimal numbers because	1
use ~ for NOT.	1
use thread-safe functions. A	1
use objconv or a	1
use SafeArray: // Example	1
use inappropriate CPU dispatch	1
use segmentation of the	1
use try, catch, and	1
more of the above	1
more and more important.	1
more by the loader	1
more by choosing the	1
more on this topic,	1
more than the time	1
more than the number	1
more than a hundred	1
more than a minute	1
more than it takes	1
more than it says.	1
more than an hour.	1
more than one variable	1
more than one way	1
more than one call	1
more than one line	1
more than one instance	1
more than one thing	1
more than two ways.	1
more than 2 gigabytes	1
more than four parameters.	1
more than calling the	1
more than once then	1
more than half the	1
more than 250 ms.	1
more than 99% of	1
more than 33% when	1
more than doubled for	1
more time to calculate	1
more time to load	1
more time to transpose	1
more time to load.	1
more time than the	2
more time than other	1
more time than single	1
more time than accessing	1
more time than processing	1
more time than normal	1
more time than anything	1
more time than looping	1
more time but avoids	1
more time loading files	1
more then the offset	1
more memory resources than	1
more memory blocks than	1
more data than it	1
more vector instructions SSE4.2	1
more CPU time on	1
more cache space. Excessive	1
more integer to the	1
more integer vector instructions	1
more integer units, one	1
more efficient to have	1
more efficient to use	2
more efficient to make	2
more efficient to store	2
more efficient to convert	1
more efficient to allocate	1
more efficient to define	1
more efficient to implement	1
more efficient to determine	1
more efficient to re-use	1
more efficient to pool	1
more efficient and enables	1
more efficient in 64-bit	3
more efficient in some	1
more efficient if it	1
more efficient than the	1
more efficient than a	1
more efficient than if	1
more efficient than x	2
more efficient than when	1
more efficient than 64-bit	1
more efficient than functions.	1
more efficient than frame	1
more efficient than mov	1
more efficient than comparing	1
more efficient than post-increment.	1
more efficient than Sum2	1
more efficient than investing	1
more efficient when there	1
more efficient when arrays	1
more efficient because relative	1
more efficient way if	1
more efficient solution that	1
more efficient container class	1
more efficient code, but	1
more efficient alternatives that	1
more efficient today where	1
more clock cycles than	1
more performance monitor counters	2
more time. Single precision	1
more template instances will	1
more useful methods for	1
more dynamic libraries are	1
more bits than a	1
more error prone. The	1
more error prone. A	1
more important to economize	1
more important it is	1
more important than optimizing	1
more important than speed.	1
more versions of the	2
more threads with the	1
more threads writing to	1
more common to exchange	1
more advantageous the smaller	1
more advantageous if the	1
more likely to inline	1
more information about mathematical	1
more space in the	1
more space than needed.	1
more space 91 step	1
more complicated to make	1
more complicated and time	1
more complicated and error-prone.	1
more complicated in a	1
more complicated if the	1
more complicated because various	1
more complicated functions like	1
more complicated solution is	1
more complicated implementation is	1
more complicated mathematical tasks.	1
more complicated reductions. Algebraic	1
more resources than the	3
more resources than C	1
more resources than non-virtual	1
more efficient. The size	1
more efficient. The SSE2	1
more efficient. This instruction	1
more efficient. 64-bit Windows	1
more efficient. You can	1
more efficient. 64 bit	1
more efficient. Variables that	1
more examples of bad	1
more difficult to debug	1
more difficult for the	1
more advanced data structures	1
more relevant to test	1
more reductions on integer	1
more references to relocate,	1
more syntax check. It	1
more safe to do	1
more safe than the	1
more discussion of the	1
more clear to the	1
more clear and intelligible	1
more clear and modular.	1
more clear program structure	1
more clear unless the	1
more efficiently by better	1
more efficiently with coarse-grained	1
more efficiently than static	1
more efficiently from the	1
more details on branch	1
more RAM than there	1
more RAM than end	1
more time-consuming than a	1
more frequent if the	1
more iterations back. The	1
more fragmented when the	1
more general method is	1
more random than normal.	1
more important. 9.2 Cache	1
more serious when n	1
more expensive and more	1
more expensive than an	1
more reliable and reproducible	1
more reliable than third	1
more reliable results. If	1
more predictable than the	1
more predictable than integer	1
more compact and efficient	1
more compact if the	1
more compact by joining	1
more compact than an	1
more compact so that	1
more complex and often	1
more complex if the	1
more complex integer expressions.	1
more complex cases it	1
more convenient to calculate	1
more convenient to rely	1
more efficient, and sometimes	1
more powerful solution is	1
more powerful computers to	1
more powerful computers with	1
more popular and used	1
more realistic goal is	1
more jobs simultaneously or	1
more resources, even if	1
more cores, and it	1
more dramatic when contentions	1
more detailed explanation of	1
more reproducible time measurements:	1
more constants. For example,	1
more detail in manual	1
more compact. Accessing a	1
more (128 or 256	1
more focus on the	1
more readable when you	1
more readable but unfortunately	1
more well-structured program that	1
more difficult. The functions	1
more difficult. On the	1
more complex, that there	1
more complex, but not	1
more efforts in optimizing	1
more efficiently. It is	1
more distant future. 12.3	1
more efficient: // Example	1
more primitive, but efficient,	1
more complicated. If the	1
more heuristic guidelines. Most	1
more manageable and easier	1
more powerful. The high	1
when the function is	1
when the function or	1
when the function returns.	4
when the function longjmp	1
when the code is	4
when the code mixes	1
when the data are	1
when the program is	7
when the program starts	1
when the program 153	1
when the loop count	1
when the floating point	3
when the size of	3
when the pointer is	1
when the library is	1
when the object is	2
when the number of	2
when the clock frequency	1
when the optimization of	1
when the SSE2 or	2
when the SSE2 instruction	5
when the arrays are	1
when the work load	2
when the result of	1
when the virtual function	1
when the hardware is	1
when the next new	1
when the next higher	1
when the XMM registers	3
when the computer is	1
when the #pragma vector	1
when the repeat count	1
when the exponent is	2
when the final value	1
when the amount of	1
when the total number	1
when the heap has	1
when the heap space	1
when the row length	1
when the CPUID is	1
when the CPUID instruction	1
when the CPUID was	1
when the factor is	1
when the AVX512 instruction	1
when the highest level	1
when the original is	1
when the 145 SSE2	1
when a is true,	1
when a function is	1
when a memory block	1
when a program has	1
when a pointer to	1
when a new instruction	1
when a user is	1
when a thread is	1
when a global variable	1
when a task switch	1
when a fixed-size array	1
when a genuine compiler	1
when in fact it	1
when it is not	3
when it is outside	1
when it is executed.	1
when it is run.	1
when it has not	1
when it would be	1
when it goes the	1
when it comes to	1
when it returns. But	1
when it involves pure	1
when it occurs, but	1
when it sees a	1
when it exits. For	1
when it changes. A	1
when code and data	2
when code caching is	1
when not selected. Compiler	1
when an operand is	1
when you are not	1
when you are using	2
when you want to	2
when you compile with	1
when you divide an	1
when you discover that	1
when data are accessed	2
when CPU access and	1
when instruction sets are	1
when all threads have	1
when used for defining	1
when used as macros	1
when no reasonable upper	1
when no attempt is	1
when using references. References	1
when Intel libraries are	1
when b is a	2
when b is floating	1
when b is true,	1
when i is not	1
when i is interpreted	1
when static linking is	1
when there is no	2
when C++ is chosen	1
when objects of different	2
when objects can be	1
when we read from	1
when we roll out	1
when performance is important	1
when software uses CPU	1
when long double precision	1
when elements are accessed	1
when called from the	1
when called from a	1
when called from main,	1
when they are no	1
when they are needed,	1
when they are long.	1
when they are disabled	1
when I die. See	1
when accessed from the	1
when arrays are accessed	1
when compiled with -fpic	1
when compiled without -fpic	1
when speed is critical.	1
when speed is important.	1
when several applications use	1
when doing calculations on	1
when doing calculations, and	1
when optimizing multithreaded applications:	1
when shared objects are	1
when their live ranges	1
when running in 64-bit	1
when running on the	1
when running on an	1
when running on non-Intel	1
when n is a	1
when n is an	1
when parts of the	1
when AVX2 is supported	1
when r = 28.	1
when just a single	1
when contentions do not	1
when contentions occur in	2
when columns is a	1
when efficiency is important.	1
when testing which version	1
when testing worst-case performance:	1
when alignment by 16	1
when compatibility with old	1
when copying a large	1
when accessing an object	1
when needed. The bitwise	1
when compiling for the	1
when compiling for a	1
when compiling for 32-bit	1
when compiling for Windows	1
when compiling for Linux.	1
when compiling for AVX2,	1
when compiling module2.cpp. The	1
when calculating the address	1
when applied to a	4
when applied to 32-bit	1
when converted to unsigned.	1
when multiplying with a	1
when portability and ease	1
when converting to double	1
when deciding whether to	3
when deciding whether it	2
when type-casting pointers: The	1
when swapping the order	1
when running. Programs using	1
when choosing a container	1
when going from AVX	1
when mixing code compiled	1
when alloca is used.	1
when interprocedural optimization is	1
when returning from the	1
when none of the	1
when CriticalInnerFunction is called.	1
when false. The value	1
when bb[i] > 0	1
when activated by the	1
when exiting the {}	1
A is not needed	1
A is finished. Obviously,	1
A is slow, then	1
A and then B,	1
A = 1.1, B	2
A function is usually	1
A function that is	1
A function that calls	1
A function that reads	1
A function library with	1
A code that is	1
A code that does	1
A code branch for	1
A compiler for Basic	1
A compiler that automatically	1
A compiler can eliminate	1
A compiler may reorder	1
A compiler has to	1
A more efficient solution	1
A more complicated solution	1
A more general method	1
A more realistic goal	1
A more detailed explanation	1
A more primitive, but	1
A program with many	1
A CPU dispatcher then	1
A CPU dispatch mechanism	1
A loop with a	2
A loop counter should	1
A cache is a	1
A cache works most	1
A class member variable	1
A class doesn't need	1
A floating point constant	1
A double is represented	1
A pointer is in	1
A pointer can be	1
A pointer or reference	1
A + A; double	1
A + B; for	1
A static member function	3
A C++ implementation may	1
A possible negative value	1
A clock cycle on	1
A variable is accessed	1
A variable in a	1
A variable that is	1
A variable can be	1
A variable number of	1
A variable cannot be	1
A performance monitor counter	1
A very time-consuming function	1
A software developer may	1
A long dependency chain	1
A branch that always	1
A branch that goes	2
A branch that follows	1
A branch can be	1
A branch can also	1
A branch instruction takes	1
A branch tree or	1
A const pointer or	1
A const member function	1
A const reference makes	1
A critical innermost loop	1
A call to a	1
A call from the	1
A register is a	1
A template is similar	1
A template with many	1
A template class can	1
A template parameter can	1
A template instance has	1
A test setup may	1
A user interface library	1
A method with multiple	1
A dynamic library can	3
A part of memory	1
A short int is	1
A simple way of	1
A simple solution to	1
A simple constructor may	1
A simple alternative is	1
A simple periodic pattern	1
A constant can be	1
A large array can	1
A large block containing	1
A big file containing	1
A language based on	1
A much higher resolution	1
A virtual processor may	1
A virtual destructor is	1
A common situation where	1
A thread that shares	1
A good compiler can	1
A good compiler will	2
A good way to	1
A good optimizing compiler	1
A good implementation uses	1
A matrix or multidimensional	2
A calculation may be	1
A problem with macros	1
A few files, preferably	1
A few decades ago,	1
A list of which	1
A structure of four	1
A copy constructor is	1
A copy constructor may	1
A shared object has	1
A shared object compiled	1
A lot of code	1
A lot of advanced	1
A microprocessor with out-of-order	2
A dependency chain is	1
A model with a	1
A conversion from floating	1
A disadvantage is that	1
A disadvantage of using	1
A disadvantage of binary	1
A reference is the	1
A dispatcher function decides	1
A better performing software	1
A | (B <<	1
A runtime DLL takes	1
A longer loop- carried	1
A look in my	1
A linked list is	2
A higher level of	1
A process or thread	1
A binary tree or	1
A binary tree may	1
A union is a	1
A union can be	1
A union can also	1
A feature called "Gnu	1
A constructor is implemented	1
A switch statement with	1
A switch statements is	1
A negative integer will	1
A negative list, on	1
A positive overflow of	1
A computer with many	1
A profiler is most	1
A particularly useful performance	1
A limited number of	1
A limited "express" edition	1
A database can consume	1
A frame function is	1
A frame function can	1
A destructor is as	1
A Pentium M processor	1
A further extension of	1
A discussion of different	1
A non-Intel processor makes	1
A macro will interfere	1
A macro declared with	1
A little math is	1
A smart pointer is	1
A smart pointer may	1
A situation where a	1
A similar method can	1
A newer method of	1
A metaprogramming implementation analogous	1
A default constructor is	1
A typical implementation of	1
A pure function is	1
A graphical user interface	1
A hash table can	1
A hash table increases	1
A hash map can	1
A hash map may	1
A collection of a	1
A complex digital operation	1
A debugger can execute	1
A leaf function is	2
A 32- bit version	1
A mixed implementation can	1
A considerable delay comes	1
A popular user interface	1
A context switch is	1
A multidimensional array should	1
A realistic performance test	1
A console mode program	2
A command received by	1
A safer implementation would	1
A commercial compiler for	1
A queue should be	1
A missing check for	1
A redesign can not	1
A competing product is	1
A complete redesign of	1
A for-loop or while-loop	1
A for-loop has three	1
A GNU Free Documentation	1
A programmable logic device	1
A WTL application is	1
A command-line version of	1
A thread-safe function should	1
A Number) if an	1
A sourcebook for fast	1
A little-known alternative to	1
A light-weight alternative is	1
A Pragmatic Look at	1
will be an efficient	1
will be different for	1
will be used most.	1
will be cache contentions	1
will be no extra	1
will be efficient whether	1
will be 2 In	1
will be very efficient	1
will be very helpful	1
will be faster when	1
will be stored in	2
will be stored with	1
will be stored on	1
will be less efficient	1
will be allocated for	1
will be calculated as	1
will be advantageous or	1
will be 1 b	1
will be able to	2
will be better because	1
will be replaced by	1
will be loaded anyway.	1
will be compatible with	1
will be 2. The	1
will be improved by	1
will be loading the	1
will be used, even	1
will be mispredicted 50%	1
will be interpreted as	1
will be called, or	1
will be unable to	2
will be filled up	1
will be infinity or	1
will be joined into	1
will be joined together	1
will be evicted when	1
will be misleading reports	1
will be rounded to	1
will be non-zero, and	1
will be mainstream next	1
will not be compatible	1
will not be portable	1
will not be negative.	1
will not have the	1
will not use the	1
will not use GOT	1
will not only be	1
will not do such	1
will not do so	1
will not get the	1
will not get any	1
will have to calculate	1
will have an extra	1
will have an up-to-date	1
will have more references	1
will have only one	1
will have one and	1
will use the copy	1
will use the XMM	1
will use different memory	1
will use one 256-bit	1
will use full 64-bit	1
will then be repeated	1
will make the program	1
will make the value	1
will make the values	1
will make a few	1
will make only one	1
will make all dynamic	1
will make multiple versions	1
will make any call	1
will make 32 AND-operations	1
will make applications run	1
will make temp a	1
will make exactly identical	1
will make two. Some	1
will point to the	1
will do the best	1
will do this optimization	1
will do such optimizations	1
will most likely be	1
will also work, 133	1
will return the result	1
will call this distance	1
will take only 256	1
will take approximately 500	1
will take 1000 *	1
will take precedence, not	1
will often be C	1
will often take several	1
will often replace integer	1
will always run slower	1
will always select the	1
will always compete for	1
will work only on	1
will work better. If	1
will cause the cache	1
will cause the heap	1
will cause the creation	1
will cause a cache	1
will therefore be a	1
will therefore need modification	1
will get the value	1
will get time slices	1
will get one instance	1
will get no warning	1
will support the ADX	1
will run the advanced	1
will run an inferior	1
will run at more	1
will run faster than	1
will run faster because	1
will calculate xn as	1
will calculate (1./1.2345) at	1
will store the table	1
will optimize this loop	1
will both get the	1
will replace the code	1
will replace this by	1
will typically use integer	1
will typically get the	1
will automatically replace such	1
will automatically choose the	1
will see that p	1
will see shortly. The	1
will never be negative.	1
will never spend time	1
will never throw any	1
will read four elements	1
will give you access	1
will give -2.0 55	1
will look different in	1
will load the structure	1
will generate the value	1
will generate a new	1
will generate an error	1
will generate an overflow	1
will generate an underflow	1
will generate relative addresses	1
will generate relocations in	1
will generate -128, and	1
will usually unroll a	1
will reduce int x	1
will choose the variables	1
will start to calculate	1
will start garbage collection	1
will go into eight	1
will go based on	1
will change the code	1
will change during the	1
will become available in	1
will produce the optimal	1
will still take 10	1
will prevent the compiler	1
will shift out the	1
will save temp in	1
will unroll loops if	1
will fail if the	1
will fail if an	1
will fail if both	1
will convert example 15.1b	1
will convert example 12.8a	1
will convert these types	1
will occur in this	1
will consider if there	1
will delay the availability	1
will enable the compiler	1
will enable optimizations across	1
will align data members	1
will align large static	1
will allow the compiler	1
will happen if the	1
will vectorize the code	1
will vectorize a loop	1
will try to fix	1
will wait until seconds	1
will break at the	1
will notice that the	1
will notice that some	1
will detect an error	1
will soon be obsolete.	1
will soon get a	1
will benefit from the	1
will appear as a	1
will prefer to run	1
will recognize that the	2
will recognize that 10	1
will catch an exception	1
will evict the cache	1
will evict number 1.	1
will evict number 2,	1
will remain locked after	1
will invalidate each other's	1
will conclude this section	1
will crash the program.	1
will crash on old	1
will provoke an error	1
will interfere with any	1
will contend for the	1
will crash. See page	1
will stay on until	1
will dominate in the	1
will trigger the error	1
will grow in the	1
will cut off the	1
will propagate through the	1
will occur: if (SIZE	1
} The function F1	1
} The code in	1
} The compiler may	4
} The compiler generates	1
} The data in	1
} The same example	1
} The loop in	1
} The loop unrolling	1
} The most efficient	1
} The Intel compiler	1
} The two comparisons	1
} The execution times	1
} The advantage of	1
} The multiplication by	1
} The Microsoft compiler	1
} The declaration of	1
} The factor sizeof(S1)	1
} The pow function	1
} The InstructionSet() function	1
} The resulting code	1
} The indirect function	1
} The FactorialTable in	1
} // Use template	1
} // Function to	3
} // No error	1
} // Now call	1
} // At the	1
} // x^2 //	1
} // ipow faster	1
} // Catch floating	1
} // Or #include	1
} // Approximate exp(x)	1
} // Non-polymorphic functions	1
} // Entry to	1
} // Branch/loop function	1
} // continue in	1
} // Default version	1
} if (b) {	1
} if (a ==	1
} if (level >=	1
} This is of	1
} This can be	3
} This function writes	1
} This code has	1
} This code took	1
} This has three	1
} This loop repeats	1
} This loop calculates	1
} This calculation requires	1
} This implementation uses	1
} int main() {	2
} int Size() {	1
} A possible negative	1
} A branch can	1
} A good compiler	1
} A problem with	1
} } The function	1
} } The compiler	2
} } The same	1
} } The most	1
} } The Intel	1
} } The execution	1
} } The Microsoft	1
} } The resulting	1
} } The FactorialTable	1
} } // At	1
} } // Catch	1
} } This function	1
} } This code	1
} } This implementation	1
} } A branch	1
} } } The	1
} } } //	1
} } } This	2
} } } }	3
} } } else	1
} } } Assume	1
} } } Obviously,	1
} } } Transposing	1
} } Example 14.30	1
} } In this	1
} } void Func2()	1
} } else {	2
} } Using a	1
} } Loop unrolling	1
} } Assume that	1
} } Obviously, a	1
} } Here it	1
} } #if INSTRSET	1
} } Transposing a	1
} } 34 else	1
} It is not	1
} It is possible	1
} Example 14.30 finds	1
} Example 14.26 does	1
} Example 14.27 assumes	1
} If Func1 and	1
} double xpow10(double x)	1
} In this example,	2
} In order to	1
} There will be	1
} return a +	1
} return y; }	1
} return sum; }	1
} return add_elements(s); //	1
} You have to	1
} const int SIZE	1
} void SelectAddMul(short int	1
} void Func2() {	1
} void FuncB (int	1
} void F0() {	1
} An array initialized	1
} These two functions	1
} }; // The	1
} }; // Function	1
} }; // Index	1
} }; // Full	2
} }; // Called	1
} }; // Partial	1
} }; class CChild2	1
} }; class C2	1
} }; void test	2
} else if (level	1
} else { a	5
} else { //	3
} else { float	1
} else { return	2
} else { y	1
} else { list[i]	2
} else { F2(b);	1
} else { goto	2
} else { FuncB(i);	1
} else { DTRUE:	1
} Using a union	1
} We can multiply	1
} x; x.f =	1
} Here, the address	1
} Here, the Gnu	1
} Here, it is	1
} Here, each value	1
} Here, we have	1
} Here, log(2.0) is	1
} Loop unrolling Some	1
} Assume that the	1
} sum = (s0+s1)+(s2+s3);	1
} u; if (u.i	1
} u; if (u.i[1]	1
} u; int n;	2
} u; u.i ^=	1
} u; u.i &=	1
} Obviously, a function	1
} Here it is	1
} #if INSTRSET ==	1
} Induction variables are	1
} T & operator[]	1
} polynomial // Polynomial	1
} #endif // INSTRSET	1
} Can be reduced	1
} z = y	1
} catch (...) {	1
} 135 The if	1
} 73 Without optimization,	1
} Microprocessors with out-of-order	1
} FuncC(i); } This	1
} u, v; if	2
} By giving each	1
} 109 } It	1
} Transposing a matrix	1
} 34 else {	1
} module2.cpp int Func2()	1
} 59 third generations	1
} printf("\nResults:"); for (i	1
} 68 else {	1
} 70 Induction variables	1
} 152 If you	1
} 138 A similar	1
} 115 from bb	1
} 111 } You	1
} 112 Vectorized table	1
} list[300] = 0;	1
then the code is	1
then the code can	2
then the code will	1
then the compiler can	1
then the compiler may	1
then the compiler would	1
then the CPU may	1
then the loop branch	1
then the loop control	1
then the most efficient	1
then the pointer has	1
then the version in	1
then the value is	1
then the critical part	1
then the first result	1
then the user might	1
then the even integer	1
then the & operator	1
then the error is	1
then the exception handler	1
then the line that	1
then the line containing	1
then the solution is	2
then the optimal version	1
then the optimal solution	1
then the microprocessor can	1
then the multiplication can	1
then the multiplication would	1
then the expression y	1
then the dispatch branch	1
then the second operand	2
then the profiler may	1
then the instance in	1
then the offset has	1
then the effect of	1
then the target address	1
then the nontemporal write	1
then the length of	1
then the DLL is	1
then the mirror elements	1
then the sampling generates	1
then the transformation of	1
then a simple array	2
then a linear array	1
then a sorted list	1
then be placed in	1
then be repeated 1024/4	1
then it is the	1
then it is not	2
then it is more	1
then it is important	3
then it is necessary	2
then it is advantageous	1
then it is likely	1
then it is recommended	3
then it is usually	1
then it is almost	1
then it is preferred	1
then it is convenient	1
then it is preferable	1
then it is certainly	1
then it is advisable	1
then it can be	1
then it can do	1
then it may be	7
then it may not	1
then it may take	1
then it will be	1
then it will run	2
then it will still	1
then it will break	1
then it must return	1
then it becomes invalid	1
then it obviously takes	1
then an optimizing compiler	1
then you are risking	1
then you can have	1
then you can set	1
then you can avoid	1
then you can get	2
then you can generally	1
then you can obtain	1
then you may of	1
then you may as	1
then you may use	1
then you may make	1
then you may also	1
then you may get	1
then you may put	1
then you may improve	2
then you may consider	3
then you have to	3
then you will have	1
then you will get	1
then you will soon	1
then you should test	1
then you should disable	1
then you cannot be	1
then you cannot assume	1
then you cannot rely	1
then you need to	1
then you must do	1
then you don't need	1
then this can cause	1
then this loop will	1
then this might be	1
then use a smart	1
then use a linear	1
then use a queue.	1
then use an object	1
then use this information	1
then use only the	1
then use binary search	1
then use #pragma vector	1
then make it a	1
then make an additional	1
then make sure the	1
then make sure it	1
then all the G	1
then all five values	1
then each vector can	1
then each thread will	1
then there is a	3
then there is an	1
then there is no	5
then there may be	1
then many times the	1
then we can avoid	1
then we can roughly	1
then we have an	1
then we have (set)	1
then we will consider	1
then we need metaprogramming.	1
then we would have	1
then stored at address	1
then call _mm256_zeroupper() before	3
then call __intel_cpu_features_init_x(). In	1
then its value is	1
then calls a device	1
then calls exit. Calling	1
then c is added	1
then check for the	1
then run on its	1
then add the keyword	1
then add a few	1
then both can be	1
then replace it by	1
then sets a function	1
then put the most	2
then put the operand	1
then transferred as machine	1
then linked together in	1
then become invalid. The	1
then turn it off	1
then output after the	1
then tell the compiler	1
then convert the result	1
then convert it to	1
then handle its own	1
then f is added	1
then F1 has to	1
then try to run	1
then measurements can become	1
then follow the advice	1
then think that you	1
then B, and the	1
then N&(N-1) is 0.	1
then sizeof(S1) would be	1
then interpret that string	1
then 0+1.23456 = 1.23456.	1
then de-referenced in order	1
then merge the multiple	1
then FuncC. Unrolling the	1
then d+e, then c	1
It is the responsibility	6
It is a way	1
It is not a	1
It is not even	1
It is not always	1
It is not necessary	1
It is not good	1
It is not advantageous	1
It is not recommended	3
It is not intended	1
It is not permissible	1
It is not unusual	1
It is more efficient	6
It is more common	1
It is more safe	1
It is used for	1
It is also possible	2
It is also useful	1
It is possible to	16
It is possible in	1
It is very important	1
It is faster to	2
It is faster than	1
It is less efficient	1
It is often more	1
It is often possible	1
It is often faster	1
It is often useful	1
It is often necessary	1
It is often easier	2
It is often preferable	1
It is useful to	1
It is useful for	1
It is important to	6
It is important for	1
It is important that	3
It is accessed with	1
It is best when	1
It is necessary to	2
It is common to	2
It is common for	1
It is common practice	1
It is good to	1
It is therefore a	1
It is therefore not	1
It is therefore possible	1
It is therefore important	1
It is therefore necessary	3
It is therefore certain	1
It is therefore recommended	2
It is therefore safer	1
It is advantageous to	1
It is simply a	2
It is quite difficult	1
It is quite expensive	1
It is recommended to	14
It is difficult to	2
It is difficult for	2
It is usually much	1
It is just easier	1
It is intended for	1
It is intended as	1
It is sometimes possible	1
It is discussed how	2
It is rarely possible	1
It is rarely worth	1
It is easier to	1
It is used, for	1
It is easy to	2
It is almost always	1
It is preferred to	1
It is free and	1
It is measured simply	1
It is expected to	1
It is safer to	1
It is 102 also	1
It is unacceptable to	1
It is assumed that	1
It is OK, however,	1
It is strongly recommended	1
It is tempting to	1
It can be very	1
It can be advantageous	2
It can also be	2
It can also eliminate	1
It can call the	1
It can take several	1
It can therefore be	1
It can contain either	1
It may in some	1
It may be more	2
It may be possible	1
It may be useful	2
It may be necessary	1
It may be advantageous	1
It may be obvious	1
It may be worthwhile	1
It may not be	3
It may even have	1
It may fail to	1
It may catch programming	1
It may seem illogical	1
It may neverthe- less	1
It will not use	1
It will look different	1
It will fail if	1
It will crash on	1
It has the special	1
It has some syntax	1
It has excellent support	1
It should be possible	1
It should be clear	1
It should therefore preferably	1
It should never respond	1
It also works on	1
It also prevents the	1
It takes some experience	1
It takes between 2	1
It takes longer time	1
It makes a runtime	1
It does the same	1
It does not produce	1
It does this by	1
It must be emphasized	1
It doesn't prevent two	1
It works somewhat less	1
It uses the dispatch	1
It uses ebx as	1
It simply stores the	1
It requires support from	1
It just happened to	1
It supports 32-bit and	1
It comes with most	1
It might be possible	1
It reveals a funda-	1
It compares eax with	1
Example 13.1 // CPU	1
Example 16.2 #include <stdio.h>	1
Example 14.9 struct S1	1
Example 14.8 const int	1
Example 12.4b shows how	1
Example 12.4b executes three	1
Example 16.1 #include <intrin.h>	1
Example 9.3 #include <malloc.h>	1
Example 8.26a void Func(int	1
Example 8.26a compiled to	1
Example 12.2 __declspec(align(16)) struct	1
Example 14.6 float list[16];	1
Example 14.28 union {	1
Example 14.30 const int	1
Example 14.30 finds the	1
Example 7.2 a =	1
Example 7.1 float SomeFunction	1
Example 7.8 if (handle	1
Example 14.10 int a,	1
Example 14.11 int a,	1
Example 8.4 double a	1
Example 8.7 int SomeFunction	1
Example 7.21 int i;	1
Example 9.6b. #include "xmmintrin.h"	1
Example 9.5a const int	1
Example 7.7 unsigned int	1
Example 7.11 bool a;	1
Example 7.12 void FuncA	1
Example 11.3 const int	1
Example 7.22 short int	1
Example 7.23 int i;	1
Example 7.20 int i;	1
Example 7.27 float x;	1
Example 7.24 float a;	1
Example 7.25 unsigned int	1
Example 7.28 class c1	1
Example 9.4 const int	1
Example 7.14 class c1;	1
Example 7.16 float list[100];	1
Example 7.17 const int	1
Example 7.13 struct abc	1
Example 7.19 int i;	1
Example 7.18 int FuncRow(int);	1
Example 12.5. Aligned arrays	1
Example 8.26b void Func(int	1
Example 8.26b compiled to	1
Example 14.12b int list[300];	1
Example 14.14b double a,	1
Example 15.1c. Calculate integer	1
Example 14.14a double a,	1
Example 8.15a struct S1	1
Example 14.13b int list[300];	1
Example 9.6a const int	1
Example 9.6a Time per	1
Example 12.1a. Automatic vectorization	1
Example 14.19 static inline	1
Example 14.1c void CriticalInnerFunction	1
Example 14.23b and 14.30	1
Example 14.23b union {	1
Example 11.2b const int	1
Example 11.1a float a,	1
Example 11.1b float a,	1
Example 7.15b SafeArray <float,	1
Example 15.1b. Calculate integer	1
Example 14.26 does not	1
Example 14.26 union {	1
Example 14.27 union {	1
Example 14.27 assumes that	1
Example 14.23 union {	1
Example 8.21 is indeed	1
Example 8.21 void Func1	1
Example 14.5b if ((unsigned	1
Example 14.5a const int	1
Example 7.6. Set flush-to-zero	1
Example 9.5b void transpose(double	1
Example 13.2. CPU dispatching	1
Example 7.40a struct Bitfield	1
Example 7.40b union Bitfield	1
Example 7.40c x.abc =	1
Example 14.3a int n;	1
Example 14.3b int n;	1
Example 11.2a const int	1
Example 12.4a. Loop with	1
Example 8.9b int SomeFunction	1
Example 8.9a int SomeFunction	1
Example 8.23b. Calculate polynomial	1
Example 14.1b int factorial	1
Example 14.1a int factorial	1
Example 8.3a float parabola	1
Example 12.4c. Same example,	1
Example 12.6. Function with	1
Example 7.29b floata; boolb=0;	1
Example 7.29a float a;	1
Example 7.34a. Use macro	1
Example 14.13c int list[301];	1
Example 14.13a int list[300];	1
Example 8.15b struct S1	1
Example 7.10b char a	1
Example 7.10a bool a,	1
Example 12.4e. Same example,	1
Example 8.5b a +=	1
Example 8.5a void Plus2	1
Example 7.31b char string[100],	1
Example 7.31a char string[100],	1
Example 7.43b. Compile-time polymorphism	1
Example 14.4b if ((unsigned	1
Example 15.1a. Calculate x	1
Example 8.13a int i,	1
Example 8.13b int i,	1
Example 14.15b if (a	1
Example 9.1a int Func(int);	1
Example 9.1b int Func(int);	1
Example 7.33b const int	1
Example 8.11b int SomeFunction	1
Example 8.11a int SomeFunction	1
Example 7.38b. Alternative to	1
Example 8.1b float parabola	1
Example 8.1a float square	1
Example 12.9b. Taylor series,	1
Example 8.16 float a,	1
Example 8.17 char a	1
Example 8.18 float a	1
Example 7.43 on page	1
Example 7.42 int Multiply	1
Example 7.45 // Portability	1
Example 7.44 class C1	1
Example 7.4. Signed and	1
Example 12.8a. Sum of	1
Example 7.35b struct S1	1
Example 7.35a struct S1	1
Example 9.6b 64 64	1
Example 8.23a. Loop to	1
Example 12.8b. Sum of	1
Example 14.18c double a,	1
Example 8.2a double a,	1
Example 8.2b a =	1
Example 14.7b. Testing multiple	1
Example 7.9b char a	1
Example 7.9a bool a,	1
Example 8.25 void Func	1
Example 8.20 module1.cpp int	1
Example 8.22 #ifdef __GNUC__	1
Example 12.9a. Taylor series	1
Example 8.3b a =	1
Example 7.38a. Multiple inheritance	1
Example 7.43a. Runtime polymorphism	1
Example 14.21. // Only	1
Example 7.32a double x,	1
Example 14.22b unsigned int	1
Example 14.22a unsigned int	1
Example 15.1d. Integer power	1
Example 14.18a float a,	1
Example 14.18b float a,	1
Example 9.2b void F3(bool	1
Example 9.2a void F1(int	1
Example 8.24. Integer constant	1
Example 7.32b double x,	1
Example 8.6a int a,	1
Example 8.6b int a,	1
Example 7.15a. Array with	1
Example 7.5. Set flush-to-zero	1
Example 14.17b double a1,	1
Example 14.7a. Testing multiple	1
Example 14.16a double y,	1
Example 7.26b float a[100];	1
Example 7.26a float a[100];	1
Example 8.19. Devirtualization class	1
Example 8.10b a =	1
Example 8.10a if (true)	1
Example 7.30b int i;	1
Example 7.30a int i;	1
Example 7.3. Explain volatile	1
Example 7.39 union {	1
Example 7.37 class S3	1
Example 7.36 class S2	1
Example 12.1b. Vectorization with	1
Example 8.12a int i,	1
Example 8.12b int a[2];	1
Example 12.4b. Vectorized with	1
Example 12.4d. Same example,	1
Example 14.12a int list[300];	1
Example 8.14b int i,	1
Example 8.14a int i,	1
Example 7.33a const int	1
Example 8.8b double x,	1
Example 8.8a double x,	1
Example 12.7. Vector class	1
Example 7.34b. Replace macro	1
Example 14.16b double y,	1
Example 14.17a double a1,	1
Example 14.15a if (a	1
Example 14.2a float a;	1
Example 14.2b float a;	1
Example 14.29 union {	1
Example 14.24 union {	1
Example 14.25 union {	1
Example 14.20 double d	1
Example 14.4a const int	1
Example 7.41a class vector	1
Example 7.41b a.x =	1
from the function in	1
from the compiler if	1
from the same or	1
from the same address	1
from the same critical	1
from the same few	1
from the same source	1
from the loop counter.	1
from the cache in	1
from the cache between	1
from the library is	1
from the library file	1
from the value that	2
from the stack before	1
from the function. The	2
from the shared object.	2
from the above example,	1
from the above security	1
from the application code.	1
from the dispatcher function.	1
from the main executable	1
from the level-2 cache	1
from the exponent if	1
from the message loop	1
from the previous value	3
from the beginning rather	1
from the command line	1
from the larger address	1
from the counts. It	1
from the linker. The	1
from the caller to	1
from the server. These	1
from the IDE on	1
from the leftmost column	1
from a number of	1
from a value that	1
from a variable in	1
from a table of	1
from a table in	1
from a branch misprediction	1
from a pointer. It	1
from a previous branch.	1
from a hard disk	1
from a reliable source	1
from a command line	1
from a project built	1
from a buffer. It	1
from a technological point	1
from a website. 5	1
from a higher-priority thread	1
from this is that	1
from this discussion that	1
from time T to	1
from time T+1 to	1
from memory a hundred	1
from memory each time	1
from memory address a	1
from memory plus the	1
from different compilers is	1
from different addresses with	1
from same module static	1
from same module __attribute__	1
from functions that require	1
from only one or	1
from other applications such	1
from other modules. You	1
from other processes. The	1
from one function to	1
from one object to	1
from one iteration to	1
from one place in	1
from one auto_ptr to	1
from integer to floating	2
from set 0x1C. If	1
from floating point to	3
from floating point numbers	1
from each other is	1
from example 15.1b to	2
from example 16.1 const	1
from example 8.26a (32-bit	1
from example 8.26b: ;	1
from example 9.5a: 98	1
from compilers that have	1
from using registers for	1
from Intel and one	1
from Intel and Microsoft	1
from library asmlib.. //	1
from float or double	2
from multiple parent classes	1
from static memory to	4
from static libraries (.lib	1
from 64-bit MMX to	1
from array static inline	4
from many different places).	1
from any other module	1
from any other module.	1
from any function. Global	1
from address 0x2710 and	1
from address 0x2710 will	2
from address 0x2700 to	1
from register storage. Live	1
from programming languages that	1
from 0 to 12.	1
from 0 to 15.	1
from error conditions in	1
from making a non-inlined	1
from making an induction	1
from making an unused	1
from making optimizations that	1
from making optimizations across	1
from stack ; return	1
from its many optimization	1
from single precision to	1
from AVX code to	2
from another module. The	1
from another module. This	1
from operators that produce	1
from doing the optimizations	1
from doing multiple calculations	1
from doing optimizations on	1
from doing out-of-order execution,	1
from addresses 0x2F00, 0x3700,	1
from both compiler, linker	1
from string functions. A	1
from Intel, AMD and	1
from main through an	1
from unknown sources. The	1
from RAM memory can	1
from RAM memory if	1
from loading any cache	1
from 20 to 10	1
from setting the flush-to-zero	1
from within the same	1
from row 28 below	1
from Microsoft, Intel and	1
from fully utilizing its	1
from disk. Memory-hungry applications	1
from Func 87 used	1
from poor branch prediction.	1
from www.agner.org/optimize/asmlib.zip. // Example	1
from www.agner.org/optimize/asmlib.zip. Currently includes	1
from mispredictions. 44 In	1
from cc into vector	4
from optimal. The branches	1
from seldom used functions,	1
from Intel: "IA-32 Intel	1
from bb into vector	4
from errors. The following	1
from errors. If you	1
from aligning the data	1
from assuming that *p+2	1
from exceptions. See page	1
from -128 to +127.	1
from -128 generates 127.	1
from cleaning up because	1
from 0x2700 to 0x273F	2
from overlapping calculations. The	1
from 0x4700. Reading again	1
from testing. Here, you	1
from www.intel.com. (See also	1
from www.intel.com. Manual on	1
from me. My vector	1
from www.agner.org/optimize. Copyright conditions	1
from everybody. So please	1
from main, but also	1
from attempting to write	1
from Intel. See Intel	1
from scratch. This would	1
from www.agner.org/optimize/testp.zip. This tool	1
from www.agner.org/optimize/testp.zip or get	1
from knowing that the	1
from a=a*2; to return	1
memory is a multiple	1
memory is also used	1
memory is contiguous with	1
memory is mirrored in	1
memory a function uses	1
memory a hundred times.	1
memory to the stack	2
memory to be fragmented	1
memory to stack memory	1
memory to stack memory.	1
memory to become fragmented	1
memory to disk. Memory	1
memory to disk. Provoke	1
memory and will have	1
memory and we do	1
memory and therefore it	1
memory and string functions	1
memory and string instructions.	1
memory and disk space	1
memory and insert a	1
memory and computing power	1
memory in a computer.	1
memory in advance. The	1
memory for a new	1
memory for all the	1
memory that is organized	1
memory can take quite	1
memory can cause caching	1
memory or other resources.	1
memory or accessed in	1
memory or cache. Most	1
memory if the size	1
memory if it is	1
memory if organized as	1
memory by requesting a	1
memory with new and	1
memory on the stack	1
memory may not be	1
memory may even be	1
memory when the program	1
memory when exiting the	1
memory will be allocated	1
memory will benefit from	1
memory then there is	1
memory at the start	1
memory which is contiguous	1
memory used by the	1
memory used by a	1
memory page size (4096).	1
memory each time it	1
memory into a container	1
memory takes only 2-3	1
memory takes much more	1
memory called the heap	1
memory address a =	1
memory address and shared	1
memory address that is	2
memory address by the	1
memory address at which	1
memory address which is	1
memory address cannot be	1
memory rather than in	2
memory without loading a	1
memory even when just	1
memory access is the	1
memory access is a	1
memory access and cache	1
memory access are critical	1
memory access ............................................................................................. 87	1
memory access 9.1 Caching	1
memory inside the CPU	1
memory store An uncached	1
memory addresses is reused	1
memory addresses divisible by	1
memory used. You may	1
memory allocation is done	1
memory allocation is particularly	1
memory allocation is used,	1
memory allocation is negligible	1
memory allocation is unnecessarily	1
memory allocation in an	1
memory allocation for all	1
memory allocation can be	1
memory allocation can therefore	1
memory allocation with new	1
memory allocation may be	1
memory allocation when the	1
memory allocation using new/delete	1
memory allocation also tends	1
memory allocation are: The	1
memory allocation are: int	1
memory allocation Dynamic memory	1
memory allocation Any array	1
memory allocation Objects and	1
memory allocation ...................................................................................... 90	1
memory allocation (new and	1
memory space is used	1
memory space is freed	1
memory space is occupied	1
memory space to store	1
memory space can be	1
memory space by allowing	1
memory space where a	1
memory space never becomes	1
memory space becomes more	1
memory model is hardly	1
memory model used here.	1
memory model where the	1
memory block is allocated	1
memory block is re-allocated	1
memory block and a	1
memory block and copy	1
memory block for every	1
memory block that the	1
memory block that has	1
memory block than to	1
memory block from one	1
memory block should have	1
memory block into the	1
memory block every time	2
memory block turns out	1
memory resources than a	1
memory needed in advance	1
memory pointer. This is	1
memory outside the innermost	1
memory access. The execution	1
memory access. Assume that	1
memory access. 12 Using	1
memory buffer and read	1
memory address. Pointer arithmetic	1
memory allocation. This method	1
memory allocation. There is	1
memory allocation. You should	1
memory allocation. See page	1
memory allocation. Some programming	1
memory allocation. Dynamic memory	1
memory allocation. Do not	1
memory allocation. Container classes	1
memory blocks is more	1
memory blocks than there	1
memory blocks makes the	1
memory block. This is	1
memory block. This requires	1
memory block. A large	1
memory block. Do not	1
memory required is not	1
memory space. A floating	1
memory space. A union	1
memory Memory allocated with	1
memory plus the costs	1
memory swapping and other	1
memory addresses. If caching	1
memory pool. See the	1
memory pool. See www.agner.org/optimize/cppexamples.zip.	1
memory pool. 15 Integer	1
memory pool. Alignment? Some	1
memory area for a	1
memory area for different	1
memory blocks, for example:	1
memory blocks, or if	1
memory blocks, either in	1
memory space, even when	1
memory caching. 3.14 Context	1
memory allocations of sizes	1
memory heap. The heap	1
memory footprint is unreasonably	1
memory footprint than the	1
memory area. The nontemporal	1
memory area. Join identical	1
memory spaces for different	1
memory management and garbage	1
memory leaks and other	1
memory leaks if you	1
memory leak. An even	1
memory blocks. A method	1
memory areas. Data that	1
memory areas, and there	1
memory pool, as explained	1
memory re-allocation is needed.	1
memory block, but this	1
memory economy and small	1
memory fragmentation. Bounds checking	1
memory economy, cache efficiency	1
memory bus is saturated.	1
memory footprint. If, for	1
memory ports, etc. of	1
memory caches. Typically, there	1
memory released when the	1
memory pooling. It is	1
memory leaks. It is	1
memory requirement. Useful when	1
at the function bodies	1
at the code generated	2
at the compiler output	1
at the time the	2
at the time of	3
at the time it	2
at the time we	1
at the time MemberPointer	1
at the vector element	2
at the same time	2
at the same time.	5
at the same time,	1
at the CPU clock	1
at the example of	1
at the object file	1
at the possible alternatives	1
at the assembly output	1
at the cost of	1
at the end of	1
at the last cache	1
at the second step.	1
at the start of	1
at the start so	1
at the diagonal remain	1
at the label $B1$2:.	1
at the interrupt 3	1
at the actual clock	1
at the diagonal. Each	1
at the "worst case"	1
at a time and	3
at a time in	1
at a time because	1
at a time packed	1
at a memory address	3
at a time. This	1
at a time. A	1
at a time. You	1
at a time. Do	1
at a disadvantage if	1
at a high price,	1
at a higher address	1
at a link map	1
at a time, then	1
at a lower priority	1
at to see if	1
at an address divisible	4
at an address below	1
at an arbitrary memory	1
at this place. This	1
at more than half	1
at different memory addresses.	1
at different places when	1
at different times: Dispatch	1
at CPU brand names	1
at which a dynamic	1
at all is for	1
at all to the	1
at all on AMD	1
at all because the	1
at page 150. Using	1
at each function call	1
at each access. The	1
at any time, then	1
at address [ecx+eax*4]. This	1
at address esp+8 and	1
at less than half	1
at its mirror position	1
at specific places in	1
at compile time to	1
at compile time and	1
at compile time or	2
at compile time then	1
at compile time because	1
at compile time which	1
at compile time so	1
at compile time rather	2
at compile time while	1
at compile time here.	1
at compile time. The	2
at compile time. //	1
at compile time. A	2
at compile time. For	2
at compile time. Some	1
at compile time. Integer	1
at compile time. No	1
at compile time. Templates	1
at compile time. Are	1
at compile time. Text	1
at compile time. Four	1
at compile time. (Of	1
at compile time. (Examples	1
at compile time, but	1
at compile time? If	1
at doing equivalent reductions	1
at run time. Therefore,	1
at every function or	1
at every access. The	1
at 1 byte at	1
at optimizing away p	1
at certain events, for	1
at their own initiative	1
at what happens inside	1
at runtime if all	1
at runtime from the	1
at runtime here if	1
at load time. The	1
at load time. Shared	1
at 0, last byte	3
at installation time. Each	1
at least the same	1
at least the cache	1
at least a large	1
at least in some	1
at least in simple	1
at least at the	1
at least one other	1
at least one virtual	1
at least temporarily. Using	1
at once The bitwise	1
at 8, last byte	2
at random times and	1
at 19 }; S1	1
at vectorization. 3. Use	1
at compile-time whether the	1
at 15 byte at	1
at half speed or	1
at 7 int d;	1
at reducing integer expressions	1
at www.agner.org/optimize/asmlib.zip. The following	1
at www.agner.org/optimize/asmlib.zip. If you	1
at 16, last byte	1
at all. This makes	1
at all. This method	1
at all. Can only	1
at 13 // 2	1
at 11 short int	1
at initialization. The program	1
at initialization. Each code	1
at regular time intervals.	1
at round memory addresses	1
at round addresses. Especially	1
at inconvenient times when	1
at inconvenient times. This	1
at inconvenient times. A	1
at www.agner.org/optimize/cppexamples.zip for how	1
at www.agner.org/optimize/cppexamples.zip contains examples	1
at www.agner.org/optimize/cppexamples.zip containing container	1
at www.agner.org/optimize/cppexamples.zip. 9.9 Access	1
at Exception Specifications, Dr	1
at runtime. Example 7.43	1
at runtime. #define directives	1
at runtime. Polymorphism is	1
at unpredictable times and	1
at unpredictable intervals which	1
at compile- time, but	1
at 12, last byte	1
at once................................... 135 14.4	1
at hand. Low-level languages	1
at runtime). The following	1
at 403 int ReadB()	1
at www.agner.org/optimize/asmlib.zip contains various	1
at Wikibooks. The following	1
at explaining the relative	1
at 400, last byte	1
at runtime, if only	1
at 399 int b;	1
data is a common	1
data is to declare	1
data is that it	1
data is more compact	1
data to the right	1
data to optimize caching.	1
data and make one	1
data and resources should	1
data and local variables	1
data and measure how	1
data in the old	1
data in the file,	1
data in a program	1
data in a static	1
data in this example	1
data in different ways.	1
data in order to	2
data in large arrays.	1
data in Linux and	1
data The prefetch instruction	1
data for the other	1
data for one segment	1
data for regular access	1
data for analysis. If	1
data that are used	1
data that are modified	1
data that don't need	1
data are not cached.	1
data are used many	1
data are stored in	2
data are stored can	1
data are accessed in	1
data are accessed backwards	1
data are accessed sequentially.	1
data are likely to	1
data are aligned to	1
data are aligned at	1
data are scattered around	1
data are scattered randomly	1
data are cached as	1
data can be overridden	1
data can exceed 2	1
data // constructor initializes	1
data or pointers to	1
data with all the	1
data as an array	1
data as possible into	1
data than it can	1
data have to be	1
data have three values	1
data more random than	1
data more compact. Accessing	1
data A cache is	1
data A variable is	1
data from a buffer.	1
data from static memory	1
data from RAM memory	1
data memory used by	1
data because the same	1
data used in the	1
data cache is 8	1
data cache is optimized	1
data cache of 8	1
data cache and accessed	1
data cache are critical	1
data cache use can	1
data cache (see page	1
data should contain a	1
data set into sub-vectors	1
data size that fits	1
data into the right	1
data into a vector	1
data into multiple blocks	1
data into classes or	1
data into groups of	1
data object in the	1
data object through this	1
data member is more	1
data member is unchanged	1
data member of a	1
data member or after	1
data member pointer simply	1
data member relative to	1
data elements and the	1
data elements are. For	1
data without caching is	1
data access can be	1
data file in simple	1
data through function calls.	1
data structure and then	1
data structure then you	1
data files and databases	1
data files while less	1
data automatically thanks to	1
data caching more efficient	1
data caching more efficient.	1
data caching very efficient.	1
data caching less efficient.	5
data caching inefficient. An	1
data caching inefficient. Dynamic	1
data sets where the	1
data members is added	1
data members of a	1
data members to round	1
data members that are	1
data members can be	1
data members or member	1
data members or non-static	1
data members with a	1
data members come first.	1
data members within the	1
data members share the	1
data members (properties) The	1
data members (properties) ............................................................................	1
data cache. The same	1
data cache. If the	1
data cache. These instructions	1
data cache. 2.2 Choice	1
data cache. Single precision	1
data cache. Bit-fields of	1
data block to copy	1
data conversion and shuffling	1
data instead of user	1
data storage is that	1
data storage and page	1
data section is not	1
data section may contain	1
data section needs one	1
data fit into the	1
data fit nicely into	1
data structures to addresses	1
data structures in the	1
data structures for standard	1
data structures that typically	1
data structures with non-sequential	1
data structures with First-In-First-Out	1
data structures It is	1
data structures ............................................................. 96	1
data sets. However, the	1
data sets. Covers PC's,	1
data within the DLL	1
data explicitly if data	1
data sections can be	1
data members. This alignment	1
data members. A simple	1
data members. It is	1
data members. If the	1
data members. But each	1
data base access, etc.	1
data files. This can	1
data area is usually	1
data ...................................................................................................... 90 9.6	1
data ......................................................................................... 87 9.2	1
data structures. For example,	1
data structures. On the	1
data cache, code cache,	1
data cache, where it	1
data sequentially A cache	1
data sequentially .......................................................................................... 96	1
data processing. Running multiple	1
data manipulation is required	1
data flow and algorithms	1
data types: long long,	1
data types: char, short	1
data shuffling, such as	1
data compression and cryptography	1
data compression Most compilers	1
data decomposition. It is	1
data decomposition. Functional decomposition	1
data exceeds 64 kbytes.	1
data segment by using	1
data together. Data members	1
data #ifdef _MSC_VER //	1
data (low numbers mean	1
data optimally, or from	1
data locally. Access to	1
data decomposition, we should	1
data elements, as follows:	1
data bases, but there	1
data object: (1) get	1
data Loading data into	1
data structure, data flow	1
data conversion, shuffling, packing,	1
program is an important	1
program is more manageable	1
program is often reorganized	1
program is useful for	1
program is compiled with	1
program is compiled without	1
program is exception safe	1
program is likely to	1
program is never used.	1
program is actually used.	1
program is bigger than	1
program is loaded into	1
program is loaded rather	1
program is executed. Furthermore,	1
program is running. The	1
program is running. If	1
program is run. The	1
program is run. Both	1
program is loaded. This	1
program is compiled. #if	1
program is achieved when	1
program is dividing repeatedly	1
program is started. It	1
program is loaded, the	1
program is loaded, but	1
program is busy doing	1
program is fast, compact,	1
program is terminated and	1
program is shut down	1
program of occupying a	1
program to use a	1
program to turn off	1
program to measure how	1
program to issue an	1
program and whether there	1
program and concentrate the	1
program in a debugger	1
program in multiple versions	1
program in case of	1
program for the following	1
program that is easier	1
program that are very	1
program that can call	1
program that calls the	1
program that calls it.	1
program that created a	1
program that already works	1
program that runs under	1
program that produces another	1
program that scans all	1
program that waits for	1
program are in fact	1
program are also stored	1
program are often much	1
program are typically specified	1
program can take advantage	1
program can check the	1
program or data exceeds	1
program or because the	1
program or library has	1
program if there is	1
program by their address	1
program by turning off	1
program with many branches	1
program with profiling support.	1
program on the newest	1
program code is distributed	2
program code is translated	1
program code for making	1
program code are uncached	1
program as long as	1
program as well as	1
program - preferably isolated	1
program than to type	1
program than to execute	1
program may in fact	1
program may be selected	1
program may have to	1
program may need modification	1
program you want to	1
program have been found,	1
program more clear unless	1
program when the program	1
program will be able	1
program will be unable	1
program will be joined	1
program will not be	1
program will crash. See	1
program then it can	1
program then you may	1
program has to keep	1
program has an initialization	1
program has one or	1
program has most cache	1
program has two arrays,	1
program has many calls	1
program has many branches	1
program has several large	1
program has too much	1
program should be tested	1
program should automatically detect	1
program should leave a	1
program do the calculations.	1
program where the dispatch	1
program takes too long	1
program performance and studying	1
program performance because they	1
program makes a symbolic	1
program before the file	1
program before and after	1
program less efficient. Splitting	1
program optimization or for	1
program optimization cannot be	1
program optimization Some compilers	1
program optimization Integer algebra	1
program optimization /GL --combine	1
program without invoking the	1
program must clean up	1
program execution may be	1
program execution then it	1
program exception safe. In	1
program uses a lot	1
program uses a procedure	1
program uses more than	1
program uses many small	1
program contains no calls	1
program contains many variables	1
program contains calls to	1
program contains automatic CPU	1
program structure in some	1
program memory. This can	1
program memory. If several	1
program their own graphical	1
program development more expensive	1
program errors in case	1
program efficiency is reflected,	1
program optimization. This works	1
program optimization. 2.4 Choice	1
program performance. The positive	1
program updates should be	1
program loading can be	1
program under test but	1
program under test finishes	1
program under test, but	1
program happen to be	1
program logic may need	1
program logic allows parallel	1
program logic allows it,	1
program (or part of	1
program had read from	1
program itself and recompile	1
program itself when running.	1
program size, while high-level	1
program reads from address	1
program structure. It is	1
program development, and a	1
program package is not	1
program relies on exception	1
program itself. You may	1
program appear to take	1
program runs satisfactorily on	1
program repeats 1000 times	1
program chooses between two	1
program starts running and	1
program starts up. Some	1
program execution, even if	1
program optimization, which will	1
program 81 optimization is	1
program 153 spends most	1
program flow and the	1
program flow at inconvenient	1
program flow. However, this	1
program flow. Failure to	1
program afterwards reads or	1
program loads the library	1
program slower. Another disadvantage	1
program saying that it	1
program starts. The user	1
program starts. The disadvantage	1
program compactness, and execution	1
program executable: a debug	1
program logic. Some guidelines	1
program creates or modifies	1
program /Qipo -ipo No	1
program dictates that an	1
has the same name	3
has the value it	1
has the following features:	1
has the advantage that	2
has the disadvantage that	3
has the feature that	1
has the special feature	1
has the SSE or	1
has the unfortunate consequence	1
has the correct child	1
has the complication that	1
has a different meaning.	1
has a different meaning	1
has a CPU dispatcher	1
has a pointer to	1
has a table of	1
has a very dramatic	1
has a long dependency	1
has a branch that	1
has a branch (e.g.	1
has a good implementation	1
has a good knowledge	1
has a particular weakness	1
has a particular meaning,	1
has a smaller memory	1
has a parallel structure	1
has a garbage collector	1
has a significant effect	1
has a graphical user	1
has a jump from	1
has a composite type	1
has a latency which	1
has a virus scanner	1
has to be done	1
has to be loaded	1
has to be changed	1
has to be expressed	1
has to be reloaded	1
has to use the	1
has to make a	1
has to take extra	1
has to check for	1
has to assume the	1
has to start at	1
has to turn off	1
has to keep pointers	1
has to wait for	3
has to invest in	1
has to obey certain	1
has to reinstall a	1
has not been given	1
has not been updated	1
has not noticed that	1
has an instruction set	1
has an option for	2
has an implicit 'this'	1
has an initialization routine	2
has at least one	1
has only a limited	1
has only one CPU	1
has only one instance	1
has only one instance.	1
has one or a	1
has one big problem.	1
has one operator less.	1
has no instruction for	1
has no pointer aliasing.	1
has no virtual member	1
has no AVX support,	1
has no copy constructor	1
has no information about	1
has no cost because	1
has no negative effect	1
has no effect. GOT	1
has no side-effects and	1
has most cache misses,	1
has i instead of	1
has multiple instances that	1
has two loop-carried dependency	1
has two arrays, a	1
has many of the	2
has many calls and	1
has many branches or	1
has many advantages when	1
has many advanced optimizing	1
has many features, see	1
has some support for	1
has some syntax checking	1
has const twice because	1
has its parameters replaced	1
has its own memory	1
has its own set	1
has its own stack.	1
has several different ways	1
has several large arrays	1
has several meanings depending	1
has several flaws: The	1
has allocated with alloca,	1
has been called before.	1
has been accessed recently	1
has been allocated is	1
has been reduced from	1
has been copied to	1
has been increased from	1
has been doubled. Thin	1
has been loaded. This	1
has been translated to	1
has been deallocated. The	1
has been deallocated. Failure	1
has been incremented to	1
has been incremented, while	1
has been alleviated in	1
has been identified, then	1
has been calculated. Therefore,	1
has been introduced in	1
has been criticized for	1
has been brutally interrupted.	1
has been wasted. The	1
has done by fetching,	1
has calculated in advance	1
has four physical processors	1
has support for XMM	1
has support for relative	1
has hardware support for	3
has both positive and	1
has problems separating the	1
has high priority. The	1
has three conditions which	1
has three clauses: initialization,	1
has three advantages: The	1
has too much data	1
has higher priority than	1
has advantages and disadvantages.	1
has made the structure	1
has made the right	1
has replaced i by	1
has become a serious	1
has become less important	1
has become too fragmented.	1
has become fragmented. This	1
has reduced performance on	3
has full metaprogramming features,	1
has changed then the	1
has changed five times.	1
has defined a constructor,	1
has something to clean	1
has enough bits for	1
has chosen the wrong	1
has chosen for the	1
has hardly any effect	1
has saved all information	1
has already been allocated.	1
has nothing between 8	1
has finished the calculations	1
has finished the calculation	1
has solved this problem	1
has insufficient information about	1
has preprocessing directives that	1
has disadvantages: The unrolled	1
has disadvantages: It is	1
has hyperthreading. If so,	1
has hyperthreading, then try	1
has changed. 7.8 Member	1
has influence on the	1
has occurred. // Reset	1
has side effects or	1
has excellent support for	1
has occurred anywhere in	1
has incomplete information about	1
vector of two double.	1
vector of four float.	1
vector of eight 16-bit	1
vector of e.g. four	1
vector of (0,0,0,0,0,0,0,0) __m128i	2
vector of (0,0,0,0,0,0,0,0) Is16vec8	1
vector of vectors, as	1
vector of (2,2,2,2,2,2,2,2) __m128i	2
vector of (2,2,2,2,2,2,2,2) Is16vec8	1
vector in eight consecutive	4
vector can be 64	1
vector can hold four	1
vector or the loop	1
vector function libraries. Use	1
vector as two 128-bit	1
vector { // 2-dimensional	1
vector from array static	4
vector functions have names	1
vector integer operations, and	1
vector class library can	1
vector class library have	1
vector class library will	1
vector class library has	2
vector class library makes	1
vector class library #include	1
vector class library exp	1
vector class library. Open	1
vector class library, SSE4.1	1
vector class library). The	1
vector size for the	1
vector size then add	1
vector size often have	1
vector size (16 or	1
vector into array static	4
vector library is that	1
vector objects // Roll	1
vector objects as function	1
vector objects Vec8s a,	1
vector so that we	1
vector register is 128	1
vector register for the	1
vector register which can	1
vector register size is	1
vector register size. Vectorized	1
vector register containing (2,2,2,2),	1
vector register sizes to	1
vector libraries and short	1
vector registers in the	1
vector registers are available	1
vector registers can hold	1
vector registers when compiling	1
vector registers has been	1
vector registers are: It	1
vector registers had in	1
vector registers (XMM or	1
vector method may be	1
vector always to tell	1
vector always #pragma vector	1
vector always Optimize function	1
vector operations is more	1
vector operations of modern	1
vector operations and before	1
vector operations are not	1
vector operations on contemporary	1
vector operations use a	1
vector operations when the	1
vector operations when alignment	1
vector operations where there	1
vector operations An integer	1
vector operations automatically in	1
vector operations require that	1
vector operations mentioned in	1
vector operations (chapter 12)	1
vector operations Today's microprocessors	1
vector instructions that make	1
vector instructions cannot multiply	1
vector instructions (see page	1
vector instructions SSE4.1 some	1
vector instructions SSE4.2 string	1
vector processors are becoming	1
vector element level 9.	1
vector element level 108	1
vector c __m128i c2	2
vector a, b, c,	1
vector classes is just	1
vector classes and overloaded	1
vector classes are currently	1
vector classes // Function	1
vector classes than by	1
vector classes void SelectAddMul(short	1
vector classes #include "vectorclass.h"	1
vector classes Agner's vector	1
vector classes Fortunately, it	1
vector classes ............................................................................................. 113	1
vector classes looks like	1
vector classes Programming in	1
vector classes (Intel) #include	1
vector classes 114 #include	1
vector parameters Vec4f polynomial	1
vector operator + (vector	1
vector implementation is optimal	1
vector data. The data	1
vector aligned or the	1
vector aligned #pragma vector	1
vector aligned Assume pointer	1
vector processors. Henry S.	1
vector goes faster if	1
vector just as fast	1
vector depends on the	1
vector size. There is	1
vector size. Unpredictable branches	1
vector size. Later models	1
vector math library (SVML).	1
vector math library (VML,	1
vector math libraries. The	1
vector math libraries: Intel	2
vector math libraries: long	1
vector registers. The vector	1
vector registers. The maximum	1
vector registers. It may	1
vector operations. You may	1
vector operations. Algorithms that	1
vector operations. 7.6 Pointers	1
vector operations. 105 The	1
vector processing capabilities still	1
vector processing instructions, multiple	1
vector libraries. To explain	1
vector classes. Including the	1
vector containing integers. It	1
vector access. 12.9 Aligning	1
vector nontemporal is used.	1
vector nontemporal Table 18.3.	1
vector nontemporal #pragma vector	1
vector stores all the	1
vector c2 with the	1
vector register. The library	1
vector register. Factors that	1
vector simultaneously. This is	1
vector algebra reductions: x--	1
vector Type of elements	1
vector turned up to	1
vector bc with the	1
vector library, you are	1
vector library, you divide	1
vector elements. 12.1 AVX	1
vector division. 12.4 Using	1
vector 56 public: float	1
vector c: CPU dispatching	1
vector c: __m128i c	2
vector c: Is16vec8 c	1
vector b: from cc	1
vector b: __m128i b	2
vector b: Is16vec8 b	1
vector operations, as explained	1
vector operations, see page	1
vector register, do an	1
vector register, add the	1
vector classes, as explained	1
vector operations............................................................................................... 105 12.1	1
vector classes): // Example	1
vector operands: minimum, maximum,	1
vector intrinsics and automatic	1
vector classes: // Example	1
vector (1,2,3,4), and store	1
vector intrinsics, automatic vectorization	1
vector intrinsics. Digital Mars	1
make the function a	2
make the code more	3
make the code up	1
make the code smaller	1
make the compiler treat	1
make the data fit	1
make the program more	1
make the program do	1
make the program slower.	1
make the functions that	1
make the most critical	1
make the number of	1
make the array size	1
make the value wrap	1
make the address calculation	2
make the access non-sequential	1
make the overflow behavior	1
make the matrix 512	1
make the values of	1
make the next model	1
make the division faster.	1
make the source code	1
make the induction variable	1
make the local object	1
make the rows in	1
make the measurements as	1
make the scope of	1
make the SelectAddMul example	1
make a function local:	1
make a CPU dispatcher	1
make a loop count	1
make a pointer to	1
make a variable global	1
make a test program	1
make a test run	1
make a new branch	1
make a new instance	1
make a single call	1
make a small test	1
make a few comments	1
make a multiplication and	1
make a complicated implementation	1
make a Boolean NOT	1
make a piece of	2
make a negative list	1
make a positive list	1
make a destructor if	1
make a misprediction every	1
make a DLL with	1
make a reliable decision.	1
make a non-inlined copy	1
make a round function	1
make a variable-size array	1
make a sensible balance	1
make a lookup-table static.	1
make a thread-like scheduling	1
make a zip file	1
make a destructor. A	1
make a bit-mask which	1
make and therefore more	1
make it a template:	1
make it in the	1
make it possible to	2
make it possible for	1
make it work cannot	1
make function calls faster	1
make function calling more	1
make code that makes	1
make an update when	1
make an additional integer	1
make an approximate comparison	1
make this extra element	1
make this work on	1
make this kind of	1
make this reordering easier	1
make use of the	1
make more efficient code,	1
make different objects share	1
make only one call	1
make all dynamic libraries	1
make one version that	1
make one instance for	1
make floating point register	2
make floating point induction	1
make multiple code versions	1
make multiple versions of	1
make multiple versions even	1
make two different implementations	1
make two versions of	1
make such an assumption	1
make any call to	1
make any assumption about	1
make some tests with	1
make variables global if	1
make table of const	1
make software that runs	1
make software packages faster	1
make member functions static	1
make member functions faster	1
make member pointers less	1
make register variables because	1
make pointers efficient, and	1
make sure the compiler	1
make sure the object	1
make sure the arrays	2
make sure the result	1
make sure the information	1
make sure the startup	1
make sure that the	5
make sure that a	1
make sure that no	2
make sure that they	2
make sure that overflow	1
make sure that certain	1
make sure that everything	1
make sure it is	2
make sure it works	1
make sure you are	1
make sure its size	1
make sure allocated resources	1
make sure everything that	1
make 32 AND-operations in	1
make dynamic link libraries	1
make up a program.	1
make arrays of different	1
make overflow checks where	2
make container classes in	1
make support for the	1
make certain kinds of	1
make shared objects without	1
make files smaller. It	1
make their software faster.	1
make separate executables for	1
make induction variables for	1
make dispatcher in only	1
make better use of	1
make applications run faster	1
make parts of the	1
make aligned arrays with	1
make your program exception	1
make your own error	2
make appropriate error messages	1
make position-independent code and	1
make vectorization less favorable:	1
make vectorization favorable: Small	1
make temp a register	1
make special versions of	1
make 16-bit programs, except	1
make algebraic reductions on	1
make profiling feasible. Interference	1
make exactly identical code	1
make developers choose other	1
make measurements on this	1
make two. Some other	1
make explicit checks for	1
make CPU- specific optimizations	1
make thread-specific data is	1
make Sum1 slightly more	1
make utility. The conclusion	1
make utility. It supports	1
make thread-local storage of	1
make log2 a global	1
make memory-hungry software in	1
different in other compilers.	1
different for different platforms	1
different for each type	1
different for each process.	1
different function library. If	1
different function libraries. Numbers	1
different code address and	1
different compiler by including	1
different memory addresses. If	1
different memory spaces for	1
different memory areas, and	1
different functions and you	1
different functions in the	1
different CPU cores. You	1
different instruction sets from	1
different instruction sets Microprocessor	1
different instruction sets........................... 122	1
different cache lines in	1
different integer types Unfortunately,	1
different integer types available.	1
different set values then	1
different floating point precisions	1
different compilers is generally	1
different compilers then it	1
different compilers I have	1
different compilers succeeded in	1
different size matrices, clock	2
different Intel CPUs. It	1
different object file formats.	1
different C++ compilers to	1
different C++ compilers and	6
different C++ compilers The	1
different C++ language elements	1
different C++ constructs Most	1
different C++ constructs........................................................................ 26	1
different value of the	1
different objects even when	1
different objects share the	1
different so that they	1
different way or bypassing	1
different operating systems that	1
different libraries and see	1
different test examples. You	1
different user access rights.	1
different system color settings	1
different type by type-casting	1
different type conversions is	1
different cases for different	1
different instructions sets. The	1
different processors and instruction	1
different processors are covered	1
different CPUs to verify	1
different CPUs if you	1
different arrays even if	1
different versions of the	4
different versions of a	1
different versions of an	1
different versions of CriticalFunction	1
different versions for different	1
different versions have to	1
different versions alternatingly several	1
different execution units. For	1
different execution units in	1
different threads in a	1
different threads are doing	1
different threads need separate	1
different matrix sizes were	1
different matrix sizes. The	1
different functions. There is	1
different addresses with different	1
different implementation when b	1
different intrinsic functions and	1
different methods have exactly	1
different name for each	1
different source files for	1
different parts of the	3
different parts of a	1
different types of floating	2
different types of graphics	1
different types of variables.	1
different types or strings	1
different types with the	1
different types cannot point	2
different compilers. The results	1
different compilers. This function	1
different compilers. Dispatch at	1
different processors. In a	1
different platform is likely	1
different ways of doing	2
different ways of copying	1
different CPUs. This is	1
different CPUs. This method	1
different CPUs. On the	1
different CPUs. (See page	1
different compiler. Object files	1
different dynamically allocated objects	1
different platforms as shown	1
different platforms because it	1
different registers. You need	1
different tasks in a	1
different tasks were not	1
different priority in the	1
different thread. If you	1
different kinds of vector	1
different kinds of variable	1
different kinds of operations	1
different kinds of optimizations.	1
different kinds of jobs.	1
different purposes. The most	1
different purposes. All these	1
different purposes. However, the	1
different cores is slow.	1
different implementations of the	1
different implementations of C++,	1
different sizes of the	1
different sizes are allocated	2
different way. There is	1
different address. A call	1
different module or a	1
different brands of C++	1
different brands of CPUs	1
different brands of CPUs,	1
different purposes is beyond	1
different kind of registers.	1
different algorithms in order	1
different algorithms for different	1
different profiling methods: Instrumentation:	1
different factors as template	1
different array. // Example	1
different applications. Therefore, it	1
different places when the	1
different places making the	1
different ways. Example: //	1
different microprocessors. 7.13 Loops	1
different modules. This may	1
different platforms, different screen	2
different threads, but that's	1
different type. Likewise, a	1
different lengths in the	1
different tasks. For example,	1
different strides. Therefore, you	1
different screen resolutions, different	1
different screen resolutions, etc.	1
different priorities to different	1
different priorities then the	1
different precisions take no	1
different executables. This method	1
different meaning. 2. Put	1
different alignments and different	1
different targets is small.	1
different speeds. If I	1
different places). Some compilers	1
different meaning for member	1
different compilers............................................................................. 74 8.3	1
different browsers, different platforms,	1
different types. A disadvantage	1
different sizes, and they	1
different times: Dispatch on	1
different opinions on which	1
different microprocessors, different alignments	1
because the function calling	1
because the code becomes	1
because the compiler has	1
because the compiler must	1
because the compiler doesn't	1
because the compiler knows	1
because the memory bus	1
because the same code	1
because the same range	1
because the CPU can	1
because the CPU has	3
because the cache lines	1
because the cache miss	1
because the integer operations	1
because the size of	1
because the two operating	1
because the static keyword	1
because the 64-bit instruction	1
because the value pointed	1
because the critical stride	1
because the register usage	1
because the template parameters	1
because the template parameter	1
because the file has	1
because the stack unwinding	1
because the result is	1
because the threads will	1
because the speed here	1
because the overflow and	1
because the container may	1
because the hardware can	1
because the addresses are	1
because the write causes	1
because the microprocessor has	1
because the expression list[i]	1
because the block size	1
because the high level	1
because the programmer hasn't	1
because the response time	1
because the response times	1
because the out-of-order execution	1
because the offset can	1
because the macro is	1
because the total amount	1
because the interpreted version	1
because the debugging options	1
because the body of	1
because the linker makes	1
because the x86-64 instruction	1
because the consequence of	1
because the 33 result	1
because the contents of	1
because the relocations in	1
because the factorials don't	1
because the insertion of	1
because the integer-to-float conversion	1
because the non-reduced expression	1
because a float uses	1
because a good compiler	1
because a fixed address	1
because a typo in	1
because of the way	1
because of the extra	1
because of the large	1
because of the needs	1
because of the costs	1
because of a very	1
because of a store	1
because of a change	1
because of cache evictions	1
because of its simplicity.	1
because of their superior	1
because of alignment problems.	1
because of disk caching,	1
because of lazy loading	1
because of technical problems.	1
because in the latter	2
because in most cases	1
because it is a	1
because it is long	1
because it is sure	1
because it is important	1
because it is accessed	1
because it is deallocated	1
because it is evicted	1
because it can be	2
because it can cause	1
because it may cause	1
because it may go	1
because it may involve	1
because it has many	1
because it has been	1
because it takes too	1
because it makes floating	1
because it makes dispatching	1
because it cannot rule	1
because it often contains	1
because it doesn't have	1
because it doesn't need	2
because it doesn't depend	1
because it needs to	1
because it needs an	1
because it needs only	1
because it requires the	1
because it goes automatically	1
because it gives more	1
because it comes before	1
because it prevents the	1
because it involves the	1
because it defines electrical	1
because it handles eight	1
because it lacks the	1
because an optimizing compiler	1
because you can avoid	1
because you will get	1
because you should not	1
because this is the	1
because this is likely	1
because this may improve	1
because this method is	1
because this would be	1
because this would give	1
because this brand was	1
because all the compilers	1
because all the numbers	1
because all caches have	1
because integer operations are	1
because each value of	1
because each call to	1
because b has to	1
because static data are	1
because there is no	1
because there are different	1
because there may be	1
because we are reading	1
because we are relying	1
because we can access	1
because we forgot to	1
because registers is a	1
because these are incompatible	1
because these time consuming	1
because they are in	1
because they are resolved	1
because they can block	1
because they do not	1
because they cannot be	1
because they must be	1
because they fail to	1
because optimizing compilers can	1
because both the pointers	1
because their live ranges	3
because various corrections for	1
because switch statements often	1
because relative addresses are	1
because relative references do	1
because modern CPUs can	1
because testing a condition	1
because algebraic manipulations of	1
because #if is resolved	1
because serious errors can	1
because computers have very	1
because truncation takes much	1
because communication and synchronization	1
because nothing inside the	1
because partial template specialization	1
same in a more	1
same in both cases.	1
same for simple variables,	1
same can be expected	1
same can happen in	1
same or a nearby	1
same function or class	1
same function on a	1
same function may be	1
same function calling conventions.	1
same code and read-only	1
same code in either	1
same code can be	1
same code as example	1
same as the latency	1
same as the C-style	1
same as a pointer	1
same as for switch	1
same as for (i=0;	1
same as if you	1
same as i modulo	1
same as last time	1
same as C- style	1
same as reflecting it	1
same compiler option for	1
same time to share	1
same time to evaluate	1
same time that it	1
same time as the	1
same time regardless of	1
same memory space. A	1
same memory pool. See	1
same memory area for	2
same memory area. The	1
same memory area. Join	1
same memory areas. Data	1
same memory block, but	1
same data in different	1
same instruction set. Neither	1
same cache is that	1
same cache line. The	1
same cache line. But	1
same cache lines. The	1
same cache lines. This	1
same cache line, because	1
same set in the	1
same class and store	1
same class will be	1
same example using Agner's	1
same size as vector	1
same object (except for	1
same array for multiple	1
same version of the	1
same member pointer. 7.9	1
same way is predicted	1
same way as in	1
same way as an	1
same way as last	1
same address so a	1
same critical part of	1
same register for more	1
same register for both,	1
same register can be	1
same register because their	2
same time. The code	1
same time. A code	1
same time. A user	1
same time. There are	1
same time. Example: //	1
same without discriminating between	1
same method can be	1
same dynamic library can	1
same dynamic libraries without	1
same part of the	3
same bits in a	1
same bits differently. A	1
same type to avoid	1
same result if we	1
same processor core on	1
same processor core. Unfortunately,	1
same processor core. Two	1
same processor core. Try	1
same thread as very	1
same precision in all	1
same precision as the	1
same few parameters. Or	1
same structure or class.	1
same inline assembly syntax	1
same shared object. Obviously,	1
same space for the	1
same cache. Multithreaded programs	1
same name for the	1
same name as a	2
same source code. The	1
same source code. #if	1
same source file. Keep	1
same induction variable for	1
same reason that they	1
same after this statement	1
same piece of code	1
same piece of memory.	1
same function, each optimized	1
same compiler. It is	1
same range of memory	1
same core will always	1
same errors can happen	1
same variables. In these	1
same operation is performed	2
same level-1 cache. The	1
same resources. But it	1
same class. The static	1
same object. There is	1
same time, except for	1
same priority is no	1
same priority than the	1
same thing and the	1
same thing and if	1
same thing and they	1
same thing as p	1
same logical register. This	1
same subexpression occurs more	1
same resource then it	1
same generation can cause	1
same address. There are	1
same module then the	1
same module static static	1
same module (i.e. the	1
same module __attribute__ ((visibility	1
same features as the	1
same applies to an	1
same applies to 3-dimensional	1
same value. This is	1
same unit as additions.	1
same register. Everything that	1
same DLL at the	1
same object, except for	1
same core. It is	1
same rules apply to	1
same constant. Example: //	1
same principle as in	1
same regardless of precision	1
same result. A compiler	1
same advice applies to	1
same resources, such as	1
same cache, at least	1
same brand. Future processors	1
same way, the first	1
same argument does not	1
same chip can be	1
same name. In the	1
same arguments are sure	1
same executable. SSE2 is	1
same machine. The virtual	1
same thing. Example: //	1
same thing. An expression	1
same template. 57 Templates	1
same chip. Such hybrid	1
same effect. Which method	1
same class). If the	1
same computer, including the	1
same name, regardless of	1
same coding rules apply	1
same algorithm, then you	1
same directory as the	1
same divisor. In this	1
same queue, list, database,	1
functions is not expensive.	1
functions is also treated	1
functions is called a	1
functions is higher for	1
functions of a parent	1
functions of parent and	1
functions of parent class	1
functions and a GOT	1
functions and it can	1
functions and function pointers	1
functions and you want	1
functions and data in	1
functions and some other	1
functions and simply put	1
functions and public data	1
functions and public variables	1
functions and hot spots.	1
functions and frame functions.	1
functions in the optimal	1
functions in the grandparent	1
functions in a single	1
functions in a module	1
functions in memory by	1
functions in other modules	1
functions in C++ take	1
functions The different versions	1
functions The most common	1
functions The keyword __fastcall	1
functions for the SSE2	1
functions for integer vector	1
functions for these calculations.	1
functions for common mathematical	1
functions for string searching	1
functions for vectors There	1
functions for vectorized table	1
functions for reasons explained	1
functions for audio and	1
functions for millisecond resolution.	1
functions for statistics, signal	1
functions for vectors........................................................................ 119	1
functions for distinguishing between	1
functions that are not	2
functions that are used	3
functions that are needed	1
functions that are difficult	1
functions that are called.	1
functions that are particularly	1
functions that it calls.	2
functions that have multiple	2
functions that need to	1
functions that access the	1
functions that require cleanup	1
functions that 150 you	1
functions are not compatible	1
functions are more efficient	1
functions are used in	1
functions are used for	1
functions are less efficient	1
functions are often inlined	1
functions are optimized well,	1
functions are calculated faster	1
functions are supported by	1
functions are doing the	1
functions are typically small	1
functions are never called.	1
functions are actually called	1
functions are usually stored	1
functions are included in	1
functions are listed in	1
functions are highly optimized	1
functions are missing in	1
functions are kept in	1
functions are supplied in	1
functions are primitive operations	1
functions are unrelated to	1
functions can be implemented	1
functions can be quite	1
functions can not. Static	1
functions // This function	1
functions // Function to	1
functions or code lines.	1
functions or when accessing	1
functions or vector classes	2
functions if the class	1
functions if possible. Smaller	1
functions by using the	1
functions with integer parameters.	1
functions as well as	1
functions than in optimizing	1
functions may not be	1
functions have a 'this'	1
functions have a non-inlined	1
functions have to save	1
functions have more than	1
functions have no check	2
functions have several versions	1
functions have names that	1
functions have names with	1
functions A macro declared	1
functions A pure function	1
functions then the code	1
functions then it may	1
functions then you can	1
functions then there is	1
functions It is difficult	1
functions because the static	1
functions only makes the	1
functions which are called	1
functions should work efficiently	1
functions class CHello {	1
functions static or inline.	1
functions static where appropriate.	1
functions such as logarithms	1
functions such as memcpy,	1
functions such as logarithms,	2
functions such as sqrt	1
functions such as GetPrivateProfileString	1
functions such as strcpy,	1
functions such as pow,	1
functions You have to	1
functions faster by making	1
functions called by the	1
functions called by F1	1
functions take more time	1
functions take most time.	1
functions take microseconds to	1
functions often belong to	1
functions without CPU dispatching.	1
functions Some programming textbooks	1
functions must have extern	1
functions must use a	1
functions An inline function	1
functions Use predefined vector	1
functions inline or static	1
functions like sin. Pointer	1
functions like sqrt, pow	1
functions separate from seldom	1
functions look clumsy and	1
functions linked from static	1
functions go here //	1
functions local A function	1
functions (e.g. GetLogicalProcessorInformation in	1
functions counts a one	1
functions scattered around in	1
functions Virtual functions are	1
functions (i.e. Microsoft, Intel	1
functions memset and memcpy:	1
functions consume a significant	1
functions malloc and free.	1
functions .............................................................................................. 56 7.27	1
functions ....................................................................................... 145 14.11	1
functions lrintf and lrint.	1
functions ........................................................................................ 53 7.21	1
functions ........................................................................................ 109 12.5	1
functions (methods) Each time	1
functions /Gr Function level	1
functions Sum1, Sum2 and	1
functions directly: Library exp	1
functions Encryption, decryption, data	1
functions (methods)......................................................................... 53 7.20	1
only the code section	1
only the time spent	1
only the most simple	1
only the first time	1
only the SSE2 instruction	1
only the SSE2 version	1
only the part of	1
only the Gnu compiler	1
only the innermost loop	1
only the simplest expressions	1
only the lower 8	1
only the lowest of	1
only the even-numbered logical	1
only a single function	1
only a single element.	1
only a small fraction	1
only a few clock	1
only a limited number	1
only a negligible contribution	1
only a hint and	1
only a minimal difference	1
only to the most	1
only to show how	1
only in the second	1
only in the simplest	1
only in the Professional	1
only for compilers that	1
only for Intel CPUs,	1
only for objects stored	1
only for very large	1
only for big objects	1
only for positive n.	1
only for classes. The	1
only for powers of	1
only for avoiding infinite	1
only for speed-critical functions	1
only be a waste	2
only be used if	1
only be applied to	2
only if the program	1
only if the loop	1
only if the programmer	1
only if it is	1
only if it cannot	1
only if you are	1
only if all functions	1
only if AVX is	1
only if certain options	1
only with Intel processors.	1
only on the values	1
only on some processors	1
only on some processors.	1
only on CPUs with	1
only on PC platforms.	1
only on registers, not	1
only on n, including	1
only on Intel/x86-compatible microprocessors.	1
only an integer comparison,	1
only an advantage in	1
only an addition. Comparing	1
only you make sure	1
only have four numbers	1
only when the next	1
only when a new	1
only when it goes	1
only when it exits.	1
only when it changes.	1
only when instruction sets	1
only when b is	1
only when elements are	1
only when called from	1
only when they are	1
only when running on	1
only when AVX2 is	1
only when needed. The	1
only when activated by	1
only from same module	2
only from one place	1
only used in a	1
only one of the	1
only one that works	1
only one or a	1
only one time in	1
only one CPU core	1
only one CPU core,	1
only one floating point	1
only one clock cycle	1
only one clock cycle.	1
only one call to	2
only one constant needs	1
only one element then	1
only one addition every	1
only one statement in	1
only one instance then	1
only one logical processor	1
only one free register	1
only one instance. The	1
only one instance. Non-static	1
only compilers and function	1
only 64-bit execution units.	1
only possible if the	1
only possible if F1	1
only 32-bit Windows. Gnu	1
only 32-bit Windows. Does	1
only way to make	2
only makes the program	1
only called once. The	1
only first time int	1
only need a CPU	1
only simple standard operations.	1
only available if supported	1
only available with vector	1
only calculated the first	1
only calculated once, rather	1
only four function parameters	1
only four cache lines	1
only four multiplications. How	1
only known processors. Other	1
only supported on AMD	1
only few of the	1
only run on Mac	1
only calculate element addresses	1
only 256 clock cycles.	1
only after all objects	1
only after they have	1
only read the value	1
only read this first	1
only improve the performance,	1
only 5 μs on	1
only constants will be	1
only safe if it	1
only until the next	1
only situation where they	1
only within the same	1
only slightly more time.	1
only slightly more resources	1
only slightly less efficient.	1
only once for each	1
only allowed inputs are	1
only CPUID information that	1
only show a discrete	1
only half the size	1
only half a square.	1
only half of it,	1
only occurs because the	1
only happens rarely. The	1
only six instructions rather	1
only one, auto_ptr that	1
only 50% or less	1
only reasonable solution is	1
only once. Example: //	1
only once. One may	1
only if, a level-2	1
only once, while the	1
only hope that such	1
only hope that future	1
only self- relative addresses.	1
only 10% of the	1
only 2-3 clock cycles	1
only SSE). The YMM	1
only _mm_permutevar_ps 4 4	1
CPU is limited by	1
CPU is designed for	1
CPU of a particular	1
CPU of unknown brand	1
CPU to generate interrupts	1
CPU to start calculations	1
CPU to increment the	1
CPU to overlap the	1
CPU and the operating	4
CPU and prevent it	1
CPU that each particular	1
CPU can do calculations	1
CPU can hold many	1
CPU or other hardware	1
CPU it is running	1
CPU by giving it	1
CPU with the highest	1
CPU with a higher	1
CPU with multiple cores.	1
CPU than the main	1
CPU may occasionally predict	1
CPU time on the	1
CPU time then there	1
CPU use in programs	1
CPU will start to	1
CPU from doing multiple	1
CPU from doing out-of-order	1
CPU from overlapping calculations.	1
CPU has hardware support	2
CPU has problems separating	1
CPU which can be	1
CPU used for temporary	1
CPU cache (en.wikipedia.org/wiki/L2_cache). The	1
CPU clock by using	1
CPU clock cycles rather	1
CPU clock frequency is	1
CPU clock frequency (in	1
CPU time. But this	1
CPU time. Another disadvantage	1
CPU access and memory	1
CPU doesn't support, and	1
CPU doing multiple calculations	1
CPU was started. The	1
CPU dispatching to make	1
CPU dispatching and is	1
CPU dispatching and run	1
CPU dispatching and discovered	1
CPU dispatching in the	1
CPU dispatching in Intel	2
CPU dispatching in Gnu	3
CPU dispatching or memory-intensive	1
CPU dispatching with vector	1
CPU dispatching on first	1
CPU dispatching then call	1
CPU dispatching only to	1
CPU dispatching works only	1
CPU dispatching #include "vectorclass.h"	1
CPU dispatching are: Optimizing	1
CPU dispatching explicitly as	1
CPU dispatching 125 for	1
CPU model is likely	1
CPU model is over.	1
CPU model and then	1
CPU model has its	1
CPU dispatcher to know	1
CPU dispatcher in the	1
CPU dispatcher that doesn't	1
CPU dispatcher then sets	1
CPU dispatcher should not	1
CPU dispatcher should have	1
CPU dispatcher should give	1
CPU dispatcher does not	1
CPU dispatcher based on	1
CPU dispatcher checks whether	1
CPU dispatcher treats non-Intel	1
CPU dispatcher updated. It	1
CPU dispatch mechanism in	2
CPU dispatch mechanism that	1
CPU dispatch mechanism can	1
CPU dispatch Automatic vectorization	1
CPU dispatch methods. The	1
CPU dispatch strategies........................................................................................ 122	1
CPU dispatch strategies It	1
CPU dispatch mechanisms, and	1
CPU based on its	1
CPU feature on Intel	1
CPU core is running	1
CPU core by setting	1
CPU core then it	1
CPU core during time	1
CPU supports the corresponding	1
CPU supports this kind	1
CPU supports then you	1
CPU efficiency then it	1
CPU (See manual 3:	2
CPU time, RAM and	1
CPU models if the	1
CPU cores is to	2
CPU cores and leave	1
CPU cores or logical	1
CPU dispatching. The code	1
CPU dispatching. This function	1
CPU dispatching. For example,	2
CPU dispatching. Many Intel	1
CPU dispatching. Unfortunately, the	1
CPU dispatching. Obviously, you	1
CPU dispatching. Add to	1
CPU dispatching. Test if	1
CPU dispatching. Underestimating the	1
CPU Modern CPUs can	1
CPU brands and similarly	1
CPU brands or specific	1
CPU brand check is	1
CPU brand simply by	1
CPU brand names and	1
CPU detection function of	1
CPU detection function in	1
CPU detection function that	1
CPU detection function as	1
CPU detection function In	1
CPU detection mechanism in	1
CPU detection function, one	1
CPU detection mechanism. The	1
CPU family and model	1
CPU family number, which	1
CPU core. There are	1
CPU cores. A process	1
CPU cores. You may	2
CPU cores. 60 The	1
CPU development, each new	1
CPU cores, we need	1
CPU dispatcher. See page	2
CPU brand. The version	1
CPU brand. Critical parts	1
CPU market is developing	1
CPU dispatchers are designed	1
CPU dispatchers up to	1
CPU chip. Such units	1
CPU only) -O3 or	1
CPU only) (Intel CPU	1
CPU core). The counters	1
CPU dispatching: 1. How	1
CPU dispatching, then it	1
CPU core, but it	1
CPU models. However, we	1
CPU brands, and one	1
CPU hardware. Porting such	1
CPU vendors are offering	1
CPU model, which quite	1
CPU cores: Define multiple	1
CPU supports, rather than	1
other is inefficient because	1
other is -0 (zero	1
other in the code	1
other in the same	1
other in order to	1
other in memory. Variables	1
other are also stored	2
other function is called	1
other with a 50-50	1
other code that uses	1
other than the library	1
other than short int	1
other than its name	1
other than 8, 16,	1
other then put the	1
other data structure then	1
other data structures that	1
other functions is called	1
other functions that are	1
other functions can not.	1
other cache control instructions	1
other integer expressions Induction	1
other compilers can reduce	1
other compilers or function	1
other compilers have inefficient	1
other compilers will make	1
other compilers at the	1
other compilers (Microsoft, Intel)	1
other possible ways of	1
other value than 0	3
other objects on the	1
other variable in the	1
other variables to be	1
other member functions. This	1
other way is mispredicted	2
other way three times.	1
other address in this	1
other less well-known languages.	1
other libraries when running	1
other systems may have	1
other access patterns. This	1
other programming languages are	1
other programming languages can	1
other programming languages, but	1
other programming languages. This	1
other bits to zero.	1
other error condition. Things	1
other error reporting here:	1
other CPUs for executing	1
other function. A leaf	2
other extra software layers	1
other work that the	1
other calculations to save	1
other compiled programming languages	1
other big objects come	1
other threads with lower	1
other threads have access	1
other virtual processors on	1
other common programming errors	1
other thread increments seconds.	1
other allocated resource. The	1
other container class libraries	1
other hardware often requires	1
other hardware conditions. A	1
other values if they	1
other values than 0	4
other cases, it is	1
other methods of rounding,	1
other resources than doing	1
other resources locally or	1
other applications such as	1
other parts of the	2
other types of expressions,	1
other compilers. This includes	1
other compilers. #include <excpt.h>	1
other optimizations such as	1
other optimizations possible because	1
other advantages that may	1
other ways than by	1
other modules than the	1
other modules call the	1
other things very stupid.	1
other languages in Microsoft's	1
other languages that do	1
other STL containers do	1
other platforms and other	1
other platforms with big-endian	1
other platforms as well,	1
other resources. There are	1
other local variables and	1
other constants because it	1
other tasks that are	1
other thread. However, in	1
other kinds of storage.	1
other details that make	1
other purposes. The use	1
other purposes. This is	1
other resource problems that	1
other resource conflicts. But	1
other way. A branch	1
other module then add	1
other processors, only the	1
other features it has.	1
other device should preferably	1
other brands of CPUs	1
other purposes than it	1
other purposes than rendering	1
other CPUs, but it	1
other optimizations. In most	1
other number. Therefore, it	1
other form of error	1
other protection means are	1
other branches. A simple	1
other cleanup that may	1
other processes running on	1
other hand, the compiler	1
other hand, a just-in-time	1
other hand, it is	1
other hand, if your	1
other hand, does not	1
other factor. If a	1
other microprocessors. Integer division	1
other microprocessors. Many of	1
other modules. This makes	1
other modules. This enables	1
other modules. You may	1
other words, the program	1
other words, it is	1
other words, you need	1
other words, you must	1
other languages. But the	1
other module. The static	1
other programs, 99% of	1
other input/output than the	1
other way, etc. The	1
other nearby parts of	1
other nearby branches. The	1
other (not member of	1
other resource, such as	1
other exceptions: __except (GetExceptionCode()	1
other ways, as explained	1
other complications that make	1
other compilers). The best	1
other processes. The profiler	1
other reasons, but part	1
other hardware-related details depend	1
other situations: The stack	1
other optimizations, as explained	1
other constructors. A class	1
other system- specific parts	1
other flaws in the	1
other odd-sized vector data.	1
other subtasks is necessary.	1
other abuse is extremely	1
other volumes in this	1
instruction is executed only	1
instruction to localize the	1
instruction and have implemented	1
instruction and expect this	1
instruction for interrupt 3.	1
instruction for self-relative addressing	1
instruction that the CPU	1
instruction that you are	1
instruction can be used	1
instruction if the SSE4.1	1
instruction set is the	2
instruction set is that	2
instruction set is not	1
instruction set is available	1
instruction set is supported	7
instruction set is used.	1
instruction set is better	1
instruction set is particularly	1
instruction set is enabled.	7
instruction set is available.	3
instruction set is available,	1
instruction set is enabled	2
instruction set is supported.	1
instruction set is specified.	1
instruction set is available:	1
instruction set is enabled:	1
instruction set is maintained	1
instruction set and one	1
instruction set and insert	1
instruction set and YMM	2
instruction set and ZMM	2
instruction set in order	1
instruction set for the	2
instruction set that is	1
instruction set that you	1
instruction set are expected	1
instruction set can run	1
instruction set can still	1
instruction set or any	1
instruction set it supports.	1
instruction set if possible.	2
instruction set not supported	1
instruction set int iset	1
instruction set than the	1
instruction set may actually	1
instruction set when running	1
instruction set when compatibility	1
instruction set then it	1
instruction set has no	1
instruction set has support	1
instruction set has nothing	1
instruction set also allows	1
instruction set where the	1
instruction set makes floating	2
instruction set SSE2 or	1
instruction set was originally	1
instruction set supports self-relative	2
instruction set gives the	1
instruction set (or higher)	1
instruction set #if INSTRSET	1
instruction set available, e.g.	1
instruction set opens the	1
instruction set (requires a	1
instruction set (128 bit	1
instruction set (128 vectors	1
instruction set specified. Insert	1
instruction set (called x86)	1
instruction set Suppl. SSE3	1
instruction set extensions. If	1
instruction set (/arch:SSE2, /arch:AVX	1
instruction takes typically 0	1
instruction cannot be used	1
instruction before any floating	1
instruction code. You can	1
instruction must be followed	1
instruction doesn't give the	1
instruction add ebx, DWORD	1
instruction add eax,1 is	1
instruction was certain to	1
instruction sets the CPU	1
instruction sets is as	1
instruction sets is provided	1
instruction sets and other	1
instruction sets and cache	1
instruction sets are mutually	2
instruction sets can be	1
instruction sets have certain	1
instruction sets have got	1
instruction sets from the	1
instruction sets enable the	1
instruction sets include a	1
instruction sets Microprocessor producers	1
instruction set. The most	1
instruction set. The following	1
instruction set. The examples	1
instruction set. The main	1
instruction set. The newer	1
instruction set. The preprocessing	1
instruction set. This instruction	1
instruction set. A CPU	1
instruction set. It is	1
instruction set. If the	1
instruction set. If you	1
instruction set. These new	1
instruction set. Therefore, you	1
instruction set. Make two	1
instruction set. Do not	1
instruction set. 120 However,	1
instruction set. Aligning data	1
instruction set. 13.6 CPU	1
instruction set. More complicated	1
instruction set. Neither can	1
instruction set. High precision	1
instruction prevents the level-2	1
instruction mov DWORD PTR	1
instruction sets. The program	1
instruction sets. Most compilers	1
instruction sets. Supports only	1
instruction sets. Vector operations	1
instruction sets. Likewise, the	1
instruction sets. Does not	1
instruction set, and a	1
instruction set, as listed	1
instruction set, then you	1
instruction set, but it	1
instruction set, but possibly	1
instruction set, one for	1
instruction set, using asmlib	2
instruction set, another version	1
instruction set, e.g. /arch:SSE2.	1
instruction xor eax,eax. This	1
instruction sets, cache size,	1
instruction sets........................... 122 13.1	1
instruction latencies are listed	1
instruction latencies, throughputs and	1
instruction set: // Example	1
instruction timing, assembly language	1
instruction set?". A list	1
instruction directly, or use	1
point is that the	1
point is faster with	1
point is faster than	1
point is 1. This	1
point of view. This	1
point of attack for	1
point to the same	2
point to the appropriate	1
point to the right	1
point to a valid	1
point to are constant.	1
point to integer without	1
point to integer According	1
point to end of	1
point to become invalid,	1
point to integer. The	1
point to a[i+2] ;	1
point and integer representations	1
point in your program,	1
point if the conversion	1
point code and you	1
point code more efficient	1
point code rather than	1
point code slower, especially	1
point library which is	1
point number is zero	1
point number to the	1
point number to an	1
point number in the	1
point number by 2n	1
point number simply by	1
point where it is	1
point value written as	1
point variable as an	1
point variables is so	1
point variables and operators	2
point variables in order	1
point variables use a	1
point variables do not	1
point variables Floating point	1
point variables ......................... 142	1
point register variables is	1
point register variables in	2
point register stack is	1
point register variables. Vector	1
point register variables, but	1
point code. The bigger	1
point code. The 128-bit	1
point code. If you	1
point registers and correspondingly	1
point registers are used,	1
point registers available in	1
point registers organized as	1
point operations and choose	1
point operations are done	1
point operations without reducing	1
point operations involves eight	2
point operations (addition, multiplication,	1
point constant always takes	1
point stack registers are	3
point calculations and the	1
point calculations or turn	1
point calculations as long	1
point calculations will typically	1
point calculations should therefore	1
point calculations inside the	1
point calculations unless the	1
point calculations usually take	1
point calculations whenever they	1
point execution units. Any	1
point overflow has occurred.	1
point overflow but no	1
point precision (see page	1
point precision conversion Conversions	1
point parameters are not	1
point parameters are transferred	1
point counter then make	1
point multiplication at the	1
point multiplication units. This	1
point division to be	1
point division by a	1
point division takes much	1
point division Floating point	1
point division ........................................................................................... 139	1
point induction variables for	1
point induction variables Compilers	1
point addition and multiplication	1
point addition with floating	1
point addition on a	1
point addition takes 5	1
point addition takes 3	1
point addition every clock	1
point addition units, and	1
point addition unit, but	1
point expressions or more	1
point expressions may have	1
point expressions (see page	1
point numbers is less	1
point numbers is inefficient.	1
point numbers to integers	1
point numbers and integers	2
point numbers are stored	1
point numbers can be	1
point numbers simply by	1
point XMM (vector) reductions:	1
point operands cannot be	1
point operation on such	1
point operation takes 5	1
point constants are double	1
point constants are stored	1
point library. If you	1
point calculations. Even with	1
point operations. You should	1
point precision. The following	1
point instructions. This is	1
point instructions. Each type	1
point expressions. It is	1
point expressions. For example,	1
point expressions. Most reductions	1
point expressions. Floating point	1
point addition, and a	1
point variables, if possible.	1
point Conversion of integers	1
point vectors. There are	1
point algebra reductions: a+b=b+a	1
point rounding mode has	1
point capabilities (except in	1
point representation directly with	1
point number. We can	1
point comparisons are more	1
point comparisons are slow	1
point comparisons are inefficient	1
point comparisons more efficient.	1
point numbers. It can	1
point numbers. Therefore, 64-bit	1
point division. Correction for	1
point underflow in XMM	1
point constants, string constants,	2
point format is standardized	1
point addition. This is	1
point multiplication, to mix	1
point numbers: // Example	1
point comparisons, which are	1
point overflow: _controlfp_s(&dummy, 0,	1
point expressions, even though	1
point extern "C" int	1
point precisions when the	1
point status: _fpreset(); _controlfp_s(&dummy,	1
point comparison. On big	1
point variable: // Example	1
point multiply-and-add Table 13.1.	1
point -ffast-math /fp:fast /fp:fast=2	1
point exceptions, etc. Event-based	1
loop is to resume	1
loop is in mathematical	1
loop is long because	1
loop is inside another	1
loop is predicted well.	1
loop is interpreted again	1
loop is rolled out	1
loop of a program	2
loop of a graphical	1
loop of ADC (add	1
loop and have a	1
loop and use multiple	1
loop and without the	1
loop and splitting the	1
loop and reorganize: //	1
loop in the main	1
loop in a program	1
loop in this case.	1
loop in example 9.5a	1
loop in example 11.3	1
loop in example 12.4a	1
loop in example 15.1b.	1
loop in example 8.23b	1
loop in example 8.24	1
loop for // multiply	1
loop for calculations: for	1
loop for trivial tasks	1
loop that also repeats	1
loop that does floating	1
loop that contains several	1
loop that includes the	1
loop are finished. This	1
loop can be implemented	1
loop can change the	1
loop can still be	1
loop or the series	1
loop or add an	1
loop or not. The	1
loop if the same	1
loop if the results	1
loop if it is	1
loop if you are	1
loop if this can	1
loop if all the	1
loop if true ;	1
loop if powN is	1
loop by the same	1
loop by using vector	1
loop by two and	1
loop by two gives:	1
loop by 16 to	1
loop by eight to	4
loop by n and	1
loop by storing intermediate	1
loop by four, we	1
loop with a small	1
loop with a high	1
loop with multiple counters,	1
loop with few or	1
loop A function that	1
loop will use the	1
loop will take only	1
loop will take approximately	1
loop will take 1000	1
loop then you cannot	1
loop because nothing inside	1
loop should preferably be	1
loop double ipow (double	1
loop where each iteration	1
loop where almost the	1
loop takes up more	1
loop branch should be	1
loop branch must rely	1
loop without checking all	1
loop does not cost	1
loop ; a[i] =	1
loop ; unused label	1
loop ; compute i/2	1
loop through rows for	1
loop through rows //	1
loop contains floating point	1
loop would be while	1
loop doing mathematical calculations.	1
loop counter is an	1
loop counter is used	1
loop counter and go	1
loop counter can be	3
loop counter by a	1
loop counter with its	1
loop counter when the	1
loop counter should preferably	1
loop counter i is	1
loop counter outside both	1
loop counter ahead of	1
loop count is small	1
loop count is too	1
loop count is divisible	2
loop count that can	2
loop count should preferably	1
loop count down to	1
loop count (ArraySize) is	1
loop automatically if this	1
loop needs a floating	1
loop becomes a little	1
loop control it compares	1
loop control branch is	2
loop control branch depends	2
loop control branch ahead	1
loop control statement several	1
loop control condition is	1
loop control condition The	1
loop control branch. There	1
loop control branch. See	1
loop control condition: //	1
loop bigger than the	1
loop depends on how	1
loop columns below diagonal	2
loop further if the	1
loop unroll option in	1
loop unroll factor. A	1
loop condition i <	1
loop buffer that some	1
loop unrolling is not	1
loop unrolling in example	1
loop unrolling so that	1
loop iterations are: No	1
loop body is very	1
loop body now contains	1
loop body begins at	1
loop is. The type	1
loop counter. Example: //	1
loop counter. Any expression	1
loop increment i++. cmp	1
loop repeats a thousand	1
loop repeats 20 times	1
loop index. The integer	1
loop counters, function parameters,	1
loop counters, etc. In	1
loop manually unless there	1
loop unrolled double xpow10(double	1
loop calculates four consecutive	1
loop counter, which is	1
loop counter, comparing the	1
loop count. The method	1
loop predictor. On other	1
loop exits, when in	1
loop counter: // Example	1
loop overhead. Example: //	1
loop initialisation i=0; has	1
If the code is	2
If the code in	1
If the compiler is	1
If the compiler has	1
If the compiler doesn't	1
If the program takes	1
If the program under	1
If the program logic	1
If the program afterwards	1
If the vector registers	1
If the different tasks	1
If the same function	1
If the same subexpression	1
If the CPU brand	1
If the loop count	1
If the cache always	1
If the cache contentions	1
If the class has	1
If the size of	1
If the Intel compiler	1
If the object is	1
If the number of	5
If the number and	1
If the version changes	1
If the value of	1
If the variable is	1
If the software contains	1
If the member functions	1
If the critical innermost	1
If the first operand	1
If the template parameters	1
If the arrays or	1
If the AVX instruction	1
If the problem is	1
If the container is	1
If the standard header	1
If the microprocessor is	1
If the microprocessor has	1
If the application uses	1
If the computer has	1
If the response time	1
If the repeat count	1
If the offset relative	1
If the final size	1
If the total number	2
If the length of	1
If the latter function	1
If the carry bit	1
If the key values	1
If the combined size	1
If the bottleneck is	1
If the wrong branch	1
If the word static	1
If the granularity is	1
If a and b	2
If a function is	2
If a function in	1
If a program has	1
If a program uses	1
If a program contains	1
If a loop contains	1
If a loop needs	1
If a floating point	1
If a template has	1
If a piece of	1
If a bool is	1
If a future version	1
If a profiling (see	1
If a dispatched function	1
If it is not	1
If it is known	1
If it is poorly	1
If an error handler	1
If you are in	1
If you are not	1
If you are using	2
If you are making	1
If you are certain	1
If you are including	1
If you can avoid	1
If you make your	1
If you do use	1
If you cannot avoid	1
If you need to	1
If you access a	1
If you access part	1
If you want the	1
If you want a	1
If you want to	3
If you run the	1
If you don't care	1
If you read the	1
If you look at	1
If you know that	1
If you just want	1
If you consider making	1
If you forget to	1
If this is the	1
If this address is	1
If time is measured	1
If different versions of	1
If one operand is	2
If each floating point	1
If i is outside	1
If two threads are	1
If two integers are	1
If there is a	2
If there are not	1
If there are no	1
If there are floating	1
If objects are accessed	2
If objects are identified	1
If any of the	1
If any of these	1
If we want to	1
If we compile the	1
If we assume that	1
If we modify example	1
If part of a	1
If I write that	1
If arrays are accessed	1
If c = b	1
If virtual functions are	1
If several functions that	1
If exception handling is	1
If caching is a	1
If Microsoft compiler #define	1
If n = 4,	1
If your optimization effort	1
If columns had not	1
If N is a	1
If seconds was not	1
If F1 calls another	1
If search facilities are	2
If frequent updates are	1
If not, then it	1
If not, then you	1
If hyperthreading is not	1
If Func1 and Func2	1
If MultiplyBy in this	1
If so, then you	1
which the array is	1
which the variable is	2
which the elements are	1
which the calling function	1
which the modules are	1
which the modules appear	1
which is the code	1
which is the same	1
which is the one	1
which is a total	1
which is more efficient	1
which is only 10%	1
which is all 1's	1
which is used in	1
which is used during	1
which is very time	1
which is very likely	1
which is very fast.	1
which is called by	1
which is less efficient.	1
which is useful for	1
which is 0 for	1
which is available in	1
which is available from	1
which is much faster.	2
which is calculated fast	1
which is implemented with	1
which is known to	1
which is likely to	1
which is quite inefficient,	1
which is typically 64	1
which is typically loaded	1
which is difficult to	1
which is transferred as	1
which is divisible by	1
which is slow unless	1
which is similar to	1
which is faster. In	1
which is fast. Calculating	1
which is 15 on	1
which is contiguous with	1
which is double. Here	1
which is 50% of	1
which a code version	1
which a dynamic library	1
which of the two	1
which of the advanced	1
which in turn calls	1
which are used for	1
which are called near	1
which are 64 bits	1
which are useful for	1
which are implemented as	1
which are relatively costly	1
which are cheap, in	1
which can be used	1
which can be set	1
which can be stored	1
which can be calculated	1
which can be quite	1
which can be applied	1
which can be fed	1
which can only be	1
which can take quite	1
which it is not	1
which it has calculated	1
which function to use	1
which code branch to	1
which compiler will do	1
which may be undesired.	1
which may cause slight	1
which may happen quite	1
which may interfere with	1
which this code version	1
which will generate an	1
which will change during	1
which will delay the	1
which will enable optimizations	1
which then calls a	1
which data are stored	1
which functions take most	1
which instruction set is	1
which instruction set it	1
which instruction sets the	1
which one is best.	1
which one is fastest.	1
which one works best.	1
which set of cache	1
which version of the	1
which version of a	3
which version to use	1
which we assume is	1
which variables will be	1
which software development process	1
which way a branch	1
which makes the data	1
which makes it less	1
which makes data caching	1
which makes detailed optimization	1
which cannot be inlined	1
which they are used.	2
which they are declared	1
which they are created.	1
which they appear in	2
which method is likely	1
which method is fastest	1
which method to use	1
which programming language is	1
which part of the	1
which does the same	1
which processor models to	2
which solution is optimal	1
which few programs do.	1
which contains the address	1
which would be an	1
which quite likely is	1
which allows the linker	1
which implementation is best.	1
which resources are most	1
which optimizations you can	1
which optimizations you have	1
which range from -128	1
which reductions the compilers	1
which reductions they cannot	1
which gives access to	1
which comes with most	1
which platforms and operating	1
which prevents out-of-order execution.	1
which causes a long	1
which not. You cannot	1
which counts at the	1
which happens quite often	1
which returns a reference	1
which gets information about	1
which alloca was called.	1
which otherwise can only	1
which opens and closes	1
which consumes CPU time.	1
which initially points to	1
which can't be reached	1
which calculates the sum	1
which determines the program	1
which transposes a quadratic	1
which redirects it to	1
which affects other parts	1
which supposedly is system-independent,	1
which interprets the intermediate	1
which imprecisions should be	1
all the functions that	2
all the CPU cores	1
all the cache lines	1
all the integer calculations.	1
all the compilers I	2
all the array elements	1
all the objects in	1
all the objects together	1
all the objects (memory	1
all the dynamic libraries	2
all the bits of	1
all the necessary cleanup	1
all the problems mentioned	1
all the problems associated	1
all the numbers are	1
all the modules of	1
all the relevant optimization	1
all the additions are	1
all the inputs to	1
all the factors are	1
all the B values.	1
all the G values,	1
all the R values	1
all is for the	1
all of the following	1
all of these classes.	1
all to the profiler.	1
all be below the	1
all on AMD and	1
all code has a	1
all code versions work	1
all code branches works	1
all code branches separately	1
all use single precision.	1
all data in a	1
all data in large	1
all data members within	1
all data members. A	1
all because the 33	1
all functions and a	1
all functions static or	1
all functions called by	1
all other bits to	1
all other processes running	1
all but the first	1
all class objects and	1
all floating point constants	1
all compilers are able	1
all static data, including	1
all 64-bit CPUs and	1
all C++ compilers The	1
all possible cases of	1
all objects have been	3
all variables and objects	1
all software be reinstalled	1
all elements of a	1
all elements to zero.	1
all elements have been	1
all libraries have the	1
all pointers and references	1
all systems that have	1
all these table lookup	1
all these purposes. This	1
all dynamic libraries contend	1
all bits except the	2
all CPUs that support	1
all threads have finished	1
all allocated objects and	1
all allocated objects are	1
all good compilers will	1
all done in a	1
all operators that have	1
all information about the	2
all files on access.	2
all cases, while many	1
all branches for correctness.	1
all source files into	1
all resources are sufficient,	1
all three versions should	1
all runtime libraries and	1
all means avoid powers	1
all compilers. Some compilers	1
all compilers. Use automatic	1
all optimizations of a	1
all optimizations on the	1
all public and static	1
all x86 and x86-64	2
all x86 platforms. This	1
all x86 platforms. Microsoft,	1
all x86 platforms. Works	1
all operands in case	1
all modules that use	1
all relevant optimization options	3
all relevant options. Many	1
all conversions from floating	1
all platforms. PathScale C++	1
all installation options at	1
all modern microprocessors and	1
all modern CPUs. The	1
all modern computers have	1
all variables. Obviously, this	1
all platforms and the	1
all local non-member functions.	1
all strings in a	1
all strings in one	1
all unknown processors that	1
all kinds of strange	1
all sizes of matrices.	1
all newer Intel CPUs	1
all newer models that	1
all writes to load	1
all non-static variables and	1
all non-static member functions.	1
all subsequent elements in	1
all destructors for local	1
all destructors are called	1
all destructors are called.	1
all brands of CPUs.	1
all applications. 2.8 Overcoming	1
all suitable functions in	1
all instances of the	1
all instances of S1	1
all five values have	1
all cleanup of allocated	1
all .cpp modules that	1
all belong to set	1
all objects. This is	1
all caches have to	1
all Unix-like platforms. Clang	1
all 0's when false.	1
all 0's gives zero.	1
all major platforms. However,	1
all major platforms. Pascal	1
all disturbing influences in	1
all squares: for (r1	1
all respects relevant to	1
all 1's is unchanged,	1
all 1's when bb[i]	1
all zeroes. Example: //	1
all intrin.h (MS) x86intrin.h	1
all occurrences of ArraySize	1
but the function names	1
but the code will	1
but the compiler is	1
but the compiler can	1
but the compiler may	1
but the compiler uses	1
but the program is	1
but the point is	1
but the variable whose	1
but the performance is	1
but the first dimension	1
but the method used	1
but the calculation time	1
but the programmer can.	1
but the examples have	1
but the syntax is	1
but the alignment requirements	1
but the asmlib function	1
but is not quite	1
but is less important	1
but is less reliable.	1
but is currently only	1
but in a very	1
but in this case	1
but in example 12.1b,	1
but in registers in	1
but in applications without	1
but for most purposes	1
but for studying a	1
but are identified by	1
but it is not	2
but it is very	1
but it is important	1
but it is quite	1
but it is still	1
but it is impossible	1
but it can be	1
but it can also	1
but it can take	1
but it may be	4
but it will not	1
but it has the	1
but it often gives	1
but it doesn't work	1
but it doesn't generate	1
but it uses more	1
but it would be	1
but it requires that	1
but it took several	1
but it increases the	1
but if we want	1
but on what instruction	1
but as long as	1
but not the more	1
but not the compiled	1
but not in a	1
but not if it	1
but not if b	1
but not if static	1
but not on Intel	1
but not on AMD	1
but not any other	1
but not long enough	1
but not always for	1
but not dynamic libraries	1
but not safe unless	1
but not all. Fortunately,	1
but may be removed	1
but you can reduce	1
but you may as	1
but you should be	1
but you cannot always	1
but this is not	2
but this is often	1
but this is permissible	1
but this is sufficiently	1
but this is extremely	1
but this will use	1
but this memory block	1
but this makes the	1
but this method is	1
but this feature is	2
but this unit is	1
but will save temp	1
but has a smaller	1
but only if certain	1
but only an addition.	1
but only after all	1
but only show a	1
but only self- relative	1
but other systems may	1
but no compiler I	1
but no other exceptions:	1
but no compile- time	1
but there is a	1
but there is no	1
but there are some	1
but there are serious	1
but also the time	1
but also the innermost	1
but also when called	1
but also very expensive.	1
but also less safe.	1
but also supports Linux	1
but also inconvenient to	1
but also safer. It	1
but such expressions may	1
but any of the	1
but 32-bit systems do	1
but less optimized. Note	1
but these are hardly	1
but these address calculations	1
but they are in	1
but they are not	1
but part of the	1
but I think that	1
but its data members	1
but must go through	1
but several hundred clock	1
but eight logical processors.	1
but operators that have	1
but quite inefficient in	1
but don't count on	1
but read one or	1
but slow or completely	1
but outside the innermost	1
but possibly not with	1
but rarely in Linux.	1
but risk of overflow	1
but who would like	1
but expensive if they	1
but efficient, way of	1
but unfortunately the unit-test	1
but unfortunately it prevents	1
but unfortunately this is	1
but unfortunately there is	1
but avoids the overflow.	1
but none of the	2
but that's about the	1
but waits until the	1
but neither faster nor	1
but i*12, because the	1
but risky. The returned	1
but event-counters do. This	1
used the trick that	1
used is branch prediction.	1
used to avoid modulo	1
used to speed up	1
used to read and	1
used to be. The	1
used and this will	1
used and searching for	1
used and popped from	1
used in the same	2
used in the most	2
used in the Gnu	2
used in the old	1
used in the innermost	1
used in the Active	1
used in a number	1
used in a critical	1
used in a small	1
used in example 15.1b	1
used in multiple applications,	1
used in two other	1
used in two ways.	1
used in 64-bit device	1
used in any situation	1
used in some embedded	1
used in so that	1
used in small embedded	1
used in shared objects	1
used in STL for	1
used in almost all	1
used for the link	1
used for function libraries	1
used for an increasing	1
used for other purposes.	1
used for all static	1
used for pointer conversions.	1
used for multiple variables	1
used for multiple purposes.	1
used for any other	1
used for variables declared	1
used for branch prediction	1
used for file input	1
used for doing two	1
used for multiplication }	1
used for vectorized table	1
used for accessing the	1
used for calculating the	1
used for calculating self-	1
used for finding the	1
used for temporary storage.	1
used for debugging and	1
used for Java today.	1
used for storing function	1
used for giving the	1
used for giving specific	1
used for converting a	1
used for internal references.	2
used for reducing the	1
used for turning off	1
used for defining constants.	1
used for saving memory	1
used for constants. Integer	1
used for prefetching data	1
used for implementing a	1
used for implementing polymorphic	1
used for improving code	1
used for metaprogramming, as	1
used for jumping out	1
used for relieving the	1
used for fetching a	1
used that most function	1
used or if its	1
used if the value	1
used if instruction sets	1
used if there are	1
used if elements have	2
used by the test	1
used by a variable	1
used by all other	1
used by multiple threads	1
used by many users	1
used by element 0	1
used by exception handlers	1
used by default anyway	1
used by thousands of	1
used with other compilers.	1
used with other microprocessors.	1
used on bigger systems.	1
used on completely independent	1
used as a Boolean	1
used as a stand	1
used as an array	2
used as macros are	1
used as alternatives to	1
used as command-line versions	1
used as coprocessors to	1
used as buffers for	1
used an intermediate code	1
used more efficiently. It	1
used when the function	1
used when a thread	1
used when it is	1
used at the same	2
used at all is	1
used data members come	1
used functions separate from	1
used only for objects	1
used only for very	1
used only for avoiding	1
used only when instruction	1
used only within the	1
used cache line then	1
used set of containers	1
used most for register	1
used where execution speed,	1
used many times in	1
used variables in a	1
used variables are stored	1
used without restrictions. A	1
used inside the pow	1
used simply to increment	1
used above the diagonal	1
used branches such as	1
used members in the	1
used intrinsic functions. It	1
used methods for dealing	1
used char (or int)	1
used data. The speed	1
used parts of the	1
used together are also	1
used together are stored	1
used together should be	4
used here is the	1
used functions, and put	1
used during program development,	1
used near each other	1
used here. The compiler	1
used twice for handling	1
used most. The opposite	1
used freely without any	1
one is called a	1
one is 0 and	1
one is best. 3.11	1
one is fastest. The	1
one of the compilers	1
one of the elements	1
one of the following	1
one of the 32	1
one of the best	1
one of the four	2
one of the few	1
one of the main	1
one of the base	1
one of the weekdays.	1
one of these categories:	1
one and only one	1
one in a series	1
one for the SSE2	1
one for the latest	1
one for AVX2 and	1
one for constants that	1
one for initialized variables	1
one for SSE4.1 and	1
one for uninitialized variables	1
one that is used	1
one that is compatible	1
one that takes longer	1
one that works on	1
one that works best	1
one that gives the	1
one that saves time	1
one that doesn’t. The	1
one that discriminates between	1
one or a few	3
one or more of	1
one or more performance	2
one or more dynamic	1
one or multiple elements?	1
one or two floating	2
one it is compiling.	1
one function to another.	1
one function and later	1
one function can modify	1
one if the template	1
one by means of	2
one by one, into	1
one time in thousand	1
one more integer to	1
one from Intel and	1
one from me. My	1
one memory block for	1
one memory pool. See	1
one CPU core then	1
one CPU core, but	1
one other function. A	1
one set of counters	1
one class to a	1
one floating point addition	1
one object to another.	1
one array rather than	1
one clock cycle if	1
one clock cycle on	1
one clock cycle. The	2
one clock cycle. In	1
one version that takes	1
one variable if their	1
one way in the	1
one way or the	1
one way or another.	1
one way most of	1
one way two times	1
one makes the code	1
one call to the	2
one call to Func1,	1
one register less so	1
one constant needs to	1
one (see page 71).	1
one big memory block	1
one big block of	1
one big problem. Whenever	1
one element then use	1
one virtual member functions	1
one thread is used	1
one thread can do	1
one thread than another.	1
one line at a	2
one works best. Some	1
one container for each	1
one : 1; //	1
one operator less. Fortunately,	1
one division by making	1
one source file and	1
one addition every clock	1
one addition every three	1
one byte longer in	1
one function, if possible.	1
one computer is not	1
one global and one	1
one statement in the	1
one operation rather than	1
one instance of the	1
one instance for each	5
one instance then you	1
one operand is more	1
one operand is faster	1
one iteration of the	1
one iteration to the	1
one iteration should depend	1
one iteration before the	1
one thread. A variable	1
one square at a	1
one thing at the	1
one logical processor is	1
one vector. It may	1
one fraction 2 63	1
one 256-bit vector register	1
one parameter. Further details	1
one unit of received	1
one register. Registers are	1
one vector, the four	1
one vector, while you	1
one free register left	1
one operation. A good	1
one operation. For example,	1
one contiguous memory block.	1
one place to the	1
one place in the	1
one auto_ptr to another	1
one way, then many	1
one instance. The function	1
one instance. Non-static members	1
one segment then it	1
one tread can take	1
one local, and use	1
cache is a proxy	1
cache is that communication	1
cache is used in	1
cache is used more	1
cache is 8 kb	1
cache is optimized for	1
cache is 512 kb	1
cache is 512 kb,	1
cache is organized if	1
cache of 8 -	1
cache of 8 kb	1
cache of 256 Kbytes	1
cache to load the	1
cache and the data	2
cache and it fills	1
cache and data cache	1
cache and accessed non-sequentially	1
cache and execution units.	1
cache in between the	1
cache in just a	1
cache for the hardware	1
cache for the sake	1
cache that can be	1
cache are so expensive	1
cache are critical resources.	1
cache are less expensive.	1
cache or micro-op cache.	1
cache if there are	1
cache as when contentions	1
cache may not be	1
cache use and data	1
cache use can be	1
cache will be filled	1
cache will evict the	1
cache then you can	1
cache from the level-2	1
cache from loading any	1
cache because the out-of-order	1
cache size is a	1
cache so we don't	1
cache between each call,	1
cache cannot prefetch more	1
cache called the branch	1
cache always chooses the	1
cache access rather than	1
cache (see page 87).	1
cache (see p. 87).	1
cache line to be	1
cache line in both	1
cache line that we	1
cache line that was	1
cache line can hold	1
cache line will be	1
cache line then the	1
cache line has to	1
cache line size is	1
cache line size in	1
cache line size //	1
cache line size may	1
cache line size (typically	1
cache line would be	1
cache line size, which	1
cache works most efficiently	3
cache works less efficiently	1
cache space and are	1
cache space or make	1
cache space by joining	1
cache space used for	1
cache control instructions than	1
cache control .............................................................................................. 99	1
cache control Microprocessors with	1
cache contentions is that	1
cache contentions can be	1
cache contentions if the	2
cache contentions than for	1
cache contentions will occur:	1
cache size. This is	1
cache size. If this	1
cache size. When the	1
cache size. Alternatively, you	1
cache lines to use	1
cache lines in set	1
cache lines in each	1
cache lines in column	1
cache lines for matrix	1
cache lines from set	1
cache lines we used	1
cache lines follow the	1
cache lines belong to	1
cache efficiency and code	1
cache (e.g. Sandy Bridge)	1
cache problems. It is	1
cache space. The syntax	1
cache space. A situation	1
cache space. Excessive use	1
cache space. Putting simple	1
cache line. The cache	1
cache line. This is	1
cache line. Some compilers	1
cache line. But these	1
cache line. Only one	1
cache line. 132 Table	1
cache misses is not	1
cache misses and branch	2
cache misses by making	1
cache misses have occurred.	1
cache size, etc. There	1
cache effects into account.	1
cache lines. The critical	1
cache lines. This makes	1
cache size) / (number	1
cache MOVNTQ _mm_stream_pi SSE	1
cache organization for different	1
cache level, and in	1
cache space, as explained	1
cache sizes. Fortunately, the	1
cache misses, branch mispredictions,	2
cache misses, branch misprediction,	1
cache efficiency, then you	1
cache miss can be	1
cache miss on a	1
cache MOVNTDQ _mm_stream_si128 SSE2	1
cache MOVNTPD _mm_stream_pd SSE2	1
cache contentions. See page	1
cache contentions. Use simple	1
cache (en.wikipedia.org/wiki/L2_cache). The details	1
cache evictions and other	1
cache MOVNTPS _mm_stream_ps SSE	1
cache MOVNTI _mm_stream_si32 SSE2	1
cache line: static inline	1
cache line, because the	1
cache contention. You may	1
cache contentions, as explained	1
cache miss. But if	1
should of course be	1
should be a class	1
should be of the	1
should be as standardized	1
should be only one	1
should be used only	1
should be possible to	1
should be stored in	1
should be stored at	1
should be stored together	3
should be stored together......................................	1
should be accessed with	1
should be compiled three	1
should be done by	1
should be implemented as	2
should be used. Web	1
should be separate for	1
should be longer than	1
should be aligned by	1
should be linked into	1
should be declared const	1
should be declared inside	1
should be based on	1
should be made local.	1
should be tested in	1
should be tested with	1
should be tested on	2
should be avoided by	1
should be avoided because	2
should be clear from	1
should be organized so	2
should be standardized and	1
should be easily available	1
should be allowed and	1
should be saved in	1
should be aware that	2
should be aware of.	1
should be measured separately.	1
should be split up	1
should be seen in	1
should be written in	1
should be true. template<>	1
should be identified by	1
should be multiplied by	1
should be hidden by	1
should be performed with	1
should be taken into	3
should be handled in	1
should be predicted. This	1
should be optional and	1
should be avoided, if	1
should be regarded as	1
should be obeyed. Copy	1
should be prepared for	1
should be weighed against	1
should be postponed until	1
should be scheduled in	1
should by all means	1
should not be evaluated	2
should not call WriteFile	1
should not look at	1
should not include any	1
should have as few	1
should have its pointer	1
should have #if directives	1
should use this method	1
should use such methods	1
should use standard API	1
should then handle its	1
should only be used	1
should do as little	1
should also be tested	1
should also be considered.	1
should also proceed in	1
should take installation time	1
should test the response	1
should always be a	1
should always use standardized	1
should work efficiently on	1
should avoid any use	1
should avoid these and	1
should avoid making any	1
should avoid macros with	1
should therefore be used	1
should therefore be aware	1
should therefore not be	1
should therefore preferably be	2
should therefore preferably have	1
should get a reply	1
should run in a	1
should preferably be a	4
should preferably be an	1
should preferably be done	2
should preferably be declared	2
should preferably be avoided	1
should preferably be static,	1
should preferably be kept	2
should preferably be responded	1
should preferably have no	1
should automatically detect which	1
should never use static	1
should never return any	1
should never interrupt the	1
should never respond to	1
should give a CPU	1
should look at to	1
should choose an up-to-date	1
should rely on static	1
should produce the same	1
should save one unit	1
should allow compile- time	1
should apply the empty	1
should apply CPU dispatching	1
should contain a typical	1
should multiply it by	1
should include not only	1
should depend on the	1
should definitely be avoided	2
should definitely be avoided.	1
should disable it in	1
should leave a background	1
integer is within a	1
integer is added to	1
integer is converted to	1
integer is returned. There	1
integer is signed, or	1
integer of a specific	1
integer to the structure.	1
integer to a float	1
integer to a signed	1
integer to a smaller	1
integer to floating point	1
integer to floating point.	1
integer to zero is	1
integer and this will	1
integer and floating point	1
integer and double vectors	1
integer and 8 floating	1
integer in the loop	1
integer in the interval	1
integer in a different	1
integer in one operation.	1
integer in disguise. Enums	1
integer that holds a	1
integer can be done	1
integer can be converted	1
integer if the length	1
integer if it is	1
integer if there is	1
integer with a constant	1
integer with vector integer	1
integer int n; #if	1
integer may be used	1
integer will be interpreted	1
integer has a particular	1
integer has enough bits	1
integer vector from array	4
integer vector into array	4
integer vector instructions SSE4.1	1
integer vector division. 12.4	1
integer because the integer-to-float	1
integer size is not	1
integer size is big	1
integer size in cases	1
integer size that is	3
integer size that doesn't	1
integer size if you	1
integer size on AMD	1
integer value of temp.	1
integer takes a very	1
integer takes a long	1
integer takes longer time.	1
integer variable by a	1
integer register variables is	1
integer rather than two	1
integer code. It is	1
integer registers is extended	1
integer registers in 64-bit	1
integer registers available for	1
integer without SSE2 typically	1
integer operations for manipulating	2
integer operations for incrementing	1
integer operations are faster	1
integer operations use different	1
integer operations do not	1
integer operations such as	1
integer operations in-between the	1
integer type size_t is	1
integer constant with its	1
integer calculations in floating	1
integer doesn't cause overflow.	1
integer overflow with the	1
integer overflow will make	1
integer overflow doesn't occur	1
integer power using loop	1
integer parameters and the	1
integer parameters are transferred	2
integer known at compile	1
integer counter and using	1
integer multiplication by a	1
integer multiplication prior to	1
integer expression -a >	1
integer conversion Conversion of	1
integer parameter comes first	1
integer division in vectors,	1
integer division with truncation,	1
integer division prevents the	1
integer types of a	1
integer types Unfortunately, the	1
integer types available. declaration	1
integer expressions than on	1
integer expressions than floating	1
integer expressions rather than	1
integer expressions Induction variables	1
integer expressions (except for	1
integer vectors FMA3 floating	1
integer variables. 31 7.3	1
integer registers. Typical candidates	1
integer calculations. The code	1
integer calculations. It is	1
integer operations. This can	1
integer expressions. See page	1
integer overflow. Signed versus	1
integer addition, a floating	1
integer addition, subtraction and	1
integer factorial function (n!)	1
integer arithmetic operations. When	1
integer vectors. Code that	1
integer parameters. Floating point	1
integer representation of &list[100]	1
integer constant. // General	1
integer Common subexpression elimin.,	1
integer Register variables, float	1
integer counter. A microprocessor	1
integer counter. Example: //	1
integer division. Older CPUs	1
integer type. Interrupt service	1
integer overflow, and invalid	1
integer constants. Register storage	1
integer units, one or	1
integer operations, and to	1
integer variable, it makes	1
integer comparison is likely	1
integer comparison, which is	1
integer According to the	1
integer power, loop unrolled	1
integer division: Integer division	1
integer representations in two	1
integer constant, unless the	1
integer comparisons. The solution	1
no function or method	1
no compiler I have	1
no more than the	1
no more time than	2
no more threads with	1
no other value than	2
no other threads have	1
no other values than	2
no other modules call	1
no other branches. A	1
no other exceptions: __except	1
no instruction for self-relative	1
no loop if the	1
no cache (see p.	1
no cache problems. It	1
no pointer aliasing (see	1
no pointer aliasing (/Oa).	1
no pointer aliasing /Oa	1
no pointer aliasing. The	1
no pointer aliasing. See	1
no pointer aliasing. __declspec(noalias)	1
no pointer aliasing" if	1
no pointer aliasing" (if	1
no object is accessed	1
no such advantage in	1
no variable or object	1
no performance cost to	1
no performance penalty for	1
no long dependency chains.	1
no branch prediction (see	1
no way the user	1
no way to tell	2
no operating system, and	1
no need to use	1
no need to take	2
no need to link	1
no need to break	1
no need to organize	1
no need to deallocate	1
no need for garbage	1
no instructions for integer	1
no extra code at	1
no extra time if	1
no extra time as	1
no extra time when	1
no extra time. It	1
no extra time. There	1
no extra time. These	1
no extra cost to	1
no extra overhead in	1
no calls to frame	1
no big difference in	1
no big arrays, then	1
no specific order but	1
no specific recommendation of	1
no specific option) better:	1
no virtual member the	1
no exception handling. It	1
no exception ever happens.	1
no overflow can occur,	1
no AVX support, then	1
no check for overflow	2
no check for overflow.	2
no problem if the	1
no advantage to using	1
no copy constructor and	1
no copy constructors and	1
no information about the	1
no certain limit to	1
no branches inside can	1
no caching problems for	1
no cost to using	1
no cost in terms	2
no cost because it	1
no automatic check for	1
no induction variable would	1
no reason to use	3
no reason to add	1
no reason to unroll	1
no difference in performance	1
no difference in speed	3
no difference in performance.	1
no difference for the	1
no difference between 32-bit	1
no difference whether you	1
no longer used and	1
no longer used. A	1
no longer used. It	1
no graphics processing unit.	1
no negative effect on	1
no overhead while other	1
no checking for array	1
no checking for overflow,	1
no out-of-order execution. There	1
no destructor the object	1
no offset at all.	1
no clear correspondence between	1
no risk of overflow,	1
no risk of overflow:	1
no risk of underflow.	1
no penalty for mixing	1
no checks for array	1
no easy way to	2
no explanation why this	1
no try block or	1
no heavy marketing of	1
no absolute addresses that	1
no loop-carried dependency chain.	1
no 51 performance penalty	1
no modification of the	1
no idea how a	1
no reasonable upper limit	1
no compile- time loops	1
no multiplications. The following	1
no doubt obtained with	1
no warning from the	1
no effect. GOT and	1
no attempt is made	1
no native floating point	1
no guarantee that all	1
no side-effects and its	1
no yes License license	1
page and 90 for	1
page size (4096). This	1
page 8 below. This	1
page 16 for a	1
page 32 for an	1
page 128 below. Dispatch	1
page 3 for a	1
page 130 for an	1
page 130 for how	2
page 130 for details).	1
page 120 for how	1
page 16. If you	1
page 87 for a	1
page 87 about memory	1
page 122 for how	2
page 80 for an	1
page 90 for a	1
page 107 for how	1
page 103 for examples	1
page 51 for the	1
page 43 for an	1
page 43 about branch	1
page 88 for details.	1
page 134 and 135	1
page 134 on bounds	1
page 150 for further	1
page 146 below. Position-independent	1
page 146 below. 3.7	1
page 26 about data	1
page 29 for details.	1
page 31 for more	1
page 49 and manual	1
page 49 for a	1
page 101 for further	1
page 93 for discussion	1
page 164 below. Those	1
page 81 for an	1
page 89 for an	2
page 137 about division).	1
page 136 and 137,	1
page 153 for further	1
page 145 and 119	1
page 140 for further	1
page 141 for details	1
page 78 for an	2
page 107). The Gnu	1
page 107). Agner's vector	1
page 16) shows that	1
page 71). The conclusion	1
page 71). In this	1
page 131. Intel Performance	1
page 131. AMD LIBM	1
page 127. The Intel	1
page 15. C++ is	1
page 52. The member	1
page 52. You may	1
page 73 and 72	1
page 73). It is	1
page 73). Current compilers	1
page 39 shows how	1
page 105. Floating point	1
page 105. 8.7 Checking	1
page 93. Avoid the	1
page 93. 7.10 Arrays	1
page 26. The heap	1
page 26. Avoid global	1
page 78). A matrix	1
page 78). Adding the	1
page 137). The second	1
page 137). This also	1
page 80. The keyword	1
page 43). The Boolean	1
page 122. The code	1
page 122. The Intel	1
page 87). Data caching	1
page 58 shows an	1
page 105). If the	1
page 105). Using the	1
page 140). The SSE2	1
page 140). Mathematical functions	1
page 72. It is	1
page 72. You have	1
page 95 and 120	1
page 51). The order	1
page 119). The AMD	1
page 22. Avoid long	1
page 153. A profiler	1
page 27). The maximum	1
page 107. A disadvantage	1
page 78. Assume no	1
page 60. In the	1
page 103) will be	1
page 107), OpenMP and	1
page 122) for the	1
page 62. If the	1
page 96. 14.5 Integer	1
page 141. Applications that	1
page 53). No general	1
page 93). All common	1
page 44. The dispatching	1
page 143. The trick	1
page 96). Virtual functions	1
page 134. The table	1
page 103), but the	1
page 34. In some	1
page 142). 30 Overflow	1
page 54. It is	1
page 81). 77 Pointer	1
page 90. 15 Metaprogramming	1
page 84). The compiler	1
page 53. 7.24 Unions	1
page 45. This may	1
page 134) return FactorialTable[n];	1
page 135). This extra	1
page 140. Avoid conversions	1
page 132. Unfortunately, table	1
page 87. This will	1
page 38). Is the	1
page 87) is likely	1
page 130. It is	1
page 72). The compiler	1
page 61. It is	1
page 158. This manual	1
page 150. Using templates	1
page 73) automatically then	1
page 73. Runtime polymorphism	1
page 70). The programmer	1
page 27. An array	1
set the flush-to-zero mode	1
set the parentheses manually.	1
set the denormals-are-zero mode	1
set is the vector	1
set is the scarcity	1
set is that the	1
set is that it	1
set is not always	1
set is available then	1
set is supported in	1
set is supported by	5
set is supported on	1
set is used. It	1
set is better than	1
set is particularly interesting	1
set is enabled. The	2
set is enabled. There	1
set is enabled. Conversion	1
set is enabled. Conversions	1
set is enabled. Typically,	1
set is enabled. Few	1
set is available. The	3
set is available, 256	1
set is enabled there	1
set is enabled (single	1
set is supported. For	1
set is specified. The	1
set is available: //	1
set is enabled: //	1
set is maintained for	1
set a to zero	2
set a breakpoint in	1
set of data in	1
set of cache lines	1
set of performance monitoring	1
set of template parameters.	1
set of test data	2
set of test data.	2
set of CPUs. These	1
set of special vector	1
set of containers is	1
set of counters in	1
set to NULL. There	1
set to relax floating	1
set and one that	1
set and insert only	1
set and map are	1
set and YMM registers	2
set and ZMM registers	2
set in the variable	1
set in the cache.	1
set in order to	1
set for the vector	1
set for the appropriate	1
set that is compatible	1
set that you want	1
set are expected to	1
set can be used.	1
set can run only	1
set can still run	1
set or any higher	1
set it supports. An	1
set if possible. The	1
set if possible. SSE2	1
set by using the	1
set not supported fprintf(stderr,	1
set an array to	1
set int iset =	1
set than the CPU	1
set may actually be	1
set when running on	1
set when compatibility with	1
set then the optimal	1
set then it will	1
set has no instruction	1
set has support for	1
set has nothing between	1
set into sub-vectors that	1
set multiple bits in	1
set number 28. The	1
set number 0x1C. There	1
set also allows 256-bit	1
set where the number	1
set makes floating point	2
set SSE2 or later.	1
set SSE2 not supported");	1
set up the performance	1
set up to count	1
set up and enable	1
set AVX instr. set	1
set values then the	1
set sign bit of	1
set sign bit to	1
set was originally designed	1
set char 8 8	1
set needed _mm_shuffle_epi8 16	1
set control no yes	1
set supports self-relative addressing	1
set supports self-relative addressing.	1
set gives the advantage	1
set Automatic CPU dispatch	1
set SSE4.1 instr. set	1
set seconds to zero	1
set (or higher) is	1
set #if INSTRSET ==	1
set available, e.g. AVX,	1
set Header file MMX	1
set opens the possibility	1
set (requires a microprocessor	1
set (128 bit float	1
set (128 vectors of	1
set 0x1C. If the	1
set specified. Insert an	1
set (called x86) of	1
set Suppl. SSE3 instr.	1
set extensions. If a	1
set Prefetch PREFETCH _mm_prefetch	1
set (/arch:SSE2, /arch:AVX etc.	1
set Important features 80386	1
class is more efficient	1
class is less than	1
class is 128 bytes	1
class is implemented in	1
class is declared or	1
class is declared by	1
class is given as	1
class is converted to	1
class is declared. An	1
class is responsible for	1
class of the object	1
class of object p	1
class to a pointer	1
class and a derived	1
class and store the	1
class and derived class	1
class in one source	1
class in another source	1
class for containing thread-specific	1
class that the member	1
class that is used	1
class that takes care	1
class that behaves like	1
class are stored in	1
class are stored together	1
class are called from	1
class are accessed through	1
class are accessed equally	1
class can be used	1
class or structure is	3
class or structure are	1
class or structure object	1
class or give it	1
class or structure. The	1
class or structure. This	1
class by type-casting its	1
class with a destructor	1
class with a default	1
class with members of	1
class code with automatic	1
class will be stored	1
class data member is	1
class data members is	1
class has a pointer	1
class has at least	1
class vector { //	1
class which gets information	1
class should be aligned	1
class into an anonymous	1
class library can emulate	1
class library have functions	1
class library will use	1
class library has not	1
class library has many	1
class library Intel Agner	1
class library makes it	1
class library #include <stdio.h>	1
class library exp exp	1
class objects and is	1
class objects can often	1
class objects Conversions involving	1
class objects (rather than	1
class member function means	1
class member functions because	1
class member variable with	1
class member function. The	1
class libraries use dynamic	1
class libraries 113 Number	1
class template rather than	1
class need not be	1
class must have a	1
class (see page 51).	1
class doesn't need a	1
class through a pointer	1
class through a template	2
class members may cause	1
class name and the	1
class name as template	1
class library. Open source.	1
class Variables declared inside	1
class containing the functions	1
class containing the members	1
class templates in www.agner.org/optimize/cppexamples.zip.	1
class templates are available	1
class declaration and the	1
class D : public	2
class C1 or C2,	1
class C1 { public:	1
class C1 : public	2
class members. The code	1
class c1 { const	1
class c1 other than	1
class library, SSE4.1 gives	1
class gets information about	1
class separately in software	1
class elements. The size	1
class objects. The size	1
class powN { public:	1
class CChild1 : public	2
class CHello { public:	1
class C0 { public:	1
class Vec16s when compiling	1
class definition. This will	1
class definition. Inlining a	1
class CChild2 : public	1
class templates, as explained	1
class B1; class B2;	2
class CParent : public	1
class CGrandParent { public:	1
class declaration. The type	1
class C2 : public	1
class c1; int c1::*MemberPointer;	1
class SafeArray { protected:	1
class B2; class D	1
class B2; 54 class	1
class powN<true,0> { public:	1
class powN<true,N> { public:	1
class S2 { public:	1
class S3 { public:	1
class (also called properties)	1
class (CGrandParent) contains any	1
class library). The D	1
class C1, so it	1
class powN<true,1> { public:	1
class (CParent<>) contains any	1
floating point is faster	2
floating point to integer	2
floating point to integer.	1
floating point and integer	1
floating point if the	1
floating point code and	1
floating point code more	1
floating point code rather	1
floating point code slower,	1
floating point library which	1
floating point number is	1
floating point number to	2
floating point number in	1
floating point number by	1
floating point number simply	1
floating point value written	1
floating point variable as	1
floating point variables is	1
floating point variables in	1
floating point variables Floating	1
floating point variables .........................	1
floating point register variables	3
floating point register stack	1
floating point register variables.	1
floating point register variables,	1
floating point code. The	2
floating point code. If	1
floating point registers and	1
floating point registers are	1
floating point registers available	1
floating point registers organized	1
floating point operations and	1
floating point operations without	1
floating point operations involves	2
floating point operations (addition,	1
floating point constant always	1
floating point stack registers	3
floating point calculations and	1
floating point calculations or	1
floating point calculations as	1
floating point calculations will	1
floating point calculations should	1
floating point calculations inside	1
floating point calculations unless	1
floating point calculations whenever	1
floating point execution units.	1
floating point overflow but	1
floating point precision (see	1
floating point parameters are	1
floating point counter then	1
floating point multiplication at	1
floating point multiplication units.	1
floating point division to	1
floating point induction variables	1
floating point addition and	1
floating point addition with	1
floating point addition on	1
floating point addition takes	1
floating point addition every	1
floating point addition units,	1
floating point addition unit,	1
floating point expressions or	1
floating point expressions may	1
floating point expressions (see	1
floating point numbers is	2
floating point numbers to	1
floating point numbers and	2
floating point numbers can	1
floating point numbers simply	1
floating point operands cannot	1
floating point operation on	1
floating point operation takes	1
floating point constants are	2
floating point library. If	1
floating point calculations. Even	1
floating point operations. You	1
floating point precision. The	1
floating point instructions. This	1
floating point instructions. Each	1
floating point expressions. It	1
floating point expressions. For	1
floating point expressions. Most	1
floating point expressions. Floating	1
floating point addition, and	1
floating point variables, if	1
floating point Conversion of	1
floating point vectors. There	1
floating point rounding mode	1
floating point capabilities (except	1
floating point representation directly	1
floating point number. We	1
floating point comparisons are	1
floating point comparisons more	1
floating point numbers. It	1
floating point numbers. Therefore,	1
floating point division. Correction	1
floating point underflow in	1
floating point constants, string	1
floating point format is	1
floating point addition. This	1
floating point multiplication, to	1
floating point numbers: //	1
floating point comparisons, which	1
floating point overflow: _controlfp_s(&dummy,	1
floating point expressions, even	1
floating point precisions when	1
floating point status: _fpreset();	1
floating point comparison. On	1
floating point variable: //	1
floating point multiply-and-add Table	1
floating point -ffast-math /fp:fast	1
floating point exceptions, etc.	1
floating point. The reason	1
floating point. Use 64-bit	1
floating point. Conversion of	1
floating 26 point constants,	1
floating point: // Example	1
floating point-to-integer conversions in	1
floating point). There are	1
each of the most	1
each of its members	1
each function is called	1
each function and branch	1
each function or class	1
each function call to	1
each function call so	1
each function relative to	1
each compiler with the	1
each time the function	3
each time the program	1
each time it is	1
each time slice are	1
each vector can be	1
each vector can hold	1
each vector register is	1
each vector depends on	1
each different value of	1
each CPU model has	1
each CPU core). The	1
each other is inefficient	1
each other in the	2
each other in order	1
each other in memory.	1
each other are also	2
each other (not member	1
each instruction set. A	1
each integer type. Interrupt	1
each set of template	1
each floating point operation	1
each object in its	1
each object are called	1
each object should preferably	1
each object separately if	1
each array is a	1
each array element in	1
each version of the	1
each version void FUNCNAME(short	1
each version FuncType SelectAddMul,	1
each value is calculated	1
each value of sum	1
each value of n!	1
each value from the	1
each value depends on	1
each value xn is	1
each table element Instruction	1
each member function has	1
each address by adding	1
each call to a	1
each bit of a	1
each bit in Day	1
each bit in nn	1
each bit indicates a	1
each time. An experiment	1
each test // Repeat	1
each new version for	1
each new generation of	1
each part of the	2
each part takes. See	1
each type of microprocessor.	1
each constant a value	1
each processor model is	1
each compiled for the	1
each element in vector	4
each element in b	2
each element __m128i a	1
each element matrix[r][c] is	1
each thread than to	1
each thread may run	1
each thread will run	1
each thread its own	1
each allocated block. Walking	1
each line written. This	1
each optimized for a	1
each calculation depends on	2
each run in an	1
each particular branch of	1
each their stack. This	1
each their smart pointer	1
each intrinsic function call	1
each string is checked	1
each addition has to	1
each addition depends on	1
each set. If the	1
each process when compiled	1
each statement that calls	1
each instance of the	1
each task or thread	1
each object. A little-known	1
each iteration is a	1
each iteration it decides	1
each iteration needs the	1
each thread. This method	1
each thread. This structure	1
each thread. It is	1
each thread. Pointers to	1
each thread. Thread-local storage	1
each access. The compiler	1
each version. The examples	1
each row or column.	1
each row by adding	1
each label is equal	1
each case. Inlined functions	1
each factor rather than	1
each core. For example,	1
each step of the	1
each process. A dynamic	1
each process. Obviously, we	1
each other. This is	1
each other. See page	2
each carefully optimized and	1
each element, bits Number	2
each calculation. In most	1
each method, it is	1
each other's caches and	1
each pixel or line	1
each call, and the	1
each clause are separated	1
do the CPU dispatching	1
do the optimization unless	1
do the extra operations	1
do the best job	1
do the necessary calculations	1
do the check after	1
do the dispatching only	1
do the reductions manually.	1
do the calculations. The	1
do the algebraic reductions	1
do the job fast	1
do the reduction in	1
do the divisions (Division	1
do the conversion. The	1
do the devirtualization (see	1
do is to mix	1
do is to enable	1
do a floating point	1
do a lot of	3
do a thorough analysis	1
do to make the	1
do to take maximum	1
do and which optimizations	1
do and what it	1
do it explicitly. In	1
do function inlining and	1
do with bitwise operators	1
do as much as	1
do as little work	1
do not have the	1
do not have to	1
do not have this	1
do not have such	1
do not have inherent	1
do not use the	1
do not use branches,	1
do not make this	1
do not make induction	1
do not need relocation	1
do not always work	1
do not always work.	1
do not support static	1
do not support SSE.	1
do not add to	1
do not know that	1
do not produce any	1
do not expect to	1
do not free the	1
do not overlap. If	1
do not overlap. You	1
do not overlap. See	1
do not overlap. 27	1
do not wrap around	1
do not overlap or	1
do not normally use	1
do not occur. The	1
do not 123 correspond	1
do not alias, if	1
do an integer addition,	1
do an addition with	1
do have to worry	1
do have such checks.	1
do this by invoking	1
do this optimization automatically	1
do this optimization explicitly.	1
do this every time	1
do this optimization. 8.2	1
do this manually. This	1
do use the 64-bit	1
do more than one	1
do more complicated reductions.	1
do more reductions on	1
do when you want	1
do different kinds of	1
do because it comes	1
do other input/output than	1
do integer operations in-between	1
do multiple things at	1
do two additions with	1
do two jobs simultaneously.	1
do such a check	1
do such optimizations automatically,	1
do such obvious reductions	1
do any algebraic reductions	1
do some measurements to	1
do so is a	1
do so is also	1
do so will cause	1
do so unless you	1
do so (i.e. if	1
do operations on all	1
do simple integer calculations	1
do simple algebraic reductions	1
do must be done	1
do while waiting for	1
do calculations on the	1
do calculations while another	1
do calculations while simultaneously	1
do much of the	1
do four additions in	1
do another addition to	1
do mathematical calculations. It	1
do automatic vectorization. Optimizes	1
do optimizations such as	1
do things in parallel.	1
do things in parallel:	1
do things with pointers	1
do whole program optimization.	1
do out-of-order execution. This	1
do something about it.	1
do something about them.	1
do arithmetic operations with	1
do this: Use assembly	1
do this. Unfortunately, the	1
do nothing while seconds	1
do so. The compilers	1
do so. See page	1
do so. 58 If	1
do manually. It must	1
do interprocedural optimizations of	1
do experiments in order	1
do immediately before the	1
do so). A template	1
do cross-module optimizations when	1
do searches of the	1
example is a function	1
example is a cache	1
example is a double	1
example is called with	1
example is specific to	1
example is Perl. Several	1
example of a Taylor	1
example of how to	3
example to produce tables	1
example in the "Macro	1
example can be accessed	1
example can be avoided	1
example if you want	1
example if you write	1
example with floating point	1
example with u.i[1] ^=	1
example on page 39	1
example may fail in	1
example use #if instead	1
example when you discover	1
example when r =	1
example has three conditions	1
example only to show	1
example should be compiled	1
example using Agner's vector	1
example i = 18,	1
example so that a+b	1
example 32 bits of	1
example container classes that	1
example every time a	1
example sets the sign	1
example shows the same	1
example shows the principle	1
example shows a code	1
example shows this calculation	1
example shows first the	1
example shows how to	6
example shows what the	1
example containers in cases	1
example below shows. The	1
example 15.1b is easier	1
example 15.1b is implemented.	1
example 15.1b to metaprogramming	1
example 15.1b to 15.1c	1
example 15.1b to 15.1c.	1
example 15.1b to 15.1c?	1
example 15.1b and d	1
example 13.1 can be	1
example 13.1 page 127.	1
example 13.1 below. 126	1
example 16.2 calls the	1
example 16.2 above, but	1
example 15.1c is faster	1
example 14.8 and 14.9	1
example 12.4b and 12.4c	1
example 12.4b can be	1
example 16.1 const int	1
example 9.5 because we	1
example 9.5 so that	1
example illustrates the difference	1
example illustrates such a	1
example illustrates how to	1
example illustrates this. My	1
example 8.26a by rolling	1
example 8.26a (32-bit mode):	1
example 15.1a to 15.1c	1
example 15.1a to 151	1
example 14.28 can be	1
example 14.28 will shift	1
example 7.4 we are	1
example 9.6b. The MOVNTQ	2
example 9.5a on a	1
example 9.5a goes from	1
example 11.3 is independent	1
example 11.3 even without	1
example explains why bookkeeping	1
example 14.12b and 14.13b	1
example 14.14a with 14.14b	1
example 12.4a where current	1
example 12.4a so that	1
example 8.15a were float	1
example 14.19 below. The	1
example 14.1c is copied	1
example 11.2b was an	1
example transposes a matrix	1
example 11.1a to 11.1b	1
example 7.15b below shows.	1
example 15.1b. Branches are	1
example 14.23 page 143.	1
example (12.4e) with automatic	1
example 14.7b is converted	1
example 12.4a, depending on	1
example 7.32b. A for-loop	1
example 8.15b. The integer	1
example 8.21, you could	1
example 16.2. The measured	1
example 12.2, the optimized	1
example 8.23b has two	1
example 15.1d to 15.1c	1
example 14.7b, we are	1
example 8.24 can be	1
example 12.1a, the compiler	1
example 12.1b to 12.1a.	1
example 8.26b: ; Example	1
example 16.1. This code	1
example 12.8a to 12.8b	1
example 7.35 page 52.	1
example converts a zero-terminated	1
example 12.1b, the compiler	1
example 9.5a: 98 int	1
example 12.4b, rewritten with	1
example 7.22. // Example	1
example 9.5b. // Example	1
example 12.3a, for example,	1
example 13.1, Requires binutils	1
example 7.43b is admittedly	1
example 14.21 is faster	1
example 9.1b. On the	1
example 7.30b. The loop	1
compilers is generally possible	1
compilers to see whether	1
compilers to choose between.	1
compilers and function libraries	2
compilers and operating systems.	1
compilers and operating systems".	3
compilers and operating systems").	1
compilers and operating systems"	1
compilers and optimized function	1
compilers and development tools.	1
compilers and microprocessors work.	1
compilers and invoked with	1
compilers The register keyword	1
compilers The tests were	1
compilers for Windows are	1
compilers for Linux. 82	1
compilers that a user-defined	1
compilers that are best	1
compilers that have support	1
compilers that support intrinsic	1
compilers that rely on	1
compilers are not very	1
compilers are not compatible	1
compilers are able to	6
compilers are better at	1
compilers are actually reducing	1
compilers are mentioned below.	1
compilers are becoming better	1
compilers are inferior to	1
compilers can in most	1
compilers can be used	1
compilers can use vector	1
compilers can make thread-local	1
compilers can do a	1
compilers can do simple	1
compilers can automatically detect	1
compilers can reduce other	1
compilers can reduce some	1
compilers can reduce simple	1
compilers can compute a	1
compilers or function libraries	1
compilers may be able	1
compilers may not vectorize	1
compilers may behave differently	1
compilers you can do	1
compilers have a feature	2
compilers have an option	4
compilers have efficient table-based	1
compilers have many keywords	1
compilers have support for	1
compilers have various optimization	1
compilers have various options	1
compilers have inefficient code-based	1
compilers have difficulties making	2
compilers use the software	1
compilers use the name	1
compilers will not do	2
compilers will use the	1
compilers will use different	1
compilers will make temp	1
compilers will make exactly	1
compilers will make two.	1
compilers will do this	1
compilers will do such	1
compilers will often replace	1
compilers will replace the	1
compilers will automatically replace	1
compilers will automatically choose	1
compilers will reduce int	1
compilers will unroll loops	1
compilers will align data	1
compilers will align large	1
compilers will recognize that	1
compilers then it is	1
compilers from Microsoft, Intel	1
compilers at the object	1
compilers has several flaws:	1
compilers make Sum1 slightly	1
compilers do not make	1
compilers do not free	1
compilers also have fast	1
compilers such as the	1
compilers cannot do must	1
compilers cannot reduce the	1
compilers need assembly code	1
compilers without problems if	1
compilers I have made	1
compilers I have tested	4
compilers I have studied	1
compilers I have tried.	1
compilers optimize Modern compilers	1
compilers optimize ............................................................................................ 66	1
compilers don't vectorize the	1
compilers Intel, Microsoft Intel,	1
compilers produce less optimal	1
compilers unroll too much.	1
compilers reduced 15.1a to	1
compilers allow assembly-like intrinsic	1
compilers include standard libraries	1
compilers available, though less	1
compilers due to controversies	1
compilers work. The C++	1
compilers behave differently because	1
compilers offer the choice	1
compilers offer the possibility	1
compilers offer profile-guided optimization.	1
compilers (Microsoft, Intel) know	1
compilers www.agner.org/ optimize/#vectorclass Include	1
compilers succeeded in applying	1
compilers exist for all	1
most of the time	2
most of the functions	1
most of the Gnu	1
most of the Microsoft	1
most of the advantages	1
most of the resources.	1
most of the time,	1
most of its time	3
most of their time	1
most of their execution	1
most for register variables.	1
most function libraries have	1
most other libraries when	1
most other microprocessors. Integer	1
most used data. The	1
most used parts of	1
most cache misses, branch	1
most compilers you can	1
most compilers will do	1
most compilers do not	1
most library functions without	1
most C++ compilers allow	1
most efficient for such	1
most efficient if the	1
most efficient if all	1
most efficient memory space	1
most efficient vector operations	1
most efficient loop control	1
most efficient integer size	1
most efficient library and	1
most efficient solution for	1
most efficient solution may	1
most efficient solution because	1
most efficient solution. Is	1
most efficient alternative. The	1
most variables in a	1
most software runs most	1
most critical integer parameter	1
most critical part of	8
most critical parts of	1
most critical modules with	1
most often used data	1
most often used variables	1
most often used members	1
most often true last	1
most libraries it is	1
most time. Uses debug	1
most useful for finding	1
most cases the microprocessor	1
most cases be linked	1
most cases it is	1
most cases you can	1
most cases when the	1
most cases where the	1
most cases they are	1
most simple reductions on	1
most processors (when vector	1
most important or critical	1
most important functions are	1
most important method that	1
most important disadvantage of	1
most important addition to	1
most important thing is	1
most important remedy is	1
most CPUs and operating	1
most common memory and	1
most common cause of	1
most common mathematical functions	1
most common platforms with	1
most common math functions	1
most common implementations of	1
most common pitfalls of	1
most common obstacles to	1
most common time-consumers are	1
most likely be called,	1
most cases, the optimal	1
most cases, the fastest	1
most cases, an optimizing	1
most cases, you can	1
most cases, but it	1
most cases, double precision	1
most cases, there is	1
most cases, even for	1
most cases, regardless of	1
most complicated implementation of	1
most development methods are	1
most appropriate for the	1
most advanced code version	1
most compatible way is	1
most cases. The so-called	1
most cases. This means	1
most cases. Don't change	1
most modern C++ compilers.	1
most efficiently if it	1
most efficiently if functions	1
most efficiently if pieces	1
most efficiently when the	1
most newer processors. The	1
most significant part of	1
most critical. However, there	1
most time-consuming part of	1
most time-consuming parts of	1
most purposes the standard	1
most systems, you cannot	1
most frequent causes of	1
most serious problem with	1
most reliable solution. (In	1
most predictable operand first.	1
most popular version of	1
most microprocessors. Multiplication and	1
most commonly used set	1
most commonly used variables	1
most clean solution is	1
most up-to-date solution. The	1
most cases: The CPU	1
most sorting algorithms, are	1
most distributions of Linux,	1
using the vector registers	1
using the same function	1
using the same compiler	1
using the same inline	1
using the integer in	1
using the performance monitor	1
using the register stack	1
using the optimization features	1
using the instructions listed	1
using the virtual table.	1
using the above template	1
using the keyword __restrict	1
using the keyword far	1
using the keyword __thread	1
using the | operator	1
using the | operator;	1
using the so-called time	1
using the so-called intrinsic	1
using the bitwise OR	1
using the previous value.	1
using the declaration "static"	1
using the smallest integer	1
using the normal return	1
using the newest instruction	1
using the larger vector	1
using the directive __declspec(cpu_dispatch(...)).	1
using the fundamental laws	1
using a function that	1
using a compiler that	1
using a different function	1
using a 64-bit integer	1
using a software implementation	1
using a long vector	1
using a template parameter	1
using a constant divisor	1
using a common denominator	1
using a particular code	1
using a lookup table:	1
using a shift operation.	1
using a six years	1
using a profiler. A	1
using a pipeline where	1
using a ready-made profiler.	1
using and turn on	1
using function inlining, common	1
using an Intel function	1
using an Intel compiler,	1
using an inline function	1
using an intermediate code	2
using this for testing	1
using vector operations when	1
using vector classes and	1
using different types of	1
using functions such as	1
using only the even-numbered	1
using CPU clock cycles	1
using CPU dispatching then	1
using loop double ipow	1
using one or more	1
using one register less	1
using each bit in	1
using example 9.5a on	1
using Intel vector classes	1
using static linking and	1
using static linking rather	1
using static here is	1
using such a framework	1
using template metaprogramming //	1
using registers for the	1
using pointers and references.	1
using pointers rather than	1
using new and delete	1
using dynamic memory allocation.	1
using short int instead	1
using & enum Weekdays	1
using assembly language and	1
using assembly language because	1
using assembly language. See	1
using single precision or	1
using exception handling then	1
using integers as Boolean	1
using intrinsic functions or	1
using signed and unsigned	1
using vectors if the	1
using advanced algorithms to	1
using advanced facilities of	1
using references rather than	1
using references instead of	1
using position-independent code (option	1
using overloaded functions. 7.27	1
using overloaded operators for	1
using classes. 7.2 Integers	1
using bitwise operators is	1
using smart pointers is	1
using nontemporal writes. If	1
using references. References are	1
using templates (see p.	1
using rounding instead of	1
using exceptions is to	1
using powers of 2	3
using Agner vector classes	1
using Agner's vector classes	1
using asmlib library int	2
using 8-bit integers which	1
using exceptions. The function	1
using templates. Two or	1
using templates. Ready made	1
using namespaces. 65 8	1
using __fastcall. Function parameters	1
using hyperthreading. On the	1
using hyperthreading, but the	1
using multiplications only. The	1
using alloca. 9.7 Container	1
using ready made containers	1
using InstructionSet(): // Example	1
using indexes, working with	1
using new. The purpose	1
using new/delete or malloc/free	1
using memset: // Example	1
using unions rather than	1
using inheritance. There may	1
double the number of	1
double the speed by	1
double is that it	1
double is bad The	1
double is represented with	1
double a = sin(0.8);	1
double to int in	1
double to integer can	1
double to integer takes	1
double and long double	2
double if the code	1
double by modifying only	1
double A = 1.1,	2
double because all the	1
double which gives access	1
double Intel SVML v.10.2	1
double In example 7.4	1
double There is no	1
double takes 4 -	1
double takes 8 bytes	1
double 2 AVX2 _mm256_i64gather_pd	1
double const & source)	1
double before multiplying with	1
double 4 AVX2 Table	1
double 8 8 long	1
double 64 2 128	1
double 64 4 256	1
double 64 8 512	1
double take no extra	1
double without loading a	1
double 32 bits at	1
double (see page 140).	1
double a, b; a	3
double a, b; //	1
double precision is not	1
double precision is used.	1
double precision in 32-bit	1
double precision in programs	1
double precision or four	1
double precision or eight	1
double precision by default,	1
double precision when the	2
double precision takes only	1
double precision before multiplying	1
double precision without worrying	1
double precision constant and	1
double precision calculations are	1
double precision calculations take	1
double precision constant. It	1
double precision (80 bits).	1
double 128 float 256	1
double uses 64 bits.	1
double b; a +=	1
double b; // 8	1
double b; int d;	1
double 256 F32vec4 F64vec2	1
double y = 1.0;	1
double c; b =	1
double vectors AVX2 256	1
double vectors SSE3 horizontal	1
double Floating point calculations	1
double d; int i[2];	1
double d; d =	3
double d = 1.6;	1
double x, y; bool	1
double x, n, factorial	2
double x, y, z;	1
double precision. You may	1
double precision. But the	1
double precision. Conversions between	1
double precision. Long double	1
double temp; for (r	2
double temp; // Define	1
double 8, 10, 12	1
double plus 6 integer,	1
double p(double x) {	4
double precision, and intermediate	1
double precision, but there	1
double y, a1, a2,	2
double xpow10(double x) {	4
double a1, a2, b1,	2
double Y = C;	1
double format. The formats	1
double b;}; S1 list[100];	1
double b;}; S1 list[100],	1
double x2 = x	1
double reflects the floating	1
double Z = A	1
double x4 = x2*x2;	1
double Table[100]; int x;	2
double ipow (double x,	1
double log2 = log(2.0);	1
double b[SIZE][SIZE]) { int	2
double precision: // Example	1
double A2 = A	1
double x10 = x8*x2;	1
double x8 = x4*x4;	1
double Func2(double x) {	1
double a[arraysize], b[arraysize], c[arraysize];	1
double Func1(double) pure_function ;	1
double matrix[SIZE][SIZE]; transpose(matrix); }	1
double IntegerPower (double x)	1
size is a power	2
size is a limited	1
size is not standardized	1
size is different for	1
size is big enough	1
size is done simply	1
size is typically 64	1
size is relevant when	1
size is handled at	1
size is insufficient. The	1
size a multiple of	1
size of the program	1
size of the vector	1
size of the integer	1
size of the object	1
size of the array	2
size of the type	1
size of the matrix	1
size of the variable.	1
size of the parent	1
size of the largest	1
size of a memory	1
size of a matrix	2
size of code and	1
size of an int	1
size of an array	1
size of data files.	1
size of program or	1
size of vector registers	1
size of all data	1
size of all but	1
size of each vector	2
size of each integer	1
size of each object	1
size of each array	1
size of 64 bytes.	1
size of integers and	1
size of vector, bits	2
size of abc is	2
size of abc can	1
size of squares: const	1
size of 64. Each	1
size to avoid dynamic	1
size and type of	1
size and optimizing for	1
size in the future.	1
size in order to	1
size in cases where	1
size for the sake	1
size that is big	2
size that is larger	1
size that doesn't cause	1
size that fits the	1
size are only available	1
size can be allocated	1
size can be replaced	1
size // define matrix	1
size = 100; //	1
size = 100; int	1
size = 100; float	2
size = 100; S1	1
size = 256; //	1
size = 16; int	1
size = 1000; int	1
size = 1000; float	1
size = 1024; int	2
size = 1024; struct	1
size or data used	1
size if you declare	1
size by extending the	1
size with a line	1
size on AMD processors,	1
size as vector register.	1
size as template parameters,	1
size may possibly be	1
size have got low	1
size when doing calculations,	1
size then add a	1
size has higher priority	1
size only when the	1
size other than short	1
size should always be	1
size array or container	1
size cannot be predicted	1
size often have execution	1
size arrays inside the	1
size execution units. The	1
size doesn't matter and	1
size known at compile	1
size known before the	1
size conversion // Example	1
size conversion often takes	1
size parameter is bigger	1
size parameter is wrong,	1
size needed before adding	1
size divisible by vector	1
size comes only in	1
size right from the	1
size causes misses in	2
size vector. The use	1
size Time per element	1
size (in bytes) of	2
size Total kilobytes Time	1
size Alignd ( short	1
size (16 or 32	1
size matrices, clock cycles	2
size grows by only	1
size (typically 64) can	1
size (4096). This will	1
Intel and one from	1
Intel and Gnu compilers	1
Intel and Gnu compilers.	1
Intel and Microsoft C++	1
Intel and PathScale compilers	2
Intel and Gnu. There	1
Intel and Gnu). Other	1
Intel The Intel compiler	1
Intel or Microsoft compiler	1
Intel or PathScale compiler	1
Intel or PathScale. 2.	1
Intel function library then	1
Intel function libraries and	1
Intel function libraries do	1
Intel function libraries, but	1
Intel compiler is a	1
Intel compiler is that	1
Intel compiler is less	1
Intel compiler is used,	1
Intel compiler is capable	1
Intel compiler in favor	1
Intel compiler for Windows	1
Intel compiler for Linux	1
Intel compiler can insert	1
Intel compiler has an	1
Intel compiler has solved	1
Intel compiler because it	1
Intel compiler Intel compiler	1
Intel compiler Intel compilers	1
Intel compiler Windows Intel	2
Intel compiler Windows Linux	1
Intel compiler versions 7	1
Intel compiler Linux Align	1
Intel compiler Linux Optimize	1
Intel compiler works only	1
Intel compiler allows you	1
Intel compiler supports vector	1
Intel compiler reduced 15.1a	1
Intel compiler includes standard	1
Intel compiler generates the	1
Intel compiler ......................................................................... 130	1
Intel compiler puts the	1
Intel have similar CPU	1
Intel vector class library	1
Intel vector classes 114	1
Intel vector math library	1
Intel vector math libraries.	1
Intel vector classes): //	1
Intel vector classes: //	1
Intel CPU dispatcher treats	1
Intel CPU detection function	1
Intel but is currently	1
Intel compilers and function	1
Intel compilers for Windows	1
Intel compilers for Linux.	1
Intel compilers can use	1
Intel compilers have a	1
Intel compilers has several	1
Intel library function __intel_cpu_features_init()	1
Intel library functions have	1
Intel C++ compiler (parallel	1
Intel C++ compilers. Wikipedia	1
Intel C++ compiler. This	1
Intel C++ compiler, which	1
Intel C++ compiler, v.	1
Intel C++ Compiler v.	1
Intel C++ Compiler Documentation	1
Intel before it checks	1
Intel libraries are used	1
Intel libraries do not	1
Intel short vector math	1
Intel processors is called	1
Intel processors are not	1
Intel CPUs can be	1
Intel CPUs have family	1
Intel CPUs use Intel	1
Intel CPUs cannot be	1
Intel mechanism executes a	1
Intel compilers. We want	1
Intel processors. The performance	1
Intel processors. A non-Intel	1
Intel processors. AMD processors	1
Intel processors. Details about	1
Intel microprocessors are able	1
Intel CPUs. It uses	1
Intel CPUs. New versions	1
Intel compiler. This method	1
Intel compiler. Use CPUs	1
Intel math function library	1
Intel Pentium 4. Even	1
Intel libraries. Supports 32-	1
Intel header files For	1
Intel compiler, then make	1
Intel CPU. See page	1
Intel Vector class, Agner	1
Intel CPUs, not for	1
Intel CPUs, but not	1
Intel Math Kernel Library.	1
Intel processor. The CPU	1
Intel Borland Microsoft Constant	1
Intel CodeGear Microsoft Table	1
Intel Performance Primitives (IPP).	1
Intel Agner Available from	1
Intel Core and later	1
Intel Core 2 0.12	1
Intel Core 2 0.77	1
Intel Core 2 0.63	1
Intel SVML + ia32intrin.h	1
Intel SVML v.10.3 &	1
Intel SVML v.10.2 &	1
Intel Architecture Software Developer’s	2
Intel CPUs: use the	1
Intel Technology Journal Vol.	1
Intel VTune, for AMD	1
Intel VTune and AMD	1
Intel CPU’s. Another function	1
Intel Atom processors, but	1
pointer is the same	1
pointer is in fact	1
pointer is an object	1
pointer is then de-referenced	1
pointer is 4 bytes	1
pointer is simply the	1
pointer is simply optimized	1
pointer is used. For	1
pointer is needed a	1
pointer is aligned #pragma	1
pointer is deleted. Smart	1
pointer is created, deleted,	1
pointer a = (*CriticalFunction)(b,	1
pointer of a different	1
pointer to the object	1
pointer to the best	1
pointer to the next	1
pointer to the appropriate	2
pointer to the desired	3
pointer to the right	1
pointer to a pointer	1
pointer to a table	1
pointer to a virtual	1
pointer to a derived	1
pointer to a base	1
pointer to a contained	1
pointer to an integer,	1
pointer to one of	1
pointer to one class	1
pointer to its child	1
pointer to another class.	1
pointer to it. This	1
pointer and makes it	1
pointer in an import	1
pointer in member functions	2
pointer in assembly code.	1
pointer can be loaded	1
pointer can be converted	2
pointer or a member	1
pointer or a smart	1
pointer or a non-const	1
pointer or member function	1
pointer or const reference	1
pointer or reference is	1
pointer or reference to	8
pointer or reference can	1
pointer or reference may	1
pointer or reference parameters).	1
pointer or reference, the	1
pointer or reference, or	1
pointer or reference, 64-bit	1
pointer or reference, 32-bit	1
pointer or reference. Registers	1
pointer it gets from	1
pointer if else if	1
pointer not aliased #pragma	1
pointer may be considered	1
pointer then you may	1
pointer then its value	1
pointer at initialization. The	1
pointer has to be	1
pointer has been loaded.	1
pointer has been calculated.	1
pointer has changed then	1
pointer has changed. 7.8	1
pointer which is transferred	1
pointer which does the	1
pointer which initially points	1
pointer set to NULL.	1
pointer takes up one	1
pointer stored in a	1
pointer type casting. Linked	1
pointer does not require	1
pointer does not alias	2
pointer (see page 38).	1
pointer known in 36	1
pointer well before the	1
pointer simply stores the	1
pointer typically takes a	1
pointer actually points to	1
pointer points to and	1
pointer points to. Therefore,	1
pointer p has been	1
pointer No runtime type	1
pointer alignment and aliasing.	1
pointer eax to the	1
pointer aliasing is to	1
pointer aliasing does not	1
pointer aliasing (see page	1
pointer aliasing (/Oa). The	1
pointer aliasing /Oa -fno-alias	1
pointer arithmetic calculations go	1
pointer follows a simple	1
pointer aliasing. The only	1
pointer aliasing. See page	1
pointer aliasing. __declspec(noalias) or	1
pointer initially points to	1
pointer aliasing" if you	1
pointer aliasing" (if valid)	1
pointer refers to. For	1
pointer -fomit- frame- pointer	1
pointer serves as entry	1
pointer conversions. It does	1
pointer arithmetics and pointer	1
b is a float	1
b is a float,	1
b is an integer	1
b is an expression	2
b is floating point.	1
b is always 0	1
b is true 10%	1
b is true, which	1
b is guaranteed to	1
b is 400 here.	1
b to 0 and	2
b and c are	1
b and c can	1
b and c __m128i	2
b and c first.	1
b in a union:	1
b in example 8.15a	1
b for (i =	1
b are the same	1
b are 32-bit integers,	1
b are swapped then	1
b can be omitted,	1
b = a +	2
b = a ^	1
b = 0, c,	1
b = temp *	1
b = (unsigned int)a	1
b = 100, c	1
b = LoadVector(bb +	3
b = (a+1) *	1
b = 6.0f; Constant	1
b = 1.0E8, c	1
b = lrint(d); //	1
b = MultiplyBy<8>(10); a	1
b = !a; can	1
b if b is	2
b with a &	1
b with a |	1
b with 1 for	1
b as a *	1
b than to write	1
b have other values	1
b have been initialized	1
b when a is	1
b will be 2	1
b will both get	1
b from single precision	1
b has to start	1
b different so that	1
b because of a	1
b because b has	1
b because their live	1
b should be of	1
b double precision: //	1
b into a 128-bit	1
b + c +	2
b + 1 is	1
b + 1; for	1
b + 1; }	1
b + 1; return	1
b + c; The	1
b + c; y	1
b + c; Here,	1
b + a; 72	1
b + 2.0 /	1
b + 0.666666666666666666667; This	1
b * b +	2
b * c; a	1
b * c; Is16vec8	1
b * 5 /	1
b * c); //	2
b * c); a.store(aa+i);	1
b * 2.5 may	1
b * 3.5; c	1
b * 1.2; //	2
b * 1.5f; is	1
b * 5). As	1
b * (1. /	1
b * 1.2f; //	1
b member by 8.	1
b take the same	1
b & 1 is	1
b through a pointer	1
b / c; a	1
b / 10; a	1
b / 16; a	1
b / c) 139	1
b / 1.2345; Change	1
b : c (a&&b)	1
b : c x-xx-----	1
b needs to evaluate	1
b && a needs	1
b > 0 ?	2
b % c; a	1
b % 10; a	1
b % 16; a	1
b ? a :	2
b ? 1.5f :	1
b overlap. You should	1
b ---xx---- a<<b<<c=a<<(b+c) x-xxx--xx	1
b Bit vector algebra	1
b memcpy(b, a, sizeof(b));	1
into the code that	1
into the code rather	1
into the data cache.	1
into the program itself.	1
into the vector registers.	1
into the same executable.	1
into the list every	1
into the Microsoft Visual	1
into the algorithm in	2
into the right vector	1
into the right positions	1
into the least significant	1
into the executable file.	1
into the vector. This	1
into the beginning of	1
into the carry and	1
into the pipeline and	1
into the pipeline then	1
into the individual bits	1
into the technical details	1
into the pipeline. If	1
into the for-loop: i++;	1
into a and b.	1
into a vector of	1
into a vector goes	1
into a vector register.	1
into a vector register,	1
into a class or	1
into a class with	1
into a single object	2
into a single branch	1
into a single register	1
into a single result.	1
into a single container,	1
into a container class	1
into a container class.	1
into a separate function	1
into a separate thread	2
into a union is	1
into a 128-bit vector	2
into a 128-bit XMM	1
into a leaf function	2
into a place indicated	1
into an intermediate code,	1
into an STL vector	1
into an excessive number	1
into an arbitrary cache	1
into an anonymous namespace.	1
into memory when the	1
into memory even when	1
into vector c: CPU	1
into vector c: __m128i	2
into vector c: Is16vec8	1
into vector b: from	1
into vector b: __m128i	2
into vector b: Is16vec8	1
into one of the	2
into one if the	1
into one by means	2
into one thread. A	1
into each thread. This	1
into multiple threads that	1
into multiple functions. I	1
into multiple smaller functions	1
into multiple blocks in	1
into multiple threads. The	2
into multiple threads. There	1
into multiple threads. Each	1
into multiple threads. Out-of-order	1
into multiple threads, but	1
into two 64-bit operations	1
into two 128-bit reads.	1
into C++ classes and	1
into array static inline	4
into many small subtasks,	1
into threads with different	1
into small pieces of	1
into classes or structures.	1
into eight different cache	1
into memory. This is	1
into memory. If the	1
into separate threads with	1
into three parts: one	1
into smaller squares and	1
into lines and sets.	1
into registers. A class	1
into account in the	1
into account that each	1
into account when optimizing	1
into account when deciding	3
into account when choosing	1
into ecx and edx,	1
into vectors. A lot	1
into machine code and	1
into force when I	1
into projects made with	1
into sub-vectors that fit	1
into sleep mode. See	1
into groups of four	1
into account. You can	1
+ b than to	1
+ b + c	1
+ b + c;	3
+ b + a;	1
+ b * 1.5f;	1
+ 2 return (2.5f	1
+ 2 : b	2
+ 2 thenaandbcannot use	1
+ c + d;	2
+ i; Here, the	1
+ 1 is changed	1
+ 1; for (i	1
+ 1; } The	1
+ 1; } This	1
+ 1; } }	1
+ 1; } else	2
+ 1; } module2.cpp	1
+ 1; return c;	1
+ 1; x[1] =	1
+ 1; 69 }	1
+ c; The calculation	1
+ c; y =	1
+ c; Here, y	1
+ i, a); }	3
+ 2; } A	1
+ 2; } }	2
+ 2; } void	1
+ 2; } These	1
+ a; 72 This	1
+ b) + (c	1
+ d; // makes	1
+ d; This expression	1
+ d = x-	1
+ d = ((a*x+b)*x+c)*x+d	1
+ 2, b *	2
+ f; The compiler	1
+ 3; } The	1
+ j * (columns	1
+ 2) : (bb[i]	1
+ i); // result	1
+ i); // Load	3
+ i); // Add	2
+ 1.; } The	1
+ 1.; } else	1
+ 1.; } Here,	1
+ 1.; Eliminate jumps	1
+ 1.; x.b =	1
+ (c + d);	1
+ C; } polynomial	1
+ 1.0f; The compiler	1
+ esp ; align	1
+ esp ebx ecx,	1
+ esp ;alignby4 ;	1
+ b;} }; int	1
+ 1.0f;} The compiler	1
+ 1.0f;} The advantages	1
+ 1.0f;} 66 float	1
+ a. You can	1
+ c*x + d	2
+ b*x*x + c*x	2
+ 2.0f; } 115	1
+ 2.0 / 3.0;	1
+ 3.5; Here, the	1
+ c) The creation	1
+ column; Do not	1
+ A; double Y	1
+ 2;} int a;	1
+ B; for (x	1
+ a2*b1) / (b1*b2);	1
+ (vector const &	1
+ log(c[i]); // Increment	1
+ e + f;	1
+ d); Now the	1
+ list[j].c; } Here,	1
+ FuncCol(i)) * sizeof(float)	1
+ 0.666666666666666666667; This is	1
+ i/2; } }	1
+ d.y; Fortunately, most	1
+ B*x + C;	1
+ a.x, y +	1
+ b[i]; c[i] =	1
+ r.b;} The three	1
+ 0x3FF unsigned int	1
+ 0x3FFF unsigned int	1
+ two, b *	1
+ sign(i) ; shift	1
+ 4.; }; //	1
+ a.y);} vector a,	1
+ a2/b2; Here we	1
+ d.x; a.y =	1
+ 2.; x.c =	1
+ 0x7F unsigned int	1
+ 100*16, and temp++	1
+ 3.; x.d =	1
+ ia32intrin.h _mm_exp_ps _mm_exp_pd	1
+ c.x + d.x;	1
+ c.y + d.y;	1
+ p->b;} int Sum3(S3	1
+ log(c[i]);. This would	1
n.a. - a &	4
n.a. - a |	1
n.a. - a ^a	1
n.a. - - -	6
n.a. - - n.a.	21
n.a. - x -	3
n.a. - n.a. -	4
n.a. - n.a. x	2
n.a. - Table 8.1.	1
n.a. - (a&b)|(a&c) =	1
n.a. - a<<b<<c =	1
n.a. - a+b+c =	1
n.a. - andnot(a,a) =	1
n.a. x - n.a.	3
n.a. x x -	2
n.a. x x x	1
n.a. x n.a. -	2
n.a. x n.a. x	1
n.a. n.a. - a	6
n.a. n.a. - -	21
n.a. n.a. - Table	1
n.a. n.a. - (a&b)|(a&c)	1
n.a. n.a. - a<<b<<c	1
n.a. n.a. - a+b+c	1
n.a. n.a. - andnot(a,a)	1
n.a. n.a. x -	3
n.a. n.a. _MSC_VER and	1
n.a. Floating point XMM	1
n.a. -(-a) = a	1
n.a. MS compiler Windows	1
n.a. Constant folding -	1
n.a. a-a = 0	1
n.a. x*x*x*x*x*x*x*x = ((x2)	1
n.a. a+b = b+a,	1
n.a. _MSC_VER and not	1
n.a. a*0 = 0	1
n.a. a*1 = a	1
n.a. a+0 = a	1
n.a. a*b+a*c = a*(b+c)	1
n.a. !(a < b)	1
n.a. __unix__ __linux__ __unix__	1
n.a. 1.00 0.25 0.28	1
n.a. 1.00 0.35 0.29	1
n.a. 2.23 0.95 0.6	1
n.a. (-a)*(-b) = a*b	1
n.a. (a+b)+c = a+(b+c)	1
n.a. a+a+a+a = a*4	1
library is that if	1
library is very large	1
library is loaded or	1
library is loaded cannot	1
library is needed. All	1
library is resolved when	1
library of math functions	1
library and the vector	1
library and you cannot	1
library and economize the	1
library for a few	1
library for Windows and	1
library that is actually	1
library that has a	1
library that takes care	1
library that works well	1
library that comes with	1
library can be called	1
library can be useful	1
library can be linked	1
library can be updated	1
library can change the	1
library can emulate a	1
library or a separate	1
library or API function	1
library function will return	1
library function from www.agner.org/optimize/asmlib.zip.	1
library function which we	1
library function calls. It	1
library function 250 times	1
library function __intel_cpu_features_init() sets	1
library if possible. This	1
library with the option	2
library with a different	1
library with a well-defined	1
library with CPU dispatching.	1
library int level =	2
library than in a	1
library may be bigger	1
library have functions for	1
library will use one	1
library then make sure	1
library at www.agner.org/optimize/asmlib.zip. The	1
library at www.agner.org/optimize/asmlib.zip. If	1
library at initialization. Each	1
library at www.agner.org/optimize/asmlib.zip contains	1
library has a CPU	1
library has not been	1
library has an initialization	1
library has no AVX	1
library has many features,	1
library has reduced performance	3
library has preprocessing directives	1
library because it needs	1
library functions than in	1
library functions have several	1
library functions then it	1
library functions called by	1
library functions often belong	1
library functions without CPU	1
library functions like sqrt,	1
library functions linked from	1
library functions directly: Library	1
library other than the	1
library which is very	1
library Intel Agner Available	1
library into memory. This	1
library makes it possible	1
library file and copies	1
library function. 12.2 AVX-512	1
library does not need	1
library versions instead. The	1
library through the symbolic	1
library functions. The compiler	1
library functions. The CPU-	1
library functions. 9.4 Variables	1
library functions. Time- consuming	1
library contains many functions	1
library contains many useful	1
library contains optimized mathematical	1
library contains similar functions,	1
library files are also	1
library #include <stdio.h> //	1
library made for demonstration	1
library function, and the	1
library modules and header	1
library functions, or if	1
library (or at least	1
library files. Use 64-bit	1
library www.agner.org/optimize/asmlib.zip. The name	1
library exp exp 12.8	1
library (*.dll or *.so).	2
library (STL) is a	1
library (STL) if the	1
library requiring the same	1
library (DLL) which is	1
library asmlib, which is	1
library libircmt.lib. Function names	1
library (SVML). This is	1
library asmlib.. // or	1
library (VML, MKL). Works	1
library libmmt.lib and the	1
i is not less	1
i is stored as	1
i is outside this	1
i is interpreted as	1
i to float in	1
i to unsigned int	1
i to four bits,	1
i to p is	1
i and use the	1
i and shifts one	1
i in order to	1
i can never be	1
i = 0; //	1
i = 0; i	13
i = 0 that	1
i = s; An	1
i = 18, then	1
i by a second	1
i by 2. The	2
i with 100 in	1
i an unsigned int	1
i will appear as	1
i which can be	1
i which will delay	1
i but i*12, because	1
i into the least	1
i + sign(i) ;	1
i * 9 +	1
i < 0 and	1
i < 100; i	2
i < 100; i++)	9
i < 2; i++)	1
i < size; i	1
i < size; i++)	10
i < n; i++)	1
i < 256; i	5
i < 256; i++)	1
i < 1000; i++)	1
i < 100. It	1
i < 100. pop	1
i < 20; i	1
i < 20; i++)	1
i < rows; i++)	2
i < NumberOfTests; i++)	2
i < arraysize; i++)	1
i < ArraySize; i++)	1
i < list.Size(); i++)	1
i must be adjusted	1
i ; i +	1
i += 2) {	3
i += 4) {	1
i += 8) {	4
i += 16) {	1
i / 3; }	1
i > 0; i--)	1
i instead of j	1
i >= size can	1
i >= 0; i--,	1
i >= size) {	1
i % 3; }	1
i <= n; i++)	1
i <= max) {	1
i modulo 16. This	1
float a = -1.0E8,	1
float to int. Reinterpret	1
float and double is	1
float and double (see	1
float and double vectors	1
float and double Floating	1
float and double..................................................................................... 140	1
float in this example	1
float or int 4	1
float or int 8	1
float or double to	3
float or double because	1
float or double takes	1
float or double plus	1
float * DynamicArray =	1
float 4 4 double	1
float 4 AVX2 _mm256_i32gather_ps	1
float 8 AVX2 _mm_i64gather_pd	1
float register temp; for	1
float rather than double	1
float 32 4 128	1
float 32 8 256	1
float 32 16 512	1
float type holds a	1
float a, b; a	3
float a, b, c,	4
float 128 double 128	1
float uses 32 bits	1
float 256 double 256	1
float conversion Conversion of	1
float expressions Automatic vectorization	1
float instead of double,	1
float x; for (i	2
float x; *(int*)&x |=	1
float vectors SSE2 128	1
float a; int b;	2
float a; double b;	1
float a; bool b;	1
float conversions can sometimes	1
float b) {x =	1
float sum = 0;	1
float sum = 1.f;	1
float variable. Example: //	1
float x, y; //	1
float x, y, z;	1
float square (float a)	1
float f; int i;	7
float f; unsigned int	1
float f; f=i; f	1
float additions in the	1
float xn = x;	1
float a[100]; int i;	2
float a[100]; float sum	1
float a[100]; float s0	1
float SomeFunction (int x)	1
float Register variables, integer	1
float a[size], b[size]; //	2
float a[size], b[size], c[size];	1
float parabola (float x)	3
float x2 = x	1
float matrix[rows][columns]; int i;	1
float matrix[rows][columns]; int i,	2
float list[100]; memset(list, 0,	1
float 140 a =	1
float x4 = x2	1
float Exp(float x) {	2
float nfac = 1.f;	1
float list[size]; ... if	1
float list[size], sum =	1
float list[size], sum1 =	1
float Live range analysis	1
float s0 = 0,	1
float b[1000]; }; if	1
float b[1000]; F2(b); }	1
float OneOrTwo5[2] = {1.0f,	1
float coef[16] = {	1
float add_elements(__m128 const &	1
float vectors) /arch:SSE -msse	1
float lookup[2] = {2.6f,	1
float list[16]; int i;	1
float i2; for(i=0,i2=0; i<100;	1
float list[] = {1.1,	1
float list[ARRAYSIZE]; if (i	1
multiple of the vector	1
multiple of the size	1
multiple of the critical	4
multiple of the matrix	1
multiple of the level-1	1
multiple of 0x800 apart.	1
multiple // versions: class	1
multiple function calls. The	1
multiple code versions for	1
multiple memory blocks makes	1
multiple memory blocks, either	1
multiple data elements and	1
multiple data structures in	1
multiple CPU cores is	2
multiple CPU cores or	1
multiple CPU cores. You	1
multiple CPU cores: Define	1
multiple variables as long	1
multiple operating systems. 10	1
multiple pointers to the	1
multiple programming languages, profiling	1
multiple dynamic libraries. The	1
multiple bits in a	1
multiple bits with the	2
multiple times in the	1
multiple CPUs or a	1
multiple CPUs or CPU	1
multiple CPUs or multi-core	1
multiple calculations in parallel	1
multiple calculations in parallel.	1
multiple calculations simultaneously or	1
multiple versions of the	2
multiple versions of a	1
multiple versions for different	3
multiple versions with and	1
multiple versions should be	1
multiple versions even of	1
multiple processor cores. Each	1
multiple threads and put	1
multiple threads in the	1
multiple threads that run	1
multiple threads are sharing	1
multiple threads can add,	1
multiple threads on a	1
multiple threads should rely	1
multiple threads must be	1
multiple threads writing to	1
multiple threads Parallelization by	1
multiple functions. I disagree	1
multiple values at once	1
multiple values at once...................................	1
multiple smaller functions only	1
multiple things at the	1
multiple platforms or multiple	1
multiple conditions in a	1
multiple conditions using &	1
multiple conditions enum Weekdays	1
multiple overloaded operators will	1
multiple purposes. All dynamic	1
multiple purposes. Floating point	1
multiple cores are advantageous	1
multiple statements within each	1
multiple blocks in order	1
multiple parent classes in	1
multiple instances that take	1
multiple threads. The compiler	1
multiple threads. The use	1
multiple threads. There are	1
multiple threads. Each thread	1
multiple threads. Out-of-order execution	1
multiple cores. 3.15 Dependency	1
multiple inheritance by making	1
multiple inheritance class B1;	1
multiple inheritance where a	1
multiple processes or threads	1
multiple processes because it	1
multiple threads, but the	1
multiple threads, but it	1
multiple threads, while data	1
multiple .cpp files into	2
multiple .cpp modules into	1
multiple cores, and a	1
multiple versions. This method	1
multiple layers and it	1
multiple counters, as in	1
multiple accumulators if there	1
multiple applications, but not	1
multiple processes. The data	1
multiple configurations with the	1
multiple versions, each carefully	1
multiple streams with different	1
multiple elements? If the	1
multiple logically distinct tasks.	1
multiple inheritance, virtual functions,	1
two and making an	1
two = _mm_set1_epi16(2); //	2
two or more integer	1
two or more versions	2
two or more threads	1
two or more iterations	1
two or more jobs	1
two or more cores,	1
two or more constants.	1
two or three levels	1
two then there is	1
two data members that	1
two different versions of	1
two different types of	2
two different registers. You	1
two different kinds of	1
two different implementations of	2
two functions are doing	1
two functions are unrelated	1
two other situations: The	1
two integer parameters are	1
two floating point multiplication	1
two floating point addition	1
two floating point comparisons,	1
two double precision or	1
two 64-bit operations so	1
two array elements: #define	1
two clock cycles after	1
two clock cycles. Obviously,	1
two clock counts. The	1
two 32-bit integers to	1
two 32-bit integers, which	1
two operating systems are	1
two libraries It is	1
two pointers of different	1
two pointers requires a	1
two pointers requires only	1
two simple expressions. Operations	1
two instructions add ebx,	1
two times the first	1
two times and the	1
two versions of the	1
two versions of a	1
two versions and turn	1
two threads in the	1
two threads in each	1
two threads are often	1
two threads with widely	1
two threads from attempting	1
two threads where one	1
two integers of 64	1
two integers are equally	1
two functions. The difference	1
two values is closest	1
two branches to feed	1
two induction variables Y	1
two induction variables: //	1
two types of floating	1
two expressions for every	1
two modules contiguous in	1
two things to test	1
two main principles here:	1
two positive floating point	1
two gives the chosen	1
two constants are identical	1
two constants can be	1
two 128-bit vectors. The	1
two 128-bit reads. The	1
two kinds of code	1
two loops would make	1
two loops (except in	1
two iterations in one.	1
two additions by the	1
two additions with double's.	1
two comparisons by one	1
two comparisons i <	1
two AND operations: __m128i	1
two ways. The first	1
two ways. Switch statements	1
two loop-carried dependency chains,	1
two jobs simultaneously. Each	1
two commonly used methods	1
two versions. A 32-	1
two double. The intrinsic	1
two books contain many	1
two arrays, a and	1
two elements: #define swapd(x,y)	1
two parentheses can be	1
two (three on CodeGear	1
two suggested improvements). //	1
two decimals, for example,	1
two formulas in this	1
two steps. All source	1
two entries. This may	1
two branches: one for	1
two names, one global	1
two 128- bit vector	1
two summation variables sum1	1
two gives: // Example	1
object is not necessarily	1
object is not modified.	1
object is no longer	1
object is so small	1
object is accessed in	1
object is accessed after	1
object is large then	1
object is allocated separately.	1
object is copied to	1
object is copied by	1
object is called, it	1
object is treated as	1
object is deleted properly	1
object is overwritten, possibly	1
object is known. This	1
object is accessed, it	1
object is moved, which	1
object of the class	1
object of the class.	1
object of the derived	2
object of a class	1
object of a simple	1
object of a derived	2
object of a class,	1
object of class C1,	1
object of known type,	1
object to the vector.	1
object to a function	1
object to another. The	1
object in the GOT,	1
object in case memory	1
object in its own	1
object for the intermediate	1
object for (b +	1
object that is allocated	1
object that behaves like	1
object that looses ownership	1
object are called every	1
object can be made	1
object can be copied	1
object can be speeded	1
object or library files.	1
object or array coincides	1
object it points to	1
object by *p or	1
object with new and	1
object on its final	1
object as if it	1
object x when it	1
object then you don't	1
object It is possible	1
object has a table	1
object has no virtual	1
object has no copy	1
object because the container	1
object which is typically	1
object should preferably be	1
object static then it	1
object where most of	1
object takes no more	1
object cannot be stored	1
object rather than making	1
object without the -fpic	1
object without -fpic in	1
object file format. The	1
object file level, and	1
object file disassembler. Note	1
object file level. My	1
object file formats. Comments	1
object does not use	1
object must be dynamically	1
object compiled without -fpic	1
object doesn't need initialization.	1
object through a pointer	1
object through a smart	1
object through this address.	1
object files and executables.	1
object files from different	1
object files need to	1
object instead of copying	1
object after it has	1
object made with option	1
object p points to	1
object defined inside the	1
object oriented programming are	1
object oriented programming as	1
object oriented programming without	1
object oriented programming are:	1
object oriented programming style	2
object oriented programs can	1
object file. This enables	2
object file. Use another	1
object pointed to is	1
object pointed to can	1
object pointed to. For	1
object separately if there	1
object (except for char	1
object belongs to class	1
object owns. A destructor	1
number is not necessarily	1
number is zero by	1
number of function calls	1
number of different targets	1
number of CPU cores.	1
number of cache misses	1
number of integer register	1
number of floating point	1
number of possible inputs	1
number of possible inputs.	1
number of possible remedies	1
number of clock pulses	1
number of objects is	4
number of objects can	1
number of variables can	1
number of elements is	2
number of elements to	1
number of elements in	7
number of elements per	3
number of registers is	2
number of registers has	1
number of bits in	1
number of available registers	1
number of times each	1
number of times CriticalFunction	1
number of arrays that	1
number of calls to	1
number of threads with	1
number of branches and	1
number of separate layers	1
number of points is	1
number of unused bytes	1
number of columns a	1
number of columns in	3
number of lines is	1
number of constants we	1
number of rows and	2
number of logical processors	1
number of logical processors.	1
number of cores in	1
number of cores or	1
number of cores will	1
number of purposes such	1
number of iterations is	1
number of devices and	1
number of vectors. 12.10	1
number of machine instructions	1
number of bits. The	1
number of bits. This	1
number of branches. Manual	1
number of context switches	2
number of physical processors	1
number of allocations is	1
number of accumulators for	1
number of dangers to	1
number of iterations. The	1
number of sources. For	1
number of DLLs, configuration	1
number of rows/columns in	1
number of jumps, calls	1
number to the nearest	1
number to be calculated	1
number to an integer	1
number to reflect this	1
number and sets all	1
number and types of	1
number in the interval	1
number by 2n by	1
number when i is	1
number when converted to	1
number then we would	1
number one in a	1
number we get 0	1
number 16 in column	1
number simply by inverting	1
number 1. Number 18	1
number 2, etc. This	1
number (e.g. with _finite())	1
number information. It is	1
number 28. The calculation	1
number 0x1C. There are	1
number i. The size	1
number (the instruction set	1
number 6! The speed	1
number generators. In general,	1
static is removed from	1
static to the function	2
static and dynamic versions.	1
static and dynamic linking.	1
static and global variables	1
static or by using	1
static or global arrays	1
static or global variables.	1
static or inline. This	1
static if they don't	1
static then it becomes	1
static memory is also	1
static memory to the	2
static memory to stack	2
static memory and will	1
static memory and insert	1
static memory can cause	1
static data is that	1
static data are likely	1
static data area is	1
static has a different	1
static double p(double x)	4
static float list[] =	1
static object defined inside	1
static static static static	1
static static static Assume	1
static static Assume member	1
static where appropriate. Compiler-specific	1
static version if speed	1
static variables if possible,	1
static member function is	2
static member function cannot	1
static const int ABC	1
static const int FactorialTable[13]	1
static const double log2	1
static const float OneOrTwo5[2]	1
static const float coef[16]	1
static const float lookup[2]	1
static libraries (.lib or	1
static part of the	1
static arrays in the	1
static arrays automatically but	1
static inline int lrint	2
static inline int lrintf	1
static inline double IntegerPower	1
static inline float add_elements(__m128	1
static inline void StoreVector(void	3
static inline void StoreNTD(double	1
static inline void StoreVectorA(void	1
static inline __m128i LoadVector(void	3
static inline __m128i LoadVectorA(void	1
static inline T max(T	1
static memory. If you	1
static memory. Example: //	1
static memory. Most compilers	1
static keyword to all	1
static keyword has a	1
static keyword has several	1
static keyword also makes	1
static char const *	1
static data. 148 It	1
static linking is that	1
static linking is used.	2
static linking is preferable	1
static linking and by	1
static linking for any	1
static linking rather than	1
static linking (e.g. option	1
static storage Variables that	1
static link library because	1
static link libraries (*.lib,	2
static link libraries. These	1
static here is that	1
static variables. See chapter	1
static Assume member function	1
static library. A runtime	1
static libraries. A shared	1
static buffer or send	1
static declaration makes it	1
static variables, floating point	1
static library, except when	1
static modifier will be	1
static linking. A dynamic	1
static data, including local	1
static if), but no	1
static linking, as explained	1
static keyword: // Example	1
static keyword, for floating	1
64-bit code for the	1
64-bit vector operations and	1
64-bit instruction set has	1
64-bit integer rather than	1
64-bit integer calculations. It	1
64-bit compilers are inferior	1
64-bit double is that	1
64-bit double 32 bits	1
64-bit version is better	1
64-bit version for best	1
64-bit operating systems and	1
64-bit operating systems are	1
64-bit operating systems. Some	1
64-bit code. However, we	1
64-bit systems and in	1
64-bit systems can improve	1
64-bit systems if the	1
64-bit systems by using	1
64-bit systems will dominate	1
64-bit systems we can	1
64-bit operations so that	1
64-bit CPUs and operating	1
64-bit Windows and 32-bit	1
64-bit Windows and Linux.	1
64-bit Windows if functions	1
64-bit Windows may be	1
64-bit Windows allows a	1
64-bit Windows allows only	1
64-bit Windows (See page	1
64-bit execution units. Each	1
64-bit integers in 32-bit	1
64-bit integers if the	1
64-bit integers with hardly	1
64-bit Linux is more	1
64-bit Linux and Windows	1
64-bit Linux and BSD.	1
64-bit Linux as well	1
64-bit Linux than in	3
64-bit mode or when	3
64-bit mode or enable	1
64-bit mode than in	1
64-bit mode because the	3
64-bit mode where the	1
64-bit mode 8 8	1
64-bit mode Parameter transfer	1
64-bit addresses for everything,	1
64-bit shared object made	1
64-bit shared objects in	1
64-bit programs to run	1
64-bit Mac OS X	1
64-bit systems. The appropriate	1
64-bit systems. The latter	1
64-bit systems. A software	1
64-bit systems. It is	1
64-bit systems. If you	1
64-bit systems. Some compilers	1
64-bit systems. Floating point	1
64-bit systems. Applications that	1
64-bit systems. 67 The	1
64-bit vectors then you	1
64-bit Windows, the first	1
64-bit Windows, Linux and	1
64-bit Linux, the first	1
64-bit Linux, BSD and	1
64-bit Linux, BSD, Windows	1
64-bit mode. A conversion	1
64-bit mode. Therefore, the	1
64-bit mode. Make functions	1
64-bit mode. 16-bit mode	1
64-bit mode. Much of	1
64-bit Windows. The disadvantage	1
64-bit Windows. The integrated	1
64-bit Windows. In 64-bit	1
64-bit Windows. Borland /	1
64-bit device drivers for	1
64-bit integers. The allocation	1
64-bit integers. Many 32-bit	1
64-bit systems, you may	1
64-bit systems, there is	1
64-bit integer, signed or	1
64-bit mode, the parameters	1
64-bit mode, as explained	1
64-bit Linux. Has many	1
64-bit integers, as long	1
64-bit integers, but they	1
64-bit MMX to 128-bit	1
64-bit versions. The x86	1
64-bit Windows). The XMM	1
64-bit Linux: long int	1
64-bit Linux: unsigned long	1
64-bit double, then the	1
64-bit Unix systems allow	1
64-bit software, but it	1
64-bit systems). 28 Dynamic	1
64-bit extension to the	1
there is a pointer	2
there is a way	1
there is a specific	1
there is a single	1
there is a copy	1
there is a hot	1
there is a level-1	1
there is a risk	1
there is a penalty	1
there is a try	1
there is a 90%	1
there is a compelling	1
there is an extra	3
there is an advantage	1
there is more than	1
there is more focus	1
there is only a	1
there is only one	1
there is only half	1
there is other code	1
there is other work	1
there is no loop	1
there is no such	1
there is no way	1
there is no operating	1
there is no need	1
there is no big	1
there is no exception	1
there is no advantage	1
there is no cost	1
there is no reason	3
there is no difference	4
there is no graphics	1
there is no clear	1
there is no risk	3
there is no try	1
there is no loop-carried	1
there is no guarantee	1
there is often a	1
there is always one,	1
there is simply no	1
there is something that	1
there is hardly any	1
there is nothing to	1
there is virtually no	1
there are a few	2
there are a couple	1
there are not enough	1
there are more efficient	1
there are different ways	1
there are different opinions	1
there are no cache	1
there are no long	1
there are no big	1
there are no copy	1
there are no caching	1
there are floating point-to-integer	1
there are two or	1
there are two versions	1
there are many function	1
there are many functions	1
there are many cases	1
there are many allocations	1
there are many branches):	2
there are objects in	1
there are some differences	1
there are cases where	1
there are specific advantages	1
there are allocated resources	1
there are various ways	1
there are special cases	1
there are 100 floating	1
there are 6 unused	1
there are search requests	1
there are serious limitations	1
there are disadvantages of	1
there are inherent performance	1
there are smarter ways	2
there are wrapper classes	1
there may be a	1
there may be only	1
there may be no	1
there may be so	1
there when the program	1
there will be cache	1
there between x and	1
there was hardly any	1
there is, in order	1
C++ is an advanced	1
C++ is also a	1
C++ is supported by	1
C++ is quite efficient	1
C++ is Microsoft Foundation	1
C++ is chosen for	1
C++ is fully portable	1
C++ is definitely the	1
C++ and assembly code	2
C++ and Fortran code.	1
C++ and Fortran. These	1
C++ for several reasons.	1
C++ for doing some	1
C++ or assembly language	1
C++ or assembly language.	1
C++ as 'this'. We	1
C++ compiler is available	2
C++ compiler for 32-	2
C++ compiler (parallel composer)	1
C++ program that produces	1
C++ program are in	1
C++ program (or part	1
C++ has many advantages	1
C++ but is not	1
C++ should allow compile-	1
C++ compilers to see	1
C++ compilers to choose	1
C++ compilers and operating	6
C++ compilers The register	1
C++ compilers The tests	1
C++ compilers are able	1
C++ compilers have various	2
C++ compilers allow assembly-like	1
C++ compilers www.agner.org/ optimize/#vectorclass	1
C++ compilers exist for	1
C++ takes only slightly	1
C++ so you need	1
C++ way of handling	1
C++ faster than in	1
C++ take more resources	1
C++ code. Compilers and	1
C++ template feature was	1
C++ template metaprogramming, loops	1
C++ file and compiled	1
C++ programming language and	1
C++ An optimization guide	1
C++ language is chosen	1
C++ language is portable	1
C++ language also includes	1
C++ language elements in	1
C++ language While C++	1
C++ language relates to	1
C++ exception handling system	1
C++ classes and using	1
C++ program. This has	1
C++ programs and also	1
C++ implementation may look	1
C++ compilers. The advantage	1
C++ compilers. 2.5 Choice	1
C++ compilers. Wikipedia article	1
C++ based on what	1
C++ compiler. This library	1
C++ syntax in example	1
C++ syntax has several	1
C++ v. 3.1, 2007.	1
C++ v. 4.1.0, 2006	1
C++ v. 7.1-4, 2008.	1
C++ program, you should	1
C++ compiler, which is	1
C++ compiler, v. 10.1.020.	1
C++ Compiler v. 11.1	1
C++ Compiler v. 14.00	1
C++ Compiler Documentation for	1
C++ Compiler Documentation". Included	1
C++ casting operator These	1
C++ Performance for further	1
C++ programming, how to	1
C++ programs. Writing past	1
C++ projects can be	1
C++ language, all conversions	1
C++ constructs Most programmers	1
C++ relates to security.	1
C++ constructs........................................................................ 26 7.1	1
C++ imple- mentations have	1
C++ builder. Not optimized	1
C++ 5.82 (Embarcadero/CodeGear/Borland C++	1
C++ builder Has an	1
C++ language...................................................... 14 3	1
C++ Builder 5, 2009).	1
C++ Performance". www.open- std.org/jtc1/sc22/wg21/docs/TR18015.pdf.	1
also the time used	1
also the innermost loop	1
also a cache that	1
also a possible point	1
also a language that	1
also a common programming	1
also a lookup in	1
also a kind of	1
also be a type.	1
also be a level-3	1
also be an efficient	1
also be used for	3
also be used with	1
also be used as	1
also be advantageous to	1
also be tested under	1
also be predicted quite	1
also be vectorized if	1
also be convenient for	1
also be eliminated if	1
also be considered. A	1
also be huge). Far	1
also have a dedicated	1
also have a physics	1
also have an empty	1
also have fast ways	1
also time consuming, especially	1
also use vector operations	1
also when called from	1
also has something to	1
also has disadvantages: The	1
also has disadvantages: It	1
also other advantages that	1
also other details that	1
also used in two	1
also used for variables	1
also used when the	1
also page 119). The	1
also possible to see	1
also possible to tell	1
also very expensive. A	1
also makes the code	1
also makes various other	1
also makes testing and	1
also stored together if	1
also stored near each	3
also called from another	1
also called shared objects	2
also called Single-Instruction-Multiple-Data (SIMD)	1
also 4 unused bytes	1
also less safe. This	1
also useful to put	1
also useful in situations	1
also useful for testing	1
also available in the	1
also available from the	1
also work when Intel	1
also works on Intel	1
also likely to lead	1
also quite efficient, but	1
also recommended to declare	1
also see emulated processors	1
also allows 256-bit integer	1
also look at the	1
also 512 bits (ZMM).	1
also relevant to small	1
also supports Linux and	1
also find more examples	1
also costs in terms	1
also prevents the compiler	1
also occur quite often	1
also includes the low-level	1
also discussed which method	1
also situations where pre-increment	1
also applies to the	1
also applies to BSD	1
also applies to decrement	1
also available. Microsoft Comes	1
also involves the risk	1
also eliminate i and	1
also available, such as	1
also deallocated in all	1
also repeats 1000 times	1
also inconvenient to the	1
also treated like a	1
also deallocated. Failure to	1
also proceed in a	1
also third-party profilers such	1
also treat non-Intel CPUs	1
also safer. It may	1
also de-allocated. This is	1
also work, 133 although	1
also included. Combining the	1
also tends to make	1
such a way that	1
such a check before	1
such a complicated code	1
such a framework in	1
such a framework sometimes	1
such a feature for	1
such a response is	1
such a subexpression to	1
such a case: //	1
such a formalism. The	1
such code is so	1
such as the number	1
such as the Gnu,	1
such as the "Intel	1
such as a make	1
such as a structure	1
such as function inlining.	1
such as cache and	1
such as most sorting	1
such as multiple inheritance	1
such as C++ for	1
such as many encryption	1
such as 32-bit integer	1
such as simple variables,	1
such as error handling	1
such as common subexpression	1
such as AMD and	1
such as supported instruction	1
such as string or	1
such as dynamically allocated	1
such as copying an	1
such as e.g. .R.	1
such as addition, subtraction,	1
such as heavy mathematical	1
such as Gnu, Clang,	1
such as int, float,	1
such as list, set	1
such as -(-a) =	1
such as Taylor expansions	1
such as DOS and	1
such as logarithms and	1
such as C#, Visual	1
such as memcpy, memmove,	1
such as semaphores, mutexes	1
such as floppy disks	1
such as price, compatibility,	1
such as logarithms, exponential	2
such as Java, use	1
such as sorting and	1
such as sqrt and	1
such as eliminating the	1
such as spell-checking and	1
such as GetPrivateProfileString and	1
such as sorting, searching,	1
such as strcpy, strcat,	1
such as VHDL or	1
such as flush and	1
such as pow, log,	1
such as email and	1
such as <. The	1
such as ReadB needs	1
such as gates, flip-flops,	1
such as AQtime, Intel	1
such an object to	1
such an application to	1
such an assumption is	1
such systems than it	1
such processors requires a	1
such small devices if	1
such small devices, as	1
such container classes. Unfortunately,	1
such advantage in interpreted	1
such programs installed can	1
such cases, you can	1
such dependency chains can	1
such methods only if	1
such applications are highly	1
such runtime frameworks are	1
such expressions may occur	1
such optimizations with option	1
such optimizations automatically, but	1
such feature will become	1
such contentions is that	1
such errors is to	1
such errors in cases	1
such errors in programs	1
such cases. The most	1
such loops by calls	1
such checks makes the	1
such devices typically have	1
such applications. Alternatively, use	1
such obvious reductions as	1
such errors. See page	1
such applications, but it	1
such contrived examples exist.	1
such checks. But it	1
efficient the calculation of	1
efficient to have separate	1
efficient to use a	2
efficient to make a	2
efficient to store many	1
efficient to store application-specific	1
efficient to convert unsigned	1
efficient to allocate one	1
efficient to define your	1
efficient to implement a	1
efficient to determine the	1
efficient to re-use a	1
efficient to pool all	1
efficient and you want	1
efficient and enables interprocedural	1
efficient in 64-bit Linux	2
efficient in 64-bit mode	1
efficient in some systems	1
efficient in some cases	1
efficient for such applications,	1
efficient for simple types	1
efficient if the data	1
efficient if the loop	1
efficient if the case	1
efficient if it is	1
efficient if all of	1
efficient code caching. This	1
efficient as a member	2
efficient as a virtual	1
efficient as using a	1
efficient as any other	1
efficient as integers. 7.5	1
efficient than the Gnu	1
efficient than the runtime	1
efficient than a linear	1
efficient than a polymorphous	1
efficient than if because	1
efficient than x =	2
efficient than when a	1
efficient than 64-bit Windows	1
efficient than functions. See	1
efficient than signed integers.	1
efficient than frame functions	1
efficient than accessing a	1
efficient than mov eax,0.	1
efficient than comparing it	1
efficient than necessary. Take	1
efficient than post-increment. For	1
efficient than Sum2 and	1
efficient than relocation, especially	1
efficient than investing in	1
efficient than non-object oriented	1
efficient use of software.	1
efficient when the row	1
efficient when b is	1
efficient when there is	1
efficient when arrays are	1
efficient memory space to	1
efficient vector operations require	1
efficient because the compiler	1
efficient because the template	1
efficient because it handles	1
efficient because they are	1
efficient because relative references	1
efficient functions for string	1
efficient loop control condition	1
efficient integer size if	1
efficient library and economize	1
efficient way of keeping	1
efficient way of removing	1
efficient way if the	1
efficient (see page 53).	1
efficient solution in this	1
efficient solution in some	1
efficient solution for the	1
efficient solution that doesn't	1
efficient solution may be	1
efficient solution because of	1
efficient container class templates,	1
efficient container classes. An	1
efficient container classes. Text	1
efficient whether the arrays	1
efficient code, but this	1
efficient solution. Is a	1
efficient solution. Is searching	1
efficient solution. Sort the	1
efficient thanks to the	1
efficient alternatives that can	1
efficient today where cache	1
efficient because, in most	1
efficient alternative. The theoretical	1
efficient table-based methods with	1
In the same way,	1
In the case of	4
In the cases where	1
In the simple function,	1
In the Windows operating	1
In the above example,	2
In the preceding example,	1
In the future we	1
In the latter case,	1
In a C++ program,	1
In this example, the	3
In this example, we	1
In this example, a,	1
In this example, f(x)	1
In this case it	1
In this case you	1
In this case there	1
In this case we	1
In this case, the	1
In this manual, I	1
In this chapter, I	1
In other cases, it	1
In other words, the	1
In other words, it	1
In other words, you	2
In other programs, 99%	1
In example 7.4 we	1
In example 8.21, you	1
In example 12.2, the	1
In example 12.1a, the	1
In example 12.3a, for	1
In most cases the	1
In most cases it	1
In most cases, the	2
In most cases, you	1
In most cases, double	1
In most cases, there	1
In most systems, you	1
In 64-bit systems we	1
In 64-bit mode or	1
In 64-bit Windows, the	1
In 64-bit Linux, the	1
In 64-bit systems, you	1
In 64-bit systems, there	1
In C++ template metaprogramming,	1
In such cases, you	1
In many cases it	1
In many cases, the	1
In many cases, however,	1
In any event, the	1
In some cases the	2
In some cases it	4
In some cases you	1
In some cases this	1
In some cases, the	2
In some cases, it	1
In some cases, there	2
In some programs, more	1
In order to take	1
In order to access	1
In order to facilitate	1
In 32-bit Linux and	1
In these examples we	1
In cases where the	1
In simple cases, a	1
In large arrays, it	1
In Linux and Mac	1
In difficult cases like	1
In Windows, you can	1
In general, the out-of-order	1
In general, it is	1
In general, you can	2
In general, you have	1
In general, there is	1
In C++, it is	1
In 50 simple cases,	1
In multithreaded applications it	1
In fact, the compiler	1
In fact, the STL	1
In fact, you may	1
* x - 8.0f)	1
* x + 1.0f;}	2
* x + 2.0f;	1
* b + 1;	2
* 2 > v.i	1
* const Greek[4] =	1
* 4 = 32.	1
* 8 = 80.	1
* 32 with j	1
* c > b)	1
* c; a =	1
* c; Is16vec8 a	1
* x; // x^2	1
* 2; // Find	1
* 2; } else	2
* 2; return a	2
* 5 * 0.5	1
* 5 / 2	1
* p = &	1
* 100 * 5	1
* temp; c =	1
* temp; 104 }	1
* CriticalFunction = &CriticalFunction_Dispatch;	1
* 3; } if	1
* 3; } return	1
* 3; return a	2
* p) { int	1
* p) { return	4
* p) { *p	2
* p) {return p->a	1
* __restrict aa, int	1
* __restrict bb) {	1
* 2) { //	1
* c); // Store	2
* c); a.store(aa+i); }	1
* d, __m128i const	4
* 9 + 3;	1
* SelectAddMul_pointer = &SelectAddMul_dispatch;	1
* reciprocal_divisor; y2 =	1
* reciprocal_divisor; 14.7 Don't	1
* 2.5 may be	1
* (2n / b)	1
* CriticalFunctionDispatch(void) { //	1
* CriticalFunctionDispatch(void) __asm__ ("CriticalFunction");	1
* p; int i;	1
* p; p =	1
* 3.5; c =	1
* 1.2; // everything	1
* 1.2; // Mixing	1
* (columns * sizeof(float)).	1
* Func1(x) + 1.;	1
* m;} int a,	1
* m;} template <int	1
* b2); y1 =	1
* p1; p1 =	1
* powN<true,N/2>::p(x); } };	1
* cc[i]); } 109	1
* c[i]); } }	1
* powN<true,N-N1>::p(x); #undef N1	1
* sizeof(float)); // (Some	1
* sizeof(float)). Now, the	1
* a;} float parabola	1
* _mm_load_ps(coef+i); // s	1
* 17is calculated as(a	1
* 1.5f; is efficient	1
* 16is calculated asa	1
* 5; to int	1
* b2 * reciprocal_divisor;	1
* b1 * reciprocal_divisor;	1
* (a+1); c =	1
* 5). As soon	1
* sizeof(float)) = 8	1
* dest, double const	1
* sizeof(float) in order	1
* DynamicArray = (float	1
* (1. / 1.2345);	1
* x2; // x^4	1
* 0.5 ns =	1
* p2; p2 =	1
* 1.2f; // Example	1
* 2.5; // Use	1
There is a performance	1
There is a large	2
There is a problem	1
There is a lot	2
There is a disadvantage	1
There is a higher	1
There is a portability	1
There is a considerable	1
There is an even	1
There is an important	1
There is no performance	2
There is no way	2
There is no need	6
There is no extra	1
There is no check	2
There is no cost	1
There is no automatic	1
There is no reason	2
There is no difference	1
There is no checking	1
There is no penalty	1
There is no easy	2
There is no heavy	1
There is no 51	1
There is very little	1
There is nothing to	1
There are a number	2
There are a few	1
There are only four	1
There are other cache	1
There are other possible	1
There are no instructions	1
There are no checks	1
There are two or	1
There are two different	1
There are two things	1
There are two main	1
There are two commonly	1
There are also other	2
There are also 4	1
There are also situations	1
There are also third-party	1
There are so many	1
There are several different	3
There are several ways	1
There are several factors	2
There are four kinds	1
There are eight floating	1
There are certain restrictions	2
There are cases, however,	1
There are intrinsic instructions	1
There are various function	1
There are various methods	1
There are various ways	4
There are various things	1
There are various discussion	1
There are various profilers	1
There are various alternatives	1
There are three ways	2
There are approximately six	1
There are situations where	1
There are lots of	1
There are hundreds of	1
There may be a	1
There may be two	1
There may be cases	2
There may be situations	1
There may also be	1
There will be no	1
There should of course	1
There should be only	1
array is the most	1
array is a multiple	1
array is not known	1
array is less efficient	1
array is implemented simply	1
array is made very	1
array is stored. This	1
array is defined. This	1
array a and edx	1
array of structure or	1
array of n floats:	1
array of 100 floats	1
array of thousand numbers	1
array of structures: //	1
array to make the	1
array to all zeroes.	1
array to zero. The	1
array and for more	1
array for the following	1
array for multiple purposes.	1
array can be allocated	1
array can be used.	1
array can be initialized	1
array can cause other	1
array or the number	1
array or object that	1
array or container is	1
array or container without	1
array or setting an	1
array with a top-of-stack	1
array with bounds checking,	1
array with alloca: //	1
array may need to	1
array will be an	1
array should be stored	1
array should be organized	1
array using the above	1
array size a multiple	1
array size right from	1
array pointer eax to	1
array into a container	1
array static inline void	4
array static inline __m128i	4
array elements of simple	1
array elements more complicated	1
array elements then this	1
array elements Induction variables	1
array before calling the	1
array address is. ecx	1
array rather than two.	1
array must begin at	1
array ; jump to	1
array ; i++ ;checkifi<100	1
array element is accessed,	1
array element in order	1
array element if the	1
array element } An	1
array element has to	1
array element a[i] is	1
array overflow can cause	1
array after all elements	1
array index is out	2
array index than when	1
array index then it	1
array index operator }	1
array initialized by a	1
array bounds is probably	1
array bounds violations, invalid	1
array bounds violations and	1
array bounds violation, integer	1
array sizes and array	1
array cout << list[i]	1
array element. In some	1
array element. Matrix size	1
array element. Rather than	1
array elements. The instruction	1
array elements. Example: //	1
array index. The data	1
array sequentially. Some applications	1
array elements: #define swapd(x,y)	1
array indices when you	1
array grows during program	1
array i) { //	1
array 800 bytes smaller.	1
array initializer lists, switch	1
array coincides with the	1
where the function was	1
where the compiler is	2
where the data are	1
where the same operation	1
where the loop control	1
where the size of	1
where the size doesn't	1
where the object of	1
where the number of	3
where the performance of	1
where the critical stride	1
where the type of	1
where the parameters are	1
where the dispatch branches	1
where the storage order	1
where the main feedback	1
where the network is	1
where the level-1 data	1
where the chosen compiler	1
where the logic structure	1
where the parallelism is	2
where the carry bit	1
where the compilation is	1
where the reduction would	1
where the combined size	1
where the obstacles to	1
where is the sign,	1
where a program has	1
where a program chooses	1
where a vector implementation	1
where a long sequence	1
where a much more	1
where a hardware definition	1
where a particular code	1
where a high level	1
where a #define directive	1
where a task is	1
where a soft processor	1
where it is not	1
where it is more	1
where it is also	1
where it is less	1
where it is accessed	1
where it should be	1
where it makes sense	1
where it still uses	1
where it expects a	1
where it matters: Division	1
where code caching is	1
where you can get	1
where you want to	1
where you want vectorization	1
where data members share	1
where only few of	1
where one thread is	1
where cache size is	1
where each bit indicates	1
where each calculation depends	1
where each addition has	1
where each iteration needs	1
where each label is	1
where most of the	1
where static has a	1
where there is no	1
where there are different	1
where we are writing	1
where template metaprogramming is	1
where they are unavoidable.	1
where they cannot be	1
where dynamic linking cannot	1
where instructions are fetched	1
where execution speed, memory	1
where necessary (see page	1
where speed is particularly	1
where speed is important.	1
where automatic vectorization leads	1
where n is the	1
where r is the	1
where 10 elements were	1
where operands have mixed	1
where N is a	1
where RAM memory and	1
where current compilers don't	1
where everything happens at	1
where almost the entire	1
where security matters. Problems	1
where necessary. Fast versions	1
where pre-increment is more	1
where appropriate. Compiler-specific keywords	1
many of the same	1
many of the advantages	1
many of the features	1
many of the drawbacks	1
many of these purposes.	1
many function calls may	1
many function calls. If	1
many function calls, if	1
many different cases for	1
many different CPUs to	1
many different purposes. The	1
many different purposes. However,	1
many different factors as	1
many different applications. Therefore,	1
many different places). Some	1
many functions for common	1
many functions for audio	1
many functions for statistics,	1
many functions scattered around	1
many such programs installed	1
many objects can be	1
many objects together in	1
many variables and objects	1
many software products fail	1
many branch mispredictions. Boolean	1
many elements are there	1
many bit manipulation tricks	1
many optimization features and	1
many useful mathematical functions.	1
many file input/output operations.	1
many cases it is	1
many cases where the	1
many times the function	1
many times the other	1
many times in a	1
many times with a	1
many times an interrupt	1
many times one way,	1
many times each function	1
many times each part	1
many times faster than	1
many calls and branches.	1
many common programs use	1
many common purposes (www.boost.org).	1
many small dynamically allocated	1
many small subtasks, but	1
many good optimization options.	1
many standard container classes	1
many standard tasks are	1
many files to be	1
many programs use more	1
many cases, the compiler	1
many cases, however, there	1
many branches and function	1
many branches or function	1
many Boolean expressions. Whether	1
many applications even on	1
many examples of poor	1
many advantages when it	1
many advanced optimizing features,	1
many reductions involving division	1
many computer users and	1
many cases. For example:	1
many cases. Integer expressions	1
many unknown factors in	1
many programmers and they	1
many programmers do not	1
many processors, a loop	1
many hard working software	1
many instances makes the	1
many rules of algebra	1
many users in many	1
many users will prefer	1
many branches. If you	1
many processes simultaneously. Actually,	1
many platforms, including 32-bit	1
many features, but also	1
many features, see http://www.agner.org/optimize/	1
many commercial compilers due	1
many years to come.	1
many keywords and directives	1
many labels that have	1
many allocations of large	1
many users. Firewalls, virus	1
many branches): if (level	2
many respects and highly	1
many tips on advanced	1
many renamed instances of	1
many encryption algorithms, cannot	1
many decimals. It is	1
many people who have	1
many strings. In most	1
possible to use the	2
possible to use vector	1
possible to make the	2
possible to make a	2
possible to make software	1
possible to make shared	1
possible to do the	2
possible to do an	1
possible to do integer	1
possible to do two	1
possible to do such	1
possible to do operations	1
possible to do things	1
possible to access a	1
possible to avoid this	1
possible to compile a	1
possible to compile for	1
possible to get a	1
possible to calculate pow(x,10)	1
possible to add unused	1
possible to store objects	1
possible to store intermediate	1
possible to write the	1
possible to replace the	1
possible to replace a	2
possible to see the	1
possible to see which	1
possible to give each	1
possible to improve the	1
possible to reduce the	1
possible to start a	1
possible to tell the	1
possible to insert a	1
possible to insert optimization	1
possible to come from	1
possible to implement a	2
possible to contain all	1
possible to vectorize code	1
possible to select all	1
possible to obtain the	2
possible to utilize the	1
possible to construct obscure	1
possible to distribute function	1
possible to organize the	1
possible to express any	1
possible and by changing	1
possible in some cases	1
possible in Linux). Threads	1
possible for the compiler	2
possible for the CPU	1
possible for usability reasons.	1
possible or when code	1
possible if the value	1
possible if the expression	1
possible if F1 has	1
possible on Linux platforms,	1
possible when parts of	1
possible memory requirement. Useful	1
possible at compile time.	1
possible vector objects //	1
possible because the compiler	1
possible only if the	1
possible instruction set when	1
possible point of attack	1
possible pointer aliasing is	1
possible into the data	1
possible version of the	1
possible branch if it	1
possible user interface is	1
possible access to the	1
possible case and make	1
possible cases of program	1
possible exception handling support	1
possible overflow on the	1
possible implementation if possible,	1
possible ways of handling	1
possible negative value of	1
possible performance. We must	1
possible version. See the	1
possible inputs is limited	1
possible alternatives to exception	1
possible minor increase in	1
possible inputs. Let's take	1
possible workaround. Supports all	1
possible remedies against this	1
clock = __rdtsc(); return	1
clock by using the	1
clock cycles to do	1
clock cycles to read	1
clock cycles to fetch	1
clock cycles in the	1
clock cycles for 32-bit	1
clock cycles that we	1
clock cycles if it	2
clock cycles on most	1
clock cycles on Pentium	1
clock cycles than other	1
clock cycles more than	2
clock cycles then it	1
clock cycles at the	1
clock cycles before the	1
clock cycles rather than	1
clock cycles even if	1
clock cycles counter is	1
clock cycles after the	2
clock cycles later and	1
clock cycles per array	1
clock cycles per element	1
clock cycles per byte	1
clock cycles per element.	2
clock cycles whenever it	1
clock cycles spent on	1
clock cycles (depending on	1
clock count before and	1
clock cycles. The reason	1
clock cycles. The core	1
clock cycles. The rules	1
clock cycles. It may	1
clock cycles. If you	1
clock cycles. In most	1
clock cycles. You can	1
clock cycles. You cannot	1
clock cycles. But if	1
clock cycles. Floating point	1
clock cycles. Obviously, the	1
clock cycles. Division takes	1
clock cycles. Calculations in	1
clock frequency is 2	1
clock frequency is limited	1
clock frequency is increased	1
clock frequency is doubled.	1
clock frequency of the	1
clock frequency that the	1
clock frequency than other	1
clock frequency may be	1
clock frequency may vary	1
clock frequency goes up	1
clock frequency dynamically depending	1
clock frequency (in Windows:	1
clock counts that you	1
clock counts are often	1
clock counts should be	1
clock cycle is the	2
clock cycle is 1	1
clock cycle if the	1
clock cycle on one	1
clock cycle on most	1
clock cycle on another	1
clock cycle counter is	1
clock cycle counter (see	1
clock cycles, then this	1
clock cycles, then we	1
clock cycles, but it	1
clock cycles, depending on	5
clock cycle. The operators	1
clock cycle. The OR	1
clock cycle. The highest	1
clock cycle. This means	1
clock cycle. In 64-bit	1
clock counts. The value	1
clock frequency. The core	1
clock frequency. For example,	1
clock cycle? In this	1
clock cycle? ...................................................................................... 16	1
clock frequency, as explained	1
clock pulses since the	1
clock cycles). Floating point	1
clock period and by	1
version is implemented in	2
version is better than	1
version is preferred when	1
version is currently not	1
version of the code	3
version of the program	1
version of the same	1
version of the C++	1
version of the critical	3
version of the code.	3
version of the function.	4
version of the virtual	3
version of the application	1
version of the compiler.	1
version of the library.	3
version of the executable.	1
version of the subroutine	1
version of a virtual	1
version of a piece	1
version of a polymorphic	1
version of most library	1
version of object files	1
version of C++ should	1
version of Intel's Math	1
version of Basic is	1
version of Basic was	1
version of Mathcad (v.	1
version to use in	1
version and a release	1
version in a procedure	1
version in main will	1
version for the sake	1
version for CPUs with	1
version for best performance.	1
version for specific CPU	1
version for marketing reasons.	1
version that is compatible	1
version that takes advantage	1
version that works best	1
version that fits the	1
version that performs best	1
version // Get supported	1
version if speed is	1
version with all relevant	1
version with full debugging	1
version on the processors	1
version on all newer	1
version int CriticalFunction_386(int parm1,	2
version int CriticalFunction_SSE2(int parm1,	2
version int CriticalFunction_AVX(int parm1,	1
version because the debugging	1
version return &CriticalFunction_386; }	1
version return (*SelectAddMul_pointer)(aa, bb,	2
version return (*CriticalFunction)(parm1, parm2);	1
version without the need	1
version void FUNCNAME(short int	1
version control tool. 7	1
version causes problem that	1
version CriticalFunction = &CriticalFunction_386;	1
version changes then you	1
version 127 int CriticalFunction_AVX(int	1
version on, then it	2
version performs well. The	1
version performs poorly. It	1
version CriticalFunctionType * CriticalFunction	1
version (May use a	2
version FuncType * SelectAddMul_pointer	1
version FuncType SelectAddMul, SelectAddMul_SSE2,	1
version 2.11 ifunc branch).	1
version 2.20 or later	1
version satisfies the user's	1
version 2.20, glibc version	1
version 2.6.30 and later.	1
value is less than	1
value is calculated from	2
value is zero if	1
value is poorly predictable,	1
value is already in	1
value is multiplied by	1
value of the function	2
value of the time	2
value of the loop	1
value of the floating	1
value of the pointer	3
value of the template	1
value of the parameter	1
value of the induction	1
value of the second	1
value of the divisor	2
value of the residual	1
value of a class	1
value of a pointer	1
value of A is	1
value of b is	1
value of i to	1
value of i will	1
value of i which	1
value of i must	1
value of register temp	1
value of temp before	1
value of sum depends	1
value of N with	1
value of ebx that	1
value of seconds and	1
value of n! is	1
value of ebx. Only	1
value of m and	1
value of b+c will	1
value of cc[i]+2 is	1
value of i&15 is	1
value of temp. The	1
value of sum. The	1
value to make the	1
value and write it	1
value in the last	1
value in the previous	1
value in one vector,	1
value in most cases.	1
value in edx as	1
value in stdint.h char	1
value that is a	1
value that is two	1
value that is four	1
value that is n	1
value that is added	1
value that lies r	1
value it was assigned	1
value by setting the	1
value as xn =	1
value as n! =	1
value than from the	1
value than 0 or	3
value will propagate through	1
value from the value	1
value from the counts.	1
value from a variable	1
value from a table	1
value from memory plus	1
value at compile time	1
value has changed five	1
value each time the	1
value before the decimal	1
value 0 for false	1
value 10 * 8	1
value depends on the	1
value depends only on	1
value maximum value in	1
value pointed to by	2
value xn is calculated	1
value wrap around. Adding	1
value written as 2eee	1
value 1000. The loop	1
value -100+100+100 = 100.	1
value infinity, and this	1
value 0x2C so that	1
objects is not known	1
objects is often implemented	1
objects is known at	1
objects is high then	1
objects of a composite	1
objects of different types	1
objects of different sizes	2
objects of variable size	1
objects to a function	1
objects and is not	1
objects and arrays by	1
objects and keep track	1
objects and fixed size	1
objects in the same	1
objects in the container.	1
objects in a computer	1
objects in 64 bit	1
objects in 32 bit	1
objects in Mac OS	1
objects in computer games	1
objects in computer games.	1
objects in Linux, BSD	1
objects in BSD work	1
objects in BSD Shared	1
objects in Unix-like systems	1
objects in Unix-like systems.	1
objects for intermediate results,	1
objects that are scattered	1
objects that take a	1
objects are not stored	1
objects are not used.	1
objects are not overlapping	1
objects are also deallocated	1
objects are stored in	1
objects are accessed in	1
objects are accessed on	2
objects are called. The	1
objects are instances of	1
objects are returned by	1
objects are identified by	1
objects are normally compiled	1
objects are aligned. It	1
objects can be allocated	1
objects can be copied	1
objects can be added	1
objects can be returned	1
objects can often be	1
objects // Roll out	1
objects if no other	1
objects with each their	1
objects on the stack,	1
objects as function parameters	1
objects have a natural	1
objects have been stored	1
objects have been added?	2
objects have mixed types	1
objects will be stored	1
objects should preferably be	3
objects stored in an	1
objects stored in memory.	1
objects stored in dynamically	1
objects stored are containers	1
objects they point to	1
objects they contain is	1
objects without position-independent code	1
objects even when their	1
objects accessed in a	2
objects inside the derived	1
objects together in one	1
objects together into a	1
objects declared in the	1
objects declared in a	1
objects declared inside a	2
objects come last in	1
objects share the same	1
objects Conversions involving class	1
objects simultaneously. In multithreaded	1
objects identified by a	1
objects Vec8s a, b,	1
objects (memory pooling) than	1
objects (*.dll, *.so). The	1
objects (*.dll, *.so). There	1
objects numbered consecutively? If	1
objects (rather than pointers	1
takes the hint about	1
takes a very long	1
takes a long time	1
takes a long time,	1
takes a few clock	1
takes a considerable amount	1
takes to make a	1
takes to make support	1
takes to do two	1
takes to do calculations	1
takes to call the	1
takes to call a	2
takes to calculate the	3
takes to add i	1
takes to load the	1
takes to start and	1
takes to execute the	1
takes to execute CriticalFunction	1
takes to transpose a	1
takes to install a	2
takes to recover from	1
takes to reload the	2
takes to develop and	2
takes to refresh the	1
takes time to copy	1
takes more time to	1
takes more time than	2
takes more time but	1
takes more memory resources	1
takes memory space. A	1
takes memory space, even	1
takes only a few	1
takes only slightly more	2
takes only 2-3 clock	1
takes one clock cycle	1
takes no more time	1
takes no extra time	2
takes no extra time.	2
takes some experience to	1
takes between 2 and	1
takes before the application	1
takes 4 - 8	1
takes 4 - 16	1
takes 8 bytes of	1
takes time. Dispatch on	1
takes up more space	1
takes up one register.	1
takes extra time. The	1
takes extra time, of	1
takes much more time	2
takes much longer time	3
takes advantage of the	1
takes typically 0 -	1
takes zero or one	1
takes too long time	1
takes too much space	1
takes longer time to	1
takes longer time in	1
takes longer time than	1
takes longer time. It	1
takes 10 clock cycles	1
takes 10 μs today,	1
takes 5 clock cycles,	2
takes little space in	1
takes 3 - 6	1
takes care of the	2
takes care of this	1
takes 14 - 45	1
takes six times as	1
takes 11 clock cycles	1
takes 50 - 100	1
takes 40 - 80	1
takes 40 clock cycles.	1
takes 40% more time	1
takes hours to install	1
variable is the range	1
variable is only used	1
variable is stored in	2
variable is accessed from	1
variable is accessed most	1
variable is used. An	1
variable is never stored	1
variable is never changed.	1
variable is declared. If	1
variable to be stored	1
variable in the code.	1
variable in the shared	1
variable in the global	1
variable in a shared	1
variable in a DLL	1
variable in memory takes	1
variable in example 11.3	1
variable in many cases.	1
variable in main has	1
variable in memory, as	1
variable in eax. The	1
variable in parts, for	1
variable for test purposes.	1
variable for accessing list[i].a	1
variable that is shared	1
variable that r points	1
variable that could benefit	1
variable can be calculated	1
variable can be changed	1
variable can be fetched	1
variable or object is	1
variable or object as	1
variable or object through	1
variable or replace it	1
variable if their live-ranges	1
variable by a float	1
variable with the static	1
variable as function parameter.	1
variable as an integer	1
variable as loop counter	1
variable from address 0x2710	1
variable from RAM memory	1
variable at the same	1
variable because it is	1
variable because optimizing compilers	1
variable which is known	1
variable size can be	1
variable two names, one	1
variable number of objects	2
variable where it expects	1
variable cannot be stored	1
variable even smaller by	1
variable method unfavorable, unless	1
variable always has the	1
variable through a pointer	1
variable inside the class.	1
variable would be needed	1
variable unless the loop	1
variable members of the	1
variable means that it	2
variable storage are explained	1
variable storage Variables and	1
variable global if it	1
variable size. The alternative	1
variable outside the loop	1
variable until the function	1
variable names from string	1
variable declaration to tell	1
variable pointed to is	1
variable pointed to can	1
variable names. Remember to	1
variable produces a negative	1
variable produces a low	1
variable lengths that are	1
variable Y // Update	1
variable Z } The	1
variable having the same	1
variable whose address is	1
variable Day. Note the	1
variable storage............................................................................. 26 7.2	1
variable __intel_cpu_feature_indicator where each	1
variable __intel_cpu_feature_indicator_x. You can	1
variable 85 ; eax	1
variable m. The advantage	1
variable (eax) which contains	1
any of the 4	1
any of the bits	1
any of the shared	1
any of the examples	1
any of the storage	1
any of these instruction	1
any of these methods	1
any of these conditions	1
any function are called	1
any function or variable	1
any code branch for	1
any use of floating	1
any memory block that	1
any other function is	1
any other value than	1
any other member functions.	1
any other address in	1
any other error reporting	1
any other function. A	1
any other module then	1
any other number. Therefore,	1
any other form of	1
any other cleanup that	1
any other factor. If	1
any other modules. This	2
any other module. The	1
any other resource, such	1
any other constructors. A	1
any cache lines for	1
any floating point code.	1
any floating point instructions.	1
any size other than	1
any pointer or reference	2
any library functions called	1
any objects if no	1
any objects declared in	1
any performance penalty to	1
any branch misprediction long	1
any member functions that	1
any elements in the	1
any call to the	1
any part of the	1
any type of parameters	1
any function. Global variables	1
any extra code and	1
any extra code for	1
any extra code. It	1
any extra code. Example:	1
any extra code. Dynamic	1
any extra time. This	1
any processor that you	1
any necessary destructors after	1
any speed advantage in	1
any specific calling conventions	1
any specific recommendation about	1
any specific model. Instead,	1
any exception so that	1
any option that limits	1
any known hardware CPU.	1
any cost in performance.	1
any public variables. All	1
any higher instruction set,	1
any hot spots in	1
any particularly slow instruction	1
any algorithm with template	1
any effect on the	1
any time, then the	1
any algebraic reductions on	1
any situation where a	1
any non-static data members	2
any non-static access. 7.20	1
any brand of CPU.	1
any brand name and	1
any compile-time constant n,	1
any loss of efficiency.	1
any constructors are called.	1
any assumption about an	1
any non-polymorphic member functions.	1
any expression, but none	1
any function) should be	1
any answer. Beginners are	1
any transition from AVX	1
any non-vector library. 119	1
any event, the clock	1
any patch. 131 Note	1
we are in fact	1
we are using 8-bit	1
we are using unions	1
we are running this	1
we are writing to	1
we are adding -100	1
we are reading and	1
we are waiting for	1
we are converting a	1
we are swapping column	1
we are assuming that	1
we are seeing an	1
we are breaking out	1
we are relying on	1
we can use 64-bit	1
we can do four	1
we can access internal	1
we can avoid the	1
we can calculate that	1
we can store the	1
we can handle eight	1
we can define in	1
we can help the	1
we can eliminate one	1
we can see, it	1
we can roughly estimate	1
we can surely rely	1
we can learn from	1
we may also see	1
we may need metaprogramming.	1
we may choose the	1
we may save by	1
we may write: y	1
we have a =	1
we have to take	1
we have an estimated	1
we have (set) =	1
we have inserted UnusedFiller	1
we use hexadecimal numbers	1
we will not get	1
we will have to	1
we will calculate xn	1
we will consider if	1
we used above the	1
we should preferably have	1
we do not have	1
we do not expect	1
we do have to	1
we need the next	1
we need to divide	1
we need to split	1
we need metaprogramming. None	1
we want to read	1
we want to generate	1
we want to measure	1
we want to roll	1
we want it to	1
we must consider that	1
we compile the shared	1
we get 0 rather	1
we get rid of	1
we would have to	1
we add a to	1
we don't have to	3
we don't need an	1
we don't get rid	1
we end up with	1
we read from 0x4700.	1
we assume is optimized.	1
we assume that b	1
we know that u.f	1
we change the order	1
we still want to	1
we expect to use	1
we modify example 9.5	1
we try to optimize	1
we notice is that	2
we roll out the	1
we specify the options	1
we prefer a to	1
we forgot to tell	1
we loose the ability	1
we encounter another problem.	1
we have: // Example	1
we reach element number	1
some of the compiler	1
some of the most	1
some of the best	2
some of the difference	1
some of the heavy	1
some of the considerations	1
some of these also	1
some more vector instructions	1
some other functions that	1
some other variable in	1
some compilers will make	1
some compilers unroll too	1
some very good compilers	1
some very old DOS	1
some long vector math	1
some operating systems are	1
some systems because of	1
some cases the compiler	1
some cases the SSE2	1
some cases to use	1
some cases and it	1
some cases be advantageous	1
some cases be determined	1
some cases it is	2
some cases it can	2
some cases on Windows	1
some cases you may	1
some cases this multiplication	1
some cases take memory	1
some cases even the	1
some cases ignore a	1
some processors that have	1
some extra complications. A	1
some calculations at compile	1
some small low-power CPUs	1
some support for intrinsic	1
some information for the	1
some cases, the Intel	1
some cases, the log	1
some cases, for example	1
some cases, it is	1
some cases, but not	1
some cases, there is	2
some cases, there are	1
some expression is optimized	1
some development tools have	1
some systems. If the	1
some types of expressions	1
some compilers. If exception	1
some processors. On many	1
some microprocessors when an	1
some microprocessors have. In	1
some things very smart	1
some positive value, n.	1
some syntax checking and	1
some cases. An even	1
some cases. Multiple threads?	1
some cases. Does not	1
some programmers use a	1
some help if you	1
some typical sources of	1
some heavy work to	1
some disadvantages that make	1
some changes for each	1
some measurements to see	1
some embedded systems. A	1
some CPU-intensive applications with	1
some tests with the	1
some programs, more than	1
some formula into a	1
some experience to get	1
some differences due to	1
some funny things with	1
some legacy software. It	1
some tips on improving	1
some caveats. We can	1
some situations, and which	1
some links. 20 Copyright	1
some indication of which	1
some day be implemented	1
some examples: strlen function.	1
some rare cases of	1
so the compiler can	1
so the floating point	1
so the value of	1
so the misprediction penalty	1
so is a common	1
so is also a	1
so a cache line	1
so in a suboptimal	1
so that the if	1
so that the code	1
so that the compiler	1
so that the memory	1
so that the value	1
so that the first	1
so that the result	1
so that the last	1
so that the alignment	1
so that the final	1
so that the amount	1
so that the rest	1
so that the resulting	1
so that the remaining	1
so that it is	2
so that it can	5
so that it may	1
so that it has	1
so that it cannot	1
so that it doesn't	2
so that it writes	1
so that you have	1
so that you don't	1
so that only one	1
so that one thread	1
so that each value	1
so that each statement	1
so that there was	1
so that we can	2
so that we don't	2
so that they are	1
so that they cannot	1
so that a+b is	1
so it can call	1
so as to make	1
so you can have	1
so you will never	1
so you need to	1
so this feature is	1
so will cause the	1
so there may be	1
so many different cases	1
so many unknown factors	1
so we can calculate	1
so we can store	1
so we don't have	1
so we don't get	1
so long that the	1
so important and generally	1
so large that we	1
so big that overflow	1
so big that caching	1
so much stronger for	1
so small that a	1
so small that it	1
so fast that the	1
so fast that what	1
so unless you specify	1
so complicated that I	1
so high that it	3
so expensive that it	1
so (i.e. if the	1
so on. 7.31 Other	1
so kludgy that it	1
so 1.2 in this	1
so complicated? Because the	1
variables is so large	1
variables is eight in	1
variables is approximately six	1
variables to be stored	1
variables to be overwritten,	1
variables to calculate the	1
variables to zero and	1
variables and objects that	1
variables and objects will	1
variables and objects should	1
variables and objects declared	2
variables and therefore likely	1
variables and operators Integer	1
variables and operators Modern	1
variables and operators ......................................................................	1
variables and internal functions	1
variables and operators............................................................................... 29	1
variables in the XMM	1
variables in the YMM	1
variables in a function	1
variables in a class	1
variables in a 64-bit	1
variables in a well-structured	1
variables in memory or	1
variables in order to	1
variables in 32-bit systems	1
variables in 32-bit mode	1
variables in registers rather	1
variables The most commonly	1
variables for the same	1
variables for other integer	1
variables for floating point	1
variables for float expressions	1
variables for array elements	1
variables for calculating a	1
variables that are used	2
variables that are shared	1
variables that may be	2
variables that count how	1
variables are stored in	2
variables are stored as	1
variables are often used	1
variables are temporary intermediates,	1
variables are stored. The	1
variables are overdetermined in	1
variables are overdetermined Boolean	1
variables can be stored	1
variables can be 8,	1
variables can also be	1
variables or hide them	1
variables if possible, and	1
variables by using the	1
variables as long as	1
variables as input less	1
variables as input check	1
variables than if the	1
variables may be needed	1
variables have one instance	1
variables use a different	1
variables will be used	1
variables because of the	1
variables do not wrap	1
variables into a union	1
variables const double A	1
variables called global offset	1
variables (see below). A	1
variables An expression that	1
variables declared with the	1
variables Floating point numbers	1
variables go through the	1
variables global if you	1
variables defined outside any	1
variables might have other	1
variables happen to be	1
variables (i.e. variables defined	1
variables sum1 and sum2	1
variables Compilers cannot make	1
variables Y and Z.	1
variables ......................... 142 14.10	1
return the result in	1
return a - 1;	2
return a pointer to	1
return a pointer or	1
return a + 1;	5
return a * a;}	1
return a > b	1
return to its own	1
return and parameter transfer	1
return with an error	1
return an error code	1
return x * x	2
return x * m;}	2
return from the function.	1
return from functions that	1
return from Func 87	1
return value depends only	1
return any pointer or	1
return address of the	1
return 0; // return	1
return 0; } The	2
return operations with other	1
return 0 if out	1
return type of a	1
return ; align ;	1
return addresses to be	1
return addresses (i.e. where	1
return y = pow(x,n)	1
return c; } In	1
return types The return	1
return types .............................................................................................. 50	1
return x; } };	1
return f; } This	1
return y; } double	1
return value. The copy	1
return 1.0; } };	1
return a[i]; // Return	1
return _mm_loadu_si128((__m128i const*)p); }	2
return _mm_loadu_si128((__m128i const*)p);} //	1
return sum; } Here,	1
return clock; } //	1
return &CriticalFunction_386; } int	1
return x^10 // loop	1
return &CriticalFunction_SSE2; } //	1
return (*SelectAddMul_pointer)(aa, bb, cc);	2
return Func1(x) * Func1(x)	1
return &CriticalFunction_AVX; } if	1
return pow(x,10); } The	1
return x10; } //	1
return (2.5f * x	1
return IntegerPower<10>(x); } 152	1
return powN<(N & N-1)==0,N>::p(x);	1
return x*x + 1;	1
return n;} This code	1
return ipow(x,10); // used	1
return (*CriticalFunction)(parm1, parm2); }	1
return powN<(N1&(N1-1))==0,N1>::p(x) * powN<true,N-N1>::p(x);	1
return powN<true,N/2>::p(x) * powN<true,N/2>::p(x);	1
return _mm_load_si128((__m128i const*)p); }	1
return square(x) + 1.0f;}	1
return _mm_cvtss_si32(_mm_load_ss(&x));} static inline	1
return list[x]; } The	1
return a+1;. The compiler	1
return add_elements(s); // add	1
return N; } T	1
return _mm_cvtss_f32(s); } //	1
return FactorialTable[n]; // Table	1
return prediction). 149 All	1
return route. This mechanism	1
return vector(x + a.x,	1
return statement: // Example	1
return _mm_cvtsd_si32(_mm_load_sd(&x));} The code	1
return *(T*)0; } //	1
2 is faster than	1
2 to x 43	1
2 to each element	2
2 and the matrix	1
2 and 15 clock	1
2 in example 14.28	1
2 in example 14.7b,	1
2 in order to	1
2 can be done	1
2 // make dispatcher	1
2 // Still faster	2
2 or not. The	1
2 if the objects	1
2 if the elements	1
2 if the rows	2
2 if a matrix	1
2 if possible and	1
2 by using a	1
2 by putting the	1
2 - n.a. a+a+a+a	1
2 int unsigned int	1
2 when multiplying with	1
2 then the multiplication	2
2 then N&(N-1) is	1
2 double Intel SVML	1
2 In 64-bit mode	1
2 * 5; to	1
2 clock cycles in	1
2 return (2.5f *	1
2 return powN<(N &	1
2 2 int unsigned	1
2 2 int, signed	1
2 64 MMX long	1
2 template <int N>	1
2 32 8 64	1
2 does not always	1
2 does not apply	1
2 ; add what	1
2 128 SSE2 float	1
2 128 SSE2 char	1
2 : b *	2
2 Integer division by	1
2 > v.i *	1
2 AVX2 _mm256_i64gather_pd unlimited	1
2 AVX2 _mm256_i64gather_epi32 unlimited	1
2 #define FUNCNAME SelectAddMul_SSE2	1
2 unused bytes S1	1
2 == 0) {	1
2 (See page 137	1
2 (See page 137).	1
2 bytes. first //	1
2 bytes. first byte	1
2 applies only when	1
2 int64_t 128 I64vec2	1
2 (i.e. 2, 4,	1
2 int, signed or	1
2 Choosing the optimal	2
2 63 . The	1
2 uint64_t 128 Vec2uq	1
2 0.12 0.18 0.12	1
2 23 , doublevalue	1
2 13.4 Test and	1
2 GHz then the	1
2 GHz CPU. Should	1
2 a+a+a+a=a*4 -(-a)=a --xxxxxx-	1
2 12.6 Transforming serial	1
2 52 , longdoublevalue	1
2 thenaandbcannot use the	1
2 Gbytes. This large	1
2 gigabytes of data.	1
2 Mbytes. There may	1
2 0.77 0.89 0.40	1
2 (be aware of	1
2 GB, but not	1
2 GB. When considering	1
2 0.63 0.75 0.18	1
You can use the	1
You can use this	1
You can take advantage	2
You can avoid the	1
You can avoid this	2
You can check the	1
You can calculate how	1
You can assume that	2
You can improve the	1
You can improve this	1
You can change what	1
You can save a	1
You can divide by	1
You can generally assume	1
You can disable exception	2
You can force a	1
You can bypass the	1
You can subtract this	1
You may have to	1
You may use the	2
You may use an	1
You may use double	1
You may use single	1
You may make member	1
You may make separate	1
You may need to	1
You may even add	1
You may avoid this	1
You may avoid multiple	1
You may add the	1
You may add counter	1
You may write your	1
You may replace this	1
You may preferably avoid	1
You may look at	1
You may choose the	1
You may choose a	1
You may choose to	1
You may choose one	1
You may choose either	1
You may save RAM	1
You may insert any	1
You may remove the	1
You may declare the	1
You may prefer to	1
You may think that	1
You may mirror the	1
You may ignore the	1
You may skip this	1
You may deviate from	1
You have to make	1
You have to set	1
You have to check	1
You have to include	1
You have to distinguish	1
You have to consult	1
You will not get	1
You should be aware	1
You should use this	1
You should use such	1
You should avoid these	1
You should therefore be	1
You should therefore not	1
You cannot be certain	1
You cannot use ~	1
You cannot avoid this	1
You cannot replace a	1
You cannot assume that	1
You cannot rely on	1
You cannot expect a	3
You cannot swap the	1
You need to check	1
You can't have public	1
You may, in addition,	1
table is not significant	1
table is used for	1
table is advantageous in	1
table is initialized when	1
table is cached. Usually	1
table of const double	1
table of pointers to	3
table of constants is	1
table of jump targets.	1
table of coefficients is	1
table of 1/n! 1.,	1
table to be evicted	1
table to stack memory	1
table to see whether	1
table and possibly also	1
table in the program	1
table in the level-1	1
table in static memory	1
table The following table	1
table for even the	1
table that is stored	1
table are core clock	1
table can give some	1
table can improve search	1
table // of function	2
table or a pointer.	1
table if you expect	1
table by 16 float	1
table with two entries.	1
table may be of	1
table may go undetected.	1
table from static memory	1
table at runtime, if	1
table has const twice	1
table should be declared	1
table takes extra time,	1
table before the first	1
table element Instruction set	1
table inside a function	1
table values by hand	1
table lookup is to	1
table lookup is often	1
table lookup for a	1
table lookup can be	1
table lookup or require	1
table lookup if the	1
table lookup at the	1
table lookup operations slow	1
table lookup Using intrinsic	1
table lookup Lookup tables	1
table lookup mechanisms explained	1
table instead of calculating	1
table shows that it	1
table shows whether the	1
table 19 in manual	1
table lists the available	1
table 8.1 below. Devirtualization	1
table 9.3 shows, the	1
table lookups are needed	1
table lookup. For example:	1
table lookup. These instructions	1
table lookup. Lookup tables	1
table (PLT) and a	1
table (PLT) in the	1
table (PLT) that is	1
table 9.1 show that	1
table static. This makes	1
table lookup: // Example	2
table increases the size	1
table 8.1. The table	1
table (PLT). The memory	1
table (PLT). And whenever	1
table 9.2. All these	1
table (GOT). These table	1
table (GOT) in order	1
table summarizes the different	1
table 9.2, such as	1
performance is to use	1
performance is not doubled.	1
performance is important to	1
performance is limited by	1
performance is obtained if	1
performance is obtained by	1
performance is obtained with	1
performance is inferior to	1
performance of the function	1
performance of the STL	1
performance of the final	1
performance of a program.	1
performance of this function	1
performance of different function	1
performance of two different	1
performance of competing brands	1
performance and precision. The	1
performance and studying the	1
performance in some cases.	1
performance for the functions	1
performance for vector intrinsics.	1
performance for many applications	1
performance for 32-bit software	1
performance for background services	1
performance that can possibly	1
performance can be improved	1
performance can easily justify	1
performance if the branch	1
performance if the time-critical	1
performance by unit-testing is	1
performance by organizing the	1
performance by 5-10% for	1
performance on CPUs without	1
performance on AMD and	1
performance on non-Intel processors	1
performance on non-Intel CPUs	2
performance then there is	1
performance has high priority.	1
performance because the integer	1
performance because the contents	1
performance because they are	1
performance should be seen	1
performance between the systems.	1
performance between 32-bit and	1
performance test that measures	1
performance test should include	1
performance even matters, which	1
performance cost to using	1
performance costs to such	1
performance counters inside your	1
performance during the development	1
performance monitor counter is	1
performance monitor counter in	1
performance monitor counters in	1
performance monitor counters are	1
performance monitor counters when	1
performance monitor counters before	1
performance monitor counters instead	1
performance monitor counters Many	1
performance monitor counters ....................................................................	1
performance monitor counters. A	1
performance monitor counters. My	1
performance under the worst-	1
performance penalty to using	1
performance penalty for using	1
performance penalty for organizing	1
performance penalty when going	1
performance problems. The performance	1
performance problems. Avoid nested	1
performance over other programming	1
performance reasons. Use these	1
performance options. I don't	1
performance measurement should not	1
performance tests are done	1
performance significantly simply by	1
performance dramatically by unrolling	1
performance bottlenecks is to	1
performance monitoring options. CPU	1
performance somewhat. The AVX2	1
performance costs. The time	1
very time consuming. Therefore,	1
very different speeds. If	1
very efficient because it	1
very efficient way of	1
very efficient solution in	1
very long and very	1
very long and difficult	1
very long on a	1
very long time unless	1
very often underestimate this	1
very user friendly compiler	1
very useful to study	1
very useful for many	1
very useful for investigating	1
very useful when testing	1
very useful way to	1
very important to do	1
very important to optimize	1
very important for tasks	1
very large or if	1
very large data bases,	1
very large number of	1
very large shared object	1
very large runtime framework	1
very large positive number	1
very large libraries. The	1
very big to cover	1
very big in order	1
very big data structures.	1
very big problem if	1
very much on the	1
very small or if	1
very small loops (less	1
very good at optimizing	1
very good compilers and	1
very good performance and	1
very good choice for	1
very few restrictions on	1
very likely to be	1
very likely that code	1
very well spend more	1
very fast if the	1
very high resolution if	1
very efficient. The following	1
very difficult to diagnose.	1
very old DOS compilers).	1
very inefficient if the	1
very inefficient because the	1
very inefficient way. The	1
very inefficient solution. Many	1
very little overhead to	1
very smart and other	1
very well. This compiler	1
very similar thanks to	1
very low repeat count	1
very inefficient. Linear arrays	1
very time-consuming function in	1
very time-consuming tasks because	1
very time-consuming garbage collector	1
very fast. The result	1
very fast. This can	1
very fast. All optimizing	1
very fast. Simple integer	1
very expensive cache contentions,	1
very dramatic effect on	1
very expensive. A variable	1
very expensive. A limited	1
very time- consuming. There	1
very limited. There are	1
very big. In the	1
very problematic because these	1
very contrived example, but	1
very obscure possibility of	1
very common. Even some	1
very kludgy. The few	1
very old-fashioned. Development in	1
very smart. They can	1
very often, but such	1
very helpful for later	1
very stupid. Some common	1
software is to find	1
software is implemented as	1
software to be slower	1
software to add new	1
software in a high-level	1
software in two versions.	1
software in C++ An	1
software in C++: An	1
software for speed or	1
software that is part	1
software that is slow,	1
software that runs quite	1
software that dates back	1
software be reinstalled and	1
software are available from	1
software can cause problems	1
software with network access	1
software more clear and	1
software because the two	1
software should be tested	1
software into an excessive	1
software performance should be	1
software optimization is to	1
software optimization issue. But	1
software programming language defines	1
software programming language, e.g.	1
software uses CPU dispatching:	1
software contains a negative	1
software contains a positive	1
software was coded. If	1
software was developed. A	1
software programs automatically download	1
software implementation is faster	2
software implementation if the	1
software implementation rather than	1
software development and the	1
software development work as	1
software development process and	1
software development models have	1
software development process. These	1
software development kit (SDK	1
software applications use a	1
software applications need better	1
software framework that uses	1
software writing style are	1
software optimization. Everything that	1
software module for correctness	1
software programmers to some	1
software faster. It is	1
software developers should be	1
software developers who want	1
software users as well	1
software specifies the calculation	1
software development, and that	1
software package and make	1
software package in order	1
software package on a	1
software package several times	1
software project together and	1
software project goes to	1
software runs most of	1
software layers and frameworks	1
software projects have become	1
software packages and who	1
software packages faster and	1
software product is one	1
software users. In some	1
software develop- ment in	1
software development. This unit-testing	1
software companies often fail	1
software installed, a lot	1
software products fail to	1
software development", Addison- Wesley	1
software engineering principles to	1
software package, including all	1
software teachers to recommend	1
software design, it is	1
software project, it is	1
software developer may choose	1
order is usually the	1
order is opposite). 9.10	1
order of the two	2
order of the Boolean	1
order of the operands	2
order of functions in	1
order of floating point	1
order of Boolean operands	1
order of Boolean operands.	1
order of inheritance is	1
order to make the	5
order to make a	1
order to make it	1
order to make software	1
order to make sure	1
order to make better	1
order to make profiling	1
order to take advantage	1
order to test all	1
order to access an	1
order to access x	1
order to avoid that	1
order to avoid multiple	1
order to avoid conversions	1
order to get a	1
order to get an	1
order to get access	1
order to get reliable	1
order to calculate the	1
order to optimize access,	1
order to improve cache	1
order to improve performance.	1
order to know how	1
order to find the	2
order to find and	1
order to prevent such	1
order to save power.	1
order to divide the	1
order to divide i	2
order to predict which	1
order to enable constant	1
order to align its	1
order to implement this	1
order to help the	1
order to increase the	1
order to identify individual	1
order to force the	1
order to cover the	1
order to utilize the	1
order to determine whether	1
order to emulate the	1
order to reserve resources	1
order to facilitate porting	1
order to minimize the	1
order and it can	1
order and there are	1
order in which the	3
order in which data	1
order in which they	3
order in order to	1
order or do more	1
order but are identified	1
order execution All modern	1
order execution ................................................................................................. 103	1
order calculation capabilities. Here	1
order polynomial: // Example	1
order a[0], b[0], a[1],	1
long and very time-	1
long and difficult to	1
long and irregular response	1
long that the user	1
long or int64_t MS	1
long or uint64_t MS	1
long on a particular	1
long as the error	1
long as it is	1
long as you are	1
long as you avoid	1
long as you don't	1
long as this is	1
long as their uses	1
long int unsigned char	1
long int 64 0	1
long int 32 -231	1
long time to execute	1
long time to transpose	1
long time to calculate.	1
long time in case	1
long time it takes.	1
long time when the	1
long time unless the	1
long time compared to	1
long vector library is	1
long vector libraries and	1
long vector math libraries:	1
long vector library, you	1
long because the speed	1
long double take no	1
long double precision is	1
long double precision (80	1
long double precision. Conversions	1
long double 8, 10,	1
long double format. The	1
long double reflects the	1
long long or int64_t	1
long long or uint64_t	1
long long 64 2	1
long long 64 4	1
long long 64 8	1
long long 64 1	1
long long ReadTSC() {	1
long long clock; __cpuid(dummy,	1
long long time1; long	1
long long timediff[NumberOfTests]; for	1
long before the floating	1
long 64 2 128	1
long 64 4 256	1
long 64 8 512	1
long 64 1 64	1
long time. It is	1
long 32 0 232-1	1
long does not make	1
long list of numbers:	1
long dependency chains then	1
long dependency chain may	1
long dependency chain. If	1
long dependency chain. We	1
long dependency chains. A	1
long dependency chains. In	1
long dependency chains. Another	1
long dependency chains, especially	1
long response times to	2
long response times for	1
long response times, even	1
long time, such as	1
long sequence of operations	1
long enough to be	2
long ReadTSC() { int	1
long clock; __cpuid(dummy, 0);	1
long time1; long long	1
long delay. See page	1
long latencies. 8.5 Compiler	1
long timediff[NumberOfTests]; for (i	1
long long, double. Misaligned	1
between the different execution	1
between the different cores	1
between the two clock	1
between the two kinds	1
between the number of	1
between the operating systems	1
between the operating system	1
between the optimization capabilities	1
between the calls to	1
between the Boolean operators	1
between the systems. There	1
between the efficiency of	1
between the latency and	1
between a and b	1
between a function parameter	1
between a software programming	1
between function names and	1
between x and y?"	1
between different CPU cores.	1
between different threads in	1
between different parts of	2
between different tasks in	1
between different threads, but	1
between different precisions take	1
between CPU brands and	1
between CPU cores. A	1
between CPU brands, and	1
between floating point numbers	2
between each call, and	1
between using signed and	1
between multiple CPU cores.	1
between multiple CPU cores:	1
between multiple dynamic libraries.	1
between multiple threads must	1
between multiple processes because	1
between multiple threads, but	1
between multiple threads, while	1
between multiple processes. The	1
between two or more	1
between two pointers requires	1
between two simple expressions.	1
between two expressions for	1
between two constants can	1
between 2 and 15	1
between 32-bit and 64-bit	1
between 32-bit Linux and	1
between 8 bit and	1
between these considerations. It	1
between simple processors and	1
between threads is minimized.	1
between threads becomes faster	1
between single and double	1
between several execution units.	1
between integers and floating	3
between optimizing for size	1
between signed and unsigned	2
between development time, usability,	1
between 5 and 20	1
between rows in a	1
between c2 and bc	1
between rounding and truncation.	2
between threads. The overhead	1
between 9 and 64,	1
between leaf functions and	1
between platforms, it is	1
between threads, such as	1
between float, double and	1
between RISC and CISC	1
between PC's and mainframes,	1
between efficiency, portability and	1
between coarse-grained parallelism and	1
between commas and semicolons	1
between recoverable and non-recoverable	1
32-bit and 64-bit code	1
32-bit and 64-bit operating	1
32-bit and 64-bit Windows	1
32-bit and 64-bit Linux	2
32-bit and 64-bit systems.	2
32-bit and 64-bit Linux,	1
32-bit and 64-bit mode.	1
32-bit and 64-bit Windows.	2
32-bit and 64-bit. Supports	1
32-bit and 64-bit. They	1
32-bit or 64-bit mode.	1
32-bit integer has a	1
32-bit integer multiplication prior	1
32-bit number (the instruction	1
32-bit software because the	1
32-bit software development", Addison-	1
32-bit operating systems and	2
32-bit systems and 8	1
32-bit systems and 64	1
32-bit systems and fourteen	1
32-bit systems and sixteen	1
32-bit systems when the	1
32-bit systems do not	1
32-bit systems unless the	1
32-bit systems gives rise	1
32-bit systems allow you	1
32-bit Windows and 32-bit	1
32-bit Windows in this	1
32-bit Windows by transferring	1
32-bit integers to alias	1
32-bit integers and 64-bit	1
32-bit integers in 16-bit	1
32-bit Linux is that	1
32-bit Linux and 32-bit	1
32-bit Linux and BSD,	1
32-bit Linux with Microsoft,	1
32-bit mode so that	1
32-bit mode 4 4	1
32-bit mode unless the	1
32-bit programs if there	1
32-bit Mac code uses	1
32-bit Mac Intel CodeGear	1
32-bit Mac OS X	2
32-bit Mac OS X,	1
32-bit systems. Virtual member	1
32-bit Windows, including an	1
32-bit Windows, Intel/MASM syntax:	1
32-bit Linux, Gnu/AT&T syntax:	1
32-bit mode. The first	1
32-bit mode. The next	1
32-bit mode. The 32-	1
32-bit mode. If there	1
32-bit mode. Storing the	1
32-bit version. The Gnu	1
32-bit Windows. Gnu Comes	1
32-bit Windows. Does not	1
32-bit Windows. Does not,	1
32-bit Windows. Integrates into	1
32-bit systems, but in	1
32-bit systems, especially if	1
32-bit mode, and more	1
32-bit mode, for reasons	1
32-bit integer. Floating point	1
32-bit case. The -fpie	1
32-bit absolute addresses. This	1
32-bit integers, and they	1
32-bit integers, then the	1
32-bit integers, which is	1
32-bit integers, depending on	1
32-bit number. If a	1
32-bit -fno-builtin Gnu 32-bit	1
32-bit counterparts. In general,	1
32-bit (signed) address. The	1
branch is executed. The	1
branch is mispredicted only	1
branch is poorly predictable.	1
branch is executed 10	1
branch is eliminated. Loop	1
branch is fed into	1
branch of the latter	1
branch of code is	2
branch to use for	1
branch and other nearby	1
branch in example 15.1b	1
branch for a low	1
branch for test purposes.	1
branch that is always	1
branch that can go	1
branch that always goes	1
branch that goes one	1
branch that goes many	1
branch that goes randomly	1
branch that follows a	1
branch that chooses between	2
branch can be chosen	1
branch can be eliminated	1
branch can also be	1
branch // Loop with	1
branch if the constants	1
branch if it has	1
branch by a table	2
branch by a conditional	1
branch will be mispredicted	1
branch will go based	1
branch only when a	1
branch instruction takes typically	1
branch should be predicted.	1
branch into the pipeline	1
branch void SelectAddMul(short int	1
branch must rely on	1
branch inside the loop	2
branch inside the loop.	1
branch inside the template.	1
branch depends on the	1
branch depends on calculations	1
branch (e.g. an if-else	1
branch target buffer is	1
branch target buffer can	1
branch target buffer (BTB).	1
branch target buffer. Contentions	1
branch target buffer, branch	1
branch prediction are different	1
branch prediction into account	1
branch prediction (see p.	1
branch prediction mechanism. See	1
branch misprediction is approximately	1
branch misprediction long before	1
branch misprediction penalty. Branches	1
branch prediction. A loop	1
branch prediction. A Pentium	1
branch prediction. If one	1
branch prediction. Example: //	1
branch prediction. Modern microprocessors	1
branch mispredictions. The performance	1
branch mispredictions. Boolean vector	1
branch mispredictions. When the	1
branch mispredictions. Test the	1
branch pattern history, etc.	1
branch tree or switch	1
branch mispredictions if the	1
branch mispredictions by making	1
branch ahead of time	1
branch tree. On older	1
branch mispredictions, floating point	1
branch mispredictions, etc. These	1
branch misprediction, or long	1
branch predictions in the	1
< b because of	1
< 0 and i	1
< 0 || i	1
< 100; i +=	2
< 100; i++) {	7
< 100; i++) sum	1
< 100; i++) matrix[FuncRow(i)][FuncCol(i)]	1
< 100; x++) {	2
< 2; i++) a[i]	1
< b) = (a	1
< 0) { //	1
< size; i +=	1
< size; i++) {	7
< size; i++) a[i]	1
< size; i++) sum	1
< size; i++) b[i]	1
< n; i++) {	1
< 256; i +=	5
< 256; i++) {	1
< SIZE; r++) {	4
< SIZE; c++) {	2
< SIZE; r1 +=	1
< 4) { //	1
< 1000; i++) {	1
< 5) { //	1
< 5) {} which	1
< r; c++) {	2
< 100. It compares	1
< 100. pop ebx	1
< r1; c1 +=	1
< 2.0 This method	1
< 20; i +=	1
< 20; i++) {	1
< 0. The division	1
< ARRAYSIZE && list[i]	1
< r1+TILESIZE; r2++) {	2
< rows; i++) for	1
< rows; i++) {	1
< NumberOfTests; i++) {	2
< 10) { ...	1
< 223 to a	1
< arraysize; i++) {	1
< NUMROWS; row++) for	1
< NUMCOLUMNS; column++) matrix[row][column]	1
< ArraySize; i++) List[i]++;	1
< c1+TILESIZE; c2++) {	1
< &list[100]; temp++) {	1
< arraysize) { //	1
< 231 then convert	1
< r2; c2++) {	1
< list.Size(); i++) {	1
< 13) { //	1
< columns; j++) 39	1
member the object does	1
member is more compact	1
member is unchanged across	1
member of the same	2
member of the class	1
member of the object's	2
member of a class	1
member of a structure.	1
member of a bitfield	1
member of its child	1
member or after the	1
member function is a	1
member function is as	1
member function is faster	1
member function is big	1
member function is called.	1
member function is 83	1
member function to be	1
member function or friend	1
member function has only	1
member function because it	2
member function because this	1
member function which returns	1
member function pointer is	1
member function such as	1
member function cannot access	1
member function cannot modify	1
member function called only	1
member function means that	1
member by 8. The	1
member functions is not	1
member functions is also	1
member functions of a	1
member functions of parent	2
member functions that need	1
member functions are less	1
member functions if the	1
member functions have a	1
member functions then there	1
member functions because the	1
member functions static where	1
member functions faster by	1
member functions counts a	1
member functions Virtual functions	1
member functions ........................................................................................ 53	1
member functions (methods) Each	1
member functions (methods)......................................................................... 53	1
member pointer simply stores	1
member pointer refers to.	1
member variable with the	1
member pointers and virtual	1
member pointers are implemented.	1
member pointers if it	1
member pointers less efficient.	1
member pointers /vms Fastcall	1
member function. The overhead	1
member function. See page	1
member function. But there	1
member function. Do not	1
member function. 7.12 Branches	1
member functions. The following	1
member functions. The second	1
member functions. The 'this'	1
member functions. This applies	1
member functions. A static	2
member functions. You can	1
member function, provided that	1
member pointer. This can	1
member pointer. 7.9 Smart	1
member relative to the	2
member functions, where static	1
member functions) has no	1
way the register stack	1
way the user can	1
way the programming language	1
way is to make	1
way is to set	1
way is to insert	1
way is predicted well,	1
way is mispredicted only	2
way is equal to	1
way a branch will	1
way a profiler works	1
way of example 12.4b	1
way of making the	1
way of making sure	2
way of doing whole	1
way of handling cleanup	1
way of setting a	1
way of declaring an	1
way of defining integer	1
way of keeping data	1
way of removing superfluous	1
way of relieving a	1
way of solving the	1
way to use multiple	1
way to make sure	2
way to make thread-specific	1
way to set an	1
way to test this	1
way to work around	1
way to avoid the	1
way to check the	1
way to check for	1
way to control the	1
way to prevent memory	1
way to prevent such	1
way to tell a	1
way to tell these	1
way to handle an	1
way to handle strings	1
way to keep track	1
way to fully utilize	1
way to increase the	1
way to identify performance	1
way to roll out	1
way to overcome the	1
way to limit the	1
way to solve this	1
way and three times	1
way in the same	1
way in case of	1
way that can be	1
way that there is	1
way that takes more	1
way that avoids overflow:	1
way or the other	1
way or another. Therefore,	1
way or bypassing syntax	1
way if the value	1
way by wrapping the	1
way as in Linux.	1
way as an object	1
way as last time	1
way than last time.	1
way has become a	1
way most of the	1
way two times and	1
way member pointers are	1
way three times. Then	1
way microprocessors are constructed.	1
way includes the time	1
way m is transferred	1
elements is small then	1
elements is known at	2
elements of a vector	1
elements of a vector,	1
elements of b into	1
elements of type T	1
elements of simple types	1
elements to store is	1
elements to zero. You	1
elements and the program	1
elements in the sequence	1
elements in the array.	1
elements in a vector	1
elements in a specific	1
elements in a vector.	2
elements in an array	1
elements in vector Type	1
elements in each vector	1
elements in table The	1
elements in order to	1
elements in list in	1
elements in row 28	1
elements in aa: StoreVector(aa	3
elements in aa: a.store(aa+i);	1
elements in a[] which	1
elements that come with	1
elements are there between	1
elements are stored in	1
elements are accessed in	3
elements are accessed sequentially.	1
elements are cumbersome to	1
elements // align by	1
elements with a relative	1
elements with column 28	1
elements have a natural	1
elements have no specific	1
elements have been added	1
elements more complicated and	1
elements will go into	1
elements } } }	1
elements then this might	1
elements from row 28	1
elements from cc into	3
elements from bb into	3
elements at the end	1
elements at the diagonal	1
elements at a time	2
elements inside sqaure: for	1
elements }; vector() {}	1
elements were inserted, one	1
elements per vector. The	1
elements per vector. You	1
elements per row is	1
elements Induction variables for	1
elements are. For example,	1
elements consecutively in memory.	1
elements Total size of	2
elements matrix[r][c] below the	1
elements Size of each	1
elements c.load(cc+i); // result	1
elements matrix[c][r] above the	1
elements b.load(bb+i); // Load	1
faster the smaller the	1
faster to use the	1
faster to use than	1
faster to make log2	1
faster to first convert	1
faster to access a	2
faster to calculate than	1
faster to transfer a	1
faster to compose a	1
faster and that threads	1
faster and more compact	1
faster and makes an	1
faster and smaller. This	1
faster in a programmable	1
faster in 64-bit Linux	1
faster in 32-bit mode.	1
faster // Still faster	2
faster if the data	1
faster if the number	1
faster if the constant	1
faster if the dividend	2
faster if a and	1
faster if unsigned The	1
faster if unsigned //	2
faster if unsigned You	1
faster by making them	1
faster with signed than	1
faster than the function	1
faster than the simple	1
faster than the speed	1
faster than the hardware	2
faster than the Boolean	1
faster than the intrinsic	1
faster than a floating	1
faster than a non-static	2
faster than in other	1
faster than x =	1
faster than when compiled	1
faster than from floating	1
faster than other methods	1
faster than other languages	1
faster than floating point	1
faster than example 12.4a,	1
faster than double precision	1
faster than any non-vector	1
faster than 32-bit programs	1
faster than making a	1
faster than signed when	1
faster than division by	2
faster than linked lists	1
faster than reading or	1
faster than calculating the	1
faster than multiplying by	1
faster than random access.	1
faster than pow The	1
faster than 15.1b, and	1
faster when the factor	1
faster when columns is	1
faster at the cost	1
faster because the template	1
faster because we can	1
faster because testing a	1
faster way to limit	1
faster vectorized code. Storing	1
faster either by making	1
faster nor slower than	1
faster despite the extra	1
const in order to	1
const or typedef instead	1
const function that is	1
const int size =	12
const int x; public:	1
const int rows =	3
const int declaration may	1
const int SIZE =	3
const int TILESIZE =	1
const int ArraySize =	1
const int ABC =	1
const int NumberOfTests =	1
const int min =	1
const int ARRAYSIZE =	1
const int FactorialTable[13] =	2
const int NUMROWS =	1
const int arraysize =	1
const double A =	2
const double log2 =	1
const double A2 =	1
const pointer or const	1
const float OneOrTwo5[2] =	1
const float coef[16] =	1
const float lookup[2] =	1
const * const Greek[4]	1
const * p) {	4
const variable or replace	1
const variable means that	1
const member function cannot	1
const & a, T	1
const & x) {	6
const & b) {	1
const & a) {	1
const & source) {	1
const x) { //	1
const x) { return	2
const reference if the	1
const reference makes sure	1
const reference cannot change	1
const reference allows the	1
const keyword tells that	1
const keyword wherever appropriate	1
const twice because both	1
const reference. A const	1
const restriction on x.	1
const restriction from a	1
const Greek[4] = {	1
const definitions when used	1
makes the code more	1
makes the code faster	1
makes the code less	1
makes the code difficult	1
makes the code section	1
makes the code execute	1
makes the code incompatible	1
makes the compiler interpret	1
makes the use of	1
makes the data caching	1
makes the program less	1
makes the access to	1
makes the assembly output	1
makes the compiled code	1
makes the microprocessor jump	1
makes the dispatcher signal	1
makes the entire library	1
makes a critical dependency	1
makes a runtime check	1
makes a PLT for	1
makes a distinction between	1
makes a symbolic link	1
makes it more clear	1
makes it point to	1
makes it possible to	4
makes it less efficient.	1
makes it necessary to	1
makes it easier for	2
makes function calls more	1
makes function calls faster	1
makes code caching and	1
makes an error message	1
makes an extra register	1
makes data caching more	2
makes data caching very	1
makes data caching less	3
makes data caching inefficient.	2
makes program development more	1
makes no difference for	1
makes no difference whether	1
makes floating point code	2
makes floating point comparisons	1
makes code. For example,	1
makes sure the variable	1
makes sure the file	1
makes sure that the	4
makes sure that a	1
makes sure that all	1
makes sure that no	1
makes operations with Boolean	1
makes intermediate object for	1
makes dispatching on every	1
makes caching more efficient	1
makes caching less efficient.	1
makes various other optimizations	1
makes inlining more efficient	1
makes testing and maintenance	1
makes sense to dispatch	1
makes detailed optimization more	1
makes position- independent code	1
makes dynamic_cast more time-consuming	1
cannot be used in	1
cannot be used for	1
cannot be stored in	2
cannot be called from	1
cannot be sure that	1
cannot be calculated at	1
cannot be known at	1
cannot be certain that	1
cannot be predicted or	1
cannot be loaded into	1
cannot be vectorized with	1
cannot be vectorized automatically.	1
cannot be inlined or	1
cannot be overloaded or	1
cannot be changed without	1
cannot be determined in	1
cannot be mixed with	1
cannot be executed as	1
cannot be ruled out	1
cannot be controlled. The	1
cannot be controlled. Small	1
cannot be shared. You	1
cannot be avoided, there	1
cannot be tolerated. PGI	1
cannot be ignored if	1
cannot use the same	1
cannot use ~ for	1
cannot make floating point	2
cannot make any assumption	1
cannot make algebraic reductions	1
cannot point to the	2
cannot set a breakpoint	1
cannot do the optimization	1
cannot do must be	1
cannot always rely on	1
cannot access any non-static	2
cannot avoid this in	1
cannot avoid conversions from	1
cannot inline the function	1
cannot replace a &&	1
cannot replace a ||	1
cannot assume that an	1
cannot assume that model	1
cannot know for sure	1
cannot know that a	1
cannot reduce the integer	1
cannot change its possible	1
cannot change what it	1
cannot find the answers	1
cannot rely on the	1
cannot rely on a	1
cannot rely on anything	1
cannot expect the compiler	1
cannot expect a compiler	2
cannot expect a directive	1
cannot swap the order	2
cannot swap the operands	1
cannot modify data members.	1
cannot multiply integers of	1
cannot easily be implemented	1
cannot easily be obtained.	1
cannot do. All the	1
cannot increase the size	1
cannot prefetch more than	1
cannot rule out the	2
cannot rule out aliasing	1
before the function returns.	4
before the code to	1
before the compiler and	1
before the time the	1
before the program is	1
before the program starts	1
before the program starts.	1
before the loop or	1
before the loop if	1
before the cache line	1
before the floating point	1
before the pointer is	1
before the performance even	1
before the first data	1
before the first call	1
before the first element	2
before the test and	1
before the file is	1
before the calculation of	1
before the application programmer	1
before the end user	1
before the preceding addition	1
before the preceding iteration	1
before the decimal point	1
before and after the	1
before and after each	1
before and after executing	2
before it is used	1
before it is too	1
before it is finished	1
before it is compiled.	1
before it can run.	1
before it has finished	2
before it checks which	1
before it occurs, (2)	1
before you start to	1
before all objects have	1
before any floating point	2
before any constructors are	1
before any transition from	1
before we need the	1
before test // Critical	1
before they are executed.	1
before conversion to floating	1
before running a program	1
before calling the function	1
before calling the library	1
before your code is	1
before p is incremented.	1
before adding the first	1
before multiplying with the	2
before multiplying them. This	1
before converting to floating	1
before compilation. The following	1
before leaving the AVX	2
before leaving their workplace	1
before terminating a thread.	1
before dividing by 2	1
before MemberPointer is declared.	1
before coordination with other	1
before storing. The standard	1
before trying the techniques	1
before you. Optimized function	1
stored in the order	2
stored in the container,	1
stored in a static	1
stored in a register	3
stored in a thread	1
stored in a binary	1
stored in a global	1
stored in a far	1
stored in a register,	1
stored in an STL	1
stored in memory rather	1
stored in different parts	1
stored in different modules.	1
stored in one contiguous	1
stored in integer registers.	1
stored in static memory	1
stored in static memory.	2
stored in registers are	1
stored in registers (see	1
stored in registers instead	1
stored in stack memory	1
stored in memory. It	1
stored in memory. Example:	1
stored in binary form	1
stored in dynamically allocated	1
stored in x, and	1
stored in memory, at	1
stored in memory, but	1
stored in ASCII form.	1
stored in y. The	1
stored in edx. Furthermore,	1
stored are containers 93	1
stored can be important	1
stored by the heap	1
stored with each instance	1
stored on the stack	3
stored on the stack.	1
stored on the stack,	2
stored as the binary	1
stored as a register	1
stored as a single	1
stored as a biased	1
stored as it is,	1
stored as 8-bit integers	1
stored at a memory	3
stored at an address	2
stored at address [ecx+eax*4].	1
stored together in an	2
stored together The code	1
stored together if they	1
stored together Cache misses	1
stored together ...................................... 88	1
stored near each other	2
stored near each other.	2
stored (or if a	1
stored sequentially in memory.	1
stored consecutively in the	1
stored contiguously in the	1
stored together...................................... 88 9.4	1
called the branch target	1
called the branch misprediction	1
called the heap is	1
called a frame function,	1
called a leaf function.	1
called a loop-carried dependency	1
called and the local	1
called and how much	2
called and resources cleaned	1
called in the copying	1
called in a single	1
called in a typical	1
called for the first	1
called by the critical	1
called by the rest	1
called by F1 also	1
called with many different	1
called with IsPowerOf2 =	1
called on an object	1
called when the object	1
called when the original	1
called from the same	1
called from the shared	1
called from the message	1
called from a command	1
called from only one	1
called from many different	1
called from any other	1
called from programming languages	1
called from another module.	2
called from main, but	1
called only from same	2
called only from one	1
called only first time	1
called CPU dispatching. For	1
called performance monitor counters.	1
called faster than a	1
called before the function	1
called before the program	1
called before the first	1
called register renaming. The	1
called stack unwinding that	1
called stack unwinding. All	1
called function. Example: //	1
called function. But in	1
called through a function	1
called every time an	1
called shared objects (*.dll,	2
called name mangling. The	1
called core clock cycles.	1
called global variables. They	1
called global offset table	1
called whole program optimization,	1
called square blocking or	1
called garbage collection. Objects	1
called whenever an object	1
called near each other	1
called procedure linkage table	1
called once or multiple	1
called once. The reasons	1
called CodeAnalyst. These profilers	1
called before. This is	1
called accumulators. Current CPUs	1
called Single-Instruction-Multiple-Data (SIMD) operations.	1
called VTune; AMD's profiler	1
called properties) are always	1
called from), function parameters,	1
called "Gnu indirect function"	1
address is in edx,	1
address is not vacant	1
address is likely to	1
address is predicted if	1
address is taken, i.e.	1
address a = 10000,	1
address of the function	1
address of the data	1
address of the array	1
address of the variable	2
address of the member	1
address of the first	1
address of the matrix	1
address of the end	1
address of the preceding	1
address of the beginning	2
address of the current	1
address of a linked	1
address of it (&ArraySize)	1
address of an array	2
address of x is	1
address of each function	1
address of each row	1
address of array element	1
address of element number	1
address of list[i] is	1
address of matrix[j][0] is	1
address and shared between	1
address and back again.	1
address and attempts to	1
address in the procedure	1
address in this range	1
address that is divisible	2
address can be expressed	1
address can be predicted.	1
address by the formula:	1
address by adding a	1
address at which a	1
address which is divisible	1
address which can't be	1
address so a cache	1
address cannot be loaded	1
address calculations are done	1
address calculations have to	1
address through a function	1
address calculation and table	1
address calculation in 64	1
address calculation more efficient:	1
address calculation faster. The	1
address space of the	1
address divisible by the	1
address divisible by 8	1
address divisible by 16.	1
address divisible by 8.	2
address range from 0x2700	2
address below 2 GB,	1
address might clash with	1
address again before the	1
address is. ecx contains	1
address plus a constant	1
address 0x2710 and later	1
address 0x2710 will cause	2
address 0x2700 to 0x273F	1
address [ecx+eax*4]. This is	1
address esp+8 and esp+12	1
4 and AMD processors	1
4 in the best	1
4 = 32. This	1
4 = 2048 bytes	1
4 or 8, but	1
4 with different matrix	1
4 - 8 clock	1
4 - 16 clock	1
4 int 128 Is32vec4	1
4 double 8 8	1
4 pointer or reference,	1
4 + esp ;alignby4	1
4 float a[100]; float	1
4 64-bit integer, signed	1
4 clock cycles on	1
4 clock cycles. In	1
4 2 Choosing the	2
4 4 double 8	1
4 4 pointer or	1
4 4 64-bit integer,	1
4 4 bytes =	2
4 unsigned int 128	1
4 unsigned short int	1
4 unsigned 256 short	1
4 64 2 32	1
4 64 4 32	1
4 64 MMX int	1
4 32 4 64	1
4 short int 64	1
4 ; mangled function	1
4 bytes in 32-bit	1
4 bytes = int	2
4 bytes = float	4
4 bytes without cache	1
4 AVX _mm256_permutevar_ps 4	1
4 128 SSE2 long	1
4 128 SSE double	1
4 Most of the	1
4 256 AVX int	1
4 256 AVX2 float	1
4 AVX2 Table 12.3.	1
4 AVX2 _mm256_i32gather_epi32 unlimited	1
4 AVX2 _mm_i32gather_ps unlimited	1
4 AVX2 _mm256_i32gather_ps unlimited	1
4 computer where the	1
4 unused bytes in	1
4 unused bytes byte	1
4 lines in the	1
4 bytes. first //	1
4 bytes. first byte	2
4 processors, and 3	1
4 processor. Extra time	1
4 Performance and usability	2
4 computer. The measured	1
4 ways. This means	1
4 floats A structure	1
4 floats exp function	1
4 ways, with a	1
4 PUBLIC ?Func@@YAXQAHAAH@Z ?Func@@YAXQAHAAH@Z	2
4 rows. Let's look	1
4 ?Func2@@YAXQAHAAH@Z ENDP ecx,	1
4 (NetBurst) CPU is	1
See the compiler documentation	2
See the Intel C++	1
See the manual for	2
See the end of	1
See the examples in	1
See the preceding paragraph	1
See the discussion of	1
See the vectorclass manual	1
See page and 90	1
See page 16 for	1
See page 32 for	1
See page 128 below.	1
See page 3 for	1
See page 130 for	2
See page 120 for	1
See page 87 for	1
See page 122 for	2
See page 80 for	1
See page 90 for	1
See page 107 for	1
See page 103 for	1
See page 51 for	1
See page 43 for	1
See page 43 about	1
See page 88 for	1
See page 150 for	1
See page 26 about	1
See page 29 for	1
See page 31 for	1
See page 49 for	1
See page 93 for	1
See page 81 for	1
See page 89 for	2
See page 153 for	1
See page 145 and	1
See page 140 for	1
See page 141 for	1
See page 78 for	2
See page 131. Intel	1
See page 131. AMD	1
See page 52. The	1
See page 73 and	1
See page 26. The	1
See page 80. The	1
See page 95 and	1
See page 78. Assume	1
See page 141. Applications	1
See page 34. In	1
See page 54. It	1
See page 90. 15	1
See page 53. 7.24	1
See page 45. This	1
See page 140. Avoid	1
See page 61. It	1
See page 73. Runtime	1
See Intel Technology Journal	1
See manual 5: "Calling	1
See my blog for	1
See chapter 10 page	1
See www.agner.org/optimize/cppexamples.zip for examples	1
See www.agner.org/optimize/cppexamples.zip. If the	1
See ISO/IEC TR18015 Technical	1
See www.agner.org/optimize and the	1
See www.openmp.org and the	1
critical function is called.	1
critical function is inserted	1
critical function a =	1
critical function and you	1
critical function may be	1
critical function many times	1
critical function through function	1
critical function ten times	1
critical code to see	1
critical code in multiple	2
critical code are compiled	1
critical code so that	1
critical time consumers. Choose	1
critical when there is	1
critical because they can	1
critical functions and hot	1
critical functions take microseconds	1
critical functions inline or	1
critical integer parameter comes	1
critical code. A test	1
critical part of the	9
critical part of a	7
critical part can run	1
critical function. The initialization	1
critical function. The branching	1
critical function. In some	1
critical dependency chain which	1
critical dependency chain, especially	1
critical applications because the	1
critical parts of the	5
critical piece of code	1
critical innermost loop of	2
critical innermost loop should	1
critical innermost loop. The	1
critical innermost loop. log	1
critical innermost loops. 13.1	1
critical modules with a	1
critical resources. Modern CPUs	1
critical stride is a	2
critical stride is 8192	1
critical stride and cause	1
critical stride for the	1
critical stride can be	1
critical stride will contend	1
critical stride then this	1
critical stride (see above,	1
critical stride causes all	1
critical stride, as explained	1
critical stride. Variables whose	1
critical application- specific instructions	1
call the function billions	1
call the library function	1
call the library functions	1
call the version that	1
call the function. This	1
call the destructor of	1
call the destructor for	1
call the chosen version	1
call the polymorphic member	1
call the CPUID instruction	1
call the ReadTSC function.	1
call the std::unexpected() function	1
call is translated to	1
call a function in	1
call a virtual member	1
call a polymorphic function	1
call a polymorphic function.	1
call a non-virtual member	1
call of the critical	1
call to the function	1
call to the critical	1
call to the inlined	2
call to a const	1
call to a graphics	3
call to a driver	1
call to count how	1
call to square by	1
call to CriticalFunction in	1
call to memcpy rather	1
call to C1::f }	1
call to _endthread() cleans	1
call to Func1, while	1
call to Object1.Hello(), though	1
call and return and	1
call and return operations	1
call // Header file	1
call or any other	1
call it will point	1
call it from a	1
call it points to	1
call if it is	1
call by the body	1
call with a table	1
call this distance the	1
call from the main	1
call all code branches	1
call any other function	1
call any other function.	1
call so that you	1
call makes the microprocessor	1
call method using InstructionSet():	1
call stack in the	1
call inline void SelectAddMul(short	1
call statement always calls	1
call statement occupies a	1
call (e.g. GetProcessAffinityMask in	1
call polymorphic child function:	1
call transpose function swapd(a[r][c],	1
call method. When the	1
call _mm256_zeroupper() before calling	1
call _mm256_zeroupper() before leaving	2
call C1::f directly without	1
call WriteFile if the	1
call p->f() goes to	1
call (other than log)	1
call __intel_cpu_features_init_x(). In other	1
0; for (i =	1
0; for (int i	1
0; for (i=0; i<100;	1
0; // return 0	1
0; // Initialize loop	1
0; int i; for	2
0; int i, largest_index	1
0; x < 100;	2
0; } The InstructionSet()	1
0; } The indirect	1
0; } if (a	1
0; } else {	1
0; i < 100;	11
0; i < 2;	1
0; i < size;	11
0; i < n;	1
0; i < 256;	6
0; i < 1000;	1
0; i < 20;	2
0; i < rows;	2
0; i < NumberOfTests;	2
0; i < ArraySize;	1
0; i < list.Size();	1
0; while (seconds <	1
0; c < SIZE;	2
0; c < r;	2
0; r < SIZE;	2
0; row < NUMROWS;	1
0; j < columns;	1
0; column < NUMCOLUMNS;	1
0; c1 < r1;	1
0; 14.6 Floating point	1
0; list[i+1] = 1;	1
0; r1 < SIZE;	1
0; i--, x++) factorial	1
0; 35 This is	1
0; i--) *(p++) |=	1
8 and no induction	1
8 in order to	1
8 = 64 kb.	1
8 = 80. The	1
8 or 16 bits	1
8 or 16 Table	1
8 - 64 Kbytes	1
8 floating point). There	1
8 most popular version	1
8 pointer or reference,	1
8 + esp ;	1
8 float 4 4	1
8 * 4 =	1
8 clock cycles. Division	1
8 long double 8,	1
8 8 pointer or	1
8 8 float 4	1
8 8 long double	1
8 8 unsigned char	1
8 8 64 MMX	1
8 8 char 64	1
8 bit and 32	1
8 unsigned short int	1
8 unsigned char 64	1
8 64 4 unsigned	1
8 64 4 64	1
8 64 MMX short	1
8 rather than the	1
8 rather than by	1
8 16 unsigned char	1
8 16 128 SSE2	1
8 16 char 128	1
8 32 8 64	1
8 32 256 AVX2	1
8 32 char 256	1
8 bits each, eight	1
8 0 255 uint8_t	1
8 short int 128	1
8 bytes of storage	1
8 bytes in 64-bit	1
8 bytes = double	2
8 bytes = int64_t	2
8 bytes without cache	1
8 bytes smaller and	1
8 bytes each. The	1
8 128 SSE2 int	1
8 256 AVX double	1
8 256 AVX2 long	1
8 below. This manual	1
8 char 64 Is8vec8	1
8 AVX2 _mm_i64gather_pd unlimited	1
8 AVX2 _mm_i32gather_epi32 unlimited	1
8 AVX2 _mm_i64gather_epi32 unlimited	1
8 512 AVX512 float	1
8 512 AVX512 Table	1
8 #define FUNCNAME SelectAddMul_AVX2	1
8 columns unused. This	1
8 bytes. first //	1
8 bytes. first byte	1
8 edx, eax $B2$2	1
8 ways. The critical	1
8 -128 127 int8_t	1
8 2.5 Choice of	1
8 kb = 8192	1
8 kb size with	1
8 Optimizations in the	2
8 double's of 8	1
less be possible to	1
less than the time	3
less than the cache	1
less than a few	1
less than in a	1
less than 128 because	1
less than half speed	1
less than 2n and	1
less than 231. This	1
less than 1/50 of	1
less than 2-20, but	1
less than ARRAYSIZE. Another	1
less than 1% goes	1
less memory and computing	1
less each time. An	1
less efficient and you	1
less efficient in some	1
less efficient if the	1
less efficient code caching.	1
less efficient than the	1
less efficient than a	1
less efficient than signed	1
less efficient than accessing	1
less efficient than necessary.	1
less efficient than relocation,	1
less efficient than non-object	1
less efficient when the	1
less efficient because the	1
less efficient (see page	1
less so that it	1
less critical parts of	1
less user friendly. It	1
less useful in 32-	1
less important on most	1
less important than it	1
less advantageous to use	1
less likely to be	1
less optimal code because	1
less efficient. The size	1
less efficient. The performance	1
less efficient. In 64-bit	1
less efficient. In many	1
less efficient. There are	1
less efficient. You may	1
less efficient. Most C++	1
less efficient. Dynamic libraries	1
less efficient. Do not	1
less efficient. Access to	1
less efficient. Extra memory	1
less efficient. Splitting up	1
less clear and more	1
less efficiently if the	1
less efficiently when data	2
less popular at the	1
less strict when compiling	1
less computing resources than	1
less expensive. Using complicated	1
less optimized. Note that	1
less compact. See page	1
less intensive applications. Some	1
less safe. This safety	1
less favorable: Larger data	1
less efficiently. This method	1
less precise floating point	1
less reliable. Event-based sampling:	1
less susceptible to problems	1
less well-known languages. My	1
For this reason, you	1
For more on this	1
For example use #if	1
For Intel CPUs use	1
For example, the compiler	1
For example, the first	1
For example, the latest	1
For example, the Boost	1
For example, a =	1
For example, a compiler	1
For example, a loop	1
For example, a double	1
For example, a library	1
For example, a branch	1
For example, a programmer	1
For example, a 128-bit	1
For example, a heavy	1
For example, a Core	1
For example, a FIFO	1
For example, to test	1
For example, in the	2
For example, in a	1
For example, in Windows,	1
For example, in interpreted	1
For example, for (i=0;	1
For example, it may	2
For example, if the	2
For example, if a	3
For example, if you	1
For example, if each	1
For example, if multiple	1
For example, if we	1
For example, x =	2
For example, you may	1
For example, you get	1
For example, use AVX	1
For example, when a	1
For example, only one	1
For example, all good	1
For example, one tread	1
For example, compilers cannot	1
For example, many programmers	1
For example, some programmers	1
For example, #define ABC	1
For example, let's look	1
For example, b*2.0/3.0 will	1
For these reasons, the	1
For example: // Example	12
For my own research,	1
For unused returns //	1
For example,a * 16is	1
For team projects, it	1
For one-man projects, it	1
example, the compiler is	1
example, the compiler can	1
example, the size of	1
example, the first PC's	1
example, the template function	1
example, the sign bit	1
example, the conversion is	1
example, the latest version	1
example, the Boost collection	1
example, the DelayFiveSeconds function	1
example, a = b	1
example, a compiler may	1
example, a loop that	1
example, a double takes	1
example, a library of	1
example, a branch that	1
example, a programmer may	1
example, a 128-bit XMM	1
example, a heavy graphics	1
example, a Core i7	1
example, a FIFO queue	1
example, to test the	1
example, to go one	1
example, to convert float	1
example, in the case	1
example, in the expression	1
example, in a word	1
example, in Windows, you	1
example, in interpreted script	1
example, for (i=0; i<n;	1
example, that a is	1
example, it may be	1
example, it may take	1
example, if the number	1
example, if the clock	1
example, if a and	1
example, if a program	1
example, if a loop	1
example, if you want	1
example, if each bit	1
example, if multiple threads	1
example, if we want	1
example, x = *(p++)	1
example, x = array[i++]	1
example, you can double	1
example, you may want	1
example, you should multiply	1
example, you want to	1
example, you get four	1
example, this is not	1
example, use AVX only	1
example, when a pointer	1
example, then all five	1
example, only one of	1
example, which calculates the	1
example, all good compilers	1
example, but the point	1
example, one tread can	1
example, compilers cannot reduce	1
example, using Intel vector	1
example, using Agner vector	1
example, many programmers do	1
example, we are using	1
example, some programmers use	1
example, a, b and	1
example, #define ABC 123	1
example, vectorized with SSE4.1	1
example, let's look at	1
example, f(x) or g(x)	1
example, b*2.0/3.0 will be	1
bit is kept in	1
bit of a 32-bit	1
bit of x The	1
bit of x by	1
bit of i in	1
bit of i into	1
bit of i ;	1
bit of f is	1
bit of f cout	1
bit of ebx. The	1
bit of u.f We	1
bit to zero We	1
bit to compare absolute	1
bit to zero: //	1
bit and 32 bit	1
bit in the above	1
bit in Day for	1
bit in nn ifbit=1	1
bit are zero. Zero	1
bit can be saved	1
bit // u.d is	1
bit code 64 bit	1
bit code Static linking	1
bit at a time.	1
bit vector of two	1
bit vector of four	1
bit vector registers when	1
bit vector containing integers.	1
bit instruction set supports	1
bit which is 0	1
bit integer and double	1
bit integer vectors FMA3	1
bit float and double	1
bit float vectors SSE2	1
bit float vectors) /arch:SSE	1
bit version for the	1
bit so that the	1
bit systems have the	1
bit systems have several	1
bit operations and shift	1
bit must be saved	1
bit Windows and Mac	1
bit Linux The procedure	1
bit Linux Shared objects	1
bit }; The values	1
bit mode and mostly	1
bit mode if the	1
bit mode than in	1
bit mode SSE 128	1
bit platform not _WIN64	1
bit platform _WIN64 _LP64	1
bit platform __GNUC__ and	1
bit x86 instruction set	1
bit mode. The latter	1
bit mode. Some 64-bit	1
bit mode, where it	1
bit mode, we encounter	1
bit scan instruction is	1
bit scan instruction and	2
bit scan instructions. My	1
bit scan instruction. Programmers	1
bit systems: The number	1
bit systems: Pointers, references,	1
bit manipulation tricks Michael	1
bit -fno-builtin Gnu 32-bit	1
bit offsets). Example: //	1
bit indicates a specific	1
bit set). We can	1
operating systems and programs	1
operating systems and fourteen	1
operating systems and sixteen	1
operating systems that do	1
operating systems that allows	1
operating systems are not	2
operating systems are most	1
operating systems are using	1
operating systems are common,	1
operating systems can also	1
operating systems need better	1
operating systems available today.	1
operating systems give almost	1
operating systems Windows, Linux,	1
operating systems DOS and	1
operating systems lack the	1
operating systems disappears when	1
operating systems (but not	1
operating system is often	1
operating system is based	1
operating system to avoid	1
operating system to generate	1
operating system to swap	1
operating system and CPU	1
operating system and choose	1
operating system for support	1
operating system can be	2
operating system or libraries	1
operating system if the	1
operating system may not	1
operating system may have	1
operating system may supply	1
operating system this is	1
operating system has support	1
operating system functions (e.g.	1
operating system which redirects	1
operating system rather than	1
operating system (see page	1
operating system thread scheduler.	1
operating system All newer	1
operating system running in	1
operating system API and	1
operating system kernel in	1
operating system standards. Such	1
operating systems. The 64	1
operating systems. Some compilers	1
operating systems. 10 Gnu	1
operating systems. 3 The	1
operating systems, and API's.	1
operating systems, though these	1
operating system. The best	1
operating system. This is	1
operating system. It will	1
operating system. See page	2
operating system. AVX is	1
operating system, and therefore	1
operating system, and 512	1
operating system, not by	1
operating system, this requires	1
operating system, but you	1
operating systems". The parameters	1
operating systems". For this	1
operating systems". 7.16 Function	1
operating systems"). An application	1
operating system......................................................................................... 6 2.4	1
operating systems" for details	1
unsigned in order to	1
unsigned The same rules	1
unsigned for fast division	1
unsigned // Faster if	2
unsigned if you are	1
unsigned int in 16-bit	1
unsigned int or by	1
unsigned int one :	1
unsigned int before dividing	1
unsigned int 64 Is32vec2	1
unsigned int 16 0	1
unsigned int i; }	1
unsigned int i; const	1
unsigned int 128 Iu32vec4	1
unsigned int sign :	1
unsigned int sign :1;//signbit	2
unsigned int exponent :	3
unsigned int u; double	3
unsigned int fraction :	3
unsigned int n) {	1
unsigned int N> class	1
unsigned int dummy; double	1
unsigned int absvalue, largest_abs	1
unsigned int u[2]} a[size];	1
unsigned integer to a	1
unsigned integer and this	1
unsigned integer takes longer	1
unsigned integer type size_t	1
unsigned variable produces a	1
unsigned 2 2 int,	1
unsigned You can take	1
unsigned long int 64	1
unsigned long long or	1
unsigned long 32 0	1
unsigned 4 4 64-bit	1
unsigned 8 8 pointer	1
unsigned short int in	1
unsigned short int 64	1
unsigned short int 128	1
unsigned integers is ambiguous	1
unsigned integers is costless.	1
unsigned integers to floating	1
unsigned integers to signed	1
unsigned integers in comparisons,	1
unsigned integers - they	1
unsigned integers int a,	1
unsigned integers In most	1
unsigned integers (see page	1
unsigned integers simply makes	1
unsigned 1 1 short	1
unsigned 256 int int64_t	1
unsigned 256 short int	1
unsigned conversion // Example	1
unsigned char 8 0	1
unsigned char 64 Iu8vec8	1
unsigned char short int	1
unsigned char 128 Iu8vec16	1
unsigned variables. A positive	1
unsigned integers. But there	1
unsigned __int64 64-bit Linux:	1
unsigned Examples: // Example	1
first the runtime polymorphism:	1
first and foremost, in	1
first in a series	1
first in an ||	1
first // 4 unused	1
first // 4 bytes.	1
first // 6 unused	1
first time the function	2
first time int CriticalFunction_Dispatch(int	1
first time you activate	1
first time because it	1
first time Func is	1
first when you are	1
first data member or	1
first two integer parameters	1
first two (three on	1
first two suggested improvements).	1
first object to the	1
first way is to	1
first way and three	1
first call to the	1
first call // Header	1
first call it will	1
first call it points	1
first call method using	1
first time. This is	1
first processors that supported	2
first processors with the	1
first result is stored	1
first compiled to an	1
first element is stored	1
first element is stored?	1
first element of the	1
first 128 bytes then	1
first 128 bytes. 7.19	1
first four parameters are	1
first eight floating point	1
first eight elements in	1
first count is usually	1
first count and the	1
first program. An optimizing	1
first application if dynamic	1
first byte of zero	1
first byte of zero.	1
first byte at 0,	2
first byte at 8,	1
first byte at 12,	1
first byte at 400,	1
first look up the	1
first algorithm that comes	1
first operand of &&	1
first operand of ||	1
first operand determines whether	1
first convert the unsigned	1
first thing to do	1
first thing we notice	1
first generation of processors	1
first generation class (CGrandParent)	1
first call. The function	1
first six integer parameters	1
first manual. The subsequent	1
first PC's had an	1
first sum, then f	1
first sub-vector. A long	1
first dimension may preferably	1
register the object has	1
register is a small	1
register is 128 bits	1
register is volatile. The	1
register to zero that	1
register to temp even	1
register to hold the	1
register and prevents all	1
register for the class	1
register for more than	1
register for computing i/2+r.	1
register for both, while	1
register that appears in	1
register can be used	1
register can be organized	1
register if its address	1
register because their live	2
register which can be	1
register size is handled	1
register size in the	1
register size only when	1
register size comes only	1
register into the carry	1
register variable in example	1
register variable in eax.	1
register variables is eight	1
register variables is approximately	1
register variables in 32-bit	2
register variables are temporary	1
register variables because of	1
register less so that	1
register rather than on	1
register available for other	1
register stack is used.	1
register stack is organized.	1
register stack also has	1
register stack are: All	1
register stack versus XMM	1
register (see below) then	1
register allocation and parameter	1
register keyword is only	1
register keyword can be	1
register size. In other	1
register size. Vectorized code	1
register variables. This includes	1
register variables. Vector operations	1
register variables. 9.5 Alignment	1
register temp in one	1
register variable. The register	1
register variable. The union	1
register stack. These registers	1
register containing (2,2,2,2), and	1
register sizes to 1024	1
register temp; for (i	1
register except in the	1
register storage. The same	1
register storage. Live range	1
register variables, but will	1
register parameters. In 64-bit	1
register renaming and doing	1
register use, as explained	1
register left for transferring	1
register usage convention says	1
register renaming. The CPU	1
register keyword. The CodeGear	1
register state. This penalty	1
64 and IA-32 Architectures	1
64 or 0x40 bytes	1
64 If you make	1
64 2 32 8	1
64 2 128 SSE2	2
64 2 int64_t 128	1
64 2 uint64_t 128	1
64 4 unsigned 256	1
64 4 64 4	1
64 4 32 4	1
64 4 256 AVX	1
64 4 256 AVX2	1
64 8 512 AVX512	2
64 bit code Static	1
64 bit instruction set	1
64 bit systems have	2
64 bit Windows and	1
64 bit Linux The	1
64 bit mode if	1
64 bit mode than	1
64 bit platform _WIN64	1
64 bit mode. The	1
64 bit mode, we	1
64 bit -fno-builtin Gnu	1
64 64 32 16.4	1
64 64 matrix on	1
64 64 matrix size	1
64 64 14.0 80.8	1
64 32 16.4 65	1
64 bits in 64-bit	1
64 bits are less	1
64 bits rather than	1
64 bits total size,	1
64 bits wide, should	1
64 bits each. The	1
64 bits (MMX), 128	1
64 0 264-1 uint64_t	1
64 bytes on contemporary	1
64 matrix on a	1
64 matrix size causes	1
64 1 64 MMX	1
64 1 int64_t 64	1
64 consecutive bytes of	1
64 bytes. This makes	1
64 bytes. Each line	1
64 bits. The vector	1
64 bits. This is	1
64 MMX int 32	1
64 MMX long long	1
64 MMX short int	1
64 MMX char 8	1
64 bits, but 32-bit	1
64 Kbytes and a	1
64 Iu32vec2 64 1	1
64 -263 263-1 int64_t	1
64 14.0 80.8 65	1
64 Iu8vec8 16 4	1
64 kbytes. This is	1
64 Is32vec2 32 64	1
64 Is8vec8 8 8	1
64 Is16vec4 16 4	1
64 kb. This corresponds	1
64 Iu16vec4 32 2	1
64 I64vec1 8 16	1
take the same time	2
take the integer factorial	1
take the elements from	1
take the absolute value	1
take the hint, but	1
take a long time	2
take a lot of	2
take a whole workday	1
take more than a	2
take more than an	1
take more time to	2
take more time than	2
take more resources than	1
take memory space where	1
take only one clock	2
take only 256 clock	1
take only 5 μs	1
take no more time	1
take no extra time	1
take no extra time.	1
take most time. Uses	1
take into account that	1
take into account when	1
take any extra time.	1
take branch prediction into	1
take up to 4	1
take up cache space	1
take up cache space.	1
take extra precautions to	1
take much more resources	1
take several seconds to	1
take several years before	1
take several minutes to	1
take advantage of this	3
take advantage of vector	1
take advantage of 64-bit	2
take advantage of these	1
take advantage of out-of-order	1
take quite a long	2
take longer time than	1
take longer time. It	2
take longer time. Integer	1
take 10 clock cycles	1
take installation time and	1
take special precautions for	1
take maximum advantage of	1
take 3 - 5	1
take approximately 500 clock	1
take care of the	1
take care of all	1
take care of some	1
take care of communication	1
take 1000 * 100	1
take microseconds to execute	1
take precedence, not only	1
often the case in	1
often a part of	1
often a lot to	1
often a disadvantage for	1
often be optimized by	1
often be made smaller	1
often be C or	1
often be executed faster	1
often as a result	1
often an obstacle to	1
often have execution units,	1
often have exploited. A	1
often use position-independent code	1
often more efficient to	1
often more reliable than	1
often because the block	1
often used for calculating	1
often used by default	1
often used as buffers	1
often used data members	1
often used functions separate	1
often used variables in	1
often used members in	1
often possible to make	1
often possible to insert	1
often takes no extra	1
often takes much more	1
often faster to use	1
often faster than the	1
often take several years	1
often useful to put	1
often necessary to do	1
often necessary to check	1
often much more than	1
often implemented as a	1
often contains a lot	1
often contains writeable data.	1
often write expressions that	1
often optimize the code	1
often replace integer multiplication	1
often requires that all	1
often gives more reliable	1
often inlined automatically by	1
often true last in	1
often fail to keep	1
often easier to use	1
often easier said than	1
often happen that a	1
often inefficient. Objects of	1
often determined by considerations	1
often waiting for each	1
often belong to one	1
often preferable to make	1
often inserts built-in code	1
often suffer from poor	1
often conflicting with the	1
often reveal things that	1
often mispredicted. A branch	1
often underestimate this time	1
often reorganized in such	1
often seen, is certainly	1
often abusing the update	1
often fluctuating and it	1
often excessively so. These	1
often unreliable. They sometimes	1
often disturb the users	1
rather than the variable	1
rather than the complicated	1
rather than the parts	1
rather than the throughput	1
rather than the equivalent	1
rather than the product	1
rather than the external	1
rather than the heap.	1
rather than a function	2
rather than a small	1
rather than a hardware	1
rather than a dedicated	1
rather than in a	2
rather than in memory.	1
rather than by the	3
rather than by pointers	1
rather than by 16.	1
rather than by individual	1
rather than on the	5
rather than as b*(2.0/3.0)	1
rather than at runtime	1
rather than at runtime.	1
rather than CPU time.	1
rather than each time	2
rather than using a	1
rather than double if	1
rather than two 32-bit	1
rather than pointers are:	1
rather than 32 bits.	1
rather than dynamic linking	1
rather than type casting	1
rather than making a	1
rather than its brand,	1
rather than processor features.	1
rather than Boolean expressions.	1
rather than references are:	1
rather than reading or	1
rather than future processors.	1
rather than seconds or	1
rather than two. Some	1
rather than moving each	1
rather than allocating more	1
rather than allocating piecewise	1
rather than "what works	1
rather than generating denormal	1
rather than rounding. This	1
rather than loops, etc.	1
rather than 1.23456. The	1
rather than sequences of	1
rather than 20. The	1
rather than nine, even	1
rather than 200. Next,	1
rather than -156. Surprisingly,	1
rather than isolating a	1
rather than self-styled hacks	1
rather unconventional manner by	1
optimization is to save	1
optimization is to join	1
optimization is needed. The	1
optimization is enabled. A	1
optimization is requested. See	1
optimization of C++ and	3
optimization of performance has	1
optimization are discussed below.	1
optimization can sometimes be	1
optimization or for combining	1
optimization it may be	1
optimization by compiler There	1
optimization by compiler .......................................................................	1
optimization by CPU Modern	1
optimization by executing instructions	1
optimization by CPU.............................................................................81 8.5	1
optimization than to use	1
optimization more difficult. On	1
optimization cannot be used	1
optimization instructions at specific	1
optimization Some compilers have	1
optimization option available. Some	1
optimization unless the function	1
optimization Integer algebra reductions:	1
optimization automatically in simple	1
optimization methods and algebraic	1
optimization options and the	1
optimization options that you	1
optimization options are incompatible	1
optimization options All C++	1
optimization options turned on,	2
optimization options turned on.	1
optimization options ................................................................................... 81	1
optimization features of Intel	1
optimization features and for	1
optimization manuals are used	1
optimization capabilities for 32-bit	1
optimization effort is concentrated	2
optimization effort on that	1
optimization manuals. I am	1
optimization MS compiler Windows	2
optimization options. Supports parallel	1
optimization are. Dynamic memory	1
optimization guide for assembly	1
optimization guide for x86	1
optimization guide for Windows,	2
optimization Intel: "Intel 64	1
optimization explicitly. Divisions can	1
optimization Whole program optimization	1
optimization topics ......................................................................................... 132	1
optimization topics 14.1 Use	1
optimization report /Qopt-report -opt-report	1
optimization issue. But it	1
optimization efforts on the	1
optimization /GL --combine -fwhole-	1
optimization hints as pragmas	1
optimization /Og Whole program	1
optimization job. You have	1
libraries is more difficult.	1
libraries of predefined vector	1
libraries and short vector	1
libraries and see which	1
libraries and drivers differ	1
libraries and compiler-generated code	1
libraries and frameworks, rather	1
libraries in this format.	1
libraries for many of	1
libraries for many common	1
libraries for many standard	1
libraries for special purposes	1
libraries for computing mathematical	1
libraries that are used	1
libraries that are intended	1
libraries that come with	1
libraries are not always	1
libraries are not well	1
libraries are not fully	1
libraries are used with	1
libraries are also available,	1
libraries are less efficient	1
libraries are useful for	1
libraries are available in	1
libraries are loaded at	1
libraries are loaded into	1
libraries are discussed below.	1
libraries are highly optimized	1
libraries are highly optimized,	1
libraries can be implemented	2
libraries or shared objects),	1
libraries it is never	1
libraries with internal multi-threading,	1
libraries have the best	1
libraries have CPU dispatching	1
libraries have very good	1
libraries have features for	1
libraries use dynamic memory	1
libraries when running on	1
libraries It is not	1
libraries do not use	1
libraries do not always	1
libraries where only few	1
libraries need to be	1
libraries without the need	1
libraries available use excessive	1
libraries Some applications spend	1
libraries Function libraries can	1
libraries support 32-bit and	1
libraries available. The most	1
libraries included with the	1
libraries distributed as object	1
libraries slower than static	1
libraries Test Processor memcpy	1
libraries (*.dll or *.so)	1
libraries named MKL, VML	1
libraries (*.lib, *.a) or	2
libraries contend for the	1
libraries 113 Number of	1
libraries (.dll or .so).	1
libraries (.lib or .a),	1
libraries published by Intel	1
how the if branch	1
how the microprocessor handles	1
how the development process	1
how a cache is	1
how a piece of	1
how to use the	2
how to use induction	1
how to use SafeArray:	1
how to make the	1
how to make a	2
how to make this	1
how to make different	1
how to make aligned	1
how to do the	1
how to do this.	1
how to take advantage	1
how to test a	1
how to test for	1
how to avoid dynamic	1
how to avoid them.	1
how to avoid hard-to-find	1
how to speed up	1
how to check for	1
how to store strings	1
how to align dynamically	1
how to align arrays.	1
how to implement the	1
how to break a	1
how to identify and	1
how to overcome the	1
how to overcome this	1
how to overcome these	1
how to recover in	1
how you can use	1
how you can make	1
how this can be	1
how this works and	1
how this works, here's	1
how compilers and microprocessors	1
how compilers work. The	1
how efficient the calculation	1
how many times the	1
how many times an	1
how many times each	2
how variables are stored.	1
how long time it	1
how often a part	1
how they are declared	1
how big a structure	1
how much time it	2
how much time each	1
how much memory a	1
how advantageous vectorization is.	1
how well the compiler	1
how well the microprocessor	1
how well it optimizes	1
how metaprogramming can be	1
how predictable the branch	1
how caches work can	1
how tortuous and convoluted	1
code. The library has	1
code. The best function	1
code. The name "position-independent	1
code. The reason for	1
code. The second way	1
code. The bigger vectors	1
code. The main focus	1
code. The 128-bit XMM	1
code. The third thing	1
code. The history of	1
code. // Example 8.26a	1
code. This is not	1
code. This can be	1
code. This can lead	1
code. This framework typically	1
code. A test setup	1
code. It is more	1
code. It is also	1
code. It is therefore	1
code. It is simply	1
code. If the number	1
code. If the latter	1
code. If you do	1
code. If you consider	1
code. In this chapter,	1
code. In general, there	1
code. There are two	1
code. You can assume	1
code. See ISO/IEC TR18015	1
code. For example, in	1
code. For example, many	1
code. For my own	1
code. Example: // Example	4
code. Some profilers require	1
code. An interrupt service	1
code. But many programs	1
code. These workaround methods	1
code. All addresses in	1
code. However, we still	1
code. Most implementations of	1
code. Each compiler does	1
code. Many of these	1
code. Dynamic memory allocation	1
code. Dynamic cast The	1
code. #if is more	1
code. Register ebx is	1
code. Intrinsic functions are	1
code. System code should	1
code. Compilers and IDE's	1
code. Furthermore, most C++	1
code. Metaprogramming can be	1
code. Let's look at	1
code. Storing something in	1
code. Sometimes the compiler	1
code. C#, managed C++,	1
code. Let me explain	1
code. 7.32 Preprocessing directives	1
code. Inserting your own	1
code. Compiled languages include	1
code. 147 14.12 Position-independent	1
code. (Compile without the	1
time. The function library	1
time. The code in	1
time. The code cache	1
time. The time it	1
time. The program uses	1
time. The objects are	1
time. The expression a	1
time. The storage of	1
time. The delay is	1
time. // Example 15.1a.	1
time. This is a	1
time. This is because	1
time. This is faster	1
time. This is called	1
time. A code that	1
time. A loop counter	1
time. A variable number	1
time. A template instance	1
time. A user interface	1
time. A part of	1
time. A simple way	1
time. A for-loop or	1
time. It is more	1
time. It is possible	1
time. It is faster	1
time. It can therefore	1
time. It simply stores	1
time. There are intrinsic	1
time. There are three	1
time. You can avoid	1
time. You may mirror	1
time. 4 2 Choosing	1
time. 4 Performance and	1
time. For example, all	1
time. For example: //	1
time. Example: // Example	1
time. Some compilers are	1
time. An experiment where	1
time. But this solution	1
time. These conversions can	1
time. Integer multiplication takes	1
time. Integer division by	1
time. Therefore, both the	1
time. Each code version	1
time. Loop unrolling In	1
time. No memory will	1
time. No universal solution	1
time. Do not read	1
time. Optimizing less critical	1
time. Another disadvantage of	1
time. Other programs use	1
time. Shared objects in	1
time. Templates make the	1
time. Dispatch on first	1
time. Are objects accessed	1
time. Text strings and	1
time. Single precision division,	1
time. Interpreted languages are	1
time. Four typical uses	1
time. (Of course there	1
time. (Examples can be	1
time. Uses debug version	1
time. Newer processors are	1
template is a class	1
template is calling itself	1
template is similar to	1
template to get x	1
template for x to	1
template function is faster	1
template function for each	1
template with many instances	1
template has only one	1
template because partial template	1
template class is more	1
template class is declared	1
template class can be	1
template class which gets	1
template library (STL) is	1
template library (STL) if	1
template rather than a	1
template template <typename T>	1
template parameters are always	1
template parameters are replaced	1
template parameters are exactly	1
template parameters then the	1
template parameters differ then	1
template parameter is always	1
template parameter can also	1
template parameter should be	1
template parameter rather than	1
template feature was never	1
template function, m is	1
template instance has its	1
template metaprogramming is the	1
template metaprogramming // Template	1
template metaprogramming so complicated?	1
template metaprogramming is. //	1
template parameter. The order	1
template parameter. It can	1
template parameter. If MultiplyBy	1
template parameter. In other	1
template parameter. There is	1
template parameter. No time	1
template parameter. Templates may	1
template parameters. A template	1
template instances will be	1
template method. 7.29 Threads	1
template specialization is allowed	1
template specialization for N	3
template parameters, as example	1
template <int N> class	1
template <int N> static	1
template <int m> int	1
template metaprogramming. Don't panic	1
template metaprogramming, but this	1
template metaprogramming, loops are	1
template <typename T, unsigned	1
template <typename T> static	1
template <typename MyChild> class	1
template parameter: // Example	1
template parameter: template <typename	1
template specialization. This is	1
template specialization, not with	1
template <bool IsPowerOf2, int	1
registers is a scarce	1
registers is very limited.	1
registers is doubled. This	1
registers is extended to	1
registers is limited. Example:	1
registers to test 16	1
registers and correspondingly two	1
registers in the CPU.	1
registers in 64-bit systems.	2
registers The first processors	1
registers The 128-bit XMM	1
registers for the same	1
registers for floating point	1
registers that have to	1
registers are available in	2
registers are available if	1
registers are accessed very	1
registers are supported by	1
registers are used. a	1
registers are used. See	2
registers are used. Do	1
registers are used. Conversions	1
registers are used, there	1
registers are used, while	1
registers are extended to	1
registers can hold e.g.	1
registers can benefit from	1
registers by default in	1
registers by 64, but	1
registers have long double	1
registers when compiling for	1
registers then the pointer	1
registers has been increased	1
registers has been doubled.	1
registers only in the	1
registers rather than in	1
registers rather than on	4
registers available in 32-bit	1
registers available for general	1
registers (see page 105).	1
registers (see page 27).	1
registers used. Conversion of	1
registers instead of main	1
registers are: It is	1
registers organized as a	1
registers had in fact	1
registers eax, ecx and	1
registers anyway. Pure function.	1
registers named YMM in	1
registers ................................................................. 107 12.2	1
registers (6 integer and	1
registers (8 float or	1
registers .......................................................... 107 12.3	1
registers (XMM or YMM)	1
need the next element.	1
need the updates if	1
need the 'this' pointer.	1
need the "override" feature.	1
need a CPU with	1
need a smart pointer.	1
need a 'this' pointer.	1
need a constructor. A	1
need to be initialized	1
need to be converted	1
need to be distributed	1
need to be cleaned	2
need to be deleted.	1
need to be resized	1
need to use a	1
need to use assembly	1
need to do searches	1
need to call a	1
need to take branch	1
need to take special	1
need to test on	1
need to check if	1
need to store intermediate	1
need to load more	1
need to link with	1
need to divide the	1
need to update the	1
need to remove all	1
need to break down	1
need to split up	1
need to lock a	1
need to organize data	1
need to deallocate the	1
need for the first	1
need for special position-independent	1
need for garbage collection.	1
need not be passed	1
need an error message	1
need only read this	1
need any non-static access.	1
need any patch. 131	1
need extra overhead to	1
need assembly code to	1
need assembly language. C++	1
need separate storage. No	1
need induction variables to	1
need better support for	1
need better backup features,	1
need conversions between integers	1
need it. In C++	1
need initialization. A copy	1
need modification to compensate	1
need modification if implemented	1
need updating in the	1
need metaprogramming. The next	1
need metaprogramming. None of	1
need relocation. All public	1
need relocation, but only	1
need relocation at load	1
pointers is to make	1
pointers of different types	2
pointers to the different	1
pointers to the same	1
pointers to data in	1
pointers to data through	1
pointers to different dynamically	1
pointers to all allocated	1
pointers to its variables	1
pointers to its functions,	1
pointers to zero whenever	1
pointers to zero, by	1
pointers to objects) are	1
pointers and the texts	1
pointers and for information	1
pointers and virtual functions	1
pointers and addresses in	1
pointers and references in	1
pointers and references. Most	1
pointers and references. Arrays	1
pointers and references, which	1
pointers and non-constant references	1
pointers in one way	1
pointers that are impossible	1
pointers are used only	1
pointers are auto_ptr and	1
pointers are implemented. Use	1
pointers are type-casted to	1
pointers can be useful	1
pointers can be avoided	1
pointers or addresses that	1
pointers or references then	1
pointers or references. It	1
pointers or references: If	1
pointers if it has	1
pointers if there are	2
pointers may be replaced	1
pointers may not work	1
pointers A smart pointer	1
pointers It is rarely	1
pointers because in most	1
pointers because it cannot	1
pointers because this method	1
pointers do not alias,	1
pointers In simple cases,	1
pointers so that the	1
pointers makes it more	1
pointers less efficient. Most	1
pointers rather than references	1
pointers unless they are	1
pointers requires a division,	1
pointers requires only an	1
pointers are: The syntax	1
pointers efficient, and that's	1
pointers ...................................................................................................... 37 7.8	1
pointers Calling a function	1
pointers .......................................................................................................... 38 7.10	1
pointers /vms Fastcall functions	1
test the different versions	1
test the performance under	1
test the sign of	1
test the response time	1
test a software module	1
test and setting the	1
test in the test	1
test for the availability	1
test that measures the	1
test // Time difference	1
test // Critical function	1
test // (time after)	1
test // Repeat NumberOfTests	1
test or manipulate all	1
test on several different	1
test this is to	1
test when software uses	1
test data and measure	1
test data should contain	1
test data instead of	1
test program is likely	1
test program that can	1
test program that calls	1
test program itself and	1
test because the total	1
test all branches for	1
test but also the	1
test should be performed	1
test should preferably be	1
test should include not	1
test each function or	1
test 16 bytes at	1
test bits 0 -	1
test several different algorithms	1
test run with a	1
test sign bit //	1
test their functionality. This	1
test data. The test	1
test data. That being	1
test feature into the	1
test feature called performance	1
test loop. The time	1
test purposes. The const	1
test purposes. If the	1
test situations to avoid	1
test tool for using	1
test tool for details	1
test tool can be	1
test tool can set	1
test tool supports both	1
test () { C1	1
test () { CChild1	1
test () { __declspec(__align(64))	1
test server. Use large	1
test examples. The table	1
test examples. You cannot	1
test setup may look	1
test setup but slow	1
test theory. Advice on	1
test finishes in a	1
new and return a	1
new and better processor	1
new and delete is	1
new and delete to	1
new and delete or	2
new and delete (or	1
new and delete, and	1
new and delete, or	1
new or malloc is	1
new or malloc. Handles	1
new or malloc) is	1
new compiler which is	1
new memory block every	2
new vector size often	1
new instruction set opens	1
new cache line in	1
new floating point addition	1
new object is not	1
new object of a	1
new version of the	1
new version for marketing	1
new version without the	1
new version causes problem	1
new value of i	1
new value of temp	1
new objects can be	1
new software project, it	1
new branch of code	1
new branch only when	1
new register size only	1
new register size comes	1
new instructions to the	1
new instructions can make	1
new function. The stack	1
new versions of their	1
new processor enters the	1
new element in the	1
new model comes on	1
new addition before the	1
new bigger memory block	2
new bigger memory block.	1
new relevant information. 1.1	1
new instance of the	2
new generation of CPUs	1
new features to each	1
new block. Any pointers	1
new update or even	1
new one. The existing	1
new one. I have	1
new physical register to	1
new features. User feedback	1
new features. Take user	1
new context. It is	1
new today will be	1
new insight can lead	1
systems and a 64-bit	1
systems and in 32-bit	1
systems and 8 bytes	1
systems and 64 bits	1
systems and programs compiled	1
systems and fourteen in	1
systems and fourteen integer	1
systems and sixteen in	2
systems that have floating	1
systems that do not	1
systems that allows bigger	1
systems are not always	1
systems are not backwards	1
systems are most efficient	1
systems are using the	1
systems are common, and	1
systems can also be	1
systems can improve the	1
systems or 64-bit integers	1
systems if the program	1
systems by using a	1
systems with only one	1
systems with multiple CPU	1
systems with big-endian storage.	2
systems than it is	1
systems may have big	1
systems you have to	1
systems have the following	1
systems have a graphics	1
systems have several advantages	1
systems use position-independent code	1
systems use segmentation of	1
systems when the SSE2	1
systems will dominate in	1
systems because of the	1
systems should be tested	1
systems do not have	1
systems also have a	2
systems we can use	1
systems often use position-independent	1
systems need better support	1
systems available today. You	1
systems unless the SSE2	1
systems give almost identical	1
systems Windows, Linux, Mac	1
systems gives rise to	1
systems allow you to	1
systems allow up to	1
systems allow lazy binding	1
systems normally use the	1
systems DOS and Windows	1
systems lack the necessary	1
systems ............................................................................. 158 18	1
systems disappears when running	1
systems Microcontrollers used in	1
systems (but not in	1
user is likely to	1
user is far from	1
user is waiting for	1
user to turn off	1
user to restart the	1
user and a waste	1
user and prevent legitimate	1
user can see the	1
user if such a	1
user may not need	1
user will be unable	1
user will have an	1
user has a virus	1
user has to turn	1
user has to reinstall	1
user but only show	1
user access rights. Software	1
user must install a	1
user never uses the	1
user data. A database	1
user actually has to	1
user interface is not	1
user interface is obtained	1
user interface and use	1
user interface and other	1
user interface can use	1
user interface than on	1
user interface library for	1
user interface library can	1
user interface library may	1
user interface elements that	1
user interface framework must	1
user interface framework Most	1
user interface etc., can	1
user interface framework........................................................................... 14	1
user interface (OnIdle in	1
user might experience unacceptably	1
user input in order	1
user input or network	1
user input or reading	1
user input never exceeds	1
user who has to	1
user gets the latest	1
user input. The time	1
user input. Many programs	1
user input. (In Windows	1
user interface. A console	1
user interface. It is	1
user interface. Applications that	1
user interface. Otherwise the	1
user interfaces and interfaces	1
user interfaces from scratch.	1
user feedback seriously. User	1
user expects an immediate	1
user expects immediate responses	1
user settings are lost.	1
user friendly compiler with	1
user interface, another thread	1
user friendly. It is	1
these and handle text	1
these are hardly relevant	1
these are incompatible with	1
these time consuming updates	1
these functions is higher	1
these functions are missing	1
these functions have no	1
these instruction sets. The	1
these instruction sets. Most	1
these cache lines belong	1
these integer operations do	1
these example containers in	1
these compilers that a	1
these compilers can be	1
these two functions are	1
these two versions and	1
these two values is	1
these two gives the	1
these also treat non-Intel	1
these variables to zero	1
these table lookup operations	1
these elements with column	1
these address calculations are	1
these operating systems can	1
these libraries have very	1
these operations are very	1
these instructions require that	1
these eight elements will	1
these addresses to function	1
these problems is quite	1
these problems are usability	1
these methods to improve	1
these methods are time	1
these methods are based	1
these methods then the	1
these examples are optimized	1
these examples we are	1
these data. It is	1
these types to integers	1
these directives are compiler-specific.	1
these directives do not	1
these languages have the	1
these variables. The negative	1
these conditions is not	1
these calculations. Division of	1
these classes. Size of	1
these purposes. This memory	1
these purposes. Unfortunately, the	1
these instructions. Function Assembly	1
these problems. More details	1
these disadvantages when C++	1
these manuals are always	1
these manuals can be	1
these guidelines by using	1
these obstacles and to	1
these methods. If you	1
these reasons, the preferred	1
these considerations. It is	1
these categories: File input/output	1
they are in fact	2
they are not necessary	1
they are not able	1
they are used in	1
they are no longer	1
they are often mispredicted.	1
they are sure to	2
they are integers or	1
they are used. It	1
they are used. Example:	1
they are used. Such	1
they are members of	1
they are never used	1
they are declared in	1
they are declared whenever	1
they are predicted most	1
they are executed. However,	1
they are equally efficient.	1
they are resolved before	1
they are available, i.e.	1
they are deallocated when	1
they are needed, or	1
they are running. Such	1
they are guaranteed to	1
they are long. This	1
they are disabled will	1
they are uninitialized or	1
they are created. Far	1
they are wrapped into	1
they are unavoidable. It	1
they are uninitialized, if	1
they can be signed	1
they can block the	1
they may be swapped	1
they have put the	1
they point to are	1
they point to become	1
they do not use	1
they cannot be mixed	1
they cannot be ruled	1
they cannot use the	1
they cannot make algebraic	1
they cannot do. All	1
they always keep up	1
they always evaluate both	1
they must be inside	1
they don't need any	1
they were able to	1
they fail to eliminate	1
they come from operators	1
they waste a lot	1
they contain is provided	1
they appear in the	2
they are. However, there	1
they are. Declare the	1
they otherwise would be	1
without the static keyword:	1
without the register keyword.	1
without the need to	3
without the SSE2 instruction	1
without the sign bit.	1
without the risk of	1
without the -fpic option.	1
without the Common Language	1
without the FMA4 instruction	1
without an operating system	1
without an IDE. Free	1
without CPU dispatching. Test	1
without cache MOVNTQ _mm_stream_pi	1
without cache MOVNTDQ _mm_stream_si128	1
without cache MOVNTPD _mm_stream_pd	1
without cache MOVNTPS _mm_stream_ps	1
without cache MOVNTI _mm_stream_si32	1
without using the virtual	1
without using the normal	1
without using exceptions is	1
without using exceptions. The	1
without any of these	1
without any option that	1
without any cost in	1
without SSE2 typically takes	1
without dynamic memory allocation.	1
without AVX using CPU	1
without AVX support then	1
without AVX support. There	1
without information about function	1
without problems if the	1
without caching is advantageous	1
without position-independent code when	1
without checking all the	1
without adding any extra	1
without loading a cache	2
without help of the	1
without -fpic is much	1
without -fpic in 32-bit	1
without -fpic in 64	1
without -fpic because the	1
without polymorphism or with	1
without specifying the size.	1
without reducing the performance	1
without invoking the overhead	1
without generating overflow. Likewise,	1
without AVX, as explained	1
without worrying too much	1
without restrictions. A GNU	1
without effectively preventing illegitimate	1
without jeopardizing safety, you	1
without taking cache effects	1
without paying the performance	1
without returning. F1 is	1
without discriminating between CPU	1
useful to make the	1
useful to make a	1
useful to copy the	1
useful to put file	1
useful to put time-consuming	1
useful to know how	1
useful to turn off	1
useful to roll out	1
useful to study the	1
useful to isolate the	1
useful in the situation	1
useful in some cases,	1
useful in test situations	1
useful in compiled languages	1
useful in programs with	1
useful in situations where	2
useful in situations like	1
useful in 32- bit	1
useful for the programmer	1
useful for library functions.	1
useful for many different	1
useful for making data	1
useful for making plug-ins	1
useful for large libraries	1
useful for copy constructors	1
useful for optimizing code,	1
useful for Boolean vector	1
useful for calling from	1
useful for checking how	1
useful for testing multiple	1
useful for finding the	2
useful for finding problems	1
useful for random number	1
useful for supporting multiple	1
useful for preventing program	1
useful for assigning different	1
useful for investigating performance	1
useful for vectorizing mathematical	1
useful for identifying hot	1
useful if the library	1
useful if the subexpression	1
useful on servers that	1
useful when the number	1
useful when the amount	1
useful when doing calculations	1
useful when testing which	1
useful because it gives	1
useful performance monitor counter	1
useful way of making	1
useful way to keep	1
useful methods for exploiting	1
useful mathematical functions. A	1
useful source of such	1
useful whenever a function	1
useful discussions about code	1
even the same level-1	1
even the smallest list	1
even a single constant	1
even a linear search,	1
even a thousand times	1
even of functions that	1
even in the most	1
even for double precision.	1
even for simple tasks.	1
even for arrays bigger	1
even for programs implemented	1
even be a million	1
even be used on	1
even if the program	1
even if the CPU	1
even if the variable	1
even if the user	1
even if the processor	1
even if the dispatched	1
even if a and	1
even if no exception	1
even if they are	1
even if they otherwise	1
even if a, b,	1
even on such small	1
even have a false	1
even have an operating	1
even more important to	1
even more powerful solution	1
even when the function	1
even when it is	1
even when it has	1
even when it would	1
even when accessed from	1
even when shared objects	1
even when their live	1
even when just a	1
even integer is returned.	1
even faster to make	1
even faster way to	1
even without the register	1
even add dummy elements	1
even smaller by declaring	1
even compatible with different	1
even though the logical	1
even though the latter	1
even though the rules	1
even though the CPU-type	1
even though it is	1
even though it could	1
even allocate more memory	1
even swapped to disk.	1
even worse, it can	1
even temporarily. This is	1
even telling the user	1
even matters, which few	1
even worse kind of	1
sure the code has	1
sure the compiler recognizes	1
sure the object is	1
sure the value of	1
sure the variable is	1
sure the file is	1
sure the arrays are	2
sure the result is	1
sure the information is	1
sure the startup code	1
sure to be loaded	1
sure to have the	1
sure to make a	1
sure to point to	1
sure to work on	1
sure to produce the	1
sure to distinguish these	1
sure that the code	1
sure that the compiler	1
sure that the CPU	1
sure that the most	1
sure that the pointer	1
sure that the table	1
sure that the elements	1
sure that the response	1
sure that the beginning	1
sure that the declaration	1
sure that the original	1
sure that a value	1
sure that a variable	1
sure that it will	1
sure that functions which	1
sure that all destructors	2
sure that one function	1
sure that no object	1
sure that no variable	1
sure that no overflow	1
sure that variables that	1
sure that they always	1
sure that they are.	1
sure that overflow never	1
sure that certain calculations	1
sure that everything that	1
sure it is only	1
sure it is initialized	1
sure it works well	1
sure not to mix	1
sure you are using	1
sure you need it.	1
sure you know what	1
sure its size is	1
sure allocated resources are	1
sure whether the arrays	1
sure everything that is	1
method is to wrap	1
method is that the	1
method is faster if	1
method is faster because	1
method is useful for	2
method is useful if	1
method is explained on	1
method is advantageous if	1
method is likely to	1
method is described in	1
method is described below.	1
method is fastest on	1
method is inefficient, however,	1
method is illustrated in	1
method is extremely complicated	1
method is somewhat more	1
method is safer. Type	1
method of doing floating	2
method of induction variables	1
method of bounds checking	1
method of storing data	1
method of storing strings	1
method to use depends	1
method in example 14.28	1
method in 32-bit mode	1
method for all unknown	1
method for transferring composite	1
method that is used	1
method that gives the	1
method that delays execution	1
method can be used	3
method can be extended	1
method if memory access	1
method with multiple memory	1
method may be at	1
method may be faster	1
method you use is	1
method only for big	1
method used in example	1
method used here is	1
method should be longer	1
method using InstructionSet(): //	1
method also involves the	1
method doesn't work for	1
method works with all	1
method works only for	1
method Function inlining x-xxxx--x	1
method requires that you	1
method requires OS support	1
method described above can	1
method currently used for	1
method unfavorable, unless the	1
always the same. The	1
always to tell the	1
always to specify the	1
always for application-specific code.	1
always be a power	1
always as good as	1
always use the safe	1
always use this number	1
always use standardized installation	1
always has the value	1
always possible to access	1
always takes memory space,	1
always stored together in	1
always 0 or 1	1
always available from www.agner.org/optimize.	1
always work well on	1
always calls the same	1
always calculated with the	1
always advantageous to use	1
always run slower than	1
always 1 if nonzero	1
always able to predict	1
always end with a	1
always transferred as pointers	1
always goes the same	1
always points to an	1
always #pragma vector always	1
always rely on the	1
always position-independent because this	1
always inlined even when	1
always true or always	1
always keep up with	1
always apply to arrays	1
always fully optimized. Library	1
always resolved at compile	2
always evaluate both operands.	1
always avoiding this. The	1
always select the most	1
always belong to the	1
always enabled in 64-bit	1
always true. The program	1
always one, and only	1
always chooses the least	1
always work. Data alignment.	1
always behave according to	1
always Optimize function #pragma	1
always accurate, however, and	1
always comparable to a	1
always true/false Loopunrolling x-xxxx--x	1
always sequential, and you	1
always compete for the	1
always false: // Example	1
always normalized, if possible,	1
always optimal, though. In	1
always happy to receive	1
access the data object	1
access the system database	1
access the file until	1
access the saved variable	1
access is the biggest	1
access is a bottleneck.	1
access is more important	1
access is faster if	1
access a floating point	1
access a variable in	1
access a file that	1
access a public data	1
access a multidimensional array	1
access to the same	1
access to the most	1
access to the sign	1
access to the container.	1
access to a file	1
access to all of	1
access to array elements.	1
access to hardware interfaces	1
access to individual array	1
access to virus attacks	1
access to low-level optimizations.	1
access and you want	1
access and memory access	1
access and cache size.	1
access and network access	1
access in a separate	1
access in separate threads	1
access are critical time	1
access can be arranged	1
access or cache access	1
access it the first	1
access by each thread.	1
access an object after	1
access an element in	1
access x as an	1
access may be fast	1
access any non-static data	2
access rather than CPU	1
access these instructions. Function	1
access part of a	1
access times cannot be	1
access Some application programs	1
access non-sequential which makes	1
access Reading or writing	1
access Accessing data from	1
access internal variables and	1
access ............................................................................................. 87 9.1	1
access ...................................................................................................... 21 3.13	1
access 9.1 Caching of	1
access patterns containing multiple	1
access rights. Software should	1
access patterns. This can	1
void test () {	3
void SomeFunction (int n)	1
void Func () {	1
void SelectAddMul(short int aa[],	6
void Disp() { cout	4
void StoreVector(void * d,	3
void Func1 (int a[],	1
void CriticalFunction(); ... //	1
void CriticalInnerFunction () {	1
void TransposeCopy(double a[SIZE][SIZE], double	2
void transpose(double a[SIZE][SIZE]) {	2
void Plus2 (int *	1
void FuncA (int *	1
void F1() { C1	1
void F1() throw(); This	1
void f(); }; class	1
void f(); }; void	1
void Func(int a[], int	2
void Func2() { int	1
void Hello() { cout	2
void Disp(); void Hello()	1
void NotPolymorphic(); virtual void	1
void NotPolymorphic(); }; //	1
void F3(bool y) {	2
void FuncB (int &	1
void g() { C1	1
void F0() { try	1
void AddTwo(int * __restrict	1
void SelectAddMul_dispatch(short int aa[],	1
void F2(float x[]); void	1
void StoreNTD(double * dest,	1
void StoreVectorA(void * d,	1
void F1(int x[]); void	1
void MathLoop() { const	1
void FUNCNAME(short int aa[],	1
void FuncType(short int aa[],	1
void xplus2() { The	1
void Func() { S1	1
void DelayFiveSeconds() { seconds	1
16 is actually hidden	1
16 is required. The	1
16 to the integer	1
16 to fit the	1
16 in column 28,	1
16 for a discussion	1
16 for SSE2, preferably	1
16 or 32 bits	1
16 will not only	1
16 float Exp(float x)	1
16 clock cycles, depending	1
16 4 unsigned short	1
16 4 64 MMX	1
16 4 short int	1
16 8 or 16	1
16 8 unsigned short	1
16 8 short int	1
16 8 128 SSE2	1
16 bit platform __GNUC__	1
16 unsigned char 128	1
16 16 32 8	1
16 16 256 AVX2	1
16 16 256 Vec32uc	1
16 32 8 32	1
16 bits of the	2
16 bits each, four	1
16 bits wide, while	1
16 0 65535 uint16_t	1
16 (see below). The	1
16 bytes by adding	1
16 bytes at a	1
16 bytes should be	1
16 bytes without cache	3
16 128 SSE2 short	1
16 1 byte =	1
16 256 AVX2 int	1
16 256 Vec32uc Vec16s	1
16 char 128 Is8vec16	1
16 Table 7.2. Alignment	1
16 512 AVX512 double	1
16 512 AVX512 long	1
16 lines in a	1
16 bytes. Some CPUs	1
16 Testing speed Testing	1
16 Testing speed.............................................................................................................. 153	1
16 __declspec( align(16)) __attribute((	1
16 SSSE3 _mm_perm_epi8 32	1
16 3.2 Use a	1
16 3.3 Program installation	1
16 3.1 How much	1
16 -32768 32767 int16_t	1
16 XOP, AMD only	1
SSE2 is the minimum	1
SSE2 is always enabled	1
SSE2 is available: //	1
SSE2 and later instruction	1
SSE2 // SSE4.1 //	1
SSE2 or later instruction	4
SSE2 or x64 141	1
SSE2 or later. Example:	1
SSE2 not supported"); return;	1
SSE2 int 32 4	1
SSE2 instruction set is	13
SSE2 instruction set if	1
SSE2 instruction set makes	1
SSE2 instruction set (or	1
SSE2 instruction set (requires	1
SSE2 instruction set (128	1
SSE2 instruction sets have	1
SSE2 instruction set, and	1
SSE2 instruction set, as	1
SSE2 instruction set, but	1
SSE2 instruction set, one	1
SSE2 instruction set: //	1
SSE2 float 32 4	1
SSE2 version of most	1
SSE2 version int CriticalFunction_SSE2(int	2
SSE2 long long 64	1
SSE2 short int 16	1
SSE2 128 bit integer	1
SSE2 supported return &CriticalFunction_SSE2;	1
SSE2 supported CriticalFunction =	1
SSE2 typically takes 40	1
SSE2 intrinsic functions //	1
SSE2 #include <emmintrin.h> //	1
SSE2 char 8 32	1
SSE2 Table 9.2. Cache	1
SSE2 Store 8 bytes	1
SSE2 Store 16 bytes	1
SSE2 (or later) instruction	1
SSE2 emmintrin.h SSE3 pmmintrin.h	1
out the loop and	1
out the loop by	4
out the calculation of	1
out the sign bit	2
out the possibility that	2
out the theoretical possibility	1
out a loop if	1
out a big loop	1
out of the innermost	1
out of the loop.	1
out of the question	1
out of a function	1
out of a loop	1
out of a function.	1
out of order or	1
out of range is	1
out of range and	1
out of range }	1
out of range (see	1
out of range printf(Greek[n]);	1
out of F1 without	1
out of order. See	1
out of order. Long	1
out of range"; }	1
out of range"; 134	1
out of range. The	1
out of range. This	1
out of range"); or	1
out to be too	2
out or if there	1
out if exceptions can	1
out by the program	1
out by 4 float	1
out by 2. (See	1
out with all relevant	1
out loop by 16	1
out loop by eight	4
out which one is	1
out multiple bits with	1
out some typical sources	1
out whether it is	1
out sign bit: absvalue	1
out results printf("\n%2i %10I64i",	1
out aliasing (see page	1
out loop-invariant code containing	1
out independently of other	1
following compiler versions were	1
following example shows the	2
following example shows a	1
following example shows first	1
following example shows how	6
following example shows what	1
following example illustrates the	1
following example illustrates such	1
following example illustrates how	1
following example illustrates this.	1
following example explains why	1
following example transposes a	1
following example converts a	1
following table lists the	1
following table summarizes the	1
following example, which calculates	1
following assembly code from	2
following list points out	1
following methods may be	1
following methods could possibly	1
following examples explain how	1
following example: // Example	1
following algorithm is used	1
following conditions are met:	1
following conditions are satisfied:	1
following way. The first	1
following way. If the	1
following way. First you	1
following explanation if you	1
following sections describe some	1
following table. Type size,	1
following disadvantages compared to	1
following guidelines can be	1
following considerations should be	1
following techniques can be	1
following reasons: The function	1
following reasons: The size	1
following reasons: Each object	1
following way: // Example	1
following way: There are	1
following way: bool a,	1
following cases: If part	1
following alternatives: Make the	1
following steps to access	1
following work-around can be	1
following features: The code	1
following sections. 3.3 Program	1
following solutions, depending on	1
system is often more	1
system is likely to	1
system is based on	1
system to avoid running	1
system to generate an	1
system to swap memory	1
system and CPU hardware.	1
system and choose the	1
system for support of	1
system can be time	1
system can be particularly	1
system or libraries that	1
system if the array	1
system with only one	1
system code is not	1
system code is critical	1
system code or in	1
system may not load	1
system may have a	1
system may store the	1
system may supply such	1
system this is the	1
system has support for	1
system functions (e.g. GetLogicalProcessorInformation	1
system which redirects it	1
system performance options. I	1
system makes sure that	1
system call (e.g. GetProcessAffinityMask	1
system rather than by	1
system code. In this	1
system code. Dynamic memory	1
system code. System code	1
system (see page 107).	1
system calls (e.g. IsProcessorFeaturePresent	1
system thread scheduler. This	1
system All newer microprocessors	1
system running in 32-bit	1
system resources .......................................................................................... 21	1
system resources Writes to	1
system instead of using	1
system core and high-priority	1
system database in Windows.	1
system calls. These are	1
system devices and using	1
system programming, but in	1
system modules. 3.12 Network	1
system API and the	1
system database, and other	1
system kernel in the	1
system color settings and	1
system crash. Furthermore, it	1
system forbids the user	1
system standards. Such schemes	1
system dependent and therefore	1
system breakdown. Many copy	1
32 and the 512-bit	1
32 and 64 bits	1
32 for an explanation	1
32 for AVX. 5.	1
32 = 28. This	1
32 with j <<	1
32 instruction set is	1
32 2 2 int	1
32 2 64 MMX	1
32 4 int 128	1
32 4 unsigned int	1
32 4 64 2	1
32 4 128 SSE2	1
32 4 128 SSE	1
32 8 64 4	2
32 8 32 8	1
32 8 256 AVX	1
32 8 256 AVX2	1
32 bit code 64	1
32 bit Linux Shared	1
32 bit mode and	1
32 bit mode SSE	1
32 bit platform not	1
32 bit mode. Some	1
32 bit systems: The	1
32 bit systems: Pointers,	1
32 bit offsets). Example:	1
32 64 Iu32vec2 64	1
32 16 512 AVX512	2
32 bits of a	3
32 bits of a[i]	1
32 bits in 32-bit	1
32 bits in x86	1
32 bits at a	1
32 bits while a	1
32 bits each, or	1
32 bits (rarely 64).	1
32 0 232-1 uint32_t	1
32 1 byte =	1
32 sets can be	1
32 sets 4 ways.	1
32 256 AVX2 short	1
32 char 256 Vec32c	1
32 results when applied	1
32 bits. This makes	1
32 bits, so you	1
32 7.4 Enums ......................................................................................................................	1
32 AND-operations in just	1
32 bytes). This has	1
32 16.4 65 65	1
32 -231 231-1 int32_t	1
file is faster than	1
file is closed. The	2
file of every version.	1
file to a floppy	1
file and the derived	1
file and all the	1
file and one or	1
file and compiled for	1
file and copies them	1
file in a memory	1
file in simple cases.	1
file in exclusive mode,	1
file for the instruction	1
file for a higher	1
file for each line	1
file for InstructionSet() #include	2
file that has been	1
file can be wrapped	1
file by calling WritePrivateProfileString,	1
file on a hard	1
file than in the	1
file when static linking	1
file will give you	1
file will remain locked	1
file from the linker.	1
file has been copied	1
file access is more	1
file access and network	1
file access in a	1
file access or cache	1
file needs to be	1
file until the computer	1
file containing numerical data	1
file includes the addresses	1
file input and output	1
file MMX mmintrin.h SSE	1
file tells the address	1
file format. The intermediate	1
file format is not	1
file format instead of	1
file level, and the	1
file input/output operations. It	1
file stdint.h or inttypes.h	1
file formats should be	1
file timingtest.h from www.agner.org/optimize/testp.zip	1
file dvec.h vectorclass.h Supported	1
file mathimf.h that come	1
file stub. If different	1
file disassembler. Note that	1
file http://www.agner.org/optimize/asmlib.zip contains complete	1
file level. My recommendation	1
file /Fm Generate optimization	1
file formats. Comments All	1
programming is so complicated	1
programming are dominating. At	1
programming can be an	1
programming as a means	1
programming will typically get	1
programming without paying the	1
programming error known as	1
programming work automatically. The	1
programming language is a	1
programming language is best	1
programming language is implemented.	1
programming language and a	1
programming language and development	1
programming language and interface	1
programming language that can	1
programming language when the	1
programming language defines an	1
programming language Before starting	1
programming language ............................................................................... 8	1
programming are: Non-static member	1
programming errors that would	1
programming errors associated with	1
programming languages and their	1
programming languages that do	1
programming languages are implemented	1
programming languages can be	1
programming languages as well.	1
programming languages use an	1
programming style that doesn't	1
programming style if it	1
programming style has both	1
programming manuals from Intel:	1
programming principles in order	1
programming .......................................................................................... 150 15	1
programming languages, but also	1
programming languages, such as	1
programming languages, operating systems,	1
programming languages, profiling and	1
programming languages. This section	1
programming languages. www.yeppp.info And	1
programming style. The time	1
programming style. The advantages	1
programming style. It is	1
programming style. Some compilers	1
programming error. The allocated	1
programming language, e.g. C++,	1
programming questions to me.	1
programming questions if you	1
programming experience before trying	1
programming constructs are costly	1
programming textbooks recommend that	1
programming textbooks recommend object	1
programming nowadays stress the	1
programming practice, of course,	1
programming Device drivers, interrupt	1
dynamic memory allocation is	2
dynamic memory allocation in	1
dynamic memory allocation for	1
dynamic memory allocation can	1
dynamic memory allocation with	1
dynamic memory allocation when	1
dynamic memory allocation using	1
dynamic memory allocation are:	2
dynamic memory allocation (new	1
dynamic memory allocation. This	1
dynamic memory allocation. There	1
dynamic memory allocation. You	1
dynamic memory allocation. See	1
dynamic memory allocation. Some	1
dynamic memory allocation. Dynamic	1
dynamic memory allocation. Do	1
dynamic memory allocation. Container	1
dynamic library is loaded	1
dynamic library is resolved	1
dynamic library can be	3
dynamic library can change	1
dynamic library than in	1
dynamic library requiring the	1
dynamic array of n	1
dynamic libraries are loaded	2
dynamic libraries need to	1
dynamic libraries without the	1
dynamic libraries Function libraries	1
dynamic libraries (*.dll or	1
dynamic libraries contend for	1
dynamic libraries (.dll or	1
dynamic allocation and deallocation	1
dynamic linking is used,	1
dynamic linking makes the	1
dynamic linking cannot be	1
dynamic linking are: Static	1
dynamic linking are: 146	1
dynamic link library (*.dll	2
dynamic link library (DLL)	1
dynamic link libraries slower	1
dynamic link libraries, also	2
dynamic libraries. The dynamic	1
dynamic allocation. The heap	1
dynamic versions. It is	1
dynamic linker. The delay	1
dynamic linking. The file	1
dynamic libraries............................................................................ 146 14.12	1
part of the code	10
part of the memory	1
part of the program	9
part of the instruction	1
part of the library	1
part of the operating	1
part of the optimization	1
part of the code.	1
part of the memory.	1
part of the program.	3
part of the code,	2
part of the program,	1
part of the fraction.	1
part of the Xnu	1
part of a code	1
part of a program	4
part of a critical	1
part of a shared	1
part of a program.	2
part of a program,	1
part of a variable,	1
part of memory that	1
part of memory called	1
part of it). This	1
part of it) load	1
part can run optimally	1
part unsigned int exponent	2
part takes. See page	1
part 142 unsigned int	1
bits is likely in	1
bits of the integer	1
bits of the number	1
bits of the 32-bit	1
bits of the result.	1
bits of a double	1
bits of a 64-bit	2
bits of an integer	1
bits of its binary	1
bits of a[i] and	1
bits to zero. 14.3	1
bits in a different	1
bits in a single	1
bits in a non-sequential	1
bits in an integer,	1
bits in 64-bit systems.	1
bits in 32-bit systems	1
bits in x86 systems).	1
bits for Tuesday, Wednesday	1
bits for holding the	1
bits are less efficient.	1
bits with the &	1
bits with the ^	1
bits than a float.	1
bits when the AVX512	1
bits at a time,	1
bits rather than 32	1
bits 0 - 30	1
bits while a double	1
bits total size, because	1
bits except the sign	2
bits Vector class, Intel	1
bits Instruction set char	1
bits Number of elements	2
bits each, or two	1
bits each, four integers	1
bits each, eight integers	1
bits represent a monotonically	1
bits differently. A negative	1
bits minimum value maximum	1
bits wide, should be	1
bits wide, while an	1
bits each. The type	1
bits (MMX), 128 bits	1
bits (XMM), 256 bits	1
bits (YMM), and soon	1
bits 32-62. This can	1
bits (rarely 64). You	1
bits (YMM) if the	1
bits (ZMM). Vector operations	1
bits (XMM) if the	1
operations is more advantageous	1
operations of modern CPUs,	1
operations to finish. 3.8	1
operations and before any	1
operations and choose the	1
operations and shift operations	1
operations in the sense	1
operations in order to	1
operations for manipulating floating	2
operations for incrementing a	1
operations are not used).	1
operations are very fast.	1
operations are faster than	1
operations are useful when	1
operations are available for	1
operations are done with	1
operations are therefore as	1
operations are fast in	1
operations are particularly fast	1
operations are generally very	1
operations can be made	1
operations can be carried	1
operations with other calculations	1
operations with Boolean variables	1
operations with pointers. The	1
operations on all data	1
operations on all elements	1
operations on vectors and	1
operations on contemporary 106	1
operations than to write	1
operations use a set	1
operations use different execution	1
operations when the SSE2	1
operations when alignment by	1
operations do not add	1
operations into two 128-bit	1
operations such as addition,	1
operations where there is	1
operations so that there	1
operations take only one	1
operations without reducing the	1
operations An integer may	1
operations automatically in cases	1
operations require that the	1
operations slow down the	1
operations outside the loop:	1
operations mentioned in chapter	1
operations involves eight or	1
operations involves eight floating	1
operations (chapter 12) are	1
operations in-between the floating	1
operations Today's microprocessors have	1
operations (addition, multiplication, etc.)	1
0 is true, and	1
0 a & -1	1
0 a ^ ~a	1
0 to 12. Higher	1
0 to 15. If	1
0 and the other	1
0 and i >=	1
0 and generate a	2
0 and 1. The	1
0 and 1. Note	1
0 in this column.	1
0 for positive and	1
0 for false and	1
0 that r points	1
0 // This is	1
0 // this function	1
0 = a a	1
0 = a -	1
0 = 0, (a&b)	1
0 or 1 and	1
0 or 1 by	1
0 or 1 (see	1
0 or 1. The	1
0 or 1. This	1
0 or 1. See	1
0 or 1. Writing	1
0 or 1, but	1
0 if out of	1
0 - n.a. -	3
0 - n.a. x	1
0 - n.a. a*1	1
0 - n.a. a+0	1
0 - 2 clock	1
0 - Divide by	1
0 - 30 //	1
0 - a*1 =	1
0 - a+0 =	1
0 because this would	1
0 rather than 1.23456.	1
0 || i >=	1
0 ? c +	2
0 <= n <	1
0 n! 117 A	1
0 a+0=a a*0=0 a*1=a	1
0 264-1 uint64_t Table	1
0 65535 uint16_t unsigned	1
0 255 uint8_t unsigned	1
0 232-1 uint32_t unsigned	1
type is more complex	1
type is most efficient	1
type of a function	1
type of an object	1
type of data elements,	1
type of CPU that	1
type of object pointed	1
type of objects they	1
type of registers used.	1
type of parameters then	1
type of storage is	1
type of vector, such	1
type of microprocessor. These	1
type to avoid this.	1
type and size as	1
type and its parameters.	1
type in the values	1
type that is optimal	1
type can be returned	1
type by type-casting its	1
type with desired parameters	1
type has advantages and	1
type such as a	1
type short int in	1
type __m128i defines a	1
type conversion // C-style	1
type conversion A pointer	1
type conversion takes zero	1
type conversion generates no	1
type conversions is discussed	1
type identification adds extra	1
type identification (RTTI) If	1
type identification (RTTI) Runtime	1
type identification (RTTI) /GR–	1
type identification (RTTI) ...........................................................................	1
type identification (RTTI). See	1
type identification (RTTI), which	1
type T is a	1
type T // Constructor	1
type casting of pointers	1
type casting // C++	1
type casting // Constructor-style	1
type casting operator that	1
type int. Therefore, it	1
type holds a precision	1
type typedef void FuncType(short	1
type __m128 defines a	1
type size_t is 32	1
type conversions: // Example	1
type casting. Linked lists	1
type casting, but also	1
type __m128d defines a	1
case the function is	1
case the code is	1
case the array index	1
case the reading of	1
case is a branch	1
case is a sum	1
case is to divide	1
case is faster when	1
case a = ++b;	1
case of the simple	1
case of the Gnu	1
case of an error	1
case of an exception	2
case of an exception.	1
case of an error;	1
case of data decomposition,	1
case of large arrays	1
case of overflow is	1
case of overflow and	1
case of Boolean algebra,	1
case of overflow. The	1
case of error. The	1
case of mispredictions (see	1
case of underflow: //	1
case and make a	1
case in loops. Consider	1
case that the microprocessor	1
case that the next	1
case it may be	1
case it will recognize	1
case it doesn't matter	1
case if alternative implementations	1
case with programs written	1
case x can be	1
case you have to	1
case then the optimal	1
case memory re-allocation is	1
case there is an	1
case where you want	1
case we may need	1
case we need to	1
case so we don't	1
case situation is a	1
case situation of the	1
case 3: printf("Delta"); break;	1
case 2: printf("Gamma"); break;	1
case conditions. For example,	1
case 1: printf("Beta"); break;	1
case labels follow a	1
case F2 actually throws	1
case 0: printf("Alpha"); break;	1
cases the compiler can	1
cases the SSE2 instruction	1
cases the microprocessor is	1
cases of program flow.	1
cases of floating point	1
cases of stack unwinding	2
cases to use the	1
cases and it makes	1
cases for different microprocessors,	1
cases be advantageous to	1
cases be linked into	1
cases be determined by	1
cases are usually dealt	1
cases it is also	1
cases it is possible	3
cases it can be	2
cases it might not	1
cases on Windows platforms.	1
cases you can rely	1
cases you may have	1
cases this multiplication will	1
cases when the 145	1
cases should definitely be	1
cases such as multiple	1
cases In most cases,	1
cases where the compiler	1
cases where the data	1
cases where the size	1
cases where the number	1
cases where the performance	1
cases where the chosen	1
cases where the parallelism	2
cases where a particular	1
cases where it is	2
cases where it makes	1
cases where it matters:	1
cases where we are	1
cases where they cannot	1
cases where dynamic linking	1
cases cannot be vectorized	1
cases take memory space	1
cases they are sure	1
cases even the same	1
cases like these, it	1
cases described in the	1
cases ignore a request	1
short in duration compared	1
short or common names.	1
short int is 16	1
short int in one	1
short int in 16-bit	2
short int int 256	1
short int 64 Is16vec4	1
short int 64 Iu16vec4	1
short int 16 4	1
short int 16 8	1
short int 16 16	1
short int 128 Is16vec8	1
short int 128 Iu16vec8	1
short int instead of	1
short int a; //	1
short int a; double	1
short int bb[], short	9
short int cc[]) {	8
short int a[100]; int	1
short int s; s	1
short int s; 40	1
short int (16 bits),	1
short int bb[size] );	1
short int cc[size] );	1
short int aa[size] );	1
short int 832 256	1
short int cc[]); //	1
short time then the	1
short vector method may	1
short vector math library	1
short vector math libraries:	1
short vector libraries. To	1
short vector library, you	1
short int, signed or	1
short int, float. Similar	1
short int) are only	1
& a = a,	1
& b if b	1
& 0 = 0,	1
& a, T const	1
& b; will make	1
& b; d =	1
& 1 is certain	1
& unless you expect	1
& operator is also	1
& operator forces the	1
& operator (bitwise and)	1
& x) { //	1
& x) { _mm_storeu_si128((__m128i	3
& x) { __m128	1
& x) { _mm_store_si128((__m128i	1
& later __svml_expf4 __svml_exp2	1
& b) { return	1
& operation will be	1
& -1 = a,	2
& ~a = 0	2
& enum Weekdays {	1
& r) { int	2
& r) { r	1
& r) {return r.a	1
& earlier vmlsExp4 vmldExp2	1
& a) { return	1
& operator; and you	1
& (Tuesday | Wednesday	1
& 3) << 4)	1
& 3) <<6 );	1
& obj1; p->f(); //	1
& 0x7FFFFFFF) { //	2
& operation, which is	1
& N-1)==0 if N	1
& source) { _mm_stream_pi((__m64*)dest,	1
& operator[] (unsigned int	1
& 1) y *=	1
& (N-1)) return powN<(N1&(N1-1))==0,N1>::p(x)	1
& 15] += 1.0f;	1
& 0x7FFFFF) | 0x3F800000;	1
& 0= 0 -	1
& 0x0F) | ((B	1
& a= a a	1
& N-1)==0,N>::p(x); } //	1
& 1]; Here, I	1
simple to develop. It	1
simple in most cases:	1
simple function with a	1
simple function because the	1
simple integer with vector	1
simple integer calculations in	1
simple integer counter. A	1
simple class containing the	1
simple pointer or a	1
simple array is the	1
simple array can be	1
simple variables into a	1
simple way of solving	1
simple test setup but	1
simple type casting, but	1
simple cases where the	1
simple processors and vector	1
simple solution to this	1
simple standard operations. All	1
simple cases, the compiler	1
simple cases, a data	1
simple types because the	1
simple types such as	1
simple constructor may be	1
simple function, the compiler	1
simple function, m is	1
simple things like a	1
simple reductions on integer	1
simple cases. The explicit	1
simple cases. 7.28 Templates	1
simple cases. Database queries	1
simple algorithm can do	1
simple tasks like pressing	1
simple variable. Most compilers	1
simple variable. Using pointers	1
simple algebraic expressions using	1
simple algebraic reductions such	1
simple alternative is to	1
simple expressions. Operations that	1
simple variables, loop counters,	1
simple variables, arrays and	1
simple method. // This	1
simple regular pattern, while	1
simple index. A good	1
simple tasks. Sometimes it	1
simple periodic pattern can	2
simple periodic pattern or	1
simple type, a pointer,	1
simple solution, but it	1
simple actions like a	1
instructions to the instruction	1
instructions in the CPU	1
instructions for the sake	1
instructions for integer division	1
instructions for address calculation	1
instructions for fast access	1
instructions for mathematical functions	1
instructions for high precision	1
instructions for converting the	1
instructions that are coded	1
instructions that can be	1
instructions that may be	1
instructions that use the	1
instructions that make it	1
instructions that take only	1
instructions that allow you	1
instructions are not suitable	1
instructions are not optimal.	1
instructions are one byte	1
instructions are less likely	1
instructions are summarized below.	1
instructions are fetched and	1
instructions are accessible from	1
instructions can make certain	1
instructions or small sequences	1
instructions than the ones	1
instructions have very few	1
instructions at specific places	1
instructions which can be	1
instructions where the carry	1
instructions cannot multiply integers	1
instructions rather than nine,	1
instructions without help of	1
instructions out of order	1
instructions out of order.	1
instructions (see page 105).	1
instructions AVX 256 bit	1
instructions add ebx, eax	1
instructions write directly to	1
instructions becomes noticeable. The	1
instructions were splitting 256-bit	1
instructions require that the	1
instructions mov ebx,eax /	1
instructions during this time	1
instructions SSE4.1 some more	1
instructions sets. The different	1
instructions listed in table	1
instructions SSE4.2 string search	1
instructions MOVNTPS, MOVNTPD and	1
instructions (MOVNT) are designed	1
instructions executed, cache misses,	1
processors is not optimal	1
processors is called core	1
processors is better. Whenever	1
processors and the number	1
processors and on Intel	1
processors and vector processors	1
processors and instruction sets.	1
processors and FPGA soft	1
processors and earlier Intel	1
processors that have a	1
processors that support the	1
processors that support a	1
processors that support it.	1
processors that supported 128-bit	1
processors that supported 256-bit	1
processors that were unknown	3
processors are not supported	1
processors are used in	1
processors are sure to	1
processors are sometimes able	1
processors are preferred because	1
processors are becoming increasingly	1
processors are covered in	1
processors can be improved	1
processors can have any	1
processors can calculate a	1
processors with the AVX-512	1
processors with a micro-op	1
processors with this instruction	1
processors with low power	1
processors with CISC instruction	1
processors on the same	1
processors on a graphics	1
processors on which it	1
processors have to be	1
processors will support the	1
processors because this brand	1
processors but eight logical	1
processors rather than future	1
processors without the SSE2	1
processors available in the	1
processors available can be	1
processors (see page 130	1
processors requires a big	1
processors usually share the	1
processors prefetch data automatically	1
processors (0, 2, 4,	1
processors (when vector operations	1
processors properly. Many CPU	1
available to the function	1
available to fit specific	1
available in the function	2
available in the system.	1
available in the future.	1
available in different versions	1
available in all systems	1
available in 64-bit systems	1
available in 32-bit operating	1
available in both static	1
available in newer versions	1
available in 2015 or	1
available for the commercial	1
available for other purposes.	1
available for 64-bit Linux	1
available for many different	1
available for many platforms,	1
available for Linux systems.	1
available for doing parallel	1
available for general purposes	1
available for free in	1
available for free. Visual	1
available can be determined	1
available if the AVX	1
available if supported by	1
available with vector operands:	1
available as an appendix	1
available use excessive loop	1
available then it is	1
available then each vector	1
available from the IDE	1
available from a number	1
available from a website.	1
available from www.intel.com. (See	1
available from www.intel.com. Manual	1
available from www.agner.org/optimize. Copyright	1
available from Intel. See	1
available from www.agner.org/optimize/testp.zip. This	1
available at compile time.	1
available vector classes. Including	1
available because the interpreted	1
available instruction set. The	2
available which are useful	1
available register size. In	1
available registers is limited.	1
available options for the	1
available information. They have	1
available today. You may	1
constant is a power	1
constant is faster //	2
constant is faster if	2
constant is faster than	2
constant a value that	1
constant to the preceding	1
constant to the previous	1
constant and then convert	1
constant and known to	1
constant that is divisible	1
constant can be avoided	1
constant can be propagated	1
constant = shift and	1
constant = multiply and	1
constant = multiply by	2
constant with a combination	1
constant with a decimal	1
constant with its value.	1
constant data // constructor	1
constant data from static	1
constant vector (1,2,3,4), and	1
constant should be done	1
constant const int ArraySize	1
constant 8 rather than	1
constant always takes memory	1
constant (see page 137).	1
constant single precision or	1
constant known at compile	1
constant needs to be	1
constant reference instead: //	1
constant references accept expressions	1
constant plus an index	1
constant propagation is not	1
constant propagation and other	1
constant propagation and reduce	1
constant propagation An expression	1
constant 5. But the	1
constant divisor that is	1
constant n, then we	1
constant N1 could have	1
constant 3.5 will be	1
constant (2n / b)	1
constant subexpression. A constant	1
constant propagation, and loop-invariant	1
constant propagation, etc. Whether	1
constant 2.5, which is	1
up the function address	1
up the data into	1
up the CPU by	1
up the loop buffer	1
up the performance monitor	1
up the address of	2
up the calculation of	1
up the stack. This	1
up the factors that	1
up the queue of	1
up a function into	1
up a function just	1
up a stack frame,	1
up a program. Whole	1
up to some positive	1
up to 4 clock	1
up to cause seven	1
up to count certain	1
up to 5 times	1
up to five or	1
up to fourteen register	1
up to fourteen parameters	2
up to date. A	1
up to date. Mac	1
up to date): Microsoft	1
up and calling any	1
up and enable one	1
up and down. Remember	1
up in a virtual	1
up in case of	2
up if the threads	1
up with the expected	1
up with the ever	1
up with the correct	1
up more space in	1
up then it must	1
up because it has	1
up one register. Registers	1
up cache space and	1
up cache space. The	1
up into multiple functions.	1
up 64-bit shared objects	1
up everything in case	1
up significantly just by	1
up multiplications and divisions	1
up spaces that are	1
up include: Memory allocated	1
error is to access	1
error is not detected	1
error is easy to	1
error is lower than	1
error and compare it	1
error in the oldest	1
error for each iteration	1
error that hackers often	1
error can return with	1
error // Return reference	1
error if the index	1
error by avoiding any	1
error code if possible,	1
error code may be	1
error code which the	1
error then there is	1
error has occurred anywhere	1
error return a[i]; //	1
error code. If the	1
error without using exceptions	1
error doesn't occur, but	1
error known as memory	2
error simply by performing	1
error handling in the	1
error handling system instead	1
error handling Exception handling	1
error handling ................................................................................ 61	1
error conditions in a	1
error message is provoked	1
error message and then	1
error message and stop	1
error message in a	1
error message in this	1
error message if it	1
error message when it	1
error message function. The	1
error condition terminates the	1
error handling. You have	1
error handler calls exit(),	1
error condition. Replacing two	1
error condition. Things that	1
error prone. The vectorized	1
error prone. A discussion	1
error prone. All these	1
error messages to the	1
error message. It is	1
error reporting here: return	1
error reporting. For example,	1
I have used the	1
I have used char	1
I have no specific	1
I have no explanation	1
I have done a	1
I have implemented a	1
I have made a	1
I have tested the	1
I have tested can	1
I have tested were	1
I have tested implement	1
I have tested seem	1
I have described some	1
I have added a	1
I have provided several	1
I have seen many	1
I have AND'ed b	1
I have ever seen	1
I have supplied in	1
I have developed a	1
I have studied do	1
I have confirmed this	1
I have tested. The	1
I have tried. The	1
I will make a	1
I will call this	1
I will conclude this	1
I want to thank	1
I must warn against	1
I simply don't have	1
I write that something	2
I don't know if	1
I don't think that	1
I consider it unwise	1
I once made a	1
I am not making	1
I am not going	1
I am using this	1
I am using CPU	1
I am always happy	1
I am giving this	1
I think that it	1
I believe that the	1
I believe that software	1
I die. See www.gnu.org/copyleft/fdl.html.	1
I tried to make	1
I guess, that compiler	1
I disagree with this	1
making the code size	1
making the data more	1
making the most critical	1
making the number of	1
making the constant single	1
making the arrays very	1
making the container expandable,	1
making the structure in	1
making the dispatch decision	1
making the full declaration	1
making the entire program	1
making a and b	1
making a new one.	1
making a common denominator:	1
making a shared object.	1
making a separate thread	1
making a pointer. The	1
making a debug version	1
making a non-inlined copy	1
making it count up	1
making an induction variable	1
making an unused copy	1
making an additional floating	1
making an explicit induction	1
making data more compact.	1
making floating point register	2
making i an unsigned	1
making multiple versions of	1
making two threads where	1
making objects inside the	1
making any pointer or	1
making any specific recommendation	1
making software in a	1
making software more clear	1
making critical functions inline	1
making sure that functions	1
making sure that one	1
making sure that variables	1
making another function with	1
making programs that have	1
making branches that are	1
making longer time slices.	1
making optimizations that rely	1
making optimizations across function	1
making them static if	1
making clear and well-structured	1
making highly optimized code	1
making plug-ins that add	1
times the function is	1
times the other way	1
times the other way,	1
times the first way	1
times to test //	1
times to simple things	1
times to keyboard and	1
times and the other	1
times and the speed	1
times and that there	1
times and make parts	1
times and calls alternately	1
times and cause delays	1
times and stores the	1
times in the final	1
times in a loop	1
times in order to	2
times for user input.	1
times for simple tasks	1
times for network resources	1
times // Time before	1
times with a suitable	1
times with four numbers	1
times as long time	1
times an interrupt occurs	1
times may be enough	1
times when a user	1
times then the loop	1
times then we have	1
times because the value	1
times because of lazy	1
times because it is	1
times one way, then	1
times each function is	1
times each function and	1
times each part of	1
times faster than example	1
times faster than any	1
times faster either by	1
times cannot be controlled.	1
times before the performance	1
times less than in	1
times rather than 20.	1
times per matrix cell	1
times CriticalFunction is called	1
times faster. The logic	1
times 24 dramatically for	1
times lower; and the	1
stack is the most	1
stack is a part	1
stack is a waste	1
stack is used. It	1
stack is organized. Floating	1
stack and are in	1
stack and reading them	1
stack in the debugger	1
stack in 32-bit mode.	1
stack in 32-bit systems,	1
stack for all these	1
stack can be allocated	1
stack when CriticalInnerFunction is	1
stack memory at the	1
stack memory which is	1
stack memory outside the	1
stack at address esp+8	1
stack also has disadvantages:	1
stack before the function	1
stack before it is	1
stack rather than the	1
stack registers are available	1
stack registers are used.	2
stack always belong to	1
stack ; return ;	1
stack ; ecx =	1
stack (see above, p.	1
stack memory. Copying constant	1
stack are: All calculations	1
stack pointer. Likewise, all	1
stack frame is used	1
stack frame makes function	1
stack frame unless your	1
stack frame /Oy -fomit-	1
stack Variables and objects	1
stack unwinding The preceding	1
stack unwinding that is	1
stack unwinding information can	1
stack unwinding mechanism is	1
stack unwinding mechanism may	1
stack unwinding .............................................................................. 65	1
stack versus XMM registers.	1
stack (three parameters on	1
stack frame, saving and	1
stack frame" or "frame	1
stack entries use 64	1
stack unwinding. All functions	1
want the function to	1
want the code to	1
want the program to	1
want the CPU to	1
want the executable to	1
want a number to	1
want to be able	1
want to use the	1
want to make the	1
want to make one	1
want to make sure	2
want to make their	1
want to call the	1
want to avoid the	1
want to compile for.	1
want to get as	1
want to get rid	1
want to check whether	1
want to calculate the	1
want to optimize a	1
want to optimize for	1
want to see the	1
want to read from	1
want to improve speed	1
want to know how	1
want to generate a	1
want to go deeper	1
want to find out	2
want to prevent cache	1
want to keep together	1
want to vectorize the	1
want to measure //	1
want to roll out	1
want to compare the	1
want to 155 test.	1
want to flip the	1
want to thank the	1
want to optimize, and	1
want it to do.	1
want it to. It	1
want as static arrays	1
want this to be	1
want this initialization, or	1
want when the program	1
want vectorization then follow	1
want them to apply	1
Example: // Example 14.9	1
Example: // Example 14.8	1
Example: // Example 12.2	1
Example: // Example 14.6	1
Example: // Example 7.2	1
Example: // Example 7.1	1
Example: // Example 8.7	1
Example: // Example 7.12	1
Example: // Example 11.3	1
Example: // Example 7.23	1
Example: // Example 7.24	1
Example: // Example 7.28	1
Example: // Example 9.4	1
Example: // Example 8.15a	1
Example: // Example 12.1a.	1
Example: // Example 8.21	1
Example: // Example 7.40a	1
Example: // Example 14.3a	1
Example: // Example 8.9a	1
Example: // Example 7.34a.	1
Example: // Example 8.5a	1
Example: // Example 8.13a	1
Example: // Example 8.11a	1
Example: // Example 8.1a	1
Example: // Example 8.16	1
Example: // Example 8.2a	1
Example: // Example 8.25	1
Example: // Example 8.20	1
Example: // Example 8.22	1
Example: // Example 7.32a	1
Example: // Example 14.22a	1
Example: // Example 14.18a	1
Example: // Example 9.2a	1
Example: // Example 8.6a	1
Example: // Example 14.7a.	1
Example: // Example 7.26a	1
Example: // Example 8.19.	1
Example: // Example 7.30a	1
Example: // Example 7.3.	1
Example: // Example 7.39	1
Example: // Example 7.36	1
Example: // Example 8.12a	1
Example: // Example 14.12a	1
Example: // Example 8.14a	1
Example: // Example 7.33a	1
Example: // Example 8.8a	1
Example: // Example 14.17a	1
Example: // Example 7.41a	1
Gnu and PathScale compilers.	2
Gnu and Clang compilers.	1
Gnu or Intel compiler.	1
Gnu function libraries are	1
Gnu This is one	1
Gnu compiler is a	1
Gnu compiler and the	1
Gnu compiler in many	1
Gnu compiler for Mac	1
Gnu compiler for Windows,	1
Gnu compiler can use	2
Gnu compiler // Same	1
Gnu compiler on the	1
Gnu compiler A feature	1
Gnu compiler will make	1
Gnu compiler will convert	1
Gnu compiler often inserts	1
Gnu compiler Linux Intel	3
Gnu compiler allows "__attribute__((visibility("hidden")))".	1
Gnu compiler mechanism because	1
Gnu compiler reduced 15.1b	1
Gnu compiler manual. This	1
Gnu compiler ......................................................................... 128	1
Gnu compilers are actually	1
Gnu compilers without problems	1
Gnu Intel Borland Microsoft	1
Gnu C++ compiler is	1
Gnu C++ v. 4.1.0,	1
Gnu 32-bit Mac Intel	1
Gnu 32-bit -fno-builtin Gnu	1
Gnu 64 bit -fno-builtin	1
Gnu libraries support 32-bit	1
Gnu manual currently doesn't	1
Gnu mechanism stores a	1
Gnu compilers. // Example	1
Gnu compilers. See www.openmp.org	1
Gnu directives work on	1
Gnu compiler. Not optimized	1
Gnu C function library	1
Gnu C library. It	1
Gnu compiler, the assumption	1
Gnu compiler, etc. #define	1
Gnu Comes with the	1
Gnu utilities in 2010.	1
Some of the most	1
Some functions are optimized	1
Some other compilers (Microsoft,	1
Some compilers are able	1
Some compilers can reduce	1
Some compilers have a	1
Some compilers have an	2
Some compilers have efficient	1
Some compilers have many	1
Some compilers have support	1
Some compilers have difficulties	2
Some compilers will use	1
Some compilers will replace	1
Some compilers will unroll	1
Some compilers will align	1
Some compilers make Sum1	1
Some compilers offer profile-guided	1
Some 64-bit compilers are	1
Some software development models	1
Some systems have a	1
Some systems also have	2
Some systems allow lazy	1
Some programming languages, such	1
Some programming textbooks recommend	1
Some instructions are one	1
Some important obstacles to	1
Some CPUs have particularly	1
Some versions of Intel	1
Some common function libraries	1
Some common compilers are	1
Some common problems with	1
Some copy protection schemes	1
Some programs search for	1
Some application programs use	1
Some applications require that	1
Some applications (e.g. in	1
Some applications spend most	1
Some modules may be	1
Some STL templates, such	1
Some implementations of Java	1
Some implementations use just-in-time	1
Some developers feel that	1
Some profilers require that	1
Some guidelines are provided	1
Some early implementations of	1
its time in library	1
its time on processors	1
its time waiting for	1
its data members can	1
its size is a	1
its pointer set to	1
its b member by	1
its many optimization features	1
its possible exception handling	1
its value is multiplied	1
its value at compile	1
its variables called global	1
its return value depends	1
its address is taken,	1
its parameters replaced by	1
its members are then	1
its name at the	1
its own memory block	1
its own data structure	1
its own CPU core.	1
its own set of	1
its own address through	1
its own allocated memory	1
its own block of	1
its own stack. Alternatively,	1
its own IDE. It	1
its own caller, and	1
its binary representation is	1
its functions, called procedure	1
its final destination, but	1
its child class by	1
its child class through	1
its child class. This	1
its address. The address	1
its 'this' pointer to	1
its value. However, the	1
its family and model	1
its parameters. This is	1
its body is defined	1
its mirror position above	1
its limit, etc. In	1
its brand, family and	1
its arguments. This closely	1
its out-of- order calculation	1
its reputation. The compactness	1
its simplicity. But a	1
its address: // Example	1
its API. In some	1
about the function type	1
about the only situation	1
about the class that	1
about the class c1	1
about the performance of	1
about the sign bit.	1
about the costs if	1
about the destructor to	1
about the possibility of	1
about the chain of	1
about the third generation	1
about the dimensions of	1
about a variable, pointer	1
about in my blog.	1
about function names and	1
about code optimization. See	1
about an unknown CPU	1
about this condition. In	1
about memory caching. 3.14	1
about data storage and	1
about functions in other	1
about instruction latencies are	1
about which software development	1
about which implementation is	1
about which platforms and	1
about no pointer aliasing.	1
about pointer alignment and	1
about branch prediction. A	1
about register use, as	1
about how the development	1
about how to speed	1
about how caches work	1
about its child class	1
about overflow and underflow	1
about Linux also applies	1
about supported instruction sets,	1
about whether the positive	1
about mathematical functions. 7.4	1
about name mangling are	1
about it. Possible solutions	1
about loss of precision.	1
about increment operators also	1
about them. You should	1
about Func1 when compiling	1
about rounding. Pointer type	1
about division). The object	1
about bugs, compatibility problems,	1
about investigation of the	1
important to the end	1
important to have a	1
important to make sure	1
important to do something	2
important to optimize the	1
important to consider which	1
important to economize the	3
important to economize resource	1
important to understand how	1
important to distinguish between	1
important to study the	1
important to focus the	1
important to decide which	1
important to note that	1
important to weigh the	1
important to remember that	1
important to realize that	1
important to ignore, then	1
important and generally used	1
important for the programmer	1
important for tasks such	1
important that the integer	1
important that the user	1
important that all allocated	1
important or critical parts	1
important it is to	1
important if you have	1
important on most newer	1
important on small devices	1
important than it used	1
important than optimizing CPU	1
important than speed. This	1
important functions are included	1
important new update or	1
important method that is	1
important part of the	1
important disadvantage of the	1
important disadvantage of C++	1
important addition to the	1
important thing is to	1
important usability problems that	1
important obstacles to optimization	1
important work. The updating	1
important distinction between the	1
important remedy is memory	1
accessed in the order	1
accessed in a non-sequential	4
accessed in a random	1
accessed in a FIFO	1
accessed in a FILO	1
accessed in more than	1
accessed in sequential order	1
accessed in non- sequential	1
accessed by any other	2
accessed by several different	1
accessed with the last	1
accessed with a square	1
accessed with an offset	1
accessed on a First-In-Last-	1
accessed on a First-In-First-	1
accessed from the shared	1
accessed from any function.	1
accessed from main through	1
accessed from within the	1
accessed most efficiently if	1
accessed very fast. All	1
accessed much faster. There	1
accessed through the implicit	1
accessed through a pointer	1
accessed through a pointer.	1
accessed through pointers in	1
accessed through pointers or	2
accessed through pointers so	1
accessed through pointers, e.g.:	1
accessed quite fast. The	1
accessed after it has	1
accessed approximately two clock	1
accessed equally fast. In	1
accessed backwards and much	1
accessed sequentially in memory	1
accessed consecutively and can	1
accessed sequentially. The opposite	1
accessed sequentially. It works	1
accessed recently than to	1
accessed non-sequentially because it	1
accessed column-wise. Assume now	1
accessed row-wise, then the	1
CPUs is not needed.	1
CPUs is increasing faster	1
CPUs to verify that	1
CPUs and operating systems	1
CPUs and operating systems.	1
CPUs in a suboptimal	2
CPUs for executing the	1
CPUs that are up	1
CPUs that support this	1
CPUs are so fast	1
CPUs are actually able	1
CPUs are capable of	1
CPUs can be increased	1
CPUs can do a	1
CPUs can change their	1
CPUs can execute instructions	1
CPUs or a CPU	1
CPUs or CPU cores,	1
CPUs or multi-core CPUs,	1
CPUs if the data	1
CPUs if you want	1
CPUs with a slow	1
CPUs with only the	1
CPUs with execution units	2
CPUs with slow bit	1
CPUs with full-size execution	1
CPUs have a built-in	1
CPUs have only one	1
CPUs have two or	1
CPUs have particularly slow	1
CPUs have family number	1
CPUs use Intel VTune,	1
CPUs use AMD CodeAnalyst.	1
CPUs which may cause	1
CPUs such as AMD	1
CPUs cannot be tolerated.	1
CPUs without the FMA4	1
CPUs was more than	1
CPUs unless you are	2
CPUs (See manual 3:	1
CPUs increased the available	1
CPUs (Intel Atom). The	1
CPUs optimally. The speed	1
CPUs unequally can become	1
function. The function may	1
function. The } 59	1
function. The static keyword	1
function. The following example	1
function. The stack is	1
function. The assembly listing	1
function. The automatic dispatching	1
function. The string length	1
function. The overhead of	2
function. The PLT entry	1
function. The initialization routine	1
function. The branching is	1
function. This is efficient,	1
function. This will make	1
function. This has the	2
function. This fragmentation of	1
function. A leaf function	2
function. If the version	1
function. In the simple	1
function. In some cases,	1
function. There are so	1
function. See page 53.	1
function. Example: // Example	2
function. But in the	1
function. But there are	1
function. Function inlining can	1
function. However, the short	1
function. Using an overloaded	1
function. Do not make	1
function. When the program	1
function. Avoid the use	1
function. 12.2 AVX-512 instruction	1
function. Global variables are	1
function. Copying the table	1
function. 7.12 Branches and	1
function. Compile once for	1
function. Provoke branch mispredictions	1
function. Switch between different	1
function. Sometimes, functions are	1
function. __attribute__((const)) (Linux only).	1
function. typeof(CriticalFunction) * CriticalFunctionDispatch(void)	1
function. Leaf functions are	1
function. 154 // Print	1
extra function calls because	1
extra code to check	1
extra code and doesn't	1
extra code for actually	1
extra code at each	1
extra code at all.	1
extra time if it	1
extra time as long	1
extra time may be	1
extra time when the	1
extra cache for the	1
extra software layers and	1
extra register to hold	1
extra register available for	1
extra code. It is	1
extra code. Example: //	1
extra code. Dynamic cast	1
extra time. The delay	1
extra time. This is	1
extra time. It simply	1
extra time. There are	1
extra time. These conversions	1
extra operations outside the	1
extra instructions for address	1
extra instructions for converting	1
extra work needed for	1
extra element zero. It	1
extra check on b	1
extra information to all	1
extra cost is seen	1
extra cost to accessing	1
extra cost whenever a	1
extra framework can consume	1
extra overhead of the	1
extra overhead to prevent	1
extra overhead in the	1
extra overhead which consumes	1
extra resources. Each graphics	1
extra time, of course,	1
extra iteration that has	1
extra level of abstraction	1
extra jump through a	1
extra bits. The unsigned	1
extra precautions to account	1
extra dummy element to	1
extra complications. A double	1
extra layer of a	1
does the same as	2
does the same without	1
does the same thing	1
does the same thing.	1
does the necessary initialization.	1
does not have to	1
does not have its	1
does not use runtime	1
does not make the	1
does not need to	1
does not need any	1
does not need updating	1
does not always apply	1
does not work in	1
does not check for	1
does not check if	1
does not cost anything	1
does not give the	1
does not require a	1
does not produce any	2
does not fit into	1
does not allow vector	1
does not apply to	2
does not spend time	1
does not necessarily stay	1
does not alias any	1
does not alias anything	1
does not cover graphics	1
does not solve all	1
does not occur. See	1
does not throw exceptions	1
does have some disadvantages	1
does this by assigning	1
does It can be	1
does floating point calculations	2
does some things very	1
does some funny things	1
does so in a	1
does quite ingenious things	1
does what you want	1
does not, and therefore	1
does ............................................................................. 84 9	1
does incredibly stupid things.	1
assembly or easy linking	1
assembly on all platforms	1
assembly code to access	1
assembly code to give	1
assembly code for Intel	1
assembly code for AMD	1
assembly code or use	1
assembly code from example	2
assembly instruction for interrupt	1
assembly code. Register ebx	1
assembly code. Let me	1
assembly instructions or small	1
assembly language is provided	1
assembly language and the	1
assembly language and automatic	1
assembly language for CPU-intensive	1
assembly language has full	1
assembly language because a	1
assembly language Use intrinsic	1
assembly language modules when	1
assembly language programming, compiler	1
assembly language output. On	1
assembly language output, which	1
assembly syntax in both	1
assembly output of a	1
assembly output more readable	1
assembly output option is	1
assembly output option then	1
assembly output listing to	1
assembly output (/FAs or	1
assembly programmers and compiler	1
assembly language. It is	1
assembly language. C++ takes	1
assembly language. In fact,	1
assembly language. See page	1
assembly language. Here are	1
assembly names. The details	1
assembly listing reveals three	1
assembly listing /FA -S	1
assembly output. The assembly	1
assembly language". The method	1
assembly language". While we	1
assembly listing. Use the	1
assembly language", section 17.9:	1
assembly language: An optimization	1
large to handle the	2
large for the stack	1
large that we do	1
large or if different	1
large or constant. If	1
large then it obviously	1
large memory model is	1
large memory model where	1
large memory blocks, or	1
large data files and	1
large data sets where	1
large data structures It	1
large data structures .............................................................	1
large data sets. However,	1
large data sets. Covers	1
large data bases, but	1
large because the insertion	1
large number of bits.	1
large static arrays automatically	1
large array can be	1
large objects and arrays	1
large libraries where only	1
large part of it)	1
large arrays and where	1
large arrays if it	1
large shared object where	1
large block containing many	1
large cost to creating	1
large runtime framework for	1
large runtime framework that	1
large expressions when not	1
large graphics frameworks, interpreters,	1
large positive number when	2
large overhead of managing	1
large overhead cost to	1
large libraries. The memory	1
large delay due to	1
large fraction of the	1
large arrays. Array size	1
large applications. The string	1
large object, unless there	1
large arrays, it may	1
large amounts of memory	1
large delays. The easiest	1
must be a compromise	1
must be called when	1
must be called before	1
must be done manually	1
must be inside the	1
must be read into	1
must be aligned by	1
must be declared volatile.	1
must be divisible by	1
must be loaded every	1
must be dynamically created	1
must be saved from	1
must be found elsewhere.	1
must be multiplied by	1
must be placed immediately	1
must be careful when	1
must be added. This	1
must be adjusted if	1
must be emphasized that	1
must be followed by	1
must be reversed if	1
must have a high	1
must have a destructor	1
must have extern "C"	1
must use a function	1
must use thread-safe functions.	1
must then check for	1
must make sure that	1
must make your program	1
must do the extra	1
must return to its	1
must always end with	1
must check if it	1
must calculate its address.	1
must go through a	1
must rely on instructions	1
must convert it to	1
must consider that the	1
must consider if intermediate	1
must wait until a	1
must install a large	1
must clean up everything	1
must begin at an	1
must compute (FuncRow(i)*columns +	1
must warn against overkill.	1
must bear in mind,	1
while the program is	2
while the type conversion	1
while the Gnu mechanism	1
while the speed of	1
while the multiplication is	1
while the expression a	1
while the expression that	1
while the runtime address	1
while the Borland and	1
while a function that	1
while a double uses	1
while in the former	1
while it is more	1
while if is resolved	1
while an int is	1
while you can only	1
while data that are	1
while other functions can	1
while other compilers have	1
while other compilers will	1
while loop is to	1
while loop in example	1
while loop because nothing	1
while all newer Intel	1
while most of the	1
while multiple statements within	1
while many reductions involving	1
while less than 1%	1
while pointers and non-constant	1
while dynamic linking makes	1
while execution speed, memory	1
while another thread is	1
while (i < arraysize)	1
while Pentium 4 and	1
while seconds count to	1
while waiting for disk	1
while (n != 0)	1
while simultaneously prefetching the	1
while high-level languages are	1
while loop, the if	1
while loops, then the	1
while (*p != 0)	1
while (seconds < 5)	1
while (0 < 5)	1
while he or she	1
; a ; r	1
; Example 8.26a compiled	1
; Example 8.26b compiled	1
; point to a[i+2]	1
; double Func2(double x)	1
; i + sign(i)	1
; i < arraysize;	1
; return from Func	1
; return ; align	1
; add what r	1
; store result in	1
; parameter 2: 12	1
; parameter 1: 4	1
; parameter 1: 8	1
; parameter $B1$1: mov	1
; r ; unused	1
; a[i] = Induction;	1
; start of Func	1
; unused label ;	3
; unused label ;eax=addressofa	1
; shift right =	1
; shift down sign	1
; save ebx on	1
; repeat loop if	1
; align by 4	1
; align ; mark	1
; eax = i	1
; ecx = a	1
; ecx = Induction	1
; jump to top	1
; edx = point	1
; edx = r	1
; compare with end	1
; top of loop	2
; compute i/2 in	1
; a[i+1] = Induction;	1
; Induction++; ; point	1
; i++ ;checkifi<100 ;	1
; mangled function name	2
; restore ebx from	1
; mark end of	1
; mark_end; This solution	1
arrays is fast and	1
arrays of different types	1
arrays of variable size.	1
arrays of structure or	1
arrays and other big	1
arrays and where the	1
arrays and want to	1
arrays and big structures	1
arrays and objects. Storage	1
arrays and structures. Useful	1
arrays in the final	1
arrays in C and	1
arrays that are bigger	1
arrays that you want	1
arrays are faster than	1
arrays are accessed through	3
arrays are aligned or	1
arrays are aligned by	1
arrays are sufficiently large	2
arrays are properly aligned	1
arrays are aligned, and	1
arrays can be allocated	1
arrays // Define macro	1
arrays or structures are	1
arrays if it can	1
arrays by the cache	1
arrays by well-tested container	1
arrays with vector access.	1
arrays with bounds checking	1
arrays with alloca. This	1
arrays as required, but	1
arrays It may not	1
arrays should be accessed	1
arrays should be declared	1
arrays very big to	1
arrays even if they	1
arrays inside the function	1
arrays automatically but you	1
arrays bigger than 2	1
arrays require a few	1
arrays Alignd ( short	1
arrays forwards, not backwards.	1
work the same way	1
work to do immediately	1
work to take a	1
work in example 9.6b.	1
work in both Windows	1
work for class member	1
work for very long	1
work that the processor	1
work that needs to	1
work can be found	1
work // Re-do the	1
work it has done	1
work with any type	1
work with member functions,	1
work with both static	1
work on the Intel	1
work on the PathScale	1
work on a Linux	1
work on all C++	1
work on all compilers.	1
work on compilers that	1
work on non-Intel processors).	1
work as a learning	1
work as possible. Typically	1
work int i =	1
work when Intel libraries	1
work only on Intel/x86-compatible	1
work into each thread.	1
work into multiple threads.	2
work cannot be ignored	1
work best on future	1
work well on AMD	1
work well on non-Intel	1
work needed for calculating	1
work load is high	1
work load is low	1
work around this limitation	1
work efficiently on all	1
work automatically. The development	1
work better. If the	1
work better. Remember again,	1
work load. The clock	1
work correctly. The speed	1
work evenly between the	1
(see page 130 for	1
(see page 134 on	1
(see page 107). The	1
(see page 107). Agner's	1
(see page 16) shows	1
(see page 71). In	1
(see page 73). It	1
(see page 73). Current	1
(see page 78). A	1
(see page 78). Adding	1
(see page 137). This	1
(see page 43). The	1
(see page 87). Data	1
(see page 105). If	1
(see page 105). Using	1
(see page 140). The	1
(see page 140). Mathematical	1
(see page 51). The	1
(see page 27). The	1
(see page 103) will	1
(see page 107), OpenMP	1
(see page 122) for	1
(see page 53). No	1
(see page 93). All	1
(see page 96). Virtual	1
(see page 103), but	1
(see page 142). 30	1
(see page 84). The	1
(see page 134) return	1
(see page 135). This	1
(see page 38). Is	1
(see page 72). The	1
(see page 73) automatically	1
(see page 70). The	1
(see p. 43). There	1
(see p. 87). There	1
(see p. 104). The	1
(see p. 22). 159	1
(see p. 57). It	1
(see above, page 87)	1
(see above, p. 26).	1
(see below) then it	1
(see below) 16.1 Using	1
(see below). The 256-bit	1
(see below). A variable	1
Windows and the Gnu	1
Windows and to Eclipse	1
Windows and C++ is	1
Windows and 32-bit and	1
Windows and 32-bit Linux	1
Windows and Linux operating	1
Windows and Mac programs	1
Windows and Linux, 32-bit	1
Windows and Linux. The	1
Windows and Linux. Asmlib	1
Windows and Mac. The	1
Windows in this respect.	1
Windows are fully compatible	1
Windows if functions have	1
Windows by transferring 'this'	1
Windows compiler to work	1
Windows may be mitigated	1
Windows you can increase	1
Windows program that created	1
Windows Intel compiler Linux	2
Windows version is currently	1
Windows operating system, this	1
Windows Gnu compiler Linux	3
Windows Linux __INTEL_COMPILER __INTEL_COMPILER	1
Windows allows a maximum	1
Windows allows only four	1
Windows platform _WIN32 _WIN32	1
Windows platforms. The Microsoft	1
Windows platforms. The Clang	1
Windows platforms. This library	1
Windows syntax or See	1
Windows (See page 49	1
Windows Library (OWL). Several	1
Windows system. Note that	1
Windows applications. The choice	1
Windows Template Library (WTL).	1
Windows Template Library (WTL):	1
Windows 7 and Windows	1
Windows DLLs use relocation.	1
Windows 3.x. These systems	1
Windows Server 2008 R2	1
Windows MFC). This method	1
calls the function is	1
calls the same version	1
calls the critical function	2
calls the dispatcher function	1
calls is the same	1
calls a function in	1
calls a device driver.	1
calls to the copy	1
calls to a pure	1
calls to check for	1
calls to frame functions	1
calls to frame functions.	1
calls to memset and	1
calls to CriticalFunction. If	1
calls to log, and	1
calls and it can	1
calls and it needs	1
calls and branches in	1
calls and branches. The	1
calls in the most	1
calls in the critical	2
calls in the innermost	1
calls are saved in	1
calls can be mispredicted	1
calls may run slightly	1
calls may slow down	1
calls more efficient. The	1
calls at least one	1
calls because the CPU	1
calls other functions is	1
calls faster and makes	1
calls faster in 32-bit	1
calls rather than self-styled	1
calls another function which	1
calls another function F2	1
calls another function, etc.,	1
calls another dispatched function	1
calls it. A dynamic	1
calls (e.g. IsProcessorFeaturePresent in	1
calls directly to the	1
calls exit. Calling exit	1
calls exit(), abort(), _endthread(),	1
calls alternately FuncA and	1
calculations of loop iterations	1
calculations of (2n /	1
calculations to save time.	1
calculations and the loop	1
calculations in a safe	1
calculations in floating point	1
calculations in parallel if	1
calculations in parallel. Modern	1
calculations are available at	1
calculations are done with	1
calculations are done at	1
calculations are done only	1
calculations are just as	1
calculations can cause overflow.	1
calculations or turn off	1
calculations with memory access.	1
calculations on the first	1
calculations on the data.	1
calculations on the second	1
calculations on large data	1
calculations on vectors of	1
calculations as long as	1
calculations may take more	1
calculations have to be	1
calculations will typically use	1
calculations then you have	1
calculations at compile time	1
calculations should therefore preferably	1
calculations into a separate	1
calculations so that the	1
calculations take no more	1
calculations without the need	1
calculations while another thread	1
calculations while simultaneously prefetching	1
calculations inside the loop	2
calculations inside the loop.	1
calculations unless the strictness	1
calculations piece by piece	1
calculations usually take the	1
calculations go outside the	1
calculations including linear algebra	1
calculations whenever they are	1
calculations simultaneously or out	1
calculations forms a long	1
versions of the same	2
versions of the CPU	1
versions of the most	2
versions of the library	1
versions of the critical	1
versions of the virtual	1
versions of the polymorphic	1
versions of the strlen	1
versions of the user-written	1
versions of a function	1
versions of a program	1
versions of a critical	1
versions of an overloaded	1
versions of memory and	1
versions of Intel microprocessors	1
versions of these manuals	1
versions of common string	1
versions of Linux and	1
versions of their 23	1
versions of CriticalFunction in	1
versions and turn off	1
versions for different instruction	2
versions for different processors	1
versions for different compilers.	1
versions for different CPUs.	2
versions are available for	1
versions are produced regularly.	2
versions with and without	1
versions have to be	1
versions should be used	1
versions should be linked	1
versions without an IDE.	1
versions even of functions	1
versions work correctly. The	1
versions #include "instrset_detect.cpp" //	1
versions were tested: Microsoft	1
versions tested (not up	1
versions 7 through 14,	1
versions alternatingly several times	1
versions instead. The Gnu	1
execution is no doubt	1
execution of everything else.	2
execution of CriticalFunction. You	1
execution to the point	1
execution and advanced prediction	1
execution by causing return	1
execution may be caused	1
execution time on executing	1
execution time when code	1
execution time because the	2
execution then it is	1
execution time. 4 2	1
execution time. Loop unrolling	1
execution time. No universal	1
execution times per matrix	1
execution speed to using	2
execution speed and for	1
execution speed in any	1
execution speed or program	1
execution All modern x86	1
execution mechanism can prefetch	1
execution mechanism works automatically.	1
execution core of modern	1
execution units. The size	1
execution units. The problem	1
execution units. If any	1
execution units. For example,	1
execution units. Each 128-bit	1
execution units. Any floating	1
execution units. Typically, there	1
execution units and hence	1
execution units in the	1
execution units same size	1
execution units rather than	1
execution units smaller than	1
execution units, memory ports,	1
execution (chapter 11) and	1
execution ................................................................................................. 103 12	1
execution unit. For example,	1
execution speed, memory economy	1
execution speed, memory economy,	1
execution considerably. Another serious	1
avoid the loop overhead.	1
avoid the large graphics	1
avoid the calls to	1
avoid the problem that	1
avoid the multiplication by	1
avoid the overhead of	1
avoid the conversions and	1
avoid the inefficient virtual	1
avoid the time- consuming	1
avoid the burdensome position-independent	1
avoid that the critical	1
avoid that some expression	1
avoid an excessive number	1
avoid this in a	1
avoid this by using	1
avoid this method if	1
avoid this error by	1
avoid this problem by	1
avoid this wasteful copying	1
avoid multiple threads writing	1
avoid multiple inheritance by	1
avoid any use of	1
avoid long dependency chains.	2
avoid these and handle	1
avoid these problems. More	1
avoid dynamic memory allocation	1
avoid dynamic memory allocation.	2
avoid making any pointer	1
avoid virtual functions then	1
avoid running the advanced	1
avoid running two threads	1
avoid global variables or	1
avoid conversions from integer	1
avoid conversions from float	1
avoid it. Global variables	1
avoid powers of 2	1
avoid this. See page	1
avoid this. (In Windows,	1
avoid them. Some important	1
avoid macros with short	1
avoid modulo operations: //	1
avoid hyperthreading by using	1
avoid hard-to-find errors, and	1
result is the same	1
result is that x	1
result is stored in	2
result is known to	2
result is valid. Re-interpreting	1
result of the &	1
result of the expression	1
result of the preceding	4
result of the previous	1
result of other optimizations	1
result of each step	1
result of macro expansions.	1
result of full optimization.	1
result of comparing signed	1
result to see if	1
result in a vector	1
result in a different	1
result in array ;	1
result in x. The	1
result in a[i]. Note	1
result can be calculated	1
result // Update induction	1
result = b >	2
result if we change	1
result by using intrinsic	1
result will be 2.	1
result will be infinity	1
result will be misleading	1
result then we will	1
result vector in eight	4
result because the overflow	1
result 100 rather than	1
result ebx is then	1
result back to single	1
result -56 rather than	1
result (b+c) can be	1
processor the user expects	1
processor is not an	2
processor is an Intel	1
processor is much slower	1
processor is compatible with	1
processor to give higher	1
processor and the operating	1
processor and the type	1
processor and a Windows,	1
processor for calculating the	1
processor that you optimized	1
processor can do while	1
processor with four cores	1
processor may be able	1
processor may be given	1
processor may have a	1
processor will have an	1
processor has a particular	1
processor has four physical	1
processor has hyperthreading. If	1
processor makes the dispatcher	1
processor model is going	1
processor model will work	1
processor model numbers form	1
processor model N supports	1
processor core on multi-core	1
processor models to avoid	1
processor models to run	1
processor models on which	2
processor models rather than	1
processor core. Unfortunately, contemporary	1
processor core. Two threads	1
processor core. Try to	1
processor cores. Each thread	1
processor performs better on	1
processor appears on the	1
processor features. The programmer	1
processor model. You may	1
processor X" is simply	1
processor enters the market	1
processor X?" rather than	1
processor activates critical application-	1
compiled to an intermediate	1
compiled to binary code	1
compiled to assembly: ALIGN	2
compiled and distributed as	1
compiled in multiple versions	1
compiled for the instruction	1
compiled for the specific	1
compiled for the AVX	1
compiled for the desired	1
compiled for a particular	1
compiled for 64-bit operating	1
compiled for AVX or	1
compiled for old processors	1
compiled with the option	1
compiled with and without	1
compiled with different compilers	1
compiled with different compilers.	1
compiled with AVX support	2
compiled with -fpic and	1
compiled on a PC	1
compiled code and intermediate	1
compiled code may run	1
compiled code big and	1
compiled as a dynamic	1
compiled as position-independent has	1
compiled when it is	1
compiled into an intermediate	1
compiled C++ or assembly	1
compiled version is preferred	1
compiled code. In general,	1
compiled code. Compiled languages	1
compiled code. (Compile without	1
compiled without any option	1
compiled without AVX support	1
compiled without -fpic is	1
compiled without -fpic because	1
compiled without AVX, as	1
compiled programming languages as	1
compiled versions #include "instrset_detect.cpp"	1
compiled three times, one	1
compiled languages such as	1
compiled C++. This typically	1
An integer is converted	1
An integer may be	1
An integer overflow will	1
An example is Perl.	1
An object of a	2
An object cannot be	1
An efficient solution in	1
An array is implemented	1
An array can be	1
An array using the	1
An array overflow can	1
An array initialized by	1
An optimization guide for	4
An even more powerful	1
An even worse kind	1
An error message is	1
An important disadvantage of	1
An allocated array may	1
An overflow of an	1
An inline function is	1
An optimizing compiler can	2
An optimizing compiler may	1
An optimizing compiler might	1
An application with many	1
An expression that is	1
An expression or subexpression	1
An expression with multiple	1
An implementation of the	1
An overloaded operator is	1
An alternative is to	1
An alternative solution is	1
An interrupt service routine	1
An OR combination of	1
An enum is simply	1
An appendix to this	1
An uncached write is	1
An inferior version of	1
An experiment where 10	1
An uncaught overflow condition	1
Use the call stack	1
Use the option for	1
Use the option that	1
Use the latest version	1
Use the "generate map	1
Use a compiler that	1
Use a reference or	1
Use a profiler to	2
Use a "move constructor"	1
Use function libraries with	1
Use an old computer	1
Use an antivirus program	1
Use different executables. This	1
Use 64-bit mode or	1
Use 64-bit mode Parameter	1
Use template to get	1
Use these example containers	1
Use simple method. //	1
Use Gnu or Intel	1
Use CPUs with execution	1
Use assembly language Use	1
Use large data files	1
Use another function library	1
Use inline functions An	1
Use intrinsic functions Use	1
Use signed when converting	1
Use automatic parallelization. The	1
Use lookup tables Reading	1
Use lookup tables .................................................................................................	1
Use appropriate compiler options	1
Use whole program optimization	1
Use macro as inline	1
Use square blocking: int	1
Use bitwise operators for	2
Use OpenMP directives. OpenMP	1
Use 12 option -fno-builtin	1
Use rounding instead of	1
Use macros instead of	1
Use mask to choose	1
Use ReadTSC() from library	1
Use fastcall functions The	1
Use predefined vector classes	1
bytes is slightly less	1
bytes of memory. One	1
bytes of storage space.	1
bytes of code). If	1
bytes to find the	1
bytes in the end.	1
bytes in a structure	1
bytes in 64-bit systems.	1
bytes in 32-bit systems	1
bytes can be reduced	1
bytes // 8 bytes.	1
bytes = int 4	1
bytes = int 8	1
bytes = double 2	1
bytes = double 4	1
bytes = float or	2
bytes = float 4	1
bytes = float 8	1
bytes = 4 rows.	1
bytes = int64_t 2	1
bytes = int64_t 4	1
bytes or more then	1
bytes by adding one	1
bytes on contemporary processors.	1
bytes then put the	1
bytes from address 0x2700	1
bytes at a time	1
bytes should be stored	1
bytes Intel Core 2	1
bytes between a and	1
bytes without cache MOVNTQ	1
bytes without cache MOVNTDQ	1
bytes without cache MOVNTPD	1
bytes without cache MOVNTPS	1
bytes without cache MOVNTI	1
bytes AMD Opteron K8	1
bytes byte at 0,	1
bytes smaller and the	1
bytes S1 ArrayOfStructures[100]; This	1
bytes bool 1 1	1
bytes smaller. Structure and	1
bytes each. The critical	1
bytes alignment, bytes bool	1
big a structure or	1
big to cover the	1
big and is called	1
big and uses more	1
big in order to	1
big for the stack.	1
big that overflow can	1
big that caching becomes	1
big memory block than	1
big memory blocks is	1
big data structures with	1
big data structures. For	1
big data structures. On	1
big program when the	1
big loop then you	1
big floating point library	1
big objects that take	1
big objects come last	1
big software companies often	1
big before multiplying them.	1
big file containing numerical	1
big arrays and other	1
big arrays and want	1
big matrix happen to	1
big problem if the	1
big program. Frequent context	1
big block of memory	1
big difference in performance	1
big runtime frameworks, intermediate	1
big structures by 16	1
big problem. Whenever the	1
big enough to hold	1
big enough for the	1
big enough for a	1
big waste of resources.	1
big blocks is faster	1
big blocks rather than	1
big endian systems you	1
big endian storage (e.g.	1
big endian storage. If	1
big arrays, then it	1
big mainframe computer. Big	1
big mainframe computers. Today,	1
big registration database in	1
doesn't have the necessary	1
doesn't have the line	1
doesn't have to save	1
doesn't have to push	1
doesn't have to obey	1
doesn't have an assembly	1
doesn't have information about	1
doesn't make such an	1
doesn't call any other	2
doesn't take any extra	1
doesn't need the 'this'	1
doesn't need a 'this'	1
doesn't need a constructor.	1
doesn't need induction variables	1
doesn't need initialization. A	1
doesn't work for class	1
doesn't work // Re-do	1
doesn't work with member	1
doesn't work int i	1
doesn't work well on	1
doesn't cause overflow in	1
doesn't cause overflow. Example:	1
doesn't works (gcc v.	1
doesn't add or remove	1
doesn't automatically check for	1
doesn't give the 124	1
doesn't know the value	1
doesn't know in advance	1
doesn't know what class	1
doesn't generate any extra	1
doesn't prevent two threads	1
doesn't handle current CPUs	1
doesn't occur has the	1
doesn't delay the subsequent	1
doesn't matter and there	1
doesn't matter if the	1
doesn't depend on system-specific	1
doesn't compromise safety is	1
doesn't mean atomic. It	1
doesn't occur. In the	1
doesn't occur, but unfortunately	1
doesn't support, and the	1
doesn't provide the best	1
threads is discussed on	1
threads is minimized. For	1
threads and put an	1
threads in the same	2
threads in a multithreaded	1
threads in each core.	1
threads that run in	1
threads that jump between	1
threads are often waiting	1
threads are doing different	1
threads are competing for	1
threads are sharing the	1
threads are areas where	1
threads can share the	1
threads can add, remove	1
threads with the same	2
threads with different priorities	1
threads with low priority.	1
threads with lower priority.	1
threads with widely different	1
threads on a system	1
threads have each their	1
threads have access to	1
threads have finished the	1
threads use different memory	1
threads will invalidate each	1
threads from attempting to	1
threads should rely on	1
threads where one thread	1
threads so that one	1
threads need separate storage.	1
threads must be declared	1
threads write to the	1
threads running in the	1
threads becomes faster and	1
threads writing to the	2
threads share the same	1
threads simultaneously. This processor	1
threads simultaneously. If the	1
threads Parallelization by OpenMP	1
best and most up-to-date	1
best for all applications.	1
best function libraries are	1
best if the following	1
best on the newest	1
best on a typical	1
best on processors with	1
best on processor X?"	1
best on future processors,	1
best compiler and call	1
best when the loop	1
best at doing equivalent	1
best compilers use the	1
best into the algorithm	2
best possible instruction set	1
best possible version of	1
best possible branch if	1
best possible version. See	1
best performance is obtained	3
best way to avoid	1
best way to check	1
best way to prevent	1
best way to fully	1
best way to identify	1
best optimization it may	1
best optimized function libraries	1
best optimized math function	1
best solution is to	1
best optimizing compilers available,	1
best implementation for a	1
best cases. It is	1
best algorithm than by	1
best performance. The Windows	1
best under this unit-test	1
best Java machines use	1
best Java implementations. However,	1
best job optimizing a	1
best suited for the	1
best optimizer. Borland/CodeGear/Embarcadero C++	1
best algorithm. The choice	1
necessary to have many	1
necessary to use 64-bit	1
necessary to use assembly	1
necessary to do the	1
necessary to do this	1
necessary to do optimizations	1
necessary to do experiments	1
necessary to first look	1
necessary to test the	1
necessary to check if	1
necessary to optimize anything	1
necessary to replace the	1
necessary to look up	1
necessary to load several	1
necessary to unroll a	1
necessary to convert b	1
necessary to modify the	1
necessary to allocate a	1
necessary to compromise on	1
necessary to reload *p	1
necessary to query certain	1
necessary to adhere to	1
necessary in the following	1
necessary for your application	1
necessary for verifying the	1
necessary if the objects	1
necessary if you can	1
necessary when no attempt	1
necessary then it may	1
necessary because the factorials	1
necessary functions for distinguishing	1
necessary instruction set. It	1
necessary library files are	1
necessary (see page 96).	1
necessary calculations of (2n	1
necessary information about which	1
necessary information about Func1	1
necessary here to draw	1
necessary destructors after jumping	1
necessary communication between threads	1
necessary cleanup jobs to	1
necessary initialization. The compiler	1
necessary support. Hardware updating.	1
element is stored (or	1
element is accessed, and	1
element is stored? If	1
element of the array	1
element to list and	1
element to x?" or	1
element in the list	1
element in the arrays:	1
element in a matrix	1
element in a linked	1
element in an array,	1
element in vector c	2
element in vector c2	1
element in vector bc	1
element in b to	2
element in order to	1
element in list, the	1
element for a 512	1
element if the address	1
element } An array	1
element then use a	1
element Example 9.6a Time	1
element Example 9.6b 64	1
element has to wait	1
element number 16 in	1
element number i. The	1
element 0 in this	1
element addresses for one	1
element __m128i a =	1
element a[i] is ecx+eax*4.	1
element outside the loop	1
element level 9. Avoid	1
element level 108 You	1
element Instruction set needed	1
element zero. It is	1
element 63 63 31	1
element matrix[r][c] is swapped	1
element matrix[r][c] below the	1
element matrix[c][r] at its	1
element (approximately): if (absvalue	1
element matrix[c][r]. // Example	1
language is a compromise	1
language is that the	1
language is best suited	1
language is chosen as	1
language is provided as	1
language is portable in	1
language is implemented. The	1
language is inherently parallel	1
language and the rest	1
language and a basic	1
language and development tool	1
language and automatic CPU-dispatching	1
language and interface frameworks.	1
language in the same	1
language for CPU-intensive code,	1
language that can be	1
language that allows direct	1
language that requires compilation	1
language with a wealth	1
language as a subset,	1
language when the optimization	1
language will often be	1
language has full metaprogramming	1
language because a good	1
language also includes the	1
language elements in order	1
language need only read	1
language Use intrinsic functions	1
language allows compile-time if	1
language runtime of the	1
language based on intermediate	1
language modules when the	1
language defines an algorithm	1
language defines hardware circuits	1
language programming, compiler technology,	1
language 11 programming, etc.	1
language While C++ has	1
language output. On most	1
language Before starting a	1
language relates to security.	1
language ............................................................................... 8 2.5	1
language gained remarkably in	1
language output, which is	1
But the compiler doesn't	1
But the same errors	1
But the C++ language	1
But the software implementation	1
But the & operator	1
But the cost of	1
But a solution where	1
But a highly optimized	1
But a sorted list	1
But in the template	1
But in more complex	1
But it is the	1
But it is possible	1
But it is certainly	1
But it can be	1
But it may be	1
But if the program	1
But if the loop	1
But if the software	1
But if a large	1
But if all the	1
But if I write	1
But not if the	1
But an optimizing compiler	1
But this language gained	1
But this solution can	1
But when the result	1
But program loading can	1
But each member function	1
But most of the	1
But there is an	1
But there are a	1
But there are special	1
But many programs use	1
But we will not	1
But we do have	1
But these eight elements	1
But what if an	1
But lazy binding definitely	1
But implementing a matrix	1
But beware of the	1
But beware that these	1
But beware that macro	1
speed is many times	1
speed is relevant when	1
speed is particularly critical.	1
speed is critical. The	1
speed is important. This	1
speed is important. Some	1
speed is important. An	1
speed of a program	1
speed of functions with	1
speed of each version	1
speed of CPUs is	1
speed of modern microprocessors	1
speed of RAM memory.	1
speed of addition, subtraction,	1
speed to using templates.	1
speed to using namespaces.	1
speed and for minimizing	1
speed in any of	1
speed for certain tasks	1
speed or not at	1
speed or program size,	1
speed or size. Today,	1
speed or full speed.	1
speed or not. There	1
speed if the bottleneck	1
speed by using a	1
speed by using short	1
speed by using vectors	1
speed on non-Intel CPUs	1
speed will be improved	1
speed because of cache	1
speed between using signed	1
speed between single and	1
speed between rounding and	1
speed test should preferably	1
speed without jeopardizing safety,	1
speed up the calculation	1
speed up multiplications and	1
speed advantage in using	1
speed here is likely	1
speed Testing the speed	1
speed exceeding that of	1
speed /O2 or /Ox	1
specific to Microsoft compilers.	1
specific functions have names	1
specific CPU model and	1
specific CPU feature on	1
specific CPU core by	1
specific CPU core during	1
specific CPU models if	1
specific CPU brands or	1
specific CPU models. However,	1
specific instruction set. 13.6	1
specific instruction set, e.g.	1
specific size is different	1
specific pointer does not	1
specific version of the	1
specific order but are	1
specific optimization instructions at	1
specific instructions that are	1
specific processor models rather	1
specific advantage to obtain,	1
specific parts of the	1
specific optimizations in precompiled	1
specific graphics framework is	1
specific load address. If	1
specific calling conventions for	1
specific advantages that can	1
specific size. Integer operations	1
specific models then you	1
specific purpose in order	1
specific places in the	1
specific profiler. For Intel	1
specific event it is	1
specific recommendation of which	1
specific recommendation about which	1
specific bottleneck or any	1
specific purpose. It is	1
specific needs. 9.8 Strings	1
specific literature for more	1
specific model. Instead, I	1
specific purpose, you must	1
specific preferences for the	1
specific purpose: Contain one	1
specific option) better: -Ofast	1
specific interval. A hash	1
c is added to	1
c and d would	1
c are integers, while	1
c can share the	1
c = a +	1
c = a *	1
c = a &	1
c = a &&	1
c = b +	2
c = 0; }	1
c = 1; }	1
c = temp /	1
c = d +	1
c = 100, y;	1
c = LoadVector(cc +	3
c = (a+1) /	1
c = 1.23456, y;	1
c loop in example	1
c + b +	1
c + 2 :	2
c + d; //	1
c + d; This	1
c + 2, b	2
c + two, b	1
c < SIZE; c++)	2
c < r; c++)	2
c < 0. The	1
c __m128i c2 =	2
c __m128i bc =	2
c > b) But	1
c (a&&b) || (a&&b&&c)	1
c first. b+c =	1
c x-xx----- 75 (a&&b)	1
much is a clock	2
much of the trivial	1
much on the compiler.	1
much as possible at	1
much you gain in	1
much time is wasted	1
much time it takes.	1
much time it uses.	1
much time each part	1
much more by choosing	1
much more than the	1
much more time than	2
much more efficient to	1
much more efficient if	1
much more complicated implementation	1
much more resources than	2
much more dramatic when	1
much memory a function	1
much data for one	1
much data as possible	1
much faster to access	1
much faster than the	1
much less memory and	1
much less efficiently when	1
much about the costs	1
much about overflow and	1
much space in the	1
much longer time than	3
much higher than normal.	1
much higher resolution can	1
much faster. In the	1
much faster. There may	1
much faster. Division by	1
much slower than a	1
much simpler in 64-bit	1
much stronger for level-2	1
much faster, except perhaps	1
single and double precision	2
single and double precision.	1
single or double precision,	1
single function or hot	1
single function by adding	1
single function from the	1
single object file. This	2
single branch if the	1
single call to a	1
single call to memcpy	1
single bit which is	1
single register the object	1
single & operation, which	1
single instructions that take	1
single constant with a	1
single function. Switch between	1
single assembly instructions or	1
single precision to double	1
single precision or by	1
single precision or double	1
single precision if you	1
single precision than for	1
single precision variables in	2
single operation using the	1
single task that consumes	1
single precision. These conversions	1
single precision. Using double	1
single precision. When the	1
single precision. And who	1
single executable file when	1
single element. The most	1
single step rather than	1
single result. An uncaught	1
single operation. Example: //	1
single instruction. The CPU	1
single container, preferably with	1
single comparison: // Example	1
single result, true (1)	1
single session. But lazy	1
i; for (i =	6
i; if ((unsigned int)i	1
i; int Induction =	1
i; } } Example	1
i; } x; x.f	1
i; } Here, the	1
i; } u; if	1
i; } u; int	2
i; } u; u.i	2
i; } u, v;	2
i; float x; for	1
i; float f; f=i;	1
i; float a[size], b[size];	1
i; float a[size], b[size],	1
i; float list[size]; ...	1
i; float i2; for(i=0,i2=0;	1
i; return f; }	1
i; long long time1;	1
i; const int ARRAYSIZE	1
i; short int s;	2
i; ... for (i	2
i; ... if (i	1
i; ... list[i &	1
i; Here, the value	1
i; p = p	1
i; for(i=0; i<300; i++){	2
i; for(i=0; i<300; i+=3){	1
i; for(i=0; i<100; i++)a[i]=2*i;	1
i; for(i=0; i<301; i+=3){	1
i; 45 for (i	1
i; 84 for (i	1
These are of course	1
These are available as	1
These function libraries are	2
These may be used	1
These different methods have	1
These functions are listed	1
These functions are highly	1
These two functions are	1
These two books contain	1
These table lookups are	1
These registers have long	1
These new instructions can	1
These systems use segmentation	1
These cases are usually	1
These instructions are summarized	1
These instructions are accessible	1
These instructions write directly	1
These virtual processors can	1
These operators and functions	1
These addresses all belong	1
These problems should be	1
These complicated cases should	1
These methods are discussed	1
These methods also work	1
These directives are supported	1
These conversions are not	1
These conversions can be	1
These conversions do not	1
These conversions take a	1
These lines are organized	1
These costs are higher	1
These costs can be	1
These containers should definitely	1
These counters can be	1
These algorithms are described	1
These factors are explained	1
These profilers are useful	1
These units are used	1
These requirements are often	1
These suffixes are listed	1
These workaround methods depend	1
virtual function is called	1
virtual function is needed.	1
virtual function will be	1
virtual function } };	1
virtual function call if	1
virtual function calls is	1
virtual function dispatch mechanism	1
virtual function dispatch process.	1
virtual function tables. The	1
virtual functions are used	1
virtual functions or when	1
virtual functions if possible.	1
virtual functions then you	1
virtual functions class CHello	1
virtual table is used	1
virtual table to see	1
virtual table before the	1
virtual table lookup for	1
virtual member the object	1
virtual member function is	1
virtual member functions if	1
virtual member functions then	1
virtual member function. See	1
virtual member functions. The	1
virtual void Disp() {	2
virtual void f(); };	2
virtual void Disp(); void	1
virtual processors can have	1
virtual processors on the	1
virtual function. If the	1
virtual processor may be	1
virtual processor may have	1
virtual functions. The template	1
virtual functions. This so-called	1
virtual functions, and other	1
virtual destructor is as	1
virtual table. Unfortunately, few	1
virtual machine are frameworks	1
virtual 53 function at	1
virtual machine. The best	1
several different functions and	1
several different C++ compilers	1
several different CPUs if	1
several different ways of	2
several different CPUs. On	1
several different purposes. All	1
several different algorithms in	1
several different profiling methods:	1
several functions that are	1
several other less well-known	1
several clock cycles whenever	1
several clock cycles. You	1
several variables happen to	1
several times in order	2
several large arrays and	1
several versions for different	1
several execution units. Typically,	1
several standard PC's in	1
several files when the	1
several branches is not	1
several applications use the	1
several examples of suitable	1
several advantages over 32	1
several ways to divide	1
several seconds to access	1
several seconds because it	1
several iterations of redesign.	1
several iterations ahead. It	1
several factors that can	2
several hundred clock cycles	1
several reasons. C++ is	1
several years before your	1
several layers of abstraction	1
several drivers, configuration files	1
several minutes to write	1
several minutes to start	1
several meanings depending on	1
several stages before they	1
several flaws: The best	1
through the following steps	1
through the calculations so	1
through the PLT and	1
through the implicit pointer	1
through the Internet at	1
through the symbolic link.	1
through a function pointer	2
through a function call.	1
through a pointer to	1
through a pointer in	1
through a pointer or	4
through a pointer stored	1
through a template parameter.	2
through a linked list	1
through a second step	1
through a pointer. It	1
through a smart pointer.	1
through a linear array.	1
through a series of	1
through a self-relative address.	1
through a hidden pointer.	1
through function pointer a	1
through function calls. Internal	1
through an import table	1
through an imported pointer,	1
through this address. Step	1
through multiple function calls.	1
through multiple layers and	1
through array cout <<	1
through pointers in one	1
through pointers or references	1
through pointers or references:	1
through pointers so that	1
through rows for (c	1
through rows // loop	1
through pointers, e.g.: //	1
through 14, with some	1
common to make two	1
common to make container	1
common to exchange data	1
common for software to	1
common function libraries are	1
common memory and string	1
common compilers are mentioned	1
common way of setting	1
common programming error known	1
common programming errors associated	1
common programming error. The	1
common error that hackers	1
common language runtime of	1
common cause of errors	1
common cause of reduced	1
common programs use inappropriate	1
common problems with profilers	1
common mathematical functions such	1
common mathematical calculations including	1
common source of error	1
common string functions as	1
common platforms with Windows,	1
common math functions such	1
common subexpression elimination and	1
common subexpression elimination, constant	2
common situation where the	1
common implementations of string	1
common implementations of smart	1
common purposes (www.boost.org). The	1
common names. Use fastcall	1
common pitfalls of CPU	1
common obstacles to efficient	1
common entry point extern	1
common time-consumers are discussed	1
common excuse that "we	1
common subexpressions, and induction	1
common denominator can even	1
common denominator: // Example	1
common subexpressions that contain	1
common practice to test	1
common sub-expressions. Why is	1
a, a & 0	1
a, a | a	1
a, a | 0	1
a, a || false	1
a, int x[]) {	1
a, but they are	1
a, b and c	1
a, float b) {x	1
a, b; a =	8
a, b; // everything	1
a, b; // Critical	1
a, b; double c;	1
a, b; b =	1
a, b, c and	1
a, b, c; a	2
a, b, c; //	2
a, b, c; b	1
a, b, c; ...	2
a, b, c, d;	4
a, b, c, temp;	1
a, b, c, d,	3
a, bool b) {	4
a, T const &	1
a, sizeof(b)); 47 Most	1
thread is used for	1
thread is waiting for	1
thread is terminated. The	1
thread to a specific	2
thread in which they	1
thread in systems with	1
thread that runs alone	1
thread that shares the	1
thread are smaller. The	1
thread can then run	1
thread can do calculations	1
thread can do mathematical	1
thread can take care	1
thread can possibly block	1
thread function so that	1
thread if the application	1
thread if it is	1
thread if there is	1
thread with lower priority	1
thread as very time-consuming	1
thread than to temporarily	1
thread than another. Therefore,	1
thread may run at	1
thread have a destructor	1
thread will always run	1
thread will get time	1
thread will run at	1
thread has its own	1
thread should then handle	1
thread void DelayFiveSeconds() {	1
thread its own data	1
thread does not necessarily	1
thread running in the	1
thread safe if multiple	1
thread priority before the	1
thread jumps between different	1
thread environment block. Thread-local	1
thread steals resources from	1
thread affinity mask. Poor	1
thread scheduler. This can	1
thread increments seconds. A	1
etc. is still the	1
etc. is considerable. If	1
etc. of only half	1
etc. and the wires	1
etc. in vectors. These	1
etc. The C++ exception	1
etc. The problem here	1
etc. The efficiency of	1
etc. The worst case	1
etc. for Windows, -msse2,	1
etc. for Linux) 4.	1
etc. are implemented in	1
etc. are defined as	1
etc. // Returns time	1
etc. This means that	1
etc. may have to	1
etc. then there is	1
etc. It is common	1
etc. at compile time.	1
etc. should be as	1
etc. In most cases,	1
etc. In cases where	1
etc. In large arrays,	1
etc. There are a	1
etc. For example: //	1
etc. Use an antivirus	1
etc. But program loading	1
etc. But beware that	1
etc. These counters can	1
etc. #define Alignd(X) X	1
etc. Optimizing database queries	1
etc. scattered around on	1
etc. And it is	1
etc. Whether you choose	1
etc. (Intel CPU only)	1
etc. SSSE3 a few	1
etc. -msse3 -mssse3 -msse4.1	1
etc. Event-based sampling requires	1
etc. Locked mutexes. Open	1
etc. Accessibility guidelines should	1
etc. Overriding the Intel	1
AMD and Intel vector	1
AMD and VIA processors.	3
AMD and VIA CPUs.	1
AMD and VIA including	1
AMD and VIA processors,	1
AMD and VIA CPUs").	3
AMD and VIA CPUs"	3
AMD and VIA CPUs:	1
AMD and VIA CPUs".	2
AMD and VIA. The	1
AMD or VIA processor	1
AMD only _mm_permutevar_ps 4	1
AMD processors and earlier	1
AMD processors are sure	1
AMD CPUs use AMD	1
AMD CPUs (See manual	1
AMD AMD Math core	1
AMD CPUs. The Gnu	1
AMD CPUs. New versions	1
AMD math core library	1
AMD processors, but not	1
AMD Math core library	1
AMD Core Math Library	1
AMD CodeAnalyst. There are	1
AMD CodeAnalyst. Unfortunately, profilers	1
AMD Opteron K8 0.24	1
AMD Opteron K8 1.09	1
AMD Opteron K8 0.38	1
AMD LIBM library. Only	1
AMD LIBM Library amd_vrs4_expf	1
AMD FMA4 fma4intrin.h (Gnu)	1
AMD SSE4A ammintrin.h AMD	1
AMD XOP ammintrin.h (MS)	1
AMD Family 15h Processors".	1
compile the program are	1
compile the program with	1
compile the shared object	1
compile the output of	1
compile a shared object	1
compile for different instruction	1
compile with the option	2
compile with -mcmodel=large, but	1
compile time to eliminate	1
compile time and insert	1
compile time or a	2
compile time then there	1
compile time because of	1
compile time which version	1
compile time so that	1
compile time rather than	2
compile time while if	1
compile time here. It	1
compile time. The function	1
compile time. The storage	1
compile time. // Example	1
compile time. A variable	1
compile time. A template	1
compile time. For example,	1
compile time. For example:	1
compile time. Some compilers	1
compile time. Integer division	1
compile time. No memory	1
compile time. Templates make	1
compile time. Are objects	1
compile time. Text strings	1
compile time. Four typical	1
compile time. (Of course	1
compile time. (Examples can	1
compile them separately with	1
compile time, but the	1
compile for. The names	1
compile time? If the	1
exception is costly when	1
exception is caught by	1
exception in case of	2
exception for floating point	1
exception or other error	1
exception then F1 has	1
exception so that it	1
exception without using the	1
exception handling is not	1
exception handling is negligible	1
exception handling and you	1
exception handling in this	1
exception handling for the	1
exception handling for a	1
exception handling can be	1
exception handling then you	1
exception handling takes no	1
exception handling even in	1
exception handling system makes	1
exception handling option in	1
exception handling support anyway.	1
exception handling unless the	1
exception handling information. Each	1
exception handling Exception handling	1
exception handling /EHs- No	1
exception safe if there	1
exception occurs in the	1
exception occurs somewhere in	1
exception handling. It is	1
exception handling. See the	1
exception handling. 8.6 Optimization	1
exception handling. Omitting the	1
exception ever happens. This	1
exception handler to call	1
exception handler in the	1
exception handler needs all	1
exception safe. In other	1
exception handler, even if	1
exception handlers for cleaning	1
allocated is also deallocated.	1
allocated is also de-allocated.	1
allocated to each task	1
allocated and the entire	1
allocated and deallocated in	2
allocated in sequence are	1
allocated for an integer	1
allocated with new or	2
allocated with alloca, because	1
allocated memory is contiguous	1
allocated memory may not	1
allocated memory into a	1
allocated memory block. A	1
allocated memory Memory allocated	1
allocated array may need	1
allocated array into a	1
allocated objects and keep	1
allocated objects are not	1
allocated objects are also	1
allocated objects with each	1
allocated memory. It is	1
allocated memory. 9.6 Dynamic	1
allocated resources that need	1
allocated resources are cleaned	1
allocated dynamically with new	1
allocated dynamically when the	2
allocated dynamically (with new	1
allocated resources. The system	1
allocated block. Walking through	1
allocated object, and ownership	1
allocated memory, using new.	1
allocated memory, windows, mutexes,	1
allocated resource. The C++	1
allocated separately. The allocation,	1
allocated dynamically. The advantages	1
allocated dynamically. Arrays that	1
allocated memory................................................................. 120 12.9	1
small to cause overflow,	1
small and always the	1
small and fixed repeat	1
small and changing then	1
small in the critical	1
small that a binary	1
small that it fits	1
small or if it	3
small or too long.	1
small code size has	1
small as possible or	1
small x // align	1
small x // x^n	1
small then a sorted	1
small bit at a	1
small test program that	1
small part of the	1
small bits in a	1
small block for each	1
small piece of memory	1
small piece at a	1
small dynamically allocated objects	1
small loops (less than	1
small fraction of the	1
small gain in performance.	1
small enough to justify	1
small devices if you	1
small devices with limited	1
small embedded systems. Today	1
small embedded applications have	1
small pieces of a	1
small pieces of code	1
small devices, as discussed	1
small devices, but there	1
small sequences of code.	1
small microcontrollers: Smaller microcontrollers	1
small subtasks, but it	1
small low-power CPUs (Intel	1
overflow is another security	1
overflow is needed: //	1
overflow is "undefined". This	1
overflow of the arrays.	2
overflow of a signed	1
overflow of an unsigned	1
overflow and works only	1
overflow and give the	1
overflow and negative inputs	1
overflow and loss of	1
overflow and underflow except	1
overflow and underflow neutralize	1
overflow and underflow. The	1
overflow and redo the	1
overflow in the particular	1
overflow can cause unpredictable	1
overflow can occur in	1
overflow can occur, but	1
overflow or another error	1
overflow or assume that	1
overflow or loss of	1
overflow by checking if	1
overflow with the option	1
overflow on the intermediate	1
overflow on input data	1
overflow will make the	1
overflow has occurred. //	1
overflow but no other	1
overflow before it occurs,	1
overflow doesn't occur has	1
overflow Integer to float	1
overflow never occurs, even	1
overflow outside the loop	1
overflow condition will generate	1
overflow condition inside the	1
overflow checks where necessary	1
overflow checks where necessary.	1
overflow behavior well-defined with	1
overflow check. There are	1
+= i / 3;	1
+= b; In this	1
+= n << 23;	1
+= x; This makes	1
+= x; Here, the	1
+= 2; Common subexpression	1
+= 2) { a[i]	1
+= 2) { sum1	1
+= 2) { FuncA(i);	1
+= xn / nfac;	1
+= 4) { s0	1
+= a[i]; The above	1
+= a[i]; s1 +=	1
+= a[i]; Converting an	1
+= 8) { //	4
+= 1.0f; This needs	1
+= 1.0f; } The	1
+= 1.0f; } A	1
+= i_div_3; } 138	1
+= i_div_3; list[i+1] +=	1
+= i_div_3; list[i+2] +=	1
+= xxn * _mm_load_ps(coef+i);	1
+= 16) { b.load(bb+i);	1
+= TILESIZE) { for	1
+= TILESIZE) { //	1
+= 2;} // add	1
+= list[i]; This has	1
+= list[i]; sum2 +=	1
+= A2; // Table	1
+= a[i+1]; s2 +=	1
+= x^n/n! xxn *=	1
+= Z; Z +=	1
+= a[i+2]; s3 +=	1
+= list[i+1];} sum1 +=	1
+= a[i+3]; } sum	1
+= sum2; If the	1
+= 9; } Induction	1
integers is ambiguous and	1
integers is costless. It	1
integers of the default	1
integers of any size	1
integers of 8 bits	1
integers of 64 bits	1
integers of 16 bits	1
integers of 32 bits	1
integers to floating point	2
integers to signed integers	1
integers to alias upon	1
integers and other hardware-related	1
integers and floating point	3
integers and 64-bit integers,	1
integers in 32-bit systems,	1
integers in case of	1
integers in 16-bit systems	1
integers in comparisons, such	1
integers are equally near	1
integers or floating point	1
integers or four float's	1
integers if the application	1
integers with the value	1
integers with a very	1
integers with hardly any	1
integers as Boolean vectors,	1
integers - they are	1
integers int a, b;	1
integers use truncation towards	1
integers from 0 to	1
integers which range from	1
integers In most cases,	1
integers before conversion to	1
integers (see page 142).	1
integers simply makes the	1
integers Conversion from floating	1
integers ................................... 141 14.9	1
option is also available	1
option is less useful	1
option in the compiler.	2
option for the linker.	1
option for all modules	1
option for assembly language	1
option for source annotation	1
option for whole program	1
option for assuming no	1
option for "assume no	1
option for RTTI then	1
option for "standard stack	1
option for "function level	1
option that allows less	1
option that gives the	1
option that limits the	1
option if you want	1
option then use an	1
option only in the	1
option makes the code	1
option makes the assembly	1
option available. Some compilers	1
option -fpic according to	1
option -fno-pic and link	1
option -fno-pic when compiling	1
option -fno-pic apparently has	1
option -fno-builtin to get	1
option -fpie because the	1
option -fpie instead of	1
option "assume no pointer	1
option /MT). In Linux	1
option -mveclibabi=acml. Agner's vector	1
option -ftrapv, but this	1
option /QaxAVX or -axAVX.	1
option (Windows: /Gy, Linux:	1
option -fwrapv or -fno-strict-overflow.	1
option -read_only_relocs suppress. GOT	1
option -mveclibabi=svml. This library	1
option -Wstrict-overflow=2, or (5)	1
good to have two	1
good to do a	1
good for the logical	1
good for the application.	1
good for making clear	1
good for optimizing execution	1
good if you can	1
good code performance is	1
good as the compiler	1
good as the Microsoft,	1
good as possible. The	1
good as expected. I	1
good compiler can often	1
good compiler can optimize	1
good compiler will optimize	1
good compiler will convert	1
good at optimizing away	1
good compilers and optimized	1
good compilers will reduce	1
good performance and precision.	1
good performance for many	1
good way of making	1
good way to prevent	1
good optimization options. Supports	1
good optimizing compiler should	1
good implementation of the	1
good implementation uses XMM	1
good development tools, rather	1
good choice for code	1
good choice for all	2
good choice for Linux	1
good idea to make	1
good idea to put	1
good idea to collect	1
good deal of programming	1
good deal of research	1
good investment. A redesign	1
good performance). Aligned operands	1
good knowledge of the	1
power of the processors	1
power of the graphics	1
power of 2 is	1
power of 2 and	1
power of 2 in	2
power of 2 can	1
power of 2 //	2
power of 2 or	1
power of 2 if	5
power of 2 by	1
power of 2 then	3
power of 2 return	1
power of 2 template	1
power of 2 does	1
power of 2 Integer	1
power of 2 (See	1
power of 10 double	2
power of 2. The	1
power of 2. Example:	2
power of 2. Objects	1
power of 2. Contentions	1
power of 2, so	1
power of N template	1
power of 2: template	1
power of two. In	1
power function when the	1
power than PCs. Therefore,	1
power using loop double	1
power using template metaprogramming	1
power consumption are actually	1
matrix is the same	1
matrix is a multiple	1
matrix is a power	1
matrix is a high	1
matrix is so big	1
matrix is bigger than	1
matrix a in a	1
matrix a power of	1
matrix and stores the	1
matrix in my experiments.	1
matrix in STL as	1
matrix for use as	1
matrix // function to	2
matrix // call transpose	1
matrix // define a	1
matrix or multidimensional array	2
matrix on a Pentium	1
matrix when the size	1
matrix when contentions occur	1
matrix using example 9.5a	1
matrix size causes misses	2
matrix into smaller squares	1
matrix void TransposeCopy(double a[SIZE][SIZE],	2
matrix line size. I	1
matrix line (in bytes)	1
matrix longer than needed	1
matrix 512 520 and	1
matrix sizes were measured	1
matrix happen to be	1
matrix element. The multiplication	1
matrix line. The delay	1
matrix 96 void transpose(double	1
matrix sizes. The results	1
matrix cell for different	1
matrix a: // Example	1
Linux is that the	1
Linux is more efficient	1
Linux and 32-bit Windows	1
Linux and Windows platforms.	2
Linux and supported by	1
Linux and Mac platforms.	1
Linux and Mac platforms	1
Linux and Mac systems,	1
Linux and BSD comes	1
Linux and BSD, the	1
Linux and perhaps Mac	1
Linux and Mac. Supports	1
Linux and BSD. The	1
Linux and BSD. If	1
Linux in almost all	1
Linux The procedure to	1
Linux with Microsoft, Intel	1
Linux as well as	1
Linux than in 64-bit	3
Linux have an attribute	1
Linux Intel compiler Intel	1
Linux Intel compiler Windows	2
Linux also applies to	1
Linux operating systems give	1
Linux systems. The user	1
Linux platform n.a. __unix__	1
Linux syntax 90 Gives	1
Linux platforms if the	1
Linux compiler, or vice	1
Linux Shared objects are	1
Linux platforms, and in	1
Linux __INTEL_COMPILER __INTEL_COMPILER n.a.	1
Linux kernel version 2.6.30	1
Linux Align by 16	1
Linux Optimize for speed	1
been a power of	1
been stored in the	1
been called before. This	1
been accessed recently than	1
been allocated is also	1
been replaced by my	1
been tested in Mac	1
been tested only on	1
been given a name.	1
been reduced from 20	1
been initialized to valid	1
been copied to the	1
been defined in other	1
been added and then	1
been increased from 64-bit	1
been updated since 2004.	1
been updated lately. Vector	1
been doubled. Thin clients	1
been loaded. This makes	1
been translated to the	1
been deallocated. The program	1
been deallocated. Failure to	1
been added? If search	2
been incremented to 5	1
been lost at the	1
been incremented, while in	1
been reordered, inlined, or	1
been alleviated in the	1
been identified, then it	1
been found, then it	1
been unsatisfied with the	1
been calculated. Therefore, it	1
been introduced in Linux	1
been criticized for code	1
been brutally interrupted. Now	1
been identified. My test	1
been wasted. The consequence	1
been allocated. If the	1
cause the memory to	1
cause the cache to	1
cause the software to	1
cause the heap to	1
cause the creation of	1
cause the resource-hungry applications	1
cause a cache miss.	1
cause a lot of	1
cause a waste of	1
cause a loss of	1
cause of errors in	1
cause of reduced performance.	1
cause of unacceptably long	1
cause other variables to	1
cause all kinds of	1
cause cache contentions if	1
cause cache contentions. See	1
cause branch mispredictions if	1
cause large delays. The	1
cause overflow in the	1
cause overflow or loss	1
cause problems if the	1
cause problems when the	1
cause caching problems because	1
cause contentions in the	3
cause errors if the	1
cause overflow. For example,	1
cause overflow. Example: //	1
cause seven memory allocations	1
cause overflow, this code	1
cause unpredictable errors elsewhere	1
cause delays in the	1
cause complications with member	1
cause slight imprecision in	1
cause severe delays if	1
cause fatal errors if	1
cause holes of unused	1
AVX is supported in	1
AVX is supported by	1
AVX and later instruction	1
AVX or later with	1
AVX or later instruction	1
AVX code to non-AVX	2
AVX int 32 16	1
AVX only when AVX2	1
AVX instruction set is	4
AVX instruction set and	2
AVX instruction set can	1
AVX instruction set. The	1
AVX instruction set, another	1
AVX using CPU dispatching	1
AVX double 64 4	1
AVX version int CriticalFunction_AVX(int	1
AVX version 127 int	1
AVX 32 instruction set	1
AVX instructions have very	1
AVX support and another	1
AVX support then call	1
AVX support calls a	1
AVX supported return &CriticalFunction_AVX;	1
AVX supported CriticalFunction =	1
AVX 256 bit float	1
AVX instructions. The automatic	1
AVX instructions. A further	1
AVX support. There is	1
AVX part. If a	2
AVX instr. set Automatic	1
AVX support, then call	1
AVX _mm256_permutevar_ps 4 4	1
AVX immintrin.h AMD SSE4A	1
classes is just a	1
classes and using overloaded	1
classes and member functions	1
classes and overloaded operators.	1
classes and templates for	1
classes in the same	1
classes in the STL	1
classes in the form	1
classes that use these	1
classes are given in	1
classes are generally not	1
classes are currently available,	1
classes can also be	1
classes // Function to	1
classes or modify the	1
classes or structures. Accessing	1
classes with destructors to	1
classes on page 93.	1
classes than by using	1
classes use dynamic memory	2
classes void SelectAddMul(short int	1
classes like string, wstring	1
classes #include "vectorclass.h" //	1
classes defined in Intel	1
classes defined in two	1
classes allocate a new	1
classes implement the functions	1
classes contain the different	1
classes Agner's vector class	1
classes Fortunately, it is	1
classes ............................................................................................. 113 12.6	1
classes Whenever dynamic memory	1
classes ..................................................................................................... 93 9.8	1
classes looks like this:	1
classes Programming in the	1
classes (Intel) #include <pmmintrin.h>	1
classes 114 #include <dvec.h>	1
classes Nowadays, programming textbooks	1
done the job before	1
done a good deal	1
done to choose the	1
done in a loop	1
done in a single	1
done in big blocks	1
done in connection with	1
done by the operating	1
done by the constructor	1
done by the linker	1
done by copying the	1
done by multiplying with	1
done by declaring the	1
done by me manually,	1
done by controlling the	1
done by fetching, decoding	1
done with the functions	1
done with the operators	1
done with the resolution	1
done with a special	1
done with a shift	1
done with an extended	1
done with long double	1
done with single or	1
done with just two	1
done on the type	1
done as a shift	1
done at the second	1
done at compile time.	1
done at every access.	1
done at runtime here	1
done only once. One	1
done only once, while	1
done every time the	1
done simply by ignoring	1
done outside the loop.	1
done under the best-case	1
done manually by the	1
done implicitly when calculating	1
therefore the system code	1
therefore a good idea	1
therefore be a disadvantage	1
therefore be used only	1
therefore be advantageous to	1
therefore be advantageous when	1
therefore be aware of	1
therefore it is accessed	1
therefore as efficient as	1
therefore as fast as	1
therefore not be too	1
therefore not possible to	1
therefore not advantageous by	1
therefore not recommended if	1
therefore more error prone.	1
therefore more safe than	1
therefore possible for the	1
therefore cannot do the	1
therefore need modification if	1
therefore important to understand	1
therefore necessary to do	2
therefore necessary to convert	1
therefore likely to be	1
therefore certain to be	1
therefore count as true,	1
therefore recommended to put	1
therefore recommended that big	1
therefore preferably be stored	1
therefore preferably be put	1
therefore preferably have a	1
therefore difficult to maintain.	1
therefore fail to see	1
therefore fail to start	1
therefore equal to the	1
therefore becoming more and	1
therefore safer to do	1
therefore suffer from mispredictions.	1
therefore conclude that most	1
precision is not supported.	1
precision is good if	1
precision is used. A	1
precision of approximately seven	1
precision to double precision	1
precision in all operands	1
precision in 32-bit systems	1
precision in programs compiled	1
precision for reasons explained	1
precision or by making	1
precision or double precision,	1
precision or four single	1
precision or eight single	1
precision if you have	1
precision by default, so	1
precision on most processors	1
precision as the operands.	1
precision than for double	1
precision when the XMM	2
precision takes only slightly	1
precision variables in the	2
precision before multiplying with	1
precision without worrying too	1
precision constant and then	1
precision (see page 73).	1
precision calculations are just	1
precision calculations take no	1
precision conversion instructions which	1
precision conversion Conversions between	1
precision requires only SSE).	1
precision require precision conversion	1
precision math allow addition	1
precision constant. It is	1
precision math. Memory copying.	1
precision math. Libraries for	1
precision division, square root	1
precision (80 bits). The	1
line is implicitly converting	1
line to be read	1
line in both the	1
line that we expect	1
line that was used	1
line that covered the	1
line can hold 8	1
line or a make	1
line or an input	1
line if you don't	1
line by any other	1
line by line when	1
line with all the	1
line when it is	1
line will be loaded	1
line then the line	1
line at a time	1
line at a time.	1
line has to be	1
line size is typically	1
line size of 64	1
line size of 64.	1
line size in order	1
line size // define	1
line size may possibly	1
line size (typically 64)	1
line number information. It	1
line doesn't work int	1
line would be evicted.	1
line options relevant to	1
line size. I tried	1
line containing the address	1
line size, which is	1
line separately through multiple	1
line (in bytes) is	1
line covers 64 consecutive	1
line provokes an error.	1
line 29. Each cache	1
line written. This worked	1
works is of course	1
works and suggests methods	1
works in the following	1
works in the main	1
works for any compile-time	1
works by compiling in	1
works with all compilers.	1
works on all the	1
works on Intel processors.	1
works more efficiently with	1
works then you may	1
works only for compilers	1
works only for Intel	1
works only for positive	1
works only for powers	1
works only if the	1
works only if it	1
works only with Intel	1
works only on registers,	1
works most efficiently if	2
works most efficiently when	1
works less efficiently if	1
works even if a	1
works best if the	1
works best on the	1
works best on a	1
works best on processors	1
works best on processor	1
works well on all	1
works well on non-Intel	1
works particularly bad on	1
works automatically. However, there	1
works best. Some common	1
works differently. The link	1
works correctly. A code	1
works somewhat less efficiently	1
works (gcc v. 4.5.2,	1
optimized is to do	1
optimized and fine-tuned for	1
optimized for the Intel	1
optimized for is likely	1
optimized for a particular	1
optimized for SSE2 and	1
optimized for large data	1
optimized for execution speed	1
optimized for accessing arrays	1
optimized for 16-bit mode	1
optimized function libraries available	1
optimized function libraries. C++	1
optimized if a and	1
optimized by using indexes,	1
optimized code with CPU	1
optimized code will load	1
optimized code because it	1
optimized code looks like	1
optimized code (release version)	1
optimized as good as	1
optimized program is often	1
optimized Intel function libraries,	1
optimized version of the	1
optimized version because the	1
optimized software design, it	1
optimized part of the	1
optimized versions of memory	1
optimized mathematical functions. It	1
optimized function, but unfortunately	1
optimized math function libraries	1
optimized to: // Example	1
optimized away and the	1
optimized well, others are	1
optimized programs. The profiler	1
optimized away. It is	1
optimized away. Note that	1
optimized further. The first	1
optimized yet. Supports both	1
inside the function in	1
inside the function that	1
inside the function they	1
inside the CPU which	1
inside the CPU used	1
inside the loop is	1
inside the loop are	1
inside the loop can	2
inside the loop does	1
inside the loop is.	1
inside the class definition.	1
inside the critical innermost	1
inside the function. This	1
inside the innermost loop.	1
inside the loop. The	1
inside the loop. Example	1
inside the loop. If	1
inside the class. Which	1
inside the derived class:	1
inside the pow function	1
inside the loop, for	1
inside the template. The	1
inside a function are	2
inside a function but	1
inside a loop with	1
inside a class are	1
inside a class Variables	1
inside a class definition.	1
inside can be predicted	1
inside one function, if	1
inside another loop that	1
inside your program before	1
inside containers should be	1
inside {} brackets. However,	1
inside sqaure: for (r2	1
inside square: // Example	1
manual is for advanced	1
manual is number one	1
manual is also relevant	1
manual is based on	1
manual is based mainly	1
manual for your compiler	1
manual for my test	1
manual for reasons explained	1
manual for details. //	1
manual for details. Use	1
manual or in the	1
manual on usability, but	1
manual will soon be	1
manual at www.agner.org/optimize/cppexamples.zip contains	1
manual at www.agner.org/optimize/cppexamples.zip containing	1
manual at www.agner.org/optimize/cppexamples.zip. 9.9	1
manual does not cover	1
manual 3: "The microarchitecture	7
manual 2: "Optimizing subroutines	3
manual 5: calling conventions.	1
manual 5: "Calling conventions	5
manual currently doesn't works	1
manual discusses how to	1
manual 4: "Instruction tables".	2
/ b as a	1
/ 2 (be aware	1
/ 4 = 2048	1
/ 8 = 64	1
/ unsigned conversion //	1
/ c; a =	1
/ means integer division	1
/ b) is calculated	1
/ b) etc. at	1
/ b) >> n	1
/ 3; } This	1
/ 10; a =	2
/ 10; // Convert	1
/ CodeGear / Embarcadero	1
/ 16; a =	1
/ 16; // This	1
/ b2; This can	1
/ (number of ways).	1
/ 64) % 32	1
/ sar ebx,1 adds	1
/ jl $B1$2 is	1
/ c) 139 can	1
/ (line size) %	1
/ x64 (Visual Studio	1
/ shr ebx,31 copies	1
/ 4; The compiler	1
/ 4; Register variables	1
/ (b1*b2); The trick	1
/ nfac; xn *=	1
/ 1.2345; Change this	1
/ b1; y2 =	1
/ 1.2345); The compiler	1
/ (b1 * b2);	1
/ 0x40) % 0x20	1
/ 3.0; The compiler	1
/ Embarcadero Comes with	1
explained in the other	1
explained in the next	2
explained in the previous	1
explained in the chapter	1
explained in example 7.35	1
explained in manual 5:	1
explained in chapter 9.10,	1
explained in detail on	1
explained on page 8	1
explained on page 16.	1
explained on page 146	1
explained on page 105.	1
explained on page 93.	1
explained on page 26.	1
explained on page 122.	1
explained on page 72.	2
explained on page 22.	1
explained on page 107.	1
explained on page 62.	1
explained on page 96.	1
explained on page 44.	1
explained on page 132.	1
explained on page 87.	1
explained on page 130.	1
explained on page 27.	1
explained at page 150.	1
explained below. The disadvantage	1
explained below. There are	1
explained below. Shared objects	2
explained below on page	1
explained above, the maximum	1
explained above, so that	1
explained above. A shared	1
explained above. Examples are	1
calculated the first time	1
calculated the fastest first.	1
calculated in advance and	2
calculated in advance. This	1
calculated by the series:	1
calculated by a single	1
calculated by an induction	2
calculated by n additions	1
calculated by adding a	1
calculated with the same	1
calculated with two decimals,	1
calculated as follows: floatvalue	1
calculated as (critical stride)	1
calculated as (b*2.0)/3.0 rather	1
calculated as ((a+b)+c)+d. This	1
calculated more efficiently from	1
calculated from the value	1
calculated from the previous	2
calculated from a value	1
calculated at compile time	1
calculated at compile time.	1
calculated using multiplications only.	1
calculated faster than double	1
calculated much faster than	1
calculated fast if it	1
calculated value. The keyword	1
calculated result. Example: //	1
calculated twice because the	1
calculated first, then d+e,	1
calculated once, rather than	1
calculated internally as (int)&matrix[0][0]	1
calculated independently. The CPU	1
calculated asa << 4,	1
calculated as(a << 4)	1
calculation is more complicated	1
calculation of the array	1
calculation of the address	1
calculation of the power	1
calculation of the residual	1
calculation of the factorials,	1
calculation of this polynomial	1
calculation of A is	2
calculation of A and	1
calculation of one iteration	2
calculation of expressions where	1
calculation of graphics objects	1
calculation of B before	1
calculation of self-relative references	1
calculation of c+b will	1
calculation of B. In	1
calculation of (a+b). This	1
calculation and table lookup	1
calculation in a way	2
calculation in 64 bit	1
calculation may be moved	1
calculation time is actually	1
calculation time is doubled.	1
calculation time of 250	1
calculation more efficient: //	1
calculation time. A loop	1
calculation implemented with template	1
calculation becomes easier if	1
calculation requires n-1 multiplications,	1
calculation here gives a+b=0,	1
calculation depends on the	2
calculation faster. The advantage	1
calculation capabilities. Here is	1
}; The values of	1
}; The offset of	1
}; // The child	1
}; // constant data	1
}; // Function template	1
}; // Make all	1
}; // Any function	1
}; // Index out	1
}; // Full template	2
}; // Called directly	1
}; // Partial template	1
}; if ((unsigned int)n	1
}; if (y) {	1
}; int order(int x);	1
}; int Sum2(S3 *	1
}; class C1 :	1
}; class CChild2 :	1
}; class C2 :	1
}; void test ()	2
}; void F1() {	1
}; void g() {	1
}; void Func() {	1
}; char abc; };	1
}; S1 ArrayOfStructures[100]; Here,	1
}; struct Sdouble {	1
}; struct Slongdouble {	1
}; Bitfield x; int	2
}; Weekdays Day; if	2
}; Replace with: //	1
}; 7.23 Constructors and	1
}; 52 or class	1
}; vector() {} vector(float	1
128 function cannot rely	1
128 because the offset	1
128 double 128 float	1
128 float 256 double	1
128 bit vector of	2
128 bit vector containing	1
128 bit integer and	1
128 bit float vectors	1
128 SSE2 int 32	1
128 SSE2 float 32	1
128 SSE2 long long	1
128 SSE2 short int	1
128 SSE2 char 8	1
128 bits (XMM), 256	1
128 bits (XMM) if	1
128 bytes or more	1
128 bytes then put	1
128 bytes Intel Core	1
128 bytes AMD Opteron	1
128 128 128 17.4	1
128 128 17.4 129	1
128 below. Dispatch at	1
128 == 0) {	1
128 bytes. 7.19 Class	1
128 SSE double 64	1
128 Is16vec8 Vec8s 16	1
128 13.7 CPU dispatching	1
128 Is8vec16 Vec16c 8	1
128 Iu32vec4 Vec4ui 64	1
128 17.4 129 129	1
128 Is32vec4 Vec4i 32	1
128 I64vec2 Vec2q 64	1
128 Vec2uq 8 32	1
128 Iu8vec16 Vec16uc 16	1
128 Iu16vec8 Vec8us 32	1
uses the cache in	1
uses the new features.	1
uses the dispatch on	1
uses a different implementation	1
uses a lot of	2
uses a lookup table	1
uses a newer version	1
uses a procedure linkage	1
uses a GOT. Another	1
uses of a and	1
uses of dynamic memory	1
uses by looking at	1
uses an unfortunate method	1
uses an ordinary procedure	1
uses more than 2	1
uses more cache space.	1
uses more clock cycles	1
uses more bits than	1
uses CPU dispatching: 1.	1
uses most of its	1
uses many small dynamically	1
uses 32-bit absolute addresses.	1
uses 64 bits. The	1
uses pointers because it	1
uses new and delete	1
uses 32 bits while	1
uses much more resources	1
uses few resources. On	1
uses XMM registers to	1
uses position-independent code and	1
uses ebx as a	1
uses logarithms in the	1
uses 90% of the	1
uses SSE3. // (This	1
uses (live ranges) do	1
four function parameters to	1
four cache lines in	2
four cache lines from	1
four double precision or	1
four float additions in	1
four elements of b	1
four single precision variables	1
four integers of 32	1
four parameters to be	1
four parameters are transferred	1
four numbers of type	1
four numbers at a	1
four results in a.	1
four consecutive terms in	1
four kinds of costs	1
four cores can run	1
four (or eight) points	1
four additions in one	1
four parameters. There is	1
four B value in	1
four places back. Thus,	1
four physical processors but	1
four objects. STL vector	1
four floats F32vec4 xxn(x4,	1
four bits, and the	1
four numbers, then you	1
four multiplications. How was	1
four float. The type	1
four x^n } return	1
four G values in	1
four R value in	1
four float's when the	1
four float's fits into	1
four sums } This	1
four floats. The same	1
functions. The code is	1
functions. The compiler makes	1
functions. The floating point	1
functions. The template parameter	1
functions. The following example	1
functions. The difference is	1
functions. The second generation	2
functions. The 'this' pointer	1
functions. The CPU- specific	1
functions. This is useful	1
functions. This so-called virtual	1
functions. This applies to	1
functions. A static member	2
functions. A lot of	1
functions. A frame function	1
functions. A metaprogramming implementation	1
functions. A thread-safe function	1
functions. It is recommended	1
functions. It is just	1
functions. It also works	1
functions. There is no	1
functions. You can force	1
functions. See page 49	1
functions. I disagree with	1
functions. Many function libraries	1
functions. Avoid virtual functions	1
functions. Alternatively, you can	1
functions. 80 Unfortunately, this	1
functions. While an empty	1
functions. 7.4 Enums An	1
functions. 7.27 Overloaded operators	1
functions. 9.4 Variables that	1
functions. Sum1 has an	1
functions. Time- consuming library	1
another function and these	1
another function with the	1
another function which in	1
another function library that	1
another function F2 that	1
another by assignment. shared_ptr	1
another memory access. Assume	1
another vector register containing	1
another loop that also	1
another C++ program (or	1
another version for CPUs	1
another way than last	1
another dynamic library requiring	1
another part of the	1
another error has occurred	1
another thread is waiting	1
another thread can take	1
another thread will always	1
another thread void DelayFiveSeconds()	1
another source file. If	1
another addition to sum2	1
another function, etc., and	1
another compiler. 2.6 Choice	1
another class. It makes	1
another thread. This prevents	1
another thread. If seconds	1
another problem. The compiler	1
another array. The disadvantage	1
another dispatched function then	1
another security problem. The	1
another computer. The Pentium	1
another exception. 64 If	1
another module. The compiler	1
another module. The size	1
another module. This non-inlined	1
another platform. 14.8 Conversions	1
parameters a and r	1
parameters of the new	1
parameters to a class	1
parameters to be transferred	4
parameters and the 49	1
parameters that are declared	1
parameters are not affected	1
parameters are stored on	1
parameters are always resolved	1
parameters are transferred in	7
parameters are transferred by	1
parameters are transferred on	1
parameters are replaced by	1
parameters are exactly the	1
parameters are evaluated every	1
parameters on the stack	1
parameters on CodeGear compiler).	1
parameters then the code	1
parameters then make it	1
parameters because of alignment	1
parameters Function parameters are	1
parameters would be transferred	1
parameters replaced by their	1
parameters ............................................................................................... 50 7.16	1
parameters typedef int CriticalFunctionType(int	1
parameters Vec4f polynomial (Vec4f	1
parameters differ then you	1
get the same result	1
get the value 10	1
get the value -100+100+100	1
get the generic branch,	1
get the exact time	1
get a compiler warning	1
get a good performance	1
get a good deal	1
get a lot of	1
get a better result	1
get a misprediction penalty	1
get a realistic number	1
get a reply about	1
get as much data	1
get an integral number	1
get x to the	1
get time slices of	1
get more reproducible time	1
get used to read	1
get one instance for	1
get no warning from	1
get library versions instead.	1
get any answer. Beginners	1
get very expensive cache	1
get access to the	1
get 0 rather than	1
get its own address	1
get four float additions	1
get next each bit	1
get reliable results for	1
get reproducible results. This	1
get ReadTSC as a	1
get rid of the	2
get rid of all	1
get answers to your	1
b; a = b	6
b; a = parabola	1
b; a = (b	1
b; a = (int)d;	1
b; a = Multiply(10,8);	1
b; a += b;	1
b; for (i =	1
b; // 4 bytes.	1
b; // 8 bytes.	1
b; // everything is	1
b; // Critical innermost	1
b; if (b) {	2
b; This is typically	1
b; int c; int	1
b; int d; //	1
b; int c;}; abc	1
b; int Sum1() {return	1
b; A branch can	1
b; will make 32	1
b; } A problem	1
b; } else {	1
b; double c; b	1
b; b = a	1
b; b = !a;	1
b; static const float	1
b; In this example,	1
b; c = b	1
b; Here, I have	1
b; d = a	2
check the code that	1
check the order of	1
check the final result	1
check is bypassed by	1
check for the error	1
check for the supported	1
check for CPU brand	1
check for all the	1
check for integer overflow.	1
check for array bounds	1
check for overflow of	2
check for overflow and	1
check for overflow by	1
check for overflow before	1
check for overflow outside	1
check for buffer overflow	1
check for overflow. This	1
check for overflow. Example:	1
check for exceptions thrown	1
check that the conversion	1
check that thrown exceptions	1
check if the compiler	1
check if the inputs	1
check if a floating	1
check if it has	1
check if an array	1
check if your modifications	1
check if XMM registers	1
check if nonzero u.i	1
check on b can	1
check on n here	1
check makes dynamic_cast more	1
check before the loop	1
check whether an integer	1
check after the loop	1
advantageous the smaller the	1
advantageous to use the	3
advantageous to use a	1
advantageous to use vector	2
advantageous to use float	1
advantageous to use hyperthreading	1
advantageous to make the	1
advantageous to do simple	1
advantageous to do things	1
advantageous to replace the	1
advantageous to put the	1
advantageous to put file	1
advantageous to mix integer	1
advantageous to mix floating	1
advantageous to keep the	1
advantageous to roll out	1
advantageous to split the	1
advantageous in most cases	1
advantageous in cases where	1
advantageous for applications that	1
advantageous or not. The	1
advantageous if the function	1
advantageous if the loop	1
advantageous if the operands	1
advantageous if the typical	1
advantageous if a lot	1
advantageous by itself. But	1
advantageous as replacements for	1
advantageous when a program	1
advantageous then it is	1
advantageous because registers is	1
advantageous vectorization is. Factors	1
advantageous if, and only	1
implemented a separate version	1
implemented a collection of	1
implemented in the same	1
implemented in the high	1
implemented in a more	1
implemented in a separate	2
implemented in different places	1
implemented in compiled C++	1
implemented in compiled C++.	1
implemented in hardware in	1
implemented in various ways	1
implemented in PC processors.	1
implemented by the compiler	1
implemented by (partial) template	1
implemented with an intermediate	1
implemented with template metaprogramming.	1
implemented with intrinsic functions	1
implemented with interpretation. The	1
implemented on a platform	1
implemented on other platforms	1
implemented as a function	2
implemented as a table	1
implemented as a linked	1
implemented as a circular	2
implemented as vector operations.	1
implemented as three branches.	1
implemented as follows in	1
implemented as recursive templates.	1
implemented simply by storing	1
implemented like this in	1
implemented either as static	2
implemented internally as a	1
problem is to use	2
problem is to make	1
problem is to combine	1
problem is that it	1
problem is likely to	1
problem is too important	1
problem of the x86	1
problem and make the	1
problem and assume that	1
problem in interactive programs	1
problem that the clock	1
problem that were not	1
problem are the following:	1
problem can be overcome	1
problem can be solved	1
problem if the user	1
problem if the repeat	1
problem by increasing the	1
problem by defining _mm_malloc	1
problem by bypassing the	1
problem with the C++	1
problem with this code	1
problem with vector operations	1
problem with accessing 32	1
problem with macros is	1
problem when the repeat	1
problem when mixing code	1
problem then it may	1
problem has been alleviated	1
problem only occurs because	1
problem cannot easily be	1
problem void AddTwo(int *	1
problem here is that	1
problem since we are	1
known to the compiler	1
known to be an	1
known to be 0	1
known to be true	1
known to be false	1
known in 36 C++	1
known with certainty that	1
known as memory leak.	1
known as memory leaks.	1
known then it is	1
known from a previous	1
known at this place.	1
known at compile time	6
known at compile time.	7
known at compile time,	1
known at compile time?	1
known at compile-time whether	1
known CPU model is	1
known which version of	1
known before the first	2
known hardware CPU. These	1
known processors. Other brands	1
known type, but you	1
(i = 0; i	26
(i = 2; i	1
(i = StringLength; i	1
(i = (int)n -	1
(i < 0 ||	1
(i < ARRAYSIZE &&	1
(i < arraysize) {	1
(i >= min &&	1
(i >= N) {	1
(i % 2 ==	1
solution is the combination	1
solution is a fixed	1
solution is to have	1
solution is to use	1
solution is to make	2
solution is to compile	1
solution is to rely	1
solution is more complicated.	1
solution is using one	1
solution is best for	1
solution is optimal on	1
solution is too high.	1
solution is clearly better.	1
solution a = 1.0f	1
solution of making the	2
solution to this problem	2
solution to make the	1
solution to these problems	1
solution in this case	1
solution in such cases.	1
solution in some cases.	1
solution for the memory	1
solution that doesn't compromise	1
solution can still give	1
solution can incur a	1
solution on future CPUs.	1
solution may be a	1
solution you prefer is	1
solution because the high	1
solution because of its	1
solution where a soft	1
solution would be to	1
container is to hold	1
container is too big	1
container for a specific	1
container for each row	1
container for exclusive access	1
container that contains only	1
container that allows you	1
container be recycled? There	1
container are allowed to	1
container or memory pool.	1
container than to delete	1
container may move the	1
container class that takes	1
container class that behaves	1
container class libraries use	1
container class must have	1
container class templates are	1
container class templates, as	1
container elements are cumbersome	1
container rather than by	1
container without dynamic memory	1
container classes and templates	1
container classes in the	2
container classes that use	1
container classes are given	1
container classes or modify	1
container classes on page	1
container classes use dynamic	1
container class. The container	1
container classes. The standard	1
container classes. An appendix	1
container classes. Unfortunately, many	1
container classes. Text strings	1
container expandable, but it	1
advantage of the AVX	2
advantage of the fact	1
advantage of a new	1
advantage of this by	1
advantage of this method	1
advantage of this fact	1
advantage of this capability:	1
advantage of vector operations,	1
advantage of using a	2
advantage of using static	1
advantage of using powers	1
advantage of using ready	1
advantage of static data	1
advantage of 64-bit integer	1
advantage of 64-bit integers.	1
advantage of these guidelines	1
advantage of bigger vector	1
advantage of out-of-order execution.	1
advantage of out-of-order execution,	1
advantage of sharing the	1
advantage to using hyperthreading.	1
advantage to using hyperthreading,	1
advantage to unroll a	1
advantage to obtain, such	1
advantage in the select	1
advantage in using the	1
advantage in applications that	1
advantage in interpreted languages	1
advantage that the response	1
advantage that it does	1
advantage if the threads	1
advantage because integer operations	1
advantage comes automatically. There	1
Function to store aligned	1
Function to store unaligned	3
Function to load aligned	1
Function to load unaligned	3
Function with vector parameters	1
Function pointer initially points	1
Function pointer serves as	1
Function return types The	1
Function return types ..............................................................................................	1
Function libraries can be	2
Function template for x	1
Function pointers ...................................................................................................... 37	1
Function pointers Calling a	1
Function calls may slow	1
Function parameters that are	1
Function parameters are stored	1
Function parameters are transferred	3
Function parameters Function parameters	1
Function parameters ............................................................................................... 50	1
Function addresses are obscured	1
Function inlining The compiler	1
Function inlining can open	1
Function inlining has the	1
Function inlining x-xxxx--x Constantfolding	1
Function names are undocumented.	1
Function level linking (remove	1
Function prototype CriticalFunctionType CriticalFunction_Dispatch;	1
Function Assembly name Intrinsic	1
support the necessary instruction	1
support the SSE and	1
support the ADX instructions	1
support a new vector	1
support of the different	1
support and is available	1
support and another part	1
support in the optimized	1
support for the exception	1
support for the stack.	1
support for 64-bit integers.	1
support for exception handling	1
support for inline assembly	1
support for intrinsic functions	1
support for intrinsic functions,	1
support for runtime type	1
support for XMM registers;	1
support for relative addressing	1
support for whole program	1
support for calculating the	1
support for hard disk	1
support for multiplying the	1
support this instruction set	1
support then call _mm256_zeroupper()	1
support from both compiler,	1
support different CPUs. This	1
support which is used	1
support static linking. A	1
support 32-bit and 64-bit	1
support calls a function	1
support processor X" is	1
support intrinsic functions. Alternatively,	1
support it. There are	1
support anyway. The exception	1
support SSE. Several function	1
supported in the latest	1
supported in such applications.	1
supported in Windows 7	1
supported by the CPU	2
supported by the operating	1
supported by the Gnu	1
supported by the processor	1
supported by the microprocessor	1
supported by the compiler.	1
supported by the Gnu,	1
supported by all modern	1
supported by most CPUs	1
supported by some very	1
supported by both the	1
supported by Microsoft, Intel,	1
supported on all 64-bit	1
supported on all major	1
supported on AMD CPUs.	1
supported at all. Can	1
supported instruction set for	1
supported instruction set int	1
supported instruction sets and	1
supported instruction set. Aligning	1
supported instruction set, using	2
supported instruction sets, cache	1
supported return &CriticalFunction_SSE2; }	1
supported return &CriticalFunction_AVX; }	1
supported 128-bit vector registers	1
supported CriticalFunction = &CriticalFunction_SSE2;	1
supported CriticalFunction = &CriticalFunction_AVX;	1
supported 256-bit instructions were	1
supported fprintf(stderr, "\nError: Instruction	1
eight to fit the	4
eight in 32-bit systems	1
eight or sixteen vector	1
eight different cache lines	1
eight floating point registers	2
eight floating point parameters	1
eight elements in row	1
eight elements will go	1
eight elements at a	2
eight times because it	1
eight threads simultaneously. This	1
eight single precision variables	1
eight integers of 16	1
eight numbers of type	1
eight consecutive elements in	4
eight consecutive elements from	6
eight consecutive elements c.load(cc+i);	1
eight consecutive elements b.load(bb+i);	1
eight 16-bit integers or	1
eight 16-bit integers. The	1
eight logical processors. Hyperthreading	1
operators is more advantageous	1
operators and functions consume	1
operators The pre-increment operator	1
operators for things like	1
operators for checking multiple	2
operators that have Boolean	1
operators that have Booleans	1
operators that produce Boolean	1
operators are single instructions	1
operators are calculated much	1
operators are inlined so	1
operators on integer variables.	1
operators will cause the	1
operators because they do	1
operators using integers as	1
operators also applies to	1
operators new and delete	1
operators An overloaded operator	1
operators Integer operations are	1
operators Integer sizes Integers	1
operators && and ||	1
operators produce a single	1
operators produce 32 results	1
operators (e.g. '>') are	1
operators Modern microprocessors in	1
operators ............................................................................................. 56 7.28	1
operators &, |, ^,	2
operators &, |, ~.	1
operators ...................................................................... 32 7.4	1
operators &&, ||, !	1
operators (& and |)	1
operators (&& and ||).	1
few of the functions	1
few or no other	1
few more integer vector	1
few functions that are	1
few compilers are able	1
few clock cycles to	1
few clock cycles that	1
few clock cycles more	2
few clock cycles before	1
few clock cycles after	1
few clock cycles, but	1
few cases where it	2
few instructions that may	1
few times may be	1
few extra instructions for	1
few arrays of variable	1
few programs do. Hence,	1
few cases, however, where	1
few branches as possible,	1
few unused points in	1
few lines should be	1
few resources. On the	1
few parameters. Or it	1
few machine instructions. Intrinsic	1
few files, preferably in	1
few pitfalls here. You	1
few lines. A few	1
few restrictions on alignment	1
few kilobytes at a	1
few comments about how	1
few decades ago, the	1
few places. Constant folding	1
contains the address of	4
contains a function which	1
contains a lot of	1
contains a negative list	1
contains a positive list	1
contains only a single	1
contains only simple standard	1
contains only six instructions	1
contains integer division: Integer	1
contains no calls to	1
contains no absolute addresses	1
contains floating point calculations	1
contains many functions for	2
contains many variables and	1
contains many useful mathematical	1
contains any member functions	1
contains any non-polymorphic member	1
contains calls to frame	1
contains several branches is	1
contains optimized mathematical functions.	1
contains various functions for	1
contains automatic CPU dispatching	1
contains examples of arrays	1
contains similar functions, but	1
contains debug information in	1
contains well-tested libraries for	1
contains natural parallelism. The	1
contains complete code examples	1
contains i/2+r. The next	1
contains writeable data. Therefore,	1
whether the code is	1
whether the compiler will	1
whether the different compilers	1
whether the object belongs	1
whether the call p->f()	1
whether the arrays are	2
whether the processor is	1
whether the second operand	1
whether the positive or	1
whether the largest vector	1
whether the original pointer	1
whether a particular integer	1
whether to use dynamic	1
whether to store help	1
whether to repeat or	1
whether to base a	1
whether it is possible	1
whether it is advantageous	3
whether it is optimal	1
whether it is profitable	1
whether an integer is	1
whether you are using	1
whether you use pre-increment	1
whether there is other	1
whether they are integers	1
whether they were able	1
whether r is a	1
whether p is a	1
whether vectorization will be	1
whether CriticalFunction is called	1
whether others have done	1
i++) is the same	1
i++) for (j =	1
i++) { // Loop	2
i++) { // Get	1
i++) { // Overflow	1
i++) { if (i	1
i++) { ... a	1
i++) { a[i] =	7
i++) { temp =	1
i++) { j =	2
i++) { b[i] =	1
i++) { aa[i] =	2
i++) { list[i].a =	1
i++) { time1 =	1
i++) { ab[i].b =	1
i++) { 92 DynamicArray[i]	1
i++) a[i] = i+1;	1
i++) a[i] = 0.0;	1
i++) sum += a[i];	2
i++) sum += list[i];	1
i++) f *= i;	1
i++) b[i] = a[i];	1
i++) List[i]++; Here, the	1
i++) matrix[FuncRow(i)][FuncCol(i)] += x;	1
list is the most	1
list is a convenient	1
list is less efficient	1
list is large because	1
list is almost certain	1
list of which code	1
list of which processor	2
list of some long	1
list of short vector	1
list of processors on	1
list of processor models	2
list of data. A	1
list of numbers: //	1
list of titles. Literature	1
list and make this	1
list in example 11.2b	1
list can be very	1
list or a binary	1
list or with an	1
list with a simple	1
list from static memory	1
list has its own	1
list should preferably be	1
list float a[100]; float	1
list takes more time	1
list does not need	1
list (see page 93).	1
list every time the	1
list needs to be	1
list points out some	1
list causes all subsequent	1
list plus i*sizeof(S1). This	1
would of course be	1
would be to include	1
would be an infinite	1
would be 8 and	1
would be even faster	1
would be while (0	1
would be able do	1
would be needed because	1
would be transferred in	1
would be predicted well.	1
would be invalid in	1
would be invalid if	1
would be obvious to	1
would be straightforward. The	1
would be evicted. Don't	1
would be re-calculated every	1
would not only be	1
would have to add	1
would have spent fighting	1
would make the access	1
would make the induction	1
would only read the	1
would all be below	1
would double the number	1
would take longer time.	1
would cause overflow or	1
would like to put	1
would give annoyingly long	1
would assume that seconds	1
would know that a	1
would require two floating	1
would still be in	1
would otherwise go undetected.	1
likely is a model	1
likely to be the	1
likely to be a	1
likely to be in	1
likely to be faster	1
likely to be less	1
likely to be predicted	1
likely to be limited	1
likely to be scattered	1
likely to be slower	1
likely to be obsolete.	1
likely to be irrelevant	1
likely to be cached	1
likely to be mispredicted,	1
likely to use the	1
likely to work best	1
likely to cause contentions	1
likely to run most	1
likely to inline a	1
likely to generate a	1
likely to require modifications	1
likely to go away	1
likely to execute slower	1
likely to fail if	1
likely to consume time	1
likely to lead to	1
likely to experience. Occasionally,	1
likely in a more	1
likely that the producer	1
likely that code cache	1
likely that memory access	1
likely be called, even	1
likely case that the	1
structure is a good	1
structure is simply a	1
structure is created. There	1
structure of the problem.	1
structure of a program	1
structure of four float's	1
structure to make sure	1
structure and then merge	1
structure and class members	1
structure and clarity of	1
structure in example 9.1b.	1
structure in some cases.	1
structure that can easily	1
structure are stored consecutively	1
structure or class is	1
structure or class for	1
structure or class with	1
structure or class should	1
structure or class declaration	1
structure or class elements.	1
structure or class objects.	1
structure or each of	1
structure or union can	1
structure or class. The	1
structure or class. This	1
structure then you may	1
structure has one big	1
structure object takes no	1
structure where data members	1
structure 8 bytes smaller	1
structure }; 52 or	1
structure y into a	1
structure needed? A matrix	1
doing the same thing	2
doing the same thing.	1
doing the optimizations that	1
doing the heavy background	1
doing the division. Some	1
doing the spell checking.	1
doing a sequence of	1
doing an addition to	1
doing different kinds of	1
doing floating point operations	2
doing multiple calculations in	2
doing multiple calculations simultaneously	1
doing multiple logically distinct	1
doing two or more	1
doing two iterations in	1
doing some calculations at	1
doing type conversions: //	1
doing calculations on large	1
doing mathematical calculations. In	1
doing optimizations on that	1
doing things only after	1
doing whole program 81	1
doing out-of-order execution, as	1
doing parallel calculations on	1
doing something on these	1
doing arithmetic operations. The	1
doing exactly the same	1
doing equivalent reductions at	1
doing calculations, and then	1
doing divisions. It is	1
run the program in	1
run the most advanced	1
run the optimized code	1
run the advanced version	1
run a little faster	1
run a speed-critical program	1
run in the background	1
run in a low	1
run in an array.	1
run in both 16-bit,	1
run in parallel. Small	1
run with a profiler	1
run with reduced speed	1
run on a CPU	1
run on its own	1
run on Mac platform.	1
run an inferior version	1
run at more than	1
run at less than	1
run only if AVX	1
run most of its	1
run two threads in	2
run many processes simultaneously.	1
run any code branch	1
run faster than when	1
run faster at the	1
run faster because we	1
run time. Therefore, both	1
run eight threads simultaneously.	1
run slightly faster in	1
run slower than a	1
run optimally on any	1
calculate the function is	1
calculate the time delay	1
calculate the same function	1
calculate the most common	1
calculate the value of	1
calculate the value and	1
calculate the table is	1
calculate the table in	1
calculate the table at	1
calculate the table values	1
calculate the address of	2
calculate the addresses of	1
calculate the absolute value	1
calculate a vector just	1
calculate that the number	1
calculate it at compile	1
calculate it only once.	1
calculate than the other	1
calculate when long double	1
calculate which set of	1
calculate each value from	1
calculate each address by	1
calculate how much memory	1
calculate its address. The	1
calculate element addresses for	1
calculate xn as x4∙xn-4.	1
calculate self-relative addresses is	1
calculate *p+2 a hundred	1
calculate *p+2 and store	1
calculate (c+d) before it	1
calculate (1./1.2345) at compile	1
calculate pow(x,10) with only	1
inline the function and	1
inline the function or	1
inline the function, and	1
inline a function if	1
inline and optimize both	1
inline or static or	1
inline function is expanded	1
inline function instead of	1
inline function #define MAX(a,b)	1
inline int lrint (double	2
inline int lrintf (float	1
inline this function and	1
inline functions An inline	1
inline double IntegerPower (double	1
inline float add_elements(__m128 const	1
inline void SelectAddMul(short int	1
inline void StoreVector(void *	3
inline void StoreNTD(double *	1
inline void StoreVectorA(void *	1
inline assembly or easy	1
inline assembly on all	1
inline assembly code to	1
inline assembly instruction for	1
inline assembly syntax in	1
inline __m128i LoadVector(void const	3
inline __m128i LoadVectorA(void const	1
inline keyword is used	1
inline T max(T const	1
every function that is	1
every function or every	1
every code line. Time-based	1
every time the function	3
every time the program	1
every time the critical	1
every time the computer	1
every time a new	2
every time a string	2
every time a thousand	1
every time it is	1
every time an object	1
every time they are	1
every time Func is	1
every clock cycle. The	1
every clock cycle. This	1
every call of the	1
every call method. When	1
every element in the	1
every four objects. STL	1
every intermediate version. For	1
every three clock cycles.	1
every second by another	1
every iteration of the	1
every access. The code	1
every version. For team	1
every call. A branch	1
every millisecond. The profiler	1
standard is used in	1
standard for specifying parallel	1
standard function library that	1
standard function libraries. Several	1
standard library functions like	1
standard libraries for many	1
standard libraries are not	1
standard template library (STL)	2
standard user interface elements	1
standard stack frame is	1
standard stack frame makes	1
standard solution to this	1
standard container classes use	1
standard calling conventions. Optimizes	1
standard operations. All you	1
standard tasks are available	1
standard tasks such as	1
standard header file stdint.h	1
standard PC processors is	1
standard PC processors are	1
standard PC processors with	1
standard PC platform with	1
standard specifies that all	1
standard specifies truncation so	1
standard C, specifying that	2
standard API calls rather	1
standard PC's in a	1
standard PCs. The clock	1
standard says that the	1
standard 754 (1985). This	1
hardware is updated. Most	1
hardware in the x86	1
hardware for raising an	1
hardware can be wired	1
hardware often requires that	1
hardware functions. The floating	1
hardware support for the	1
hardware support for calculating	1
hardware support for multiplying	1
hardware implementation of these	1
hardware implementation in most	2
hardware platform and operating	1
hardware platform The choice	1
hardware platform for a	1
hardware platform has become	1
hardware platform ....................................................................................... 5	1
hardware access. Available protocols	1
hardware CPU. These virtual	1
hardware definition code in	1
hardware definition language is	2
hardware definition language in	1
hardware definition language defines	1
hardware definition language. Such	1
hardware definition language, such	1
hardware conditions. A dispatcher	1
hardware interfaces and system	1
hardware exceptions. The mechanism	1
hardware circuits consisting of	1
hardware design. The ultimate	1
hardware identification. Such schemes	1
1 is certain to	1
1 is changed to	1
1 to 127 will	1
1 and that the	1
1 for the sake	1
1 for negative numbers.	1
1 for true. Boolean	1
1 if nonzero and	1
1 by XOR'ing it	1
1 - 5. www.amd.com.	1
1 from -128 generates	1
1 b = lrint(d);	1
1 64 MMX char	1
1 short int, signed	1
1 (see page 135).	1
1 1 short int,	1
1 1 char, signed	1
1 : 0] in	1
1 cache. This has	1
1 byte = char	2
1 byte at 8,	1
1 fraction 2 23	1
1 fraction 2 52	1
1 ebx, DWORD PTR	1
1 eax, 8 edx,	1
1 eax, 100 $B1$2	1
1 int64_t 64 I64vec1	1
1 char, signed or	1
1 Introduction This manual	1
1 Introduction ....................................................................................................................... 3	1
1 0.5ns. 2GHz A	1
: b * c;	2
: c (a&&b) ||	1
: c x-xx----- 75	1
: b; } A	1
: 1; // always	1
: 1; // sign	1
: public CHello {	2
: public C0 {	1
: public CParent<CChild1> {	2
: public CGrandParent {	1
: public B1 {	1
: public CParent<CChild2> {	1
: public B1, public	1
: b) y =	1
: 8; // exponent	1
: (bb[i] * cc[i]);	1
: 23; // fractional	1
: 0] in this	1
: "memory" ); #else	1
: "=m"(n) : "m"(x)	1
: x(0) {}; void	1
: EXCEPTION_CONTINUE_SEARCH) { //	1
: 52; // fractional	1
: 63; // fractional	1
: "m"(x) : "memory"	1
: 2.6f; The ?:	1
: 15; // exponent	1
: 2.5f; If we	1
: 11; // exponent	1
add the static keyword	1
add the constant vector	1
add the four sums	1
add the keyword static	1
add the last element	1
add a to this	1
add a few unused	1
add to the total	1
add or remove any	1
add an extra dummy	1
add b and c	1
add i to p	1
add 2 to x	1
add elements }; vector()	1
add new features to	1
add extra code to	1
add add cmp ja	1
add counter variables that	1
add what r points	1
add n to exponent	1
add unused columns to	1
add mov add cmp	1
add statements like throw(A,B,C)	1
add ebx, DWORD PTR	1
add ebx, eax /	1
add functionality to an	1
add cmp jl $B1$3:	1
add cmp ja $B2$3:	1
add Divide by constant	1
add sar add mov	1
add dummy elements at	1
add eax,1 is the	1
mode is used in	1
mode and some operating	1
mode and back again.	2
mode and mostly relative	1
mode or when the	3
mode or enable the	1
mode if the image	1
mode if SSE2 is	1
mode than in 32-bit	1
mode than in 32	1
mode program is useful	1
mode program is fast,	1
mode program are typically	1
mode has to be	1
mode because the function	1
mode because the 64-bit	1
mode because the x86-64	1
mode where the parameters	1
mode so that the	1
mode 4 4 pointer	1
mode 8 8 float	1
mode rather than generating	1
mode program. The inputs	1
mode unless the SSE2	1
mode unless you have	1
mode SSE 128 bit	1
mode (SSE2): #include <xmmintrin.h>	1
mode (SSE): #include <xmmintrin.h>	1
mode Parameter transfer is	1
store the floating point	1
store the table in	1
store the result in	1
store the four results	1
store the values in	1
store the information in	1
store the shared variable	1
store the intermediate result	1
store the reciprocal factorials	1
store is known before	1
store it in a	1
store x in memory	1
store data because the	1
store all strings in	2
store each object in	1
store many objects together	1
store objects of different	1
store result in array	1
store An uncached write	1
store intermediate data and	1
store intermediate results in	1
store aligned integer vector	1
store operation doesn't delay	1
store strings in a	1
store unaligned integer vector	3
store help files and	1
store application-specific information in	1
store forwarding delay in	2
values is closest to	1
values of a and	2
values of all variables.	1
values of its arguments.	1
values of nonzero floating	1
values of A, B	1
values in the code	1
values in the next	1
values in a pre-calculated	1
values are then output	1
values are simply put	1
values are confined to	1
values or if they	1
values if they are	1
values by hand and	1
values than 0 and	2
values than 0 or	2
values have to be	1
values then the line	1
values at once The	1
values at once................................... 135	1
values because a typo	1
values before the program	1
values before it is	1
values before compilation. The	1
values per point. This	1
values far from each	1
values first, then all	1
All the code is	1
All the reductions that	1
All of these compilers	1
All of these methods	1
All in all, it	1
All code that is	1
All you have to	1
All functions have to	1
All C++ compilers have	1
All software should be	1
All pointers and addresses	1
All these libraries have	1
All these instructions require	1
All these problems are	1
All these examples are	1
All dynamic memory allocation	1
All calculations are done	1
All common implementations of	1
All optimizing compilers will	1
All addresses in the	1
All intermediate results should	1
All source files are	1
All public functions and	1
All x86 platforms (Windows,	1
All global variables (i.e.	1
All modern x86 CPUs	1
All identical constants in	1
All newer microprocessors in	1
All non-static variables and	1
All accesses to functions	1
All disturbing influences are	1
sign is stored as	1
sign of a floating	1
sign of a double:	1
sign and rounding 137	1
sign bit of x	2
sign bit of i	3
sign bit of f	2
sign bit of u.f	1
sign bit to zero	1
sign bit to compare	1
sign bit to zero:	1
sign bit in the	1
sign bit are zero.	1
sign bit // u.d	1
sign bit so that	1
sign bit }; The	1
sign bit set). We	1
sign must be reversed	1
sign : 1; //	1
sign bit: // Example	2
sign bit: absvalue =	1
sign bit. The fact	1
sign bit. We can	1
sign :1;//signbit }; struct	2
sign bit, the exponent,	1
copy the table from	1
copy the entire object.	1
copy the contents of	1
copy is dead code	1
copy a to b	2
copy of the table	1
copy of the function,	1
copy of the inlined	1
copy of an inlined	1
copy of every intermediate	1
copy that the only	1
copy matrix void TransposeCopy(double	2
copy Function inlining has	1
copy constructor is not	1
copy constructor and the	1
copy constructor and no	1
copy constructor can be	1
copy constructor may be	1
copy constructor must be	1
copy constructor specifying otherwise.	1
copy protection schemes are	3
copy protection scheme should	1
copy constructors and overloaded	1
copy constructors and destructors	2
copy constructor, if any,	1
copy constructors, and any	1
optimizing the software for	1
optimizing the first algorithm	1
optimizing a particular piece	1
optimizing for size and	1
optimizing for speed. Optimizing	1
optimizing // Time //	1
optimizing compiler can use	1
optimizing compiler can replace	1
optimizing compiler can see	1
optimizing compiler can bypass	1
optimizing compiler may try	1
optimizing compiler will see	1
optimizing compiler will change	1
optimizing compiler should produce	1
optimizing compiler would assume	1
optimizing compiler might store	1
optimizing CPU use in	1
optimizing compilers can compute	1
optimizing compilers will automatically	1
optimizing compilers available, though	1
optimizing library functions than	1
optimizing execution speed or	1
optimizing code, as explained	1
optimizing database access. 3.10	1
optimizing away p and	1
optimizing away cpuid //	1
optimizing features, and you	1
optimizing application-specific code. The	1
optimizing ............................................................................................... 4 2	1
optimizing multithreaded applications: The	1
optimizing University courses in	1
memory. The functions are	1
memory. The static memory	1
memory. The renaming mechanism	1
memory. This is useful	1
memory. This can be	1
memory. This may be	1
memory. This makes data	1
memory. This prevents the	1
memory. A register is	1
memory. It is therefore	1
memory. It is difficult	1
memory. It will not	1
memory. If the word	1
memory. If you don't	1
memory. If several functions	1
memory. See the discussion	1
memory. See page 89	1
memory. Example: // Example	2
memory. These methods are	1
memory. Function parameters are	2
memory. Most compilers will	1
memory. No information about	1
memory. Variables and objects	1
memory. They may be	1
memory. One kilobyte is	1
memory. Big arrays should	1
memory. Copying constant data	1
memory. 9.6 Dynamic memory	1
memory. Efficient caching is	1
well the compiler optimizes	1
well the microprocessor can	1
well in tests on	1
well it optimizes the	1
well if the repeat	1
well if it is	1
well with non-Intel CPUs.	1
well on all brands	1
well on AMD and	1
well on non-Intel processors,	1
well on non-Intel machines?	1
well as the size	1
well as in Linux	1
well as efficient functions	1
well as pointers and	1
well as important usability	1
well as writing data.	1
well as directly compiled	1
well as Intel-based Mac	1
well use a #define,	1
well only on some	2
well before the pointer	1
well optimized Intel function	1
well optimized software design,	1
well spend more CPU	1
well specify the alignment	1
well developed as C++	1
well tested, and very	1
well documented. The examples	1
well thought-through approach to	1
information is contained in	1
information is utilized appropriately.	1
information to all class	1
information to optimize the	1
information in the database	1
information in a separate	1
information in order to	1
information for the exception	1
information for function F1.	1
information that we can	1
information can be left	1
information stored by the	1
information about the function	1
information about the class	2
information about the performance	1
information about the destructor	1
information about the chain	1
information about the third	1
information about the dimensions	1
information about a variable,	1
information about function names	1
information about functions in	1
information about which implementation	1
information about pointer alignment	1
information about its child	1
information about supported instruction	1
information about mathematical functions.	1
information about Func1 when	1
information about bugs, compatibility	1
information elsewhere and get	1
simply the address of	1
simply a matter of	5
simply to increment an	1
simply by using a	1
simply by copying all	1
simply by setting these	1
simply by storing the	1
simply by comparing them	1
simply by performing an	1
simply by removing the	1
simply by ignoring the	1
simply by inverting the	1
simply not appropriate here.	1
simply an integer in	1
simply no difference in	1
simply makes the compiler	1
simply optimized away and	1
simply don't have the	1
simply put there when	1
simply put 80 into	1
simply predicted to go	1
simply stores the offset	1
simply stores the lower	1
simply zero. Execution time	1
simply treated as different	1
simply identical. For example,	1
simply prints an appropriate	1
able to do the	2
able to do this	1
able to do more	1
able to do different	1
able to do so.	1
able to do so).	1
able to avoid the	1
able to run two	1
able to calculate the	1
able to inline and	1
able to inline this	1
able to optimize this	1
able to automatically prefetch	1
able to see this.	1
able to generate an	1
able to reduce (a*b*c)+(c*b*a)	1
able to find the	1
able to mix the	1
able to predict the	1
able to predict a	1
able to predict correctly	1
able to define application-specific	1
able to evaluate the	1
able to completely rule	1
able to recover from	2
able to overlap the	1
able to reorder instructions	1
able to do, at	1
able do function inlining	1
certain to be divisible	1
certain to be mispredicted	1
certain to be inlined.	1
certain to have no	1
certain to become obsolete	1
certain to truly represent	1
certain that the 64-bit	1
certain that a will	1
certain that a call	1
certain that this part	1
certain that u <	1
certain Intel CPUs, but	1
certain operating system functions	1
certain programming principles in	1
certain instructions that allow	1
certain calculations are done	1
certain parts of the	1
certain options are set	1
certain conditions are satisfied.	1
certain tasks on current	1
certain kinds of code	1
certain optimizations. Do not	1
certain rules about register	1
certain limit to the	1
certain restrictions on using	1
certain restrictions on mixing	1
certain modification is profitable.	1
certain events, for example	1
certain events, such as	1
certain tolerance. The time	1
certain interval: // Example	1
cycles to do a	1
cycles to read from	1
cycles to fetch the	1
cycles in the case	1
cycles for 32-bit integers,	1
cycles that we may	1
cycles if it is	2
cycles on most other	1
cycles on Pentium 4	1
cycles than other CPUs	1
cycles more than it	1
cycles more than calling	1
cycles then it will	1
cycles at the actual	1
cycles before the time	1
cycles rather than seconds	1
cycles even if the	1
cycles counter is counting	1
cycles after the pointer	1
cycles after the value	1
cycles later and the	1
cycles per array element.	1
cycles per element for	1
cycles per byte of	1
cycles per element. The	1
cycles per element. 100	1
cycles whenever it feeds	1
cycles spent on executing	1
cycles (depending on the	1
... a = FactorialTable[b];	1
... for (i =	4
... for (int i	2
... can be changed	1
... // Use ReadTSC()	1
... // Call critical	2
... if (i <	1
... if (i >=	1
... int i, a,	1
... } } The	2
... } } }	1
... } If Func1	1
... } void F0()	1
... } Here, log(2.0)	1
... then you may	1
... There is an	1
... return 0; }	2
... Here, you cannot	1
... Here you cannot	1
... Conversions between signed	1
... x.a = y.a	1
... ~C1(); }; void	1
... list[i & 15]	1
addresses is much simpler	1
addresses is reused again	1
addresses of library functions	1
addresses of array elements	1
addresses of array elements.	1
addresses of dynamically linked	1
addresses to be mispredicted	1
addresses to function names.	1
addresses in the code	3
addresses in order to	1
addresses in 32-bit Mac	1
addresses for one array	1
addresses for everything, which	1
addresses that need relocation.	1
addresses that need relocation,	1
addresses are often used	1
addresses are accessed in	1
addresses are spaced a	1
addresses are obscured in	1
addresses with different set	1
addresses at each access.	1
addresses all belong to	1
addresses divisible by the	2
addresses divisible by 16.	2
addresses (i.e. where the	1
addresses 0x2F00, 0x3700, 0x3F00	1
counter is a counter	1
counter is an integer,	1
counter is used as	1
counter is very useful	1
counter is counting clock	1
counter and using the	1
counter and go back	1
counter in the CPU,	1
counter in Intel processors	1
counter that measures the	1
counter can be calculated	3
counter can be obtained	1
counter // For unused	1
counter // Calculate polynomial	1
counter by a constant	1
counter with its limit,	1
counter when the final	1
counter then make an	1
counter should preferably be	1
counter i is stored	1
counter variables that count	1
counter before and after	1
counter (see below) 16.1	1
counter inside the CPU	1
counter becomes invalid if	1
counter outside both loops	1
counter ahead of time	1
counter //=2*A //=A*x*x+B*x+C //=DeltaY	1
shared object is called,	1
shared object is accessed,	1
shared object can be	1
shared object has a	1
shared object which is	1
shared object where most	1
shared object without the	1
shared object without -fpic	1
shared object compiled without	1
shared object made with	1
shared objects in Mac	1
shared objects in Unix-like	1
shared objects are not	1
shared objects without position-independent	1
shared objects (*.dll, *.so).	2
shared variable inside the	1
shared between multiple threads	1
shared between multiple processes	1
shared between multiple threads,	2
shared between multiple processes.	1
shared resources are limiting	1
shared object. This so-called	1
shared object. It is	1
shared object. Obviously, all	1
shared object. Likewise, when	1
shared object, then the	2
shared objects), resource files,	1
count is not certain	1
count is large or	1
count is small and	2
count is too big.	1
count is divisible by	2
count is usually higher	1
count is near the	1
count is mispredicted only	1
count is odd and	1
count to 5 }	1
count and the calculation	1
count and the subsequent	1
count and no branches	1
count and always use	1
count that can be	2
count on it. Instead	1
count as true, if	1
count may be completely	1
count has been reduced	1
count should preferably be	1
count before and after	1
count how many times	2
count up to some	1
count certain events, such	1
count down to zero	1
count (ArraySize) is constant	1
program. The time measurements	1
program. The use of	1
program. The CPU dispatcher	1
program. The number of	1
program. The advantage of	1
program. The map file	1
program. The inputs for	1
program. The profilers are	1
program. This is the	1
program. This has influence	1
program. This makes data	1
program. This requires no	1
program. This requires, of	1
program. In some programs,	1
program. See page 150	1
program. An optimizing compiler	1
program. All in all,	1
program. Many programmers have	1
program. Avoid unnecessary functions	1
program. 3 Finding the	1
program. 6 Development process	1
program. Add to 122	1
program. Reading or writing	1
program. 16.2 The pitfalls	1
program. Small functions are	1
program. Whole program optimization	1
program. Weighing the above	1
program. During the history	1
program. Frequent context switches	1
program. Application programmers rarely	1
quite a long time	1
quite a long time.	1
quite a good investment.	1
quite as versatile. Fortran	1
quite efficient thanks to	1
quite often as a	1
quite often because the	1
quite simple in most	1
quite likely is a	1
quite well if it	1
quite certain that the	1
quite fast on such	1
quite difficult to implement	1
quite inefficient in large	1
quite inefficient if a	1
quite inefficient. The modern	1
quite time-consuming (see page	1
quite fast. The lesson	1
quite expensive - in	1
quite costly because all	1
quite efficient, but the	1
quite powerful and may	1
quite inefficient, and it	1
quite dramatic consequences. I	1
quite tedious and the	1
quite tedious indeed. It	1
quite substantial. This gain	1
quite convenient. It is	1
quite often. This is	1
quite ingenious things to	1
used. a and b	1
used. The operating system	1
used. The method currently	1
used. The advantages of	2
used. A computer with	1
used. A smart pointer	1
used. A newer method	1
used. It is more	1
used. It is possible	1
used. It is important	1
used. It is recommended	1
used. It takes between	1
used. If the number	1
used. You may avoid	1
used. See page 32	1
used. See page 140.	1
used. For example, x	1
used. Example: // Example	1
used. An optimizing compiler	1
used. However, this does	1
used. We can calculate	1
used. Such variables and	1
used. Dynamic linking makes	1
used. No program should	1
used. Do not mix	1
used. Conversion of an	1
used. Conversions of float	1
used. Whenever a function	1
used. Web systems should	1
files to be installed.	1
files and other resources	1
files and system modules.	1
files and network connections.	1
files and databases with	1
files and executables. Make	1
files and databases. The	1
files for the sake	1
files for intrinsic functions	1
files that need to	1
files are as follows:	1
files are then linked	1
files are also included.	1
files are first compiled	1
files or accessing databases,	1
files on access. Sequential	1
files on access. Run	1
files when the program	1
files from different compilers	1
files from disk. Memory-hungry	1
files into a single	2
files into one by	1
files For example, a	1
files need to be	1
files while less than	1
files etc. scattered around	1
files generated by the	1
files smaller. It is	1
files (*.ini files). 20	1
recommended to use the	4
recommended to use a	4
recommended to use that	1
recommended to make member	1
recommended to make 16-bit	1
recommended to set the	1
recommended to return from	1
recommended to calculate the	1
recommended to put a	2
recommended to turn on	1
recommended to turn off	2
recommended to enable the	1
recommended to enable fast	1
recommended to modify a	1
recommended to try different	1
recommended to declare the	1
recommended to specify static	1
recommended to wrap the	1
recommended to place the	1
recommended for critical applications	1
recommended that big arrays	1
recommended if portability is	1
intermediate code is that	3
intermediate code is needed	1
intermediate code and just-in-time	2
intermediate code for the	1
intermediate code by emulating	1
intermediate code cannot be	1
intermediate code like the	1
intermediate code (byte code).	1
intermediate data and local	1
intermediate object for (b	1
intermediate code. The reason	1
intermediate code. This framework	1
intermediate file format is	1
intermediate file format instead	1
intermediate calculations can cause	1
intermediate result of each	1
intermediate result (b+c) can	1
intermediate files are then	1
intermediate expression b *	1
intermediate results in RAM	1
intermediate results are always	1
intermediate results as floating	1
intermediate results should be	1
intermediate code, which is	1
intermediate code, interpreters, just-in-time	1
intermediate version. For one-man	1
intermediate results, which may	1
fast and easy development	1
fast and efficient, but	1
fast in a simple	1
fast in most cases,	1
fast that the clock	1
fast that what is	1
fast if the table	1
fast if it is	1
fast on a hard	1
fast on such small	1
fast on newer processors.	1
fast as a scalar	1
fast as integer arithmetic	1
fast as single precision.	1
fast as calling a	1
fast as accessing it	1
fast as additions. When	1
fast floating point calculations	1
fast 32-bit software development",	1
fast access to array	1
fast whether p is	1
fast division c =	1
fast ways of multiplying	1
fast math and the	1
fast anyway and you	1
fast approximate reciprocal square	1
fast approximate reciprocal, fast	1
fast enough. A hash	1
fast enough. For example,	1
allocation is done with	1
allocation is particularly risky	1
allocation is used, it	1
allocation is negligible when	1
allocation is unnecessarily wasteful	1
allocation of memory for	1
allocation of memory or	1
allocation and function inlining	1
allocation and parameter transfer	1
allocation and deallocation of	2
allocation and de-allocation of	1
allocation in an inefficient	1
allocation for all objects.	1
allocation can be mentioned	1
allocation can therefore be	1
allocation with new and	1
allocation may be needed,	1
allocation when the size	1
allocation using new/delete or	1
allocation also tends to	1
allocation process because the	1
allocation are: The process	1
allocation are: int BigArray[1024]	1
allocation Dynamic memory allocation	1
allocation Any array or	1
allocation Objects and arrays	1
allocation ...................................................................................... 90 9.7	1
allocation (new and delete).	1
(int i = 0;	13
(int * p) {	2
(int & r) {	1
(int a, int x[])	1
(int a, bool b)	4
(int x) { static	1
(int x) { return	1
(int n = 1;	1
(int x, int m)	1
(int n) { //	2
(int n) { if	1
(int a[], int *	1
write the same in	1
write the variable at	1
write the file to	1
write the members individually.	1
write is more expensive	1
write a + b	1
write a 64-bit double	1
write to the same	1
write that something takes	2
write it in one	1
write it with many	1
write instruction prevents the	1
write less than a	1
write instructions are not	2
write instructions becomes noticeable.	1
write instructions (MOVNT) are	1
write expressions that can	1
write expressions like -(-a)	1
write your own container	1
write #pragma vector nontemporal	1
write causes an entire	1
write directly to memory	1
write configuration files (*.ini	1
write FatalAppExitA(0,"Array index out	1
write 2.0/3.0 than to	1
write _mm_add_epi16(a,b). Two libraries	1
write if(!a && !b)	1
optimize the code and	1
optimize the code further	1
optimize the parts of	1
optimize a piece of	1
optimize for several different	1
optimize code that uses	1
optimize as good as	1
optimize this with induction	1
optimize this loop by	1
optimize this loop? Certainly	1
optimize example 8.26a by	1
optimize performance for background	1
optimize register allocation and	1
optimize both functions and	1
optimize well. Open Watcom	1
optimize away the variable	1
optimize away the extra	1
optimize away a const	1
optimize away an overflow	1
optimize Modern compilers can	1
optimize across the function	1
optimize across function calls.	1
optimize across modules The	1
optimize anything else than	1
optimize access, as given	1
optimize caching. Smaller microcontrollers	1
optimize ............................................................................................ 66 8.2	1
optimize anything, you have	1
optimize specifically for the	1
above the diagonal are	1
above the diagonal have	1
above the diagonal. The	2
above for the 32-bit	1
above can still be	1
above code is serial	1
above code in details.	1
above code can be	1
above code will fail	1
above code will catch	1
above example with floating	1
above example with u.i[1]	1
above example may fail	1
above example sets the	1
above example, the compiler	1
above example, the size	1
above example, the template	1
above example, then all	1
above template class is	1
above doesn't work //	1
above line doesn't work	1
above methods if the	1
above examples will therefore	1
above examples all use	1
above advantages of each	1
above sections are dominating	1
above table. If the	1
above security advices in	1
However, the code that	1
However, the Intel libraries	1
However, the const int	1
However, the short vector	1
However, the STL is	1
However, the out-of-order mechanism	1
However, the CISC instruction	1
However, the pipeline structure	1
However, a software implementation	1
However, in most cases	1
However, it is inefficient	1
However, if F1 calls	1
However, with a well	1
However, you must be	1
However, this is not	1
However, this does not	1
However, this involves the	1
However, this did not	1
However, most compilers do	1
However, there are a	1
However, there are many	1
However, there are cases	1
However, there are disadvantages	1
However, there may be	1
However, C++ is also	1
However, such applications are	1
However, we must consider	1
However, we still want	1
However, these languages have	1
was the opposite: Don't	1
was it possible to	1
was not declared volatile	1
was an odd number	1
was more than doubled	1
was used by element	1
was called from), function	1
was less popular at	1
was done by me	1
was certain to truly	1
was never designed for	1
was zero or infinity	1
was too slow. Today,	1
was called. There is	1
was unknown at the	1
was executed. It is	1
was executed. If the	1
was down to 36.	1
was hardly any speed	1
was saved in the	1
was split into two	1
was programmed. But if	1
was programmed. Therefore, it	1
was manipulated to fake	1
was started. The length	1
was assigned previously in	1
was coded. If the	1
was developed. A CPU	1
was originally designed by	1
both the CPU and	2
both the pointers and	1
both the level-1 and	1
both the executable file	1
both are negative or	1
both can be accessed	1
both have addresses divisible	1
both functions and simply	1
both static and dynamic	2
both 32-bit and 64-bit	1
both Windows and Linux,	1
both Windows and Linux.	1
both AMD and Intel	1
both get the value	1
both Intel, AMD and	1
both positive and negative	1
both positive } Example	1
both cases. This is	1
both during installation of	1
both loops // The	1
both compiler, operating system	1
both compiler, linker and	1
both parent and child	1
both operands. Nevertheless, the	1
both cheaper and more	1
both positive. It will	1
both 16-bit, 32-bit and	1
programs to run a	1
programs and also a	1
programs that are based	1
programs that have many	1
programs that have big	1
programs can be less	1
programs if there are	1
programs with many Boolean	1
programs use time searching	1
programs use more time	1
programs use internet or	1
programs use inappropriate CPU	1
programs when the clock	1
programs because the response	1
programs but rarely in	1
programs should be standardized	1
programs where security matters.	1
programs they are running.	1
programs must use thread-safe	1
programs compiled for the	1
programs compiled for 64-bit	1
programs implemented in compiled	1
programs automatically download updates	1
programs search for updates	1
programs spend most of	1
programs do. Hence, it	1
programs written in Java,	1
programs installed can take	1
problems is quite simple	1
problems of the original,	1
problems of overflow and	1
problems and they waste	1
problems and system crash.	1
problems and system breakdown.	1
problems and necessary support.	1
problems and desired new	1
problems and compatibility problems	1
problems and planned solutions.	1
problems for integer constants.	1
problems that the clock	1
problems that software developers	1
problems that cause the	1
problems that relate to	1
problems are usability issues,	1
problems or performance problems.	1
problems if the necessary	1
problems if the network	1
problems with profilers are:	1
problems you must make	1
problems when the hardware	1
problems because static data	1
problems should be taken	1
problems into account when	1
problems mentioned above. Now	1
problems associated with profiling,	1
problems separating the flags	1
unless the function is	1
unless the function can	1
unless the code relies	1
unless the loop is	1
unless the size of	1
unless the value is	1
unless the address of	1
unless the SSE2 or	1
unless the SSE2 instruction	2
unless the SSE2 (or	1
unless the SSE4.1 instruction	1
unless the length of	1
unless the strictness is	1
unless the Pentium-II or	1
unless you are making	1
unless you are overriding	2
unless you have special	1
unless you have ample	1
unless you put a	1
unless you expect the	1
unless you specify an	1
unless there is a	3
unless they are wrapped	1
unless your program relies	1
optimal to use a	1
optimal to use exception	1
optimal to do so	1
optimal to inline the	1
optimal to mirror the	1
optimal in most cases.	1
optimal in special cases	1
optimal for each calculation.	1
optimal on the actual	1
optimal code for this	1
optimal code because they	1
optimal from a technological	1
optimal because it takes	1
optimal because it prevents	1
optimal only on CPUs	1
optimal number of accumulators	1
optimal version of the	1
optimal branch can be	1
optimal solution is a	1
optimal solution because the	1
optimal platform ........................................................................................... 5	1
optimal platform 2.1 Choice	1
optimal choice for future	1
optimal algorithm The first	1
optimal algorithm before you	1
optimal algorithm ....................................................................................... 24	1
optimal order. Some compilers	1
optimal decomposition of the	1
space is used for	1
space is automatically deallocated	1
space is freed when	1
space is occupied throughout	1
space of the 64-bit	1
space to store data	1
space to become fragmented.	1
space and are difficult	1
space in the code	3
space in the branch	1
space for the parameters	1
space can be given	1
space or make files	1
space by joining a	1
space by allowing two	1
space on the stack	1
space than needed. This	1
space has become too	1
space used for constants.	1
space where a #define	1
space never becomes fragmented	1
space becomes more fragmented	1
space becomes fragmented when	1
space were scarce resources.	1
space explicitly when alloca	1
space 91 step by	1
cases, the compiler may	1
cases, the compiler will	1
cases, the Intel mechanism	1
cases, the optimal branch	1
cases, the fastest way	1
cases, the log on	1
cases, a data member	1
cases, for example to	1
cases, it is possible	1
cases, it is optimal	1
cases, an optimizing compiler	1
cases, you can assume	1
cases, you can obtain	1
cases, but it may	1
cases, but not all.	1
cases, but its data	1
cases, double precision calculations	1
cases, there is an	1
cases, there is no	2
cases, there are two	1
cases, even for double	1
cases, while many reductions	1
cases, however, there is	1
cases, however, where there	1
cases, however, where template	1
cases, composite objects are	1
cases, regardless of the	1
else if else if	1
else if else {	1
else if (level >=	1
else on a computer.	1
else than finding the	1
else { a =	5
else { // No	1
else { // f	1
else { // Generic	1
else { float b[1000];	1
else { return a	1
else { return 0;	1
else { y =	2
else { list[i] +=	2
else { (iset >=	1
else { F2(b); }	1
else { goto CFALSE;	1
else { goto DTRUE;	1
else { FuncB(i); }	1
else { CFALSE: c	1
else { DTRUE: d	1
else being initialized. The	1
lot of code is	1
lot of time both	1
lot of time cleaning	1
lot of data manipulation	1
lot of data shuffling,	1
lot of CPU time,	1
lot of cache space	1
lot of cache space.	1
lot of optimization by	1
lot of time. You	1
lot of extra instructions	1
lot of extra resources.	1
lot of branches that	1
lot of runtime DLL's	1
lot of advanced mathematical	1
lot of added information	1
lot of background processes	1
lot of computing resources.	1
lot of resources, and	1
lot of modifications to	1
lot of bookkeeping in	1
lot of jumping around	1
lot of irrelevant software	1
lot of CPU-time in	1
lot to gain in	1
lot to gain if	1
lot to gain by	1
lot in performance. I	1
Integer to float conversion	1
Integer to float conversions	1
Integer size conversion //	1
Integer variables can be	1
Integer operations are fast	1
Integer operations are generally	1
Integer constant const int	1
Integer overflow is another	1
Integer power using template	1
Integer operators Integer operations	1
Integer multiplication takes longer	1
Integer multiplication takes 11	1
Integer multiplication Integer multiplication	1
Integer multiplication ............................................................................................. 136	1
Integer division is faster	1
Integer division by a	4
Integer division takes much	1
Integer division takes 40	1
Integer division Integer division	1
Integer expressions are less	1
Integer XMM (vector) reductions:	1
Integer constants are usually	1
Integer sizes Integers can	1
Integer algebra reductions: a+b	1
Integer division...................................................................................................... 137 14.6	1
dispatching to make multiple	1
dispatching to C1::Disp() or	1
dispatching and is used	1
dispatching and run any	1
dispatching and discovered that	1
dispatching in the code	1
dispatching in Intel compiler	2
dispatching in Gnu compiler	3
dispatching can be made	1
dispatching or memory-intensive functions	1
dispatching with vector classes	1
dispatching on first call	1
dispatching on every call	1
dispatching then call _mm256_zeroupper()	1
dispatching only to the	1
dispatching only for speed-critical	1
dispatching should be based	1
dispatching There may be	1
dispatching works only with	1
dispatching #include "vectorclass.h" //	1
dispatching mechanism can be	1
dispatching are: Optimizing for	1
dispatching explicitly as in	1
dispatching .................................................................................... 124 13.3	1
dispatching 125 for this	1
particular code implementation works	1
particular code version. 2.	1
particular compiler to do	1
particular memory address by	1
particular memory address cannot	1
particular CPU or other	1
particular CPU model is	1
particular instruction set then	1
particular instruction set, then	1
particular integer size is	1
particular set of CPUs.	1
particular branch of code	1
particular programming language and	1
particular part of the	1
particular processor model. You	1
particular advantageous as replacements	1
particular application uses a	1
particular piece of code.	1
particular brand is likely	1
particular application. The integer	1
particular application. If hyperthreading	1
particular reduction would be	1
particular part. It is	1
particular purpose. The clumsy	1
particular weakness or bottleneck,	1
particular meaning, then you	1
particular subtask before coordination	1
particular situation, but the	1
microprocessor is doing an	1
microprocessor is able to	1
microprocessor and the operating	1
microprocessor and therefore not	1
microprocessor in an FPGA	1
microprocessor The benchmark performance	1
microprocessor that supports this).	1
microprocessor can predict the	1
microprocessor can execute the	1
microprocessor can begin the	1
microprocessor it is running	1
microprocessor with out-of-order capabilities	2
microprocessor has the SSE	1
microprocessor has hardware support	1
microprocessor has made the	1
microprocessor has hyperthreading, then	1
microprocessor because the hardware	1
microprocessor doesn't know in	1
microprocessor hardware for raising	1
microprocessor hardware design. The	1
microprocessor core and an	1
microprocessor jump to a	1
microprocessor ........................................................................................... 6 2.3	1
microprocessor handles this code.	1
microprocessor microarchitecture. A higher	1
microprocessor wastes several clock	1
replace the code in	1
replace the CPU detection	2
replace the branch by	1
replace the call to	1
replace the Gnu compiler	1
replace a function call	1
replace a branch by	1
replace a && b	1
replace a || b	1
replace a database by	1
replace a poorly predictable	1
replace it by a	1
replace it with the	1
replace an integer constant	1
replace this by //	5
replace this line by	1
replace all occurrences of	1
replace integer multiplication by	1
replace such loops by	1
replace arrays by well-tested	1
replace j * 32	1
replace u[1] by u[0].	1
next time the function	1
next time a function	1
next instruction mov DWORD	1
next each bit in	1
next example shows this	1
next two instructions add	1
next new model comes	1
next function. However, the	1
next processor model will	1
next line provokes an	1
next four x^n }	1
next model work better.	1
next higher instruction set	1
next section (page 131)	1
next instance of S1	1
next generation of processors	1
next generation of computers	1
next chapter describes how	1
next block. A linked	1
next element. I have	1
next vector, and the	1
next step in the	1
next step. With a	1
next calculation. However, the	1
next paragraph. The target	1
next year. Ignoring virtualization.	1
next section. 12.5 Using	1
branches is not predicted	1
branches to feed into	1
branches and the number	1
branches and function calls	2
branches and switch statements	1
branches in a function	1
branches The code can	1
branches for correctness. It	1
branches that are fine-tuned	1
branches that can skip	1
branches that take up	1
branches that select between	1
branches are scattered everywhere	1
branches are poorly predictable.	1
branches can be mispredicted	1
branches or function calls.	1
branches as possible, and	1
branches may take a	1
branches at the vector	1
branches such as error	1
branches works correctly. A	1
branches inside can be	1
branches every time the	1
branches separately and test	1
branches Eliminate jumps Eliminate	1
branches Remove branch that	1
typically in a message	1
typically have more powerful	1
typically have variable lengths	1
typically have much less	1
typically use integer operations	1
typically use pointers may	1
typically used on bigger	1
typically takes a few	1
typically takes one clock	1
typically takes 40 clock	1
typically between 5 and	1
typically stored in different	1
typically 64 bytes on	1
typically 64 bytes. This	1
typically take much more	1
typically 0 - 2	1
typically small pieces of	1
typically uses much more	1
typically get the generic	1
typically implemented by the	1
typically aligned by 8	1
typically look like this:	1
typically loaded at a	1
typically happens if the	1
typically specified on a	1
typically 30 ms for	1
typically thinks "what works	1
operator is as efficient	1
operator is used for	3
operator is also useful	1
operator is exactly as	1
operator is equivalent to	1
operator that specifies how	1
operator that transfers ownership	1
operator // add elements	1
operator will detect an	1
operator } }; //	1
operator which otherwise can	1
operator + (vector const	1
operator does the same	1
operator These different methods	1
operator here is a	1
operator here is to	1
operator i++ are as	1
operator forces the compiler	1
operator (bitwise and) will	1
operator less. Fortunately, all	1
operator (|) works even	1
operator ++i and the	1
operator %. Conversion to	1
operator (&) and the	1
operator (^) may give	1
preferably in the same	1
preferably be a simple	1
preferably be a constant	1
preferably be a power	3
preferably be an integer.	1
preferably be stored at	1
preferably be done in	1
preferably be done on	1
preferably be put away	1
preferably be declared in	1
preferably be declared inside	1
preferably be avoided on	1
preferably be static, as	1
preferably be kept small	1
preferably be kept entirely	1
preferably be responded to	1
preferably with contiguous memory.	1
preferably have a balanced	1
preferably have no more	1
preferably using powers of	1
preferably 32 for AVX.	1
preferably avoid global variables	1
preferably implemented on a	1
preferably aligned by 32	1
preferably isolated into a	1
1; for (i =	2
1; // always 1	1
1; // sign bit	1
1; } The compiler	1
1; } This is	1
1; } This code	1
1; } } The	1
1; } } A	1
1; } } Loop	1
1; } return y;	1
1; } }; class	2
1; } else {	3
1; } module2.cpp int	1
1; return c; }	1
1; You cannot replace	1
1; n <= 16;	1
1; r < SIZE;	2
1; list[i+2] = 2;	2
1; x[1] = b;	1
1; a[1] = 2;	1
1; 69 } else	1
Therefore, the code section	1
Therefore, the data and	1
Therefore, the data section	1
Therefore, the number of	1
Therefore, the dispatcher 128	1
Therefore, the __fastcall keyword	1
Therefore, it is even	1
Therefore, it is important	1
Therefore, it is necessary	1
Therefore, it is advantageous	1
Therefore, it is recommended	1
Therefore, it is slightly	1
Therefore, it is worthwhile	1
Therefore, it can often	1
Therefore, it will run	1
Therefore, it has to	1
Therefore, it cannot inline	1
Therefore, you only need	1
Therefore, you should avoid	3
Therefore, you should apply	1
Therefore, you don't have	1
Therefore, make sure that	1
Therefore, 64-bit Linux is	1
Therefore, both the executable	1
Therefore, micro- processors have	1
Mac The libraries included	1
Mac code uses an	1
Mac Intel CodeGear Microsoft	1
Mac operating system running	1
Mac systems often use	1
Mac systems normally use	1
Mac programs but rarely	1
Mac systems. 14 Specific	1
Mac platforms. 2. Optimizing	1
Mac Windows, Linux, Mac,	1
Mac platforms By Agner	1
Mac OS and Itanium	1
Mac OS X The	1
Mac OS X make	1
Mac OS X operating	2
Mac OS X Compilers	1
Mac OS X (Darwin)	1
Mac OS X, 32-bit	1
Mac OS X, unless	1
Mac OS X. 14.13	1
Mac allow up to	1
Mac systems, this may	1
Mac platform. Intel The	1
Mac OS, etc.) have	1
Mac OS. See page	1
Mac platform, but also	1
multiplication is done with	1
multiplication is exact. Multiple	1
multiplication of xxn rather	1
multiplication and an addition.	1
multiplication are permissible in	1
multiplication can be replaced	1
multiplication or division. The	1
multiplication by a constant	1
multiplication by 2 in	1
multiplication by columns in	1
multiplication by changing this	1
multiplication may be three	1
multiplication will be faster	1
multiplication } // ipow	1
multiplication at the same	1
multiplication but only an	1
multiplication takes longer time	1
multiplication takes 11 clock	1
multiplication would take longer	1
multiplication Integer multiplication takes	1
multiplication units. This means	1
multiplication here: a[i] =	1
multiplication ............................................................................................. 136 14.5	1
multiplication b[i]*c[i], though this	1
multiplication (27 - 80	1
multiplication (20 - 45	1
multiplication prior to SSE4.1	1
application is preferably implemented	1
application is generally faster	1
application to a different	1
application to calculate the	1
application that uses a	1
application can make use	1
application if dynamic linking	1
application with many function	1
application then you should	1
application program will be	1
application program without invoking	1
application program loads the	1
application has a graphical	1
application software is implemented	1
application code. An interrupt	1
application uses a lot	1
application uses most of	1
application program. The number	1
application program. All in	1
application program. Add to	1
application programs use internet	1
application programmer gets the	1
application depends on the	1
application software. Such an	1
application itself and take	1
application integration, mixed language	1
application programmer. There is	1
x) { // (N	1
x) { // Remove	1
x) { // polynomial(x)	1
x) { // Round	1
x) { double x2	1
x) { float xn	1
x) { static float	1
x) { return x	3
x) { return x;	1
x) { return 1.0;	1
x) { return Func1(x)	1
x) { return pow(x,10);	1
x) { return IntegerPower<10>(x);	1
x) { return x*x	1
x) { return ipow(x,10);	1
x) { return powN<true,N/2>::p(x)	1
x) { return square(x)	1
x) { return _mm_cvtss_si32(_mm_load_ss(&x));}	1
x) { return _mm_cvtsd_si32(_mm_load_sd(&x));}	1
x) { __declspec(align(16)) static	1
x) { _mm_storeu_si128((__m128i *)d,	3
x) { __m128 s;	1
x) { _mm_store_si128((__m128i *)d,	1
automatically and vectorize the	1
automatically in cases where	1
automatically in simple cases	1
automatically in simple cases.	1
automatically in vectorized code	1
automatically or does so	1
automatically if this appears	1
automatically by the compiler.	1
automatically when the function	1
automatically when the computer	1
automatically then it is	1
automatically but you may	1
automatically but only if	1
automatically check for array	1
automatically replace a branch	1
automatically replace such loops	1
automatically generate multiple versions	1
automatically choose the most	1
automatically come into force	1
automatically detect which instruction	1
automatically detect opportunities for	1
automatically prefetch data for	1
automatically deallocated when returning	1
automatically thanks to out-of-order	1
automatically reduces example 15.1a	1
automatically download updates through	1
see the result of	1
see the excessive memory	1
see the compiler-generated code	1
see the delay. But	1
see in the debugger	1
see that the addresses	1
see that the rows	1
see that p always	1
see if the code	1
see if a certain	1
see if it is	1
see if our estimate	1
see which one works	1
see which part of	1
see which solution is	1
see page 105. 8.7	1
see page 122. The	1
see how well it	1
see whether the call	1
see whether they were	1
see below. Installing a	1
see my free E-book	1
see this. It also	1
see shortly. The following	1
see http://www.agner.org/optimize/ - vectorclass	1
see emulated processors and	1
caching is a problem	1
caching is therefore becoming	1
caching is advantageous if,	1
caching is critical. The	1
caching is critical. Optimizing	1
caching is poor if	1
caching and data caching	1
caching for the following	1
caching more efficient than	1
caching more efficient today	1
caching more efficient. Variables	1
caching will be better	1
caching very efficient. The	1
caching less efficient. The	1
caching less efficient. There	1
caching less efficient. Dynamic	1
caching less efficient. Do	1
caching less efficient. Access	1
caching less efficient. Extra	1
caching problems for integer	1
caching problems because static	1
caching becomes a problem.	1
caching becomes inefficient. There	1
caching conditions are optimal.	1
caching inefficient. An allocated	1
caching inefficient. Dynamic memory	1
allows the function argument	1
allows the compiler to	3
allows the CPU to	1
allows the linker to	1
allows a maximum of	1
allows it to begin	1
allows you to use	1
allows you to override	1
allows you to reserve	1
allows only four function	1
allows multiple pointers to	1
allows less precise floating	1
allows common subexpression elimination	1
allows bigger segments (32-bit	1
allows parallel calculations. Examples	1
allows 256-bit integer vectors.	1
allows compile-time if statements	1
allows larger floating point	1
allows overriding of public	1
allows it, it may	1
allows us to compare	1
allows us to manipulate	1
allows direct access to	1
allows "__attribute__((visibility("hidden")))". Use whole	1
sets the CPU supports,	1
sets the variable __intel_cpu_feature_indicator	1
sets the variable __intel_cpu_feature_indicator_x.	1
sets the sign bit	1
sets is as follows:	1
sets is provided in	1
sets a function pointer	2
sets and other features	1
sets and cache sizes.	1
sets are mutually incompatible.	2
sets can be used,	1
sets can be determined	1
sets have certain instructions	1
sets have got RISC	1
sets A more detailed	1
sets from the same	1
sets all other bits	1
sets all elements to	1
sets where the same	1
sets 4 ways. This	1
sets rather than loops,	1
sets enable the compiler	1
sets include a few	1
sets Microprocessor producers keep	1
expression is optimized away.	1
expression is calculated as	1
expression is used, then	1
expression a = (b*c)/d,	1
expression a = b++;	1
expression a && b	1
expression to generate many	1
expression that is a	1
expression that is an	1
expression that is AND'ed	2
expression that it can	1
expression that should not	2
expression or an anonymous	1
expression or subexpression containing	1
expression with multiple overloaded	1
expression b * 5).	1
expression b && a	1
expression contains a function	1
expression y = a	1
expression better explains the	1
expression list[i] is invalid	1
expression -(-a) to a.	1
expression (Tuesday | Wednesday	1
expression -a > -b	1
implementation is faster than	2
implementation is optimal only	1
implementation is needed. These	1
implementation is best. These	1
implementation of the member	1
implementation of the factorial	1
implementation of the memcpy	1
implementation of the lrint	1
implementation of member pointers	1
implementation of these functions	1
implementation in most cases	1
implementation in most cases,	1
implementation for a given	1
implementation can be a	1
implementation if the SSE2	1
implementation if possible, and	1
implementation may look like	1
implementation when b is	1
implementation rather than a	1
implementation works particularly bad	1
implementation uses a lookup	1
implementation uses XMM registers	1
implementation would only read	1
implementation dependent. The stack	1
implementation analogous to example	1
Most of the code	1
Most of the advice	1
Most of the comments	1
Most compiler packages include	1
Most compilers can make	1
Most compilers can do	1
Most compilers can reduce	1
Most compilers have an	1
Most compilers will use	1
Most compilers will make	1
Most compilers will automatically	1
Most compilers will align	1
Most compilers will recognize	1
Most compilers include standard	1
Most compilers offer the	1
Most C++ compilers are	1
Most C++ compilers have	1
Most performance tests are	1
Most copy protection schemes	1
Most reductions involving integer	1
Most modern CPUs have	1
Most implementations of C++,	1
Most programmers have little	1
Most caches are organized	1
Most IDE's (Integrated Development	1
Most importantly, it requires	1
complicated to make CPU-	1
complicated and time consuming.	1
complicated and clumsy, as	1
complicated and error-prone. The	1
complicated in a large	1
complicated that I consider	1
complicated if the number	1
complicated code that is	1
complicated because various corrections	1
complicated functions like sin.	1
complicated address calculation and	1
complicated template method. 7.29	1
complicated cases should definitely	1
complicated cases cannot be	1
complicated solution is to	1
complicated implementation is needed.	1
complicated implementation of the	1
complicated implementation of member	1
complicated mathematical tasks. Before	1
complicated process which is	1
complicated algorithm if a	1
complicated algebraic expressions. For	1
complicated algorithms is that	1
complicated techniques like square	1
complicated reductions. Algebraic reduction	1
complicated criteria or lists	1
handling is not necessary	2
handling is intended for	1
handling is negligible because	1
handling a full size	1
handling and you want	1
handling in the end	1
handling in this example.	1
handling for the whole	1
handling for a single	1
handling can be expensive	1
handling then you cannot	1
handling takes no extra	1
handling even in the	1
handling system makes sure	1
handling system instead of	1
handling option in the	1
handling support anyway. The	1
handling unless the code	1
handling errors without using	1
handling cleanup jobs is	1
handling information. Each function	1
handling Exception handling is	2
handling ................................................................................ 61 7.31	1
handling /EHs- No stack	1
like the one that	1
like a pointer. It	1
like a macro so	1
like a key press	1
like a mouse move	1
like a parameter, so	1
like to put a	1
like and how you	1
like an array with	1
like this in a	1
like example 12.4a where	1
like adding vectors. The	1
like square blocking for	1
like this: // Example	6
like -(-a) very often,	1
like pressing a button	1
like throw(A,B,C) to tell	1
like string, wstring or	1
like sin. Pointer elimination	1
like sqrt, pow and	1
like these, it is	1
dependency chains is stronger	1
dependency chains in the	1
dependency chains can be	2
dependency chains with long	1
dependency chains then each	1
dependency chains (see p.	1
dependency chain is a	1
dependency chain in two:	1
dependency chain may fill	1
dependency chain has a	1
dependency chain which prevents	1
dependency chain where each	1
dependency chain would make	1
dependency chain. A microprocessor	1
dependency chain. If a	1
dependency chain. We want	1
dependency chain. Such dependency	1
dependency chain. 3.16 Execution	1
dependency chain. Nothing in	1
dependency chains. A dependency	1
dependency chains. In this	1
dependency chains. Another thing	1
dependency chains, especially loop-carried	1
dependency chains, namely the	1
dependency chain, especially on	1
members is added to	1
members of the same	3
members of a class	3
members of a parent	1
members of both parent	1
members of mixed sizes.	1
members to round addresses	1
members in the first	1
members that are never	1
members are then you	1
members can be copied	1
members or member functions.	1
members or non-static member	1
members with a total	1
members may cause a	1
members come first. If	1
members within the first	1
members share the same	1
members (properties) The data	1
members (properties) ............................................................................ 51	1
members last: // Example	1
members individually. Example: //	1
their time waiting for	1
their CPU dispatchers up	1
their clock frequency dynamically	1
their software faster. It	1
their 32-bit counterparts. In	1
their address and attempts	1
their execution time on	1
their uses (live ranges)	1
their values before compilation.	1
their own graphical user	1
their own initiative whenever	1
their CPUs. Intel's profiler	1
their index or key	1
their stack. This can	1
their smart pointer then	1
their implementations reveal a	1
their live ranges do	3
their live ranges now	1
their actual values before	1
their 23 software. This	1
their functionality. This will	1
their live-ranges do not	1
their workplace and the	1
their superior performance/price ratio.	1
__m128i a = _mm_or_si128(c2,	1
__m128i a = _mm_blendv_epi8(bc,	1
__m128i b = LoadVector(bb	2
__m128i two = _mm_set1_epi16(2);	2
__m128i const & x)	4
__m128i c = LoadVector(cc	2
__m128i zero = _mm_set1_epi16(0);	2
__m128i c2 = _mm_add_epi16(c,	2
__m128i defines a 128	1
__m128i bc = _mm_mullo_epi16	2
__m128i mask = _mm_cmpgt_epi16(b,	2
__m128i LoadVector(void const *	3
__m128i LoadVectorA(void const *	1
Using the vector operations	1
Using the SSE2 instruction	1
Using the methods in	1
Using the out-of-order capabilities	1
Using the nontemporal write	1
Using a union is	1
Using an overloaded operator	1
Using vector operations Today's	1
Using vector classes .............................................................................................	1
Using vector classes Programming	1
Using vector operations............................................................................................... 105	1
Using integer operations for	2
Using double precision in	1
Using multiple CPUs or	1
Using performance monitor counters	2
Using pointers makes it	1
Using complicated techniques like	1
Using intrinsic functions can	1
Using intrinsic functions It	1
Using intrinsic functions ........................................................................................	1
Using templates for polymorphism	1
Using unaligned reads and	1
Using hexadecimal numbers, we	1
Boolean vector operations An	1
Boolean vector operations. 7.6	1
Boolean variables are stored	1
Boolean variables are overdetermined	2
Boolean variables as input	2
Boolean operations can be	1
Boolean operators because they	1
Boolean operators && and	1
Boolean operators produce a	1
Boolean operators &&, ||,	1
Boolean operators (&& and	1
Boolean XMM (vector) reductions:	1
Boolean operands The operands	1
Boolean operands because you	1
Boolean vector. For example,	1
Boolean expressions. There are	1
Boolean expressions. Whether the	1
Boolean algebra reductions: !(!a)=a	1
Boolean operands. You cannot	1
Boolean output. The optimized	1
Boolean vectors, and these	1
Boolean algebra, it is	1
Boolean NOT on a	1
cache. The different kinds	1
cache. The same can	1
cache. The cache works	1
cache. The operating system	1
cache. The register stack	1
cache. The problem only	1
cache. The advantage of	1
cache. The level-2 cache	1
cache. The subsequent sections	1
cache. The Core2 processor	1
cache. This has a	1
cache. This has hardly	1
cache. If the number	1
cache. If the combined	1
cache. These instructions are	1
cache. Most compilers will	1
cache. Using the nontemporal	1
cache. We can take	1
cache. When we reach	1
cache. Compilers will usually	1
cache. 2.2 Choice of	1
cache. Single precision is	1
cache. Files on remote	1
cache. Bit-fields of sizes	1
cache. Multithreaded programs must	1
don't have the time	1
don't have to do	1
don't have to care	1
don't have to wait	1
don't have to prefetch	1
don't have to distribute	1
don't have to reinvent	1
don't need the "override"	1
don't need a smart	1
don't need an error	1
don't need any non-static	1
don't need conversions between	1
don't even have an	1
don't want this initialization,	1
don't get rid of	1
don't support processor X"	1
don't count on it.	1
don't know if this	1
don't modify the carry	1
don't vectorize the code	1
don't care to calculate	1
don't depend on x	1
don't understand it. I	1
don't think that programmers	1
don't send your programming	1
256 int int64_t 256	1
256 double 256 F32vec4	1
256 float 128 double	1
256 clock cycles. Calculations	1
256 bit integer vectors	1
256 bit float and	1
256 unsigned 256 int	1
256 16 16 256	1
256 bits (YMM), and	1
256 bits (YMM) if	1
256 short int int	1
256 times and the	1
256 AVX int 32	1
256 AVX double 64	1
256 && SIZE %	1
256 AVX2 int 32	1
256 AVX2 float 32	1
256 AVX2 long long	1
256 AVX2 short int	1
256 F32vec4 F64vec2 F32vec8	1
256 bytes) on future	1
256 uint64_t 256 float	1
256 Kbytes to 2	1
256 Vec32c unsigned char	1
256 Vec32uc Vec16s Vec16us	1
intrinsic function call is	1
intrinsic function _mm256_zeroupper() before	1
intrinsic vector functions have	1
intrinsic functions and it	1
intrinsic functions for the	1
intrinsic functions can be	1
intrinsic functions // This	1
intrinsic functions // Function	1
intrinsic functions or vector	2
intrinsic functions It is	1
intrinsic functions You have	1
intrinsic functions Use predefined	1
intrinsic functions (i.e. Microsoft,	1
intrinsic functions ........................................................................................ 109	1
intrinsic instructions for mathematical	1
intrinsic function. Provoke branch	1
intrinsic functions. This is	1
intrinsic functions. It is	1
intrinsic functions. Alternatively, you	1
intrinsic hardware functions. The	1
intrinsic vectors requires alignment	1
intrinsic functions, but the	1
intrinsic functions, but in	1
intrinsic functions, inline assembly	1
methods of rounding, but	1
methods to improve efficiency.	1
methods and algebraic reductions	1
methods in the above	1
methods for communication and	1
methods for avoiding the	1
methods for dealing with	1
methods for exploiting fine-grained	1
methods are time consuming.	1
methods are based on	1
methods are further described	1
methods are discussed in	1
methods are incremental or	1
methods or require runtime	1
methods if the most	1
methods with little or	1
methods may be used	1
methods have exactly the	1
methods then the critical	1
methods only if you	1
methods also work when	1
methods described on page	1
methods could possibly be	1
methods mentioned above. An	1
methods depend on the	1
signed and unsigned integers	3
signed and unsigned variables.	1
signed and unsigned integers.	1
signed or unsigned 2	1
signed or unsigned 4	1
signed or unsigned 8	1
signed or unsigned 1	1
signed or unsigned. The	1
signed with unsigned integers	1
signed than with unsigned	1
signed when you divide	1
signed when converting to	1
signed integer to a	1
signed integer if there	1
signed integer doesn't cause	1
signed integer overflow doesn't	1
signed variable produces a	1
signed before converting to	1
signed integers in case	1
signed integers before conversion	1
signed integers. It is	1
signed number. If the	1
signed number, or no	1
model the best possible	1
model is likely to	1
model is hardly ever	1
model is going to	1
model is over. Virtualization	1
model and then think	1
model that was unknown	1
model with a higher	1
model will work better.	1
model has its own	1
model used here. The	1
model number to reflect	1
model where the combined	1
model work better. Remember	1
model numbers are not	1
model numbers form a	1
model comes on the	1
model N supports a	1
model number. The only	1
model number. I have	1
model number. Failure to	1
model numbers, but on	1
model N+1 supports at	1
model N-1 is inferior.	1
model fast=2 Simple member	1
development of a program.	1
development of user interfaces	1
development and the low	1
development are more important	1
development time and maintainability	1
development time for WTL	1
development more expensive and	1
development time. Interpreted languages	1
development work as a	1
development methods are incremental	1
development process and software	1
development process can influence	1
development time, usability, program	1
development models have a	1
development tool is faster	1
development tool is Microsoft	1
development tools. The simplest	1
development tools. A popular	1
development tools. One popular	1
development process. These requirements	1
development tools for supporting	1
development tools have powerful	1
development environment (IDE) supports	1
development kit (SDK or	1
development tools, rather than	1
mathematical functions that 150	1
mathematical functions are calculated	1
mathematical functions are supplied	1
mathematical functions such as	4
mathematical functions take more	1
mathematical code. There are	1
mathematical operations on vectors	1
mathematical calculations with memory	1
mathematical calculations including linear	1
mathematical functions. A lot	1
mathematical functions. It also	1
mathematical functions. 7.4 Enums	1
mathematical applications with large	1
mathematical calculations. It is	1
mathematical calculations. In other	1
mathematical calculations. In such	1
mathematical iterations such as	1
mathematical tasks. Before you	1
mathematical calculations, should be	1
mathematical purity. In many	1
mathematical purity. For example,	1
mathematical notion of a	1
never be sure that	1
never be negative so	1
never be negative. The	1
never use static variables.	1
never used at the	2
never takes memory space.	1
never return any pointer	1
never stored in a	1
never uses the new	1
never used. A computer	1
never used. Whenever a	1
never becomes fragmented thanks	1
never called. The disadvantage	1
never called. This method	1
never called. Unfortunately, the	1
never designed for this	1
never interrupt the user	1
never spend time doing	1
never modified by the	1
never occurs, even for	1
never throw any exception	1
never changed. This will	1
never exceeds an acceptable	1
never respond to a	1
separate for each thread.	1
separate function library and	1
separate function library. The	1
separate from seldom used	1
separate version for specific	1
separate file than in	1
separate dynamic link library	2
separate function. Sometimes, functions	1
separate threads with low	1
separate threads so that	1
separate thread in systems	1
separate thread if the	1
separate thread if it	1
separate thread if there	1
separate thread with lower	1
separate modules if necessary,	1
separate C or C++	1
separate containers for each	1
separate module then it	1
separate storage. No function	1
separate layers of abstraction	1
separate subroutine if it	1
separate executables for 32-bit	1
separate module, and to	1
block the execution of	2
block is allocated and	1
block is re-allocated every	1
block of memory for	1
block of 16 bytes.	1
block of data. This	1
block to copy that	1
block and a pointer	1
block and copy the	1
block for each object.	1
block for every four	1
block that the object	1
block that has already	1
block or function call	1
block than to store	1
block then become invalid.	1
block from one object	1
block should have its	1
block size grows by	1
block into the beginning	1
block every time a	2
block containing many objects	1
block turns out to	1
name is not allowed	1
name of this function	1
name of Func with	1
name and the template	1
name and model number.	1
name in the object	1
name for the child	1
name for each instruction	1
name for local references.	1
name that the compiler	1
name as a function	1
name as a global	1
name as template parameter.	1
name at the time	1
name cannot be overloaded	1
name ; start of	1
name depending on instruction	1
name Instruction set Prefetch	1
name Intrinsic function name	1
name ?Func@@YAXQAHAAH@Z is the	1
name mangling are explained	1
name mangling. The characters	1
name "position-independent code" actually	1
name _alloca) for (int	1
name ;startofFunc ; a	1
systems. The Intel compiler	1
systems. The 64 bit	1
systems. The user interface	1
systems. The appropriate version	1
systems. The smaller the	1
systems. The latter is	1
systems. The Intel-based Mac	1
systems. A software developer	1
systems. A look in	1
systems. It is intended	1
systems. If the compiler	1
systems. If you are	1
systems. There is no	1
systems. Some compilers have	2
systems. All of these	1
systems. Mac systems often	1
systems. Floating point variables	1
systems. 10 Gnu This	1
systems. 3 The latest	1
systems. Virtual member functions	1
systems. 14 Specific optimization	1
systems. Applications that use	1
systems. Today (2013) both	1
systems. 67 The maximum	1
put the different functions	1
put the most often	1
put the most predictable	1
put the desired measurement	1
put the whole software	1
put the operand that	2
put the task-specific part	1
put a test feature	1
put a task into	1
put a parenthesis around	2
put a tag on	1
put an equal amount	1
put into the list	1
put there when the	1
put file access and	1
put file access in	1
put something in a	1
put away in reusable	1
put time-consuming tasks into	1
put 80 into a	1
put seldom used branches	1
put measurement instruments directly	1
put time- consuming calculations	1
needs the result of	1
needs a floating point	1
needs a little explanation.	1
needs of position- independent	1
needs to be called.	1
needs to be distributed	1
needs to be updated	1
needs to be stored.	1
needs to be saved.	1
needs to code the	1
needs to make a	1
needs to call a	1
needs to look up	1
needs to load the	1
needs to switch to	1
needs to evaluate a	1
needs to evaluate b	1
needs to follow the	1
needs an extra jump	1
needs only calculate element	1
needs all information about	1
needs one instance for	2
needs them. Pure functions	1
needs careful optimization. A	1
y = a +	3
y = a &	1
y = c +	1
y = d +	1
y = (a +	1
y = 1.0; while	1
y = b;} vector	1
y = cos(x); }	1
y = cos(x); z	1
y = sin(x); }	1
y = sin(x); z	1
y = a1/b1 +	1
y = pow(x,n) As	1
y = (a1*b2 +	1
y = MAX(f(x), g(x));	1
y will get the	1
y into a vector	1
y + 1.; }	2
y + 1.; Eliminate	1
y + a.y);} vector	1
y && z !=	1
y *= x; x	1
conversion is costly if	1
conversion is valid. For	1
conversion of i to	1
conversion to floating point	1
conversion to signed integer	1
conversion and shuffling can	1
conversion // Example 7.21	1
conversion // Example 7.20	1
conversion // C-style type	1
conversion time is typically	1
conversion A pointer can	1
conversion from floating point	1
conversion from example 15.1b	1
conversion from float or	1
conversion takes more time	1
conversion takes no extra	1
conversion takes zero or	1
conversion takes 50 -	1
conversion between signed and	1
conversion often takes no	1
conversion instructions which can	1
conversion Conversion of a	2
conversion Conversions between float,	1
conversion generates no extra	1
c; a = b	4
c; a = select(b	1
c; The calculation here	1
c; for (r =	2
c; // Define biggest	1
c; // Roll out	1
c; int UnusedFiller; };	1
c; } In this	1
c; } Can be	1
c; double temp; for	2
c; b = (unsigned	1
c; b = (a+1)	1
c; }; Replace with:	1
c; }; 7.23 Constructors	1
c; ... // Call	2
c; y = d	1
c; Here, y will	1
c; Is16vec8 a =	1
c; x[0] = a;	1
#include directives and declare	1
#include directives. This is	1
#include <stdio.h> // define	1
#include <stdio.h> #include <asmlib.h>	1
#include <dvec.h> // Define	2
#include "vectorclass.h" // vector	1
#include "vectorclass.h" // Define	1
#include <emmintrin.h> // Define	1
#include <emmintrin.h> static inline	1
#include "asmlib.h" // Define	1
#include "asmlib.h" // Lowest	1
#include <xmmintrin.h> _mm_setcsr(_mm_getcsr() |	1
#include <xmmintrin.h> _MM_SET_FLUSH_ZERO_MODE(_MM_FLUSH_ZERO_ON); It	1
#include <ia32intrin.h> etc. //	1
#include <excpt.h> #include <float.h>	1
#include "xmmintrin.h" // header	1
#include <float.h> #include <math.h>	1
#include <pmmintrin.h> // SSE3	1
#include <malloc.h> void SomeFunction	1
#include <intrin.h> long long	1
#include "instrset_detect.cpp" // instrset_detect	1
#include <asmlib.h> void CriticalFunction();	1
#include <math.h> #define EXCEPTION_FLT_OVERFLOW	1
various function libraries for	1
various functions for these	1
various other optimizations possible	1
various instruction sets can	1
various efficient container classes.	1
various optimization methods and	1
various optimization options that	1
various programming languages. www.yeppp.info	1
various methods for communication	1
various options to control	1
various ways of reducing	1
various ways to do	1
various ways to avoid	3
various ways to get	1
various ways around this	1
various ways depending on	1
various things you can	1
various discussion forums on	1
various algebraic expressions on	1
various profilers available which	1
various alternatives to using	1
various corrections for sign	1
disadvantage is that the	4
disadvantage is that CParent::Hello()	1
disadvantage of the Intel	1
disadvantage of a very	1
disadvantage of function inlining	1
disadvantage of using the	1
disadvantage of using a	1
disadvantage of using an	1
disadvantage of 64-bit Windows	1
disadvantage of C++ relates	1
disadvantage of intermediate code	1
disadvantage of complicated algorithms	1
disadvantage of binary data	1
disadvantage of compiling without	1
disadvantage for the end	1
disadvantage that the function	2
disadvantage that the branching	1
disadvantage if the sequence	1
disadvantage if other nearby	1
disadvantage when the arrays	1
high and decreased when	1
high for programs that	1
high that it is	2
high that it rarely	1
high then the most	1
high speed of modern	1
high power of 2.	2
high precision math allow	1
high precision math. Memory	1
high overhead cost of	1
high repeat count is	1
high processing power of	1
high priority of structured	1
high level framework based	1
high level framework still	1
high level framework. The	1
high priority. The gain	1
high priority. Other tasks	1
high resolution if time	1
high degree of optimization	1
high complexity of modern	1
high price, and in	1
zero is sometimes more	1
zero and to make	2
zero and then call	1
zero in the while	1
zero for (i =	1
zero that is more	1
zero // Return the	1
zero = _mm_set1_epi16(0); //	2
zero or one clock	1
zero or infinity or	1
zero if all bits	1
zero by using memset:	1
zero by testing all	1
zero than making it	1
zero } We can	1
zero at the same	1
zero We can check	1
zero whenever the objects	1
zero within a block	1
zero flag and don't	1
zero flags on certain	1
zero memset(a, 0, sizeof(a));	1
Microsoft and Intel compilers	1
Microsoft and PathScale compilers.	1
Microsoft or Gnu compilers	1
Microsoft compiler for Windows	1
Microsoft compiler does not	1
Microsoft compiler #define Alignd(X)	1
Microsoft compiler supports this	1
Microsoft C++ compilers www.agner.org/	1
Microsoft C++ Compiler v.	1
Microsoft Table 2.1. Comparing	1
Microsoft compilers. // It	1
Microsoft directives work on	1
Microsoft Intel, Microsoft, Gnu,	1
Microsoft platform software development	1
Microsoft compiler. Some functions	1
Microsoft compiler. Supports only	1
Microsoft Visual Studio This	1
Microsoft Visual Studio when	1
Microsoft Visual Studio IDE.	1
Microsoft Visual Studio. This	1
Microsoft Visual studio 2008,	1
Microsoft Constant propagation Pointer	1
Microsoft Comes with Microsoft	1
Microsoft Foundation Classes (MFC).	1
what the compiler can	1
what the compiler does	2
what the assembly output	1
what the preprocessor can	1
what is most appropriate	1
what is brand new	1
what is happening. It	1
what a function pointer	1
what a pointer points	1
what it can not	1
what it points to.	1
what if an exception	1
what you are doing.	1
what you want it	1
what you want when	1
what instruction sets and	1
what class of object	1
what they are. However,	1
what r points to	1
what kind of exceptions	1
what fits best into	2
what happens inside the	1
parameter is that the	1
parameter is always resolved	1
parameter is part of	1
parameter is bigger than	1
parameter is copied to	1
parameter is wrong, but	1
parameter of composite type	1
parameter to the library	1
parameter to the function.	1
parameter and a template	1
parameter can also be	1
parameter has a composite	1
parameter should be a	1
parameter rather than a	1
parameter comes first when	1
parameter transfer is avoided	1
parameter transfer is avoided.	1
parameter transfer for 'this'	1
parameter transfer are eliminated.	1
parameter transfer across all	1
parameter 2: 12 $B1$1:	1
parameter 1: 4 +	1
parameter 1: 8 +	1
parameter $B1$1: mov mov	1
division is faster the	1
division is inexact if	1
division to be slower.	1
division and relational operators	1
division in vectors, but	1
division by a variable	1
division by a constant	4
division by a power	1
division by a variable.	1
division by making a	1
division with truncation, and	1
division takes much longer	2
division takes 40 -	1
division take longer time.	1
division c = a	1
division Integer division takes	1
division Floating point division	1
division prevents the compiler	1
division faster. Of course,	1
division ........................................................................................... 139 14.7	1
reference is the same	1
reference is valid only	1
reference to the class	1
reference to the object.	2
reference to a static	1
reference to a variable	1
reference to a public	1
reference to a structure.	1
reference to such an	1
reference to a[i] More	1
reference to it. Therefore,	1
reference to anything it	1
reference to provoke error	1
reference can be eliminated	1
reference or a simple	1
reference or pointer to	1
reference if the function	1
reference may be just	1
reference makes sure that	1
reference cannot change what	1
reference allows the function	1
reference instead: // Example	1
reference parameters). The this	1
source is an arithmetic	1
source of such container	1
source of error known	1
source of information about	1
source of errors in	1
source and destination both	1
source code is compiled	1
source code more complex,	1
source compiler for 32-bit	1
source so that it	1
source code. The library	1
source code. It is	1
source code. #if is	1
source file and the	1
source files for the	1
source files are first	1
source files into one	1
source code, as the	1
source library. Supports x86	1
source file. If the	1
source file. Keep often	1
source files. 13.2 Model-specific	1
source annotation in the	1
source annotation option if	1
cost is seen in	1
cost is minimized if	1
cost of this solution	1
cost of dynamic memory	1
cost of exception handling	1
cost of longer response	1
cost of task switching.	1
cost of heap management	1
cost of keeping a	1
cost of starting and	1
cost of fine-tuning, testing,	1
cost of verifying, debugging	1
cost of synchronizing and	1
cost to memory management	1
cost to using templates	1
cost to using templates.	1
cost to accessing an	1
cost to creating and	1
cost in performance. Integer	1
cost in terms of	2
cost because it goes	1
cost whenever a smart	1
cost anything here because	1
running the advanced version	1
running the services only	1
running a program you	1
running and before any	1
running in the same	2
running in the majority	1
running in other threads	1
running in 64-bit mode	1
running in 32-bit or	1
running in parallel. Fine-grained	1
running on the same	1
running on the newest	1
running on an Intel	2
running on non-Intel processors	1
running this code with	1
running when it is	1
running multiple threads in	1
running two threads with	1
running on, while it	1
running simultaneously can share	1
running on. Replace or	1
running at, rather than	1
automatic CPU dispatching or	1
automatic CPU dispatching #include	1
automatic CPU dispatching. The	1
automatic CPU dispatching. Many	1
automatic CPU dispatching. Unfortunately,	1
automatic check for integer	1
automatic dispatching can be	1
automatic vectorization (see page	2
automatic vectorization works best	1
automatic vectorization leads to	1
automatic updates to the	1
automatic vectorization. The compiler	1
automatic vectorization. The Gnu	1
automatic vectorization. It is	1
automatic vectorization. Optimizes reasonably	1
automatic vectorization. Optimizes moderately	1
automatic prefetching so this	1
automatic parallelization. The Gnu,	1
automatic parallelization. Supports vector	1
automatic parallelization of code	1
automatic vectorization, such as	1
automatic CPU-dispatching (see page	1
automatic updates, remote help	1
resources of the core	1
resources and servers should	1
resources for other virtual	1
resources that need to	1
resources are not recommended	1
resources are most critical.	1
resources are cleaned up	1
resources are sufficient, and	1
resources are limiting factors	1
resources than the code	1
resources than the program	1
resources than the programs	1
resources than a static	1
resources than doing arithmetic	1
resources than standard PCs.	1
resources than C if	1
resources than non-virtual functions.	1
resources from a higher-priority	1
resources should be organized	1
resources cannot be controlled.	1
resources .......................................................................................... 21 3.12	1
resources Writes to a	1
resources cleaned up. If	1
resources locally or remotely.	1
induction variable for accessing	1
induction variable can be	1
induction variable as loop	1
induction variable because it	1
induction variable method unfavorable,	1
induction variable would be	1
induction variable unless the	1
induction variable Y //	1
induction variable Z }	1
induction variable (eax) which	1
induction variables to calculate	1
induction variables for the	1
induction variables for floating	1
induction variables for calculating	1
induction variables can also	1
induction variables const double	1
induction variables (see below).	1
induction variables Compilers cannot	1
induction variables Y and	1
induction variables. It is	1
induction variable. The compiler	1
induction variable. (This eliminates	1
induction variables: // Example	1
reason is that the	2
reason is that a	1
reason is that modern	1
reason to use it	1
reason to use dynamic	1
reason to use try,	1
reason to add statements	1
reason to unroll the	1
reason for this is	1
reason for this efficiency	1
reason for using an	1
reason for updating. The	1
reason that they cannot	1
reason why the compiler	1
reason why it is	1
reason why this effect	1
reason why all modern	1
reason why compilers do	1
reason why there is	1
reason why such runtime	1
reason why exception handling	1
reason is, I guess,	1
dispatcher to know whether	1
dispatcher in the MKL	1
dispatcher in only the	1
dispatcher that doesn't handle	1
dispatcher function is usually	1
dispatcher function and replaces	1
dispatcher function will most	1
dispatcher function decides which	1
dispatcher then sets a	1
dispatcher should not look	1
dispatcher should have as	1
dispatcher should give a	1
dispatcher function. This will	1
dispatcher function. When the	1
dispatcher function. typeof(CriticalFunction) *	1
dispatcher does not check	1
dispatcher 128 function cannot	1
dispatcher based on complicated	1
dispatcher checks whether the	1
dispatcher changes the function	1
dispatcher signal an error	1
dispatcher treats non-Intel CPUs	1
dispatcher updated. It is	1
n is the number	1
n is a loop	1
n is an array	1
n is known at	1
n to the exponent:	1
n to exponent }	1
n and reorganize the	1
n = 1; n	1
n = 4, we	1
n with a suitable	1
n from the exponent	1
n < 223 to	1
n bits of the	1
n 0 n! 117	1
n << 23; //	1
n here because the	1
n factorial } return	1
n additions and no	1
n <= 16; n++)	1
n places back, where	1
n being out of	1
n >>= 1; }	1
n floats: float *	1
string is created or	2
string is already known	1
string is checked before	1
string of bytes to	1
string to lower case:	1
string and then interpret	1
string or CString. This	1
string as code. Metaprogramming	1
string functions and some	1
string functions as well	1
string functions have no	1
string classes use dynamic	1
string classes allocate a	1
string functions. A metaprogramming	1
string instructions. The built-in	1
string length function scans	1
string search instructions AVX	1
string searching and parsing	1
string constants, and initialized	1
string constants, array initializer	1
string manipulation Mathematical functions	1
string classes, such as	1
programmer to be aware	1
programmer to make and	1
programmer to make sure	5
programmer to make explicit	1
programmer to know what	1
programmer to know about.	1
programmer in a bad	1
programmer that pointers to	1
programmer can use standard	1
programmer can do to	1
programmer may prefer to	1
programmer has defined a	1
programmer does not have	1
programmer typically thinks "what	1
programmer gets the new	1
programmer choosing the most	1
programmer forgets that the	1
programmer can. It is	1
programmer hasn't thought about	1
three to seven times	1
three or four, depending	1
three different object file	1
three functions Sum1, Sum2	1
three clock cycles. But	1
three times the other	1
three times faster. The	1
three versions should be	1
three functions. Sum1 has	1
three values per point.	1
three aligned arrays Alignd	1
three ways to make	1
three ways to do	1
three things that can	1
three conditions which are	1
three times. Then again	1
three branches. They can	1
three times, one for	1
three clauses are separated	1
three clauses: initialization, condition,	1
three parts: one for	1
three advantages: The i<20	1
three levels of cache	1
better to do the	1
better to join them	1
better and better at	1
better on very small	1
better than the 32-bit	1
better than its reputation.	1
better than RISC in	1
better use of the	1
better at vectorization. 3.	1
better at reducing integer	1
better because the code	1
better version of the	1
better result by using	1
better processor appears on	1
better solution to make	1
better support for hard	1
better metaprogramming tools to	1
better solution. It might	1
better backup features, and	1
better explains the logic	1
better understanding of the	1
better performing software product	1
better standardization of programming	1
keyword is not recognized	1
keyword is only a	1
keyword is used or	1
keyword to all local	1
keyword can be added	1
keyword has a different	1
keyword has several meanings	1
keyword static to the	2
keyword also makes various	1
keyword makes sure that	1
keyword __restrict or __restrict__,	1
keyword volatile is that	1
keyword far (arrays can	1
keyword static, when applied	4
keyword __fastcall changes the	1
keyword specifies that a	1
keyword tells that a	1
keyword __thread or __declspec(thread).	1
keyword wherever appropriate to	1
efficient. The size of	2
efficient. The performance can	1
efficient. The SSE2 instruction	1
efficient. The following example	1
efficient. This instruction set	1
efficient. If the compiler	1
efficient. If you look	1
efficient. 64-bit Windows allows	1
efficient. In 64-bit systems,	1
efficient. In many cases,	1
efficient. There are various	1
efficient. You can disable	1
efficient. You may use	1
efficient. 64 bit systems	1
efficient. Most C++ compilers	1
efficient. Dynamic libraries are	1
efficient. Do not make	1
efficient. Variables that are	1
efficient. Access to static	1
efficient. Extra memory space	1
efficient. Simple function parameters	1
efficient. Splitting up a	1
lookup is to use	1
lookup is often an	1
lookup in a procedure	1
lookup for a virtual	1
lookup can be used	1
lookup or require a	1
lookup if the function	1
lookup } else {	1
lookup at the vector	1
lookup table is advantageous	1
lookup table if you	1
lookup table instead of	1
lookup cannot be vectorized	1
lookup operations slow down	1
lookup Using intrinsic functions	1
lookup process is used	1
lookup tables if this	1
lookup tables Reading a	1
lookup tables ................................................................................................. 132	1
lookup Lookup tables can	1
lookup table: // Example	2
lookup mechanisms explained above.	1
end of the array	1
end of the array,	1
end of a function	1
end of a ;	1
end of an array	1
end of this section	1
end of array ;	1
end of procedure 4	1
end in order to	1
end with a non-recursing	1
end when all threads	1
end user is likely	1
end user will have	1
end user who has	1
end user gets the	1
end up with the	1
end user. The advantages	1
end user. There may	1
end user. Dynamic linking	1
end user. Installation problems.	1
end user. Menus, buttons,	1
end users have. The	1
end user's computers. At	1
applications to perform poorly	1
applications and the Gnu,	1
applications that can be	1
applications that can take	1
applications are highly system	1
applications can be expected	1
applications it is much	1
applications with many function	1
applications with large data	1
applications have less computing	1
applications use the same	1
applications use a database	1
applications because the response	1
applications such as a	1
applications need better backup	1
applications without an operating	1
applications even on such	1
applications run faster at	1
applications running simultaneously can	1
applications require that data	1
applications (e.g. in linear	1
applications spend most of	1
applications force the operating	1
below. The function rounds	1
below. The time unit	1
below. The program will	1
below. The stack is	1
below. The disadvantage of	1
below. This manual is	1
below. There are other	1
below. You may choose	1
below. Microsoft Visual Studio	1
below. Make calls directly	1
below. Many libraries for	1
below. Shared objects in	2
below. Intrinsic function Size	1
below. Position-independent code is	1
below. Dispatch at installation	1
below. 126 Make pointer	1
below. Signed / unsigned	1
below. Devirtualization An optimizing	1
below. 3.7 File access	1
below. Installing a second	1
below. Cannot optimize across	1
below. Those who are	1
&& is false, then	1
&& a = a	1
&& a needs to	1
&& to & unless	1
&& and || are	1
&& b with a	1
&& b needs to	1
&& i <= max)	1
&& b; d =	1
&& expression to generate	1
&& true = a,	1
&& list[i] > 1.0)	1
&& false = false,	1
&& SIZE % 128	1
&& z != 0;	1
&& !a = false,	1
&& expression, or first	1
&& a<c) = (a<b	1
&& !b) rather than	1
&& !b = !(a	1
&& b<c && a<c)	1
&& WriteFile(handle, ...)) {	1
&& b<c) Multiply by	1
| a = a	1
| b if b	1
| operations than to	1
| 0 = a	2
| b; Here, I	1
| operator which otherwise	1
| -1 = -1	2
| Wednesday | Friday)	1
| Wednesday | Friday))	1
| operator; you can	1
| (~a&c) | (b&c)	1
| (~a&c) a&b&c&d =	1
| Friday) in example	1
| (b&c) = (a&b)	1
| ((C & 3)	1
| ((B & 3)	1
| Friday)) { DoThisThreeTimesAWeek();	1
| 0x3F800000; // Now	1
| (C << 6);	1
| (B << 4)	1
| 0x8040); See page	1
Make the function a	1
Make the function return	1
Make the function modify	1
Make the function construct	1
Make the dispatcher function.	1
Make a vector of	6
Make a C++ program	1
Make a member function	1
Make functions local A	1
Make all instances of	1
Make pointer at initialization.	1
Make two or more	1
Make array of 100	1
Make sure the value	1
Make sure to distinguish	1
Make dynamic array of	1
Make calls directly to	1
Make three aligned arrays	1
We can make an	1
We can make sure	1
We can only hope	2
We can take the	1
We can take advantage	1
We can therefore conclude	1
We can check if	1
We can calculate which	1
We can never be	1
We can change the	1
We can shift out	1
We can tell it	1
We can convert an	1
We can multiply a	1
We may decide to	1
We cannot change its	1
We take the elements	1
We want the CPU	1
We want to vectorize	1
We must bear in	1
We might check for	1
We took advantage of	1
examples of how to	3
examples of arrays with	1
examples of container classes	1
examples of suitable containers	1
examples of poor CPU	1
examples of bad CPU	1
examples in the appendix	1
examples in this table	1
examples in these manuals	1
examples for these methods.	1
examples are optimized for	1
examples are intended to	1
examples on page 134	1
examples have been tested	1
examples will therefore be	1
examples all use single	1
examples where the reduction	1
examples we are using	1
examples I have tested.	1
examples explain how metaprogramming	1
examples exist. Therefore the	1
char a = 0,	2
char a = -100,	1
char const * const	1
char 8 8 64	1
char 8 16 128	1
char 8 32 256	1
char 8 0 255	1
char 8 -128 127	1
char 64 Iu8vec8 16	1
char 64 Is8vec8 8	1
char 16 SSSE3 _mm_perm_epi8	1
char 16 XOP, AMD	1
char short int 832	1
char 128 Is8vec16 Vec16c	1
char 128 Iu8vec16 Vec16uc	1
char 256 Vec32c unsigned	1
char (or int) instead	1
char pointers. 144 The	1
char string[100], *p =	2
char pointers). An optimizing	1
char abc; }; Bitfield	1
difference is simply a	2
difference in performance between	2
difference in speed between	3
difference in performance. A	1
difference in efficiency. For	1
difference for the performance.	1
difference for each test	1
difference between the two	1
difference between the Boolean	1
difference between the efficiency	1
difference between a function	1
difference between a software	1
difference between two pointers	1
difference between 32-bit Linux	1
difference between rounding and	1
difference between commas and	1
difference less than 2-20,	1
difference whether you use	1
difference lies in the	1
addition is finished. The	1
addition of integers with	1
addition to the code	1
addition to the instruction	1
addition to sum1 from	1
addition to sum2 from	1
addition and multiplication may	1
addition and subtraction (3	1
addition with floating point	1
addition with another vector	1
addition on a modern	1
addition then you will	1
addition has to wait	1
addition takes 5 clock	1
addition takes 3 -	1
addition before the preceding	1
addition every clock cycle.	2
addition every three clock	1
addition depends on the	1
addition units, and 22	1
addition unit, but this	1
addition to) the time	1
data. The code goes	1
data. The data have	1
data. The need for	1
data. The test data	1
data. The speed of	1
data. The disadvantage is	1
data. The effect is	1
data. The similarity between	1
data. This is the	1
data. This is data	1
data. This makes position-	1
data. A database can	1
data. A hash table	1
data. A missing check	1
data. A complete redesign	1
data. It is very	1
data. Use an old	1
data. Use OpenMP directives.	1
data. Therefore, the data	1
data. Extra data conversion,	1
data. 148 It is	1
data. That being said,	1
data. Multidimensional arrays should	1
too many branches. If	1
too long time to	1
too important to ignore,	1
too large for the	1
too big for the	1
too big before multiplying	1
too much data for	1
too much about the	1
too much space in	1
too small to cause	1
too small or too	1
too little data for	1
too long. If the	1
too slow. Today, the	1
too fragmented. This garbage	1
too big. 7.14 Functions	1
too small. Are objects	1
too fine then it	1
too high. It may	1
too late. You should	1
too worried about this	1
too much. Excessive loop	1
too small, then it	1
mechanism is also used	2
mechanism is rarely enough	1
mechanism of static linking	1
mechanism to advertise new	1
mechanism in the Intel	2
mechanism in Intel compilers	1
mechanism that treats different	1
mechanism can be implemented	1
mechanism can be bypassed	1
mechanism can prefetch the	1
mechanism may be used	1
mechanism because it makes	1
mechanism should never interrupt	1
mechanism called stack unwinding	1
mechanism even when it	1
mechanism works only on	1
mechanism works automatically. However,	1
mechanism allows the CPU	1
mechanism stores a pointer	1
mechanism relies on non-	1
mechanism executes a series	1
Table of factorials: static	1
Table of factorials: const	1
Table // Loop counter	2
Table lookup } else	1
Table lookup cannot be	1
Table 8.1 (page 77)	1
Table 12.5. Vector classes	1
Table 8.1. Comparison of	1
Table 9.2. Cache control	1
Table 18.2. Compiler directives	1
Table 12.4. Vector class	1
Table 7.2. Alignment of	1
Table 9.1. Time for	1
Table 9.3. Time for	1
Table 13.1. Instruction sets	1
Table 12.1. Vector classes	1
Table 12.3. Intrinsic functions	1
Table 7.1. Sizes of	1
Table 18.1. Command line	1
Table 2.1. Comparing performance	1
Table 18.3. Predefined macros	1
Table 12.2. Header files	1
runtime of the .NET	1
runtime if all the	1
runtime from the caller	1
runtime address calculations have	1
runtime libraries and frameworks,	1
runtime type identification (RTTI)	2
runtime type identification (RTTI).	1
runtime type identification (RTTI),	1
runtime check that the	1
runtime framework for interpreting	1
runtime framework that must	1
runtime framework may use	1
runtime dispatch to virtual	1
runtime here if the	1
runtime DLL or a	1
runtime DLL takes more	1
runtime polymorphism that is	1
runtime frameworks are used	1
runtime frameworks, intermediate code,	1
runtime frameworks. The .NET	1
runtime polymorphism: // Example	1
runtime DLL's (dynamically linked	1
needed a few clock	1
needed in this case.	1
needed in 64-bit mode	2
needed in order to	1
needed in advance rather	1
needed for the calculation	1
needed for other reasons,	1
needed for calculating row	1
needed for setting up	1
needed for communication between	1
needed if the object	2
needed by the application,	1
needed from the library	1
needed because the CPU	1
needed only if it	1
needed before all objects	1
needed before adding the	1
needed even when the	1
needed after all objects	1
needed anyway. You may	1
needed _mm_shuffle_epi8 16 1	1
means of making software	1
means of #include directives	1
means of #include directives.	1
means to make code	1
means that the function	1
means that the value	1
means that a must	1
means that a particular	1
means that it is	3
means that it can	1
means that it cannot	1
means that if a	1
means that if each	1
means that different threads	1
means that all the	1
means that source and	1
means are among the	1
means not a vector).	1
means integer division with	1
means avoid powers of	1
means modulo. For example,	1
last the second result	1
last in a structure	1
last in an &&	1
last time the statement	1
last time it was	1
last all the B	1
last cache level, and	1
last 8 columns unused.	1
last time. Newer processors	1
last element outside the	1
last line is implicitly	1
last byte at 1	1
last byte at 19	1
last byte at 15	1
last byte at 7	1
last byte at 13	1
last byte at 11	1
last byte at 403	1
last byte at 399	1
last index changes fastest:	1
last index changing in	1
last vector. Organize the	1
last member. This pointer	1
byte of data (low	1
byte of zero within	1
byte of zero. A	1
byte = char 16	2
byte at 1 byte	1
byte at 0, last	3
byte at 8, last	2
byte at 19 };	1
byte at 15 byte	1
byte at 7 int	1
byte at 16, last	1
byte at 13 //	1
byte at 11 short	1
byte at 12, last	1
byte at 403 int	1
byte at 400, last	1
byte at 399 int	1
byte longer in 64	1
parts of the code	9
parts of the program	5
parts of the floating	1
parts of the software	1
parts of the code.	2
parts of the program.	1
parts of the memory,	1
parts of a big	1
parts only. Critical pieces	1
|| is true, then	1
|| are evaluated in	1
|| b with a	1
|| i >= size)	1
|| b; This is	1
|| b) a &&	1
|| true = true	1
|| false = a	1
|| !a = true	1
|| expression. Assume, for	1
|| Day == Wednesday	1
|| Day == Friday)	1
|| (a&&c) = a&&(b||c)	1
|| (a&&c) || (a&&b&&c)	1
|| (a&&b&&c) = a&&(b||c)	1
|| (a&&b&&c) = a&&b	1
|| (!a&&c) = a	1
|| (!a&&c) || (b&&c)	1
|| b)) even though	1
|| defined(__GNUC__) // 32-bit	1
|| (b&&c) = a	1
|| (!a&&b) = a	1
> and >= operators).	1
> b / c)	1
> b ? a	2
> 0; i--) *(p++)	1
> 0 is true,	1
> 0 ? c	2
> 256 && SIZE	1
> y && z	1
> 0, c +	2
> b) But beware	1
> 0) { //	1
> 0) ? (cc[i]	1
> v.f if both	1
> largest_abs) { largest_abs	1
> abs(v.f) } The	1
> -b to a	1
> 1.0) { ...	1
> v.i * 2)	1
> v.i) { //	1
types of a specific	1
types of floating point	3
types of elements is	1
types of expressions and	1
types of graphics cards,	1
types of variables. Move	1
types of expressions, but	1
types to integers of	1
types The return type	1
types or strings of	1
types or sizes? It	1
types with the same	1
types because the CPU	1
types such as int,	1
types cannot point to	2
types Unfortunately, the way	1
types (See Sutter: A	1
types available. declaration size,	1
types .............................................................................................. 50 7.17	1
expressions and other compilers	1
expressions and operators. Make	1
expressions for every element	1
expressions that can be	1
expressions are less susceptible	1
expressions or more complex	1
expressions on seven different	1
expressions as arguments while	1
expressions than on floating	1
expressions than floating point	1
expressions may have undesired	1
expressions may occur as	1
expressions when not selected.	1
expressions using the fundamental	1
expressions also occur quite	1
expressions where operands have	1
expressions rather than Boolean	1
expressions (see page 72).	1
expressions like -(-a) very	1
expressions Automatic vectorization Devirtualization	1
expressions Induction variables for	1
expressions (except for the	1
difficult to get reproducible	1
difficult to find the	1
difficult to find elsewhere.	1
difficult to predict which	1
difficult to predict whether	1
difficult to implement the	1
difficult to implement in	1
difficult to measure exactly	1
difficult to debug and	1
difficult to maintain. If	1
difficult to maintain. Any	1
difficult to maintain. And	1
difficult to understand and	1
difficult to use, incompatible	1
difficult to read. It	1
difficult to read. If	1
difficult to diagnose. It	1
difficult for the compiler	2
difficult for the CPU	1
difficult for the programmer	1
difficult cases like these,	1
set. The most compatible	1
set. The following example	1
set. The examples on	1
set. The main advantage	1
set. The newer instruction	1
set. The preprocessing macro	1
set. This instruction set	1
set. A CPU dispatcher	1
set. It is rarely	1
set. If the CPU	1
set. If the cache	1
set. If you are	1
set. These new instructions	1
set. Therefore, you only	1
set. Make two or	1
set. Do not use	1
set. 120 However, there	1
set. Aligning data Loading	1
set. 13.6 CPU dispatching	1
set. More complicated cases	1
set. Neither can you	1
set. High precision math.	1
instead of the most	1
instead of the Boolean	1
instead of the usual	1
instead of a template	1
instead of a macro.	1
instead of functions A	1
instead of using exception	1
instead of user input	1
instead of virtual functions.	1
instead of main memory.	1
instead of bool in	1
instead of copying it	1
instead of calculating the	1
instead of (or in	1
instead of j as	1
instead of truncation and	1
instead of pointers, by	1
instead of int. A	1
instead of truncation. This	1
instead of double, then	1
instead of if. This	1
instead of -fpic. This	1
compilers. The code is	1
compilers. The advantage of	1
compilers. The results are	1
compilers. // It will	1
compilers. // Example 14.19	1
compilers. This function is	1
compilers. This includes the	1
compilers. If exception handling	1
compilers. Intel C++ compiler	1
compilers. See www.openmp.org and	1
compilers. Some compilers have	1
compilers. Use automatic parallelization.	1
compilers. #include <excpt.h> #include	1
compilers. We want to	1
compilers. Several other programming	1
compilers. Dispatch at load	1
compilers. Fastcall is not	1
compilers. 2.5 Choice of	1
compilers. 8.3 Obstacles to	1
compilers. Wikipedia article on	1
compilers. (The PGI compiler	1
compilers. Mixing object files	1
transferred to the function.	1
transferred in registers by	1
transferred in registers rather	4
transferred in registers anyway.	1
transferred in registers (6	1
transferred in registers (8	1
transferred in registers. 64-bit	1
transferred in registers, regardless	1
transferred in registers, whereas	1
transferred in registers, totaling	1
transferred by value in	1
transferred on the stack	2
transferred as an implicit	1
transferred as pointers unless	1
transferred as machine code	1
transferred from one function	1
transferred from one auto_ptr	1
transferred at runtime from	1
longer in 64 bit	1
longer than a few	2
longer than needed in	1
longer time to call	1
longer time in the	1
longer time than addition	1
longer time than addition,	2
longer time than rounding	1
longer time than normally.	1
longer time slices. This	1
longer used and searching	1
longer size by extending	1
longer time. It is	2
longer time. It can	1
longer time. Integer multiplication	1
longer used. A smart	1
longer used. It is	1
longer response times for	1
longer loop- carried dependency	1
after the program is	1
after the loop if	1
after the pointer p	1
after the 64-bit vector	1
after the value of	1
after the test loop.	1
after the last member.	1
after the piece of	1
after it has been	2
after this statement so	1
after all objects have	2
after all elements have	1
after each of the	1
after each time slice	1
after they have put	1
after debugging if required	1
after executing the critical	1
after executing a critical	1
after jumping out of	1
after exceptions: while (i	1
read the time before	1
read the value of	2
read the performance monitor	1
read and write configuration	1
read and understand compiler-generated	1
read and written back.	1
read or write it	1
read or write less	1
read this first manual.	1
read from the same	1
read from a table	1
read from memory address	1
read from different addresses	1
read from 0x4700. Reading	1
read because the write	1
read one or more	1
read into one of	1
read before p is	1
read operations into two	1
read about in my	1
read four elements of	1
give the compiler additional	1
give the variable two	1
give the execution time	1
give the result 100	1
give the result -56	1
give the full information	1
give the 124 necessary	1
give a CPU of	1
give a considerable improvement	1
give it a pointer	1
give you access to	1
give each thread its	1
give some indication of	1
give overflow and negative	1
give higher priority to	1
give almost identical performance	1
give inconsistent results if	1
give annoyingly long and	1
give misleading results or	1
give -2.0 55 In	1
give infinity. A typical	1
Each of the following	1
Each function call statement	1
Each code version is	2
Each compiler does some	1
Each time a new	1
Each cache line can	1
Each cache line has	1
Each object is allocated	1
Each type has advantages	1
Each element in a	1
Each element matrix[r][c] below	1
Each thread can then	1
Each thread will get	1
Each thread has its	1
Each thread should then	1
Each line covers 64	1
Each dependency chain has	1
Each graphics operation in	1
Each instance of a	1
Each 128-bit operation was	1
becomes the same as	1
becomes a little more	1
becomes a problem. If	1
becomes more efficient when	1
becomes more fragmented when	1
becomes more readable when	1
becomes faster and that	1
becomes bigger if there	1
becomes smaller if there	1
becomes easier if we	1
becomes invalid if a	1
becomes invalid as soon	1
becomes inefficient. There is	1
becomes fragmented when objects	1
becomes fragmented thanks to	1
becomes simpler because it	1
becomes inconsistent and sometimes	1
becomes full. This may	1
becomes noticeable. The following	1
becomes contiguous. The code	1
becomes bulky and difficult	1
aligned to an address	1
aligned // Structure of	1
aligned or the __assume_aligned	1
aligned or not. The	1
aligned or not. See	1
aligned by the vector	1
aligned by at least	1
aligned by 8 rather	1
aligned by 32 and	1
aligned by 16, i.e.	2
aligned at round addresses.	1
aligned integer vector from	1
aligned integer vector into	1
aligned arrays with vector	1
aligned arrays Alignd (	1
aligned operands Intel Core	1
aligned operands AMD Opteron	1
aligned #pragma vector aligned	2
aligned Assume pointer not	1
directives and declare all	1
directives and keywords relevant	1
directives for parallel processing.	1
directives for multi-core processing.	1
directives that select the	1
directives are useful for	1
directives are supported by	1
directives are equivalent to	1
directives are compiler-specific. You	1
directives when used as	1
directives which are used	1
directives do not always	1
directives 32 bit code	1
directives Some compilers have	1
directives work on the	2
directives around it so	1
directives .............................................................................................. 82 8.7	1
directives ......................................................................................... 65 7.33	1
directives Preprocessing directives (everything	1
directives (everything that begins	1
requires the loading of	1
requires a compiler with	1
requires a big floating	1
requires a CPU- specific	1
requires a division, which	1
requires that the background	1
requires that you can	1
requires that you analyze	1
requires that all software	1
requires an extra register	1
requires only an integer	1
requires only SSE). The	1
requires no modification of	1
requires static linking (e.g.	1
requires several layers of	1
requires support from both	1
requires alignment to addresses	1
requires OS support and	1
requires log on with	1
requires compilation or interpretation	1
requires n-1 multiplications, which	1
optimizations is that it	1
optimizations of the whole	1
optimizations of a variable	1
optimizations in different C++	1
optimizations in some cases,	1
optimizations in precompiled code.	1
optimizations that it is	1
optimizations that we want	1
optimizations that rely on	1
optimizations with option -Wstrict-overflow=2,	1
optimizations on the variable.	1
optimizations on that variable.	1
optimizations you can expect	1
optimizations you have to	1
optimizations when interprocedural optimization	1
optimizations such as function	1
optimizations such as common	1
optimizations possible because the	1
optimizations across function calls.	1
optimizations across modules (See	1
optimizations automatically, but as	1
graphics function is time	1
graphics function that draws	1
graphics function libraries and	1
graphics on the screen.	1
graphics library or API	1
graphics objects in computer	1
graphics application is preferably	1
graphics framework is used.	1
graphics framework between the	1
graphics processors. 5 Programmable	1
graphics operation in the	1
graphics calculations. In some	1
graphics processing unit for	1
graphics processing unit. Various	1
graphics processing unit, either	1
graphics frameworks, interpreters, just-in-time	1
graphics card or integrated	1
graphics accelerator card for	1
graphics accelerator card. Some	1
graphics coprocessor or graphics	1
graphics cards, etc. Use	1
public and static data.	1
public data can be	1
public data object: (1)	1
public functions and data	1
public functions and public	1
public variable in a	1
public variable where it	1
public variables in a	1
public variables go through	1
public variables. All global	1
public CHello { public:	2
public C0 { public:	1
public CParent<CChild1> { has	1
public CParent<CChild1> { public:	1
public CGrandParent { public:	1
public B2 { public:	1
public B1 { public:	1
public CParent<CChild2> { public:	1
public B1, public B2	1
public symbols, but this	1
public: int c; };	1
public: int a; int	1
public: int a[100]; //	1
public: float x, y;	1
public: static double p(double	4
public: void Disp() {	2
public: void Hello() {	1
public: void NotPolymorphic(); virtual	1
public: void NotPolymorphic(); };	1
public: virtual void Disp()	2
public: virtual void f();	2
public: ... ~C1(); };	1
public: B2 b2; int	1
public: c1() : x(0)	1
public: SafeArray() { memset(a,	1
framework is used. The	1
framework and the Java	1
framework and compile the	1
framework in its API.	1
framework for interpreting or	1
framework that must be	1
framework that uses few	1
framework are based on	1
framework can consume a	1
framework as well as	1
framework may use more	1
framework should definitely be	1
framework between the operating	1
framework must be a	1
framework typically uses much	1
framework Most of the	1
framework based on intermediate	1
framework sometimes have unacceptably	1
framework still consumes a	1
framework itself, during installation	1
framework requiring many files	1
look in my crystal	1
look at the function	1
look at the code	2
look at the example	1
look at the possible	1
look at the assembly	1
look at the "worst	1
look at to see	1
look at CPU brand	1
look at what happens	1
look different in other	1
look up the function	1
look up the address	2
look up in a	1
look like and how	1
look like this: //	3
look clumsy and tedious.	1
linking is that the	1
linking is used. The	1
linking is used. Dynamic	1
linking is used, but	1
linking is preferable for	1
linking to assembly language	1
linking and by not	1
linking and position-independent code	2
linking for any library	1
linking makes the entire	1
linking makes it necessary	1
linking cannot be avoided,	1
linking rather than dynamic	1
linking works differently. The	1
linking are: Static linking	1
linking are: 146 Multiple	1
linking (e.g. option /MT).	1
linking includes only the	1
linking (remove unreferen- ced	1
linking (multithreaded) /arch:AVX /openmp	1
Many of the advices	1
Many of these directives	1
Many function libraries are	1
Many CPU dispatchers are	1
Many compilers have an	1
Many Intel library functions	1
Many software programs automatically	1
Many software applications use	1
Many software applications need	1
Many 32-bit systems allow	1
Many optimization options are	1
Many libraries for special	1
Many processors can calculate	1
Many CPUs have a	1
Many copy protection schemes	1
Many programs spend most	1
Many containers use linked	1
Many algebraic reductions are	1
Many programmers have discovered	1
Many advices on optimization	1
Many services that run	1
processors. The cache line	1
processors. The performance is	1
processors. The following example	1
processors. The application program	1
processors. A non-Intel processor	1
processors. It is possible	1
processors. In a C++	1
processors. There is no	1
processors. There are various	1
processors. See page 130	1
processors. AMD processors and	1
processors. Many processors can	1
processors. 5 Programmable logic	1
processors. Supports all x86	1
processors. On many processors,	1
processors. Other brands or	1
processors. Explicit CPU dispatching	1
processors. Consider the time	1
processors. Hyperthreading is Intel's	1
processors. Henry S. Warren,	1
processors. Details about instruction	1
actually be better than	1
actually more than 250	1
actually has to wait	1
actually called in a	1
actually making a pointer.	1
actually doing something on	1
actually add extra code	1
actually able to reorder	1
actually quite powerful and	1
actually quite convenient. It	1
actually used. No program	1
actually needed by the	1
actually reduce speed if	1
actually points to an	1
actually is. This above	1
actually increase the speed	1
actually reducing example 15.1d	1
actually adds 16 to	1
actually hidden behind the	1
actually implies more than	1
actually throws an exception.	1
Intel, even if the	1
Intel, Gnu and PathScale	2
Intel, Gnu and Clang	1
Intel, AMD and VIA	12
Intel, AMD or VIA	1
Intel, Microsoft and PathScale	1
Intel, Microsoft Intel, Microsoft,	1
Intel, PathScale and Gnu	1
Intel, Microsoft, Gnu, Clang	1
linked function is not	1
linked from static libraries	1
linked into the same	1
linked into projects made	1
linked library functions. 9.4	1
linked libraries or shared	1
linked list is a	1
linked list is less	1
linked list or with	1
linked list has its	1
linked list takes more	1
linked list (see page	1
linked together in the	1
linked together with C	1
linked either as a	1
linked lists in most	1
linked list. Each element	1
linked list. Do not	1
linked list. 94 Are	1
linked together. The link	1
linked lists. A linked	1
x; for (i =	2
x; for (x =	1
x; // x^2 float	1
x; This can be	1
x; This makes sure	1
x; int A, B,	2
x; x *= x;	1
x; } }; //	1
x; float sum =	1
x; const double A2	1
x; ... } void	1
x; n >>= 1;	1
x; public: c1() :	1
x; Here, the code	1
x; Note the difference	1
x; __asm fistp dword	1
x; nfac *= n+1;	1
x; *(int*)&x |= 0x80000000;	1
x; x.f = 2.0f;	1
microprocessors is obtained by	1
microprocessors is split between	1
microprocessors is lost. This	1
microprocessors and operating systems	1
microprocessors in the x86	2
microprocessors that do not	1
microprocessors are not optimized	1
microprocessors are using advanced	1
microprocessors are very similar	1
microprocessors are able to	2
microprocessors are constructed. All	1
microprocessors can do out-of-order	1
microprocessors have vector instructions	1
microprocessors have no native	1
microprocessors when an operand	1
microprocessors from Intel, AMD	1
microprocessors without any of	1
microprocessors work. The recommendations	1
microprocessors have. In some	1
load the dynamic linker.	1
load the structure y	1
load the framework and	1
load the entire 64	1
load is high and	1
load is low in	1
load a program than	1
load a new cache	1
load time can be	1
load more than one	1
load all the modules	1
load into memory even	1
load time. The program	1
load time. Shared objects	1
load several files when	1
load aligned integer vector	1
load unaligned integer vector	3
load address. If this	1
load address. Relocation is	1
control the way member	1
control the addresses of	1
control it compares the	1
control no yes License	1
control branch is mispredicted	1
control branch is executed	1
control branch depends on	2
control branch ahead of	1
control instructions than the	1
control statement several iterations	1
control condition is a	1
control condition The most	1
control instructions. There are	1
control branch. There is	1
control branch. See the	1
control .............................................................................................. 99 10	1
control Microprocessors with the	1
control condition: // Example	1
control tool. 7 The	1
assume the worst possible	1
assume is optimized. We	1
assume that the compiler	1
assume that the value	1
assume that the type	1
assume that the next	1
assume that the overall	1
assume that it doesn't	1
assume that an optimizing	1
assume that floating point	1
assume that b is	1
assume that there is	1
assume that there are	1
assume that these integer	1
assume that model N+1	1
assume that model N-1	1
assume that seconds remains	1
assume that F1 will	1
assume that *p+2 is	1
assume no pointer aliasing	1
100; // Array of	1
100; int i; float	1
100; int matrix[NUMROWS][NUMCOLUMNS]; int	1
100; i += 2)	1
100; i += 4)	1
100; float list[size], sum	1
100; float list[size], sum1	1
100; float list[ARRAYSIZE]; if	1
100; i++) { a[i]	6
100; i++) { list[i].a	1
100; i++) sum +=	1
100; i++) matrix[FuncRow(i)][FuncCol(i)] +=	1
100; S1 list[size]; int	1
100; x++) { Table[x]	2
numbers is less efficient	1
numbers is inefficient. Division,	1
numbers of type short	1
numbers of type int.	1
numbers to integers use	1
numbers and integers Conversion	1
numbers and integers ...................................	1
numbers in case of	1
numbers in b[i] and	1
numbers in question without	1
numbers are not always	1
numbers are stored in	1
numbers are powers of	1
numbers can be calculated	1
numbers as a parameter	1
numbers at a time	1
numbers because all the	1
numbers simply by comparing	1
numbers form a logical	1
numbers mean good performance).	1
platform is likely to	1
platform is obviously influenced	1
platform and operating system.	1
platform The choice of	1
platform for a given	1
platform with a graphics	1
platform with an Intel,	1
platform not _WIN64 not	1
platform has become less	1
platform n.a. __unix__ __linux__	1
platform software development kit	1
platform _WIN64 _LP64 _WIN64	1
platform ....................................................................................... 5 2.2	1
platform _M_IX86 and _WIN64	1
platform _M_IX86 _M_IX86 x86-64	1
platform _WIN32 _WIN32 Linux	1
platform ........................................................................................... 5 2.1	1
platform 2.1 Choice of	1
platform __GNUC__ and not	1
platform independence, and easy	1
later and the work	1
later in the program	1
later // Header file	1
later with code compiled	1
later instruction set is	4
later instruction set if	1
later instruction set. 120	1
later instruction sets. Supports	1
later instruction sets. Vector	1
later instruction sets. Does	1
later Intel processors. AMD	1
later reads from addresses	1
later deleted by another	1
later ported to another	1
later maintenance. However, this	1
later discovers that it	1
later __svml_expf4 __svml_exp2 Intel	1
together and tested it.	1
together in the second	1
together in an object	2
together in one big	1
together in order to	1
together The code cache	1
together are also stored	1
together are stored near	1
together if they are	1
together with C or	1
together on the stack.	1
together should be stored	4
together into a single	1
together near each other	1
together Cache misses are	1
together ...................................... 88 9.5	1
dispatch is made to	1
dispatch to virtual member	1
dispatch by CPU brand.	1
dispatch on first call	1
dispatch on every call	1
dispatch branch of the	1
dispatch branches are scattered	1
dispatch mechanism is rarely	1
dispatch mechanism in the	2
dispatch mechanism that treats	1
dispatch mechanism can be	1
dispatch mechanism even when	1
dispatch Automatic vectorization Automatic	1
dispatch process. This can	1
dispatch methods. The most	1
dispatch strategies........................................................................................ 122 13.2	1
dispatch strategies It is	1
dispatch decision at different	1
dispatch mechanisms, and some	1
calling the function for	1
calling the function directly	1
calling the library function.	1
calling the intrinsic function	1
calling a simple function	1
calling function can use	1
calling function must then	1
calling more efficient in	1
calling from other applications	1
calling program is more	1
calling any necessary destructors	1
calling method in 32-bit	1
calling conventions for functions	1
calling conventions are different.	1
calling itself in order	1
calling conventions. The dot	1
calling conventions. Optimizes reasonably	1
calling conventions. FreeBSD and	1
calling vector::reserve with a	1
calling WritePrivateProfileString, which opens	1
your code is likely	1
your code is running	1
your compiler for restrictions	1
your program to turn	1
your program before and	1
your program exception safe.	1
your program relies on	1
your optimization effort is	2
your programming questions to	1
your programming questions if	1
your application then you	1
your own error handling	1
your own error message	1
your own container classes	1
your own profiling instruments	1
your own error-handling function	1
your program, you will	1
your software. A negative	1
your modifications actually increase	1
own function library made	1
own memory block and	1
own data structure and	1
own CPU core. There	1
own set of performance	1
own address through a	1
own error handling system	1
own error message function.	1
own allocated memory block.	1
own container classes or	1
own block of data.	1
own stack. Alternatively, you	1
own graphical user interfaces	1
own profiling instruments in	1
own IDE. It is	1
own research, not on	1
own research, I have	1
own initiative whenever it	1
own error-handling function that	1
own caller, and so	1
declared in the function	1
declared in the thread	1
declared in a class	1
declared in a C++	1
declared or created it	1
declared by specifying the	1
declared with the static	1
declared with #define is	1
declared as constant references	1
declared const in order	1
declared inside the function	2
declared inside a function	2
declared inside a class	2
declared outside of any	1
declared whenever an instance	1
declared volatile then an	1
declared volatile. This prevents	1
XMM and 256-bit YMM	1
XMM vector registers are	1
XMM register can be	1
XMM registers to test	1
XMM registers for floating	1
XMM registers are supported	1
XMM registers are used.	3
XMM registers are used,	1
XMM registers are extended	1
XMM registers can benefit	1
XMM registers (see page	1
XMM vectors must be	1
XMM registers. Example: //	1
XMM register. In example	1
XMM (vector) reductions: Common	1
XMM (vector) reductions: a+b=b+a,	1
XMM (vector) reductions: ~(~a)	1
XMM registers; see page	1
second by another thread	1
second way is to	1
second result is stored	1
second application that uses	1
second induction variable (eax)	1
second operand is not	2
second operand is evaluated	1
second operand is valid.	1
second thing we notice	1
second generation of processors	1
second generation class gets	1
second generation class (CParent<>)	1
second step of interpretation	1
second step where the	1
second step. The intermediate	1
second sum, then the	1
second source, and the	1
second operand. Likewise, if	1
second sub-vector before it	1
shows the same code	1
shows the principle for	1
shows a code that	1
shows a way to	1
shows that a particular	1
shows that it takes	1
shows an example of	1
shows this calculation implemented	1
shows which reductions the	1
shows first the runtime	1
shows how to use	1
shows how to make	2
shows how to take	1
shows how to align	1
shows how to implement	1
shows how you can	1
shows how this can	1
shows whether the different	1
shows what the assembly	1
interface is not in	1
interface is obtained by	1
interface to the calling	1
interface to the rest	1
interface and use a	1
interface and other system-	1
interface can use a	1
interface than on the	1
interface library for Windows	1
interface library can be	1
interface library may be	1
interface elements that come	1
interface framework must be	1
interface framework Most of	1
interface calls. The usability	1
interface frameworks are available	1
interface etc., can be	1
interface frameworks. This is	1
interface framework........................................................................... 14 2.8	1
interface (OnIdle in Windows	1
improve the performance if	1
improve the performance by	2
improve the performance significantly	1
improve the performance dramatically	1
improve the performance somewhat.	1
improve the code. The	1
improve the execution speed	1
improve the speed of	1
improve the performance, it	1
improve the possibilities for	1
improve this by writing:	1
improve cache efficiency, then	1
improve performance in some	1
improve speed without jeopardizing	1
improve optimizations in some	1
improve efficiency by using	1
improve performance. It is	1
improve search times 24	1
improve efficiency. These are	1
higher for single precision	1
higher for shared_ptr than	1
higher than the subsequent	1
higher than normal. This	1
higher instruction set is	1
higher instruction set than	1
higher instruction set. Therefore,	1
higher instruction set. More	1
higher instruction set, but	1
higher number is not	1
higher clock frequency than	1
higher address which can't	1
higher priority to one	1
higher priority than code	1
higher level of optimization	1
higher risk that the	1
higher bits. There is	1
higher speed. In the	1
higher due to poor	1
higher resolution can be	1
bigger and more complex,	1
bigger if there is	1
bigger than the cache	2
bigger than the application	1
bigger than the level-2	1
bigger than the level-1	1
bigger than the destination	1
bigger than it actually	1
bigger than 2 GB.	1
bigger than 16 bytes	1
bigger than 127 bytes	1
bigger memory block is	1
bigger memory block and	1
bigger memory block. This	1
bigger vector registers. The	1
bigger software packages and	1
bigger systems. The smaller	1
bigger vectors do not	1
bigger segments (32-bit or	1
vectors of two double	1
vectors of 64 bits	1
vectors of four floats	1
vectors of eight 16-bit	1
vectors of inte- ger	1
vectors and matrixes. Algorithms	1
vectors are preferably aligned	1
vectors if the code	1
vectors then you have	1
vectors do not have	1
vectors into C++ classes	1
vectors There are various	1
vectors SSE2 128 bit	1
vectors must be aligned	1
vectors requires alignment to	1
vectors AVX2 256 bit	1
vectors SSE3 horizontal add,	1
vectors RGB image data	1
vectors ....................................................... 120 12.10	1
vectors FMA3 floating point	1
Floating point variables and	2
Floating point variables use	1
Floating point variables do	1
Floating point operations are	1
Floating point calculations usually	1
Floating point overflow has	1
Floating point precision conversion	1
Floating point parameters are	1
Floating point division by	1
Floating point division takes	1
Floating point division Floating	1
Floating point division ...........................................................................................	1
Floating point induction variables	1
Floating point addition takes	1
Floating point numbers are	1
Floating point XMM (vector)	1
Floating point algebra reductions:	1
Floating point comparisons are	2
AVX2 is supported in	1
AVX2 and all three	1
AVX2 // specific version	1
AVX2 int 32 8	1
AVX2 instruction set also	1
AVX2 instruction set gives	1
AVX2 float 32 8	1
AVX2 long long 64	1
AVX2 short int 16	1
AVX2 256 bit integer	1
AVX2 Table 12.3. Intrinsic	1
AVX2 Mathematical vector function	1
AVX2 _mm256_i64gather_pd unlimited 8	1
AVX2 _mm_i64gather_pd unlimited 8	1
AVX2 _mm256_i32gather_epi32 unlimited 4	1
AVX2 _mm_i32gather_ps unlimited 4	1
AVX2 _mm256_i64gather_epi32 unlimited 8	1
AVX2 _mm_i32gather_epi32 unlimited 4	1
AVX2 _mm_i64gather_epi32 unlimited 8	1
AVX2 _mm256_i32gather_ps unlimited 4	1
piece of code is	1
piece of code to	1
piece of code in	2
piece of code that	2
piece of code you	1
piece of code then	1
piece of code compiled	1
piece of code once	1
piece of memory inside	1
piece of program code	1
piece of software specifies	1
piece of code. Each	1
piece of code. Furthermore,	1
piece of memory. See	1
piece of CPU-intensive software	1
piece in a function	1
piece by piece in	1
piece at a time	1
divisible by the memory	1
divisible by the vector	2
divisible by the cache	1
divisible by the size	1
divisible by the number	1
divisible by the unroll	3
divisible by the 107	1
divisible by vector size.	1
divisible by 8 in	1
divisible by 16 (see	1
divisible by 16. In	1
divisible by 16. You	1
divisible by 16. Library	1
divisible by 16. Alignment	1
divisible by 8. The	1
divisible by 8. There	1
divisible by TILESIZE //	1
<< and | operations	1
<< 1; } };	2
<< 2; } };	2
<< list[i] << endl;	1
<< 4, anda *	1
<< 4) + a.	1
<< 4) | ((C	1
<< 4) | (C	1
<< "Hello "; //	1
<< "Hello "; Disp();	1
<< 5. If columns	1
<< "Error: Index out	2
<< 23; // add	1
<< 6); Or, if	1
<< x.f; // will	1
<< endl; // Output	1
Here, the code must	1
Here, the compiler can	1
Here, the compiler has	1
Here, the value that	1
Here, the address of	1
Here, the constant 3.5	1
Here, the Gnu compiler	1
Here, it is necessary	1
Here, you can also	1
Here, you should be	1
Here, you cannot swap	1
Here, each value xn	1
Here, there are 6	1
Here, we have inserted	1
Here, I have used	1
Here, I have AND'ed	1
Here, / means integer	1
Here, y will get	1
Here, log(2.0) is only	1
x86 and x86-64 platforms.	2
x86 and ARM platforms	1
x86 instruction set is	1
x86 instruction set has	1
x86 instruction set where	1
x86 processors are used	1
x86 CPUs can execute	1
x86 platform _M_IX86 _M_IX86	1
x86 CPUs. However, a	1
x86 platforms. This library	1
x86 platforms. Microsoft, Intel,	1
x86 platforms. 3. The	1
x86 platforms. Works well	1
x86 platforms (Windows, Linux,	1
x86 family of microprocessors	1
x86 family can run	1
x86 family have two	1
x86 systems). 42 If	1
process is used for	1
process is used when	1
process is known to	1
process of dynamic allocation	1
process to take more	1
process and software engineering	1
process can proceed unattended.	1
process can influence the	1
process or by an	1
process or thread does	1
process may take more	1
process when compiled without	1
process because the microprocessor	1
process which is difficult	1
process should always use	1
process should run in	1
process There is a	1
process where the main	1
process running when it	1
binary code and can	1
binary data storage is	1
binary value of i	1
binary executable code. Most	1
binary search for finding	1
binary integer, and the	1
binary representation is particularly	1
binary representation of N:	1
binary representation according to	1
binary form than if	1
binary tree or a	2
binary tree may be	1
binary code). Supports 32-bit	1
binary search, or even	1
binary tree. Is searching	1
binary decimals of the	1
binary digits. The exponent	1
binary trees, hash maps	1
know the value of	1
know in advance which	1
know for sure whether	1
know that a function	1
know that a template	1
know that double precision	1
know that processor model	1
know that standard library	1
know that u.f and	1
know if this is	1
know how a cache	1
know how to avoid	1
know how to recover	1
know how this works,	1
know whether the largest	1
know what the compiler	1
know what you are	1
know what class of	1
know about. Function inlining	1
512 bits when the	1
512 bits (ZMM). Vector	1
512 matrix in my	1
512 matrix size causes	1
512 512 matrix in	1
512 512 matrix size	1
512 512 2048 230.7	1
512 512 matrix. My	1
512 512 378.7 168.5	1
512 AVX512 double 64	1
512 AVX512 float 32	1
512 AVX512 long long	1
512 AVX512 Table 12.1.	1
512 kb / 8	1
512 2048 230.7 513	1
512 matrix. My experimental	1
512 378.7 168.5 513	1
512 520 and leave	1
512 kb, 8 ways.	1
generate the value infinity,	1
generate a new instance	1
generate a store forwarding	1
generate a piece of	1
generate a bit-mask: __m128i	2
generate an error message	1
generate an assembly language	1
generate an overflow and	1
generate an underflow and	1
generate an interrupt, e.g.	1
generate floating point underflow	1
generate multiple versions of	1
generate many branch mispredictions.	1
generate any extra code	1
generate relative addresses in	1
generate relocations in the	1
generate interrupts at certain	1
generate -128, and subtracting	1
advantages of function inlining	1
advantages of each method,	1
advantages of using the	2
advantages of using static	1
advantages of using pointers	1
advantages of using references	1
advantages of object oriented	1
advantages of C++ but	1
advantages of dynamic memory	1
advantages of dynamic linking	1
advantages of alloca over	1
advantages and drawbacks of	1
advantages and disadvantages. The	1
advantages that can be	1
advantages that may improve	1
advantages when it comes	1
advantages over the disadvantages	1
advantages over 32 bit	1
r is the number	1
r is a reference	1
r is re-loaded from	1
r in Sum2 and	1
r are transferred on	1
r = r +	1
r = 28. We	1
r + 2; }	1
r + i/2; }	1
r < SIZE; r++)	4
r ; unused label	1
r points to ;	1
r points to. A	1
r points to. Now	1
r ebx, eax ebx,	1
r places back in	1
usually the order in	1
usually not able to	1
usually faster to transfer	1
usually stored in the	1
usually called in the	1
usually called before the	1
usually take the same	1
usually much faster to	1
usually done in a	1
usually requires log on	1
usually higher than the	1
usually predicted well if	1
usually inlined if the	1
usually unroll a loop	1
usually share the same	1
usually included as part	1
usually divided into three	1
usually 32. In 64-bit	1
usually dealt with in	1
results of the two	1
results of my experiment	1
results in table 9.1	1
results in another array.	1
results in RAM memory.	1
results in a. This	1
results in meaningless event	1
results for branch mispredictions.	1
results are always calculated	1
results are listed in	1
results are combined by	1
results are summarized in	1
results or fail completely	1
results if the operands	1
results as floating point.	1
results when applied to	1
results should be saved	1
results were as follows:	1
results printf("\n%2i %10I64i", i,	1
b, and the elements	1
b, c and d	1
b, c; a =	2
b, c; // Define	1
b, c; // Roll	1
b, c; b =	1
b, c; ... //	2
b, c; x[0] =	1
b, temp; temp =	1
b, c, d; a	1
b, c, d; if	1
b, c, d; c	1
b, c, d; };	1
b, c, temp; temp	1
b, c, d, y;	2
b, c, d, e,	1
storage is that it	1
storage is inefficient because	1
storage is determined where	1
storage of static and	1
storage of text strings	1
storage and page 87	1
storage are explained on	1
storage on the stack	1
storage A limited number	1
storage should be avoided,	1
storage order is opposite).	1
storage Most compilers can	1
storage methods mentioned above.	1
storage Variables and objects	1
storage Variables that are	1
storage (e.g. PowerPC). We	1
storage space. It should	1
storage p. 28) The	1
storage principles are the	1
old memory block into	1
old data file in	1
old version of Intel's	1
old operating systems that	1
old operating systems DOS	1
old processors without the	1
old CPUs is not	1
old block then become	1
old microprocessors that do	1
old microprocessors without any	1
old CPUs. The Pentium	1
old computer with a	1
old Pentium 4, while	1
old Pentium 4. The	1
old version. Updating mechanisms	1
old C-style method of	1
old DOS compilers). The	1
old fashioned C style	2
reduce the integer expression	1
reduce the number of	1
reduce the performance because	1
reduce the problem by	1
reduce a to the	1
reduce int x =	1
reduce this problem. The	1
reduce this to: //	2
reduce other types of	1
reduce example 12.1b to	1
reduce any expression, but	1
reduce some types of	1
reduce simple algebraic expressions	1
reduce speed if the	1
reduce complicated algebraic expressions.	1
reduce various algebraic expressions	1
reduce them all. In	1
reduce (a*b*c)+(c*b*a) to a*b*c*2.	1
goes the same way	1
goes the other way.	1
goes to the user	1
goes to the console	1
goes to cache misses,	1
goes to actually doing	1
goes to C0::f or	1
goes in the //	1
goes from the leftmost	1
goes one way most	1
goes into sleep mode.	1
goes many times one	1
goes faster if the	1
goes up and down.	1
goes through the following	1
goes through an import	1
goes another way than	1
goes automatically when the	1
goes randomly one way	1
union is a structure	1
union is not a	1
union is not optimal	1
union can be used	1
union can use any	1
union can also be	1
union { double d;	1
union { float f;	8
union { 89 int	1
union Bitfield { struct	1
union {double d; unsigned	1
union forces the variable	1
0, b = 0,	1
0, c + 2,	2
0, b; b =	1
0, last byte at	3
0, c, d; c	1
0, _EM_OVERFLOW); // _controlfp(0,	2
0, sum2 = 0;	1
0, s3 = 0,	1
0, s2 = 0,	1
0, sum; for (int	1
0, (a&b) | (~a&c)	1
0, s1 = 0,	1
0, sizeof(a)); // copy	1
0, sizeof(a)); } int	1
0, sizeof(list)); A multidimensional	1
called. The compiler will	1
called. The program is	1
called. The values are	1
called. The disadvantage of	1
called. The safe way	1
called. This is done	1
called. This has the	1
called. This method is	1
called. A considerable delay	1
called. It is recommended	1
called. If virtual functions	1
called. There is no	1
called. You may declare	1
called. I have added	1
called. Example: // Example	1
called. Therefore, the dispatcher	1
called. Unfortunately, the syntax	1
called. Lazy binding can	1
called. 118 12.7 Mathematical	1
10 is an integer,	1
10 - 20 clock	2
10 page 101 for	1
10 double xpow10(double x)	2
10 * 8 =	1
10 clock cycles then	1
10 clock cycles even	1
10 clock cycles, depending	1
10 elements were inserted,	1
10 times rather than	1
10 Gnu This is	1
10 means that it	1
10 μs today, then	1
10 ms for background	1
10 2.6 Choice of	1
10 Multithreading The clock	1
10 Multithreading.............................................................................................................. 101 10.1	1
based on the standard	1
based on the x86	1
based on the CPUID	1
based on the past	1
based on an interpreter	1
based on which instruction	1
based on its family	1
based on big runtime	1
based on hardware identification.	1
based on intermediate code	2
based on complicated criteria	1
based on what is	1
based on compilers. Several	1
based on my own	1
based on just-in-time compilation	1
based on BSD, but	1
based on hacks that	1
based mainly on my	1
choose the compilers that	1
choose the most often	1
choose the variables that	1
choose the method that	1
choose the type that	1
choose the optimal algorithm	1
choose the appropriate version	1
choose a software framework	1
choose a newer instruction	1
choose to use intrinsic	1
choose to make memory-hungry	1
choose to align large	1
choose an up-to-date function	1
choose this method for	1
choose other programming languages.	1
choose one of the	1
choose between c2 and	1
choose either C or	1
choose between. It is	1
options to control the	1
options to enable the	1
options and the options	1
options in the BIOS	1
options for the compiler	1
options for fast math	1
options that you can	1
options are set to	1
options are incompatible with	1
options at the start	1
options All C++ compilers	1
options Table 18.1. Command	1
options relevant to optimization	1
options prevent optimization. The	1
options turned on, the	1
options turned on, including	1
options turned on. Most	1
options -S or /Fa	1
options ................................................................................... 81 8.6	1
feature is used in	1
feature is intended for	1
feature is rarely needed	1
feature is rarely needed.	1
feature is seldom used.	1
feature for making multiple	1
feature for reserving memory	1
feature that the object	1
feature that there is	1
feature that allows overriding	1
feature on Intel CPU’s.	1
feature will become available	1
feature into the code	1
feature called performance monitor	1
feature called whole program	1
feature called "Gnu indirect	1
feature uses an ordinary	1
feature was never designed	1
feature information, such as	1
ways of doing the	1
ways of doing type	1
ways of doing things	1
ways of handling errors	1
ways of copying blocks	1
ways of multiplying by	1
ways of reducing the	1
ways of organizing the	1
ways to make a	1
ways to do things	1
ways to do this:	1
ways to avoid the	1
ways to avoid this	1
ways to avoid these	1
ways to get more	1
ways to divide the	1
ways than by a	1
ways around this problem.	1
ways depending on the	1
were in the same	1
were as follows: Matrix	1
were not divided into	1
were not present in	1
were float instead of	1
were able to do	1
were able to reduce	1
were unknown at the	5
were measured on a	1
were scarce resources. However,	1
were splitting 256-bit read	1
were carried out with	1
were tested: Microsoft C++	1
were observed between the	1
were inserted, one by	1
link to the appropriate	1
link to a function	1
link with the option	1
link with external libraries.	1
link pointer can be	1
link pointer has been	1
link library because it	1
link library (*.dll or	2
link library (DLL) which	1
link order is usually	1
link libraries slower than	1
link libraries (*.lib, *.a)	2
link pointers and for	1
link libraries. These factors	1
link map or an	1
link libraries, also called	2
made the structure 8	1
made the right prediction.	1
made a Windows program	1
made a series of	1
made to the desired	1
made to recover from	1
made for all suitable	1
made for demonstration purposes.	1
made with option -fpie	1
made with Microsoft or	1
made more compact by	1
made very big in	1
made available to the	1
made about whether the	1
made much more efficient	1
made container class templates	1
made smaller by reordering	1
made containers is that	1
made local. This makes	1
appropriate to give the	1
appropriate for the desired	1
appropriate function version CriticalFunctionType	1
appropriate compiler options to	1
appropriate instruction set specified.	1
appropriate version of the	5
appropriate version (May use	2
appropriate type of vector,	1
appropriate error message and	1
appropriate error messages to	1
appropriate header file for	1
appropriate header file will	1
appropriate here. It reveals	1
i, a, b; //	1
i, sum = 0;	1
i, f = 1;	1
i, a[100]; for (i	1
i, i_div_3; for(i=i_div_3=0; i<300;	1
i, a); } }	2
i, a); } 111	1
i, j; int order(int	1
i, j; float x;	1
i, j; ... for	1
i, a[100], b; for	1
i, a[100], b, temp;	1
i, a[100], temp; temp	1
i, StringLength; for (i	1
i, a[2]; for (i	1
i, largest_index = 0;	1
i, timediff[i]); } The	1
constructor is not needed	2
constructor is implemented internally	1
constructor and the destructor	1
constructor and no destructor	1
constructor for the object.	1
constructor that does the	1
constructor can be a	1
constructor // constructor //	1
constructor // sum operator	1
constructor or overloaded operator	1
constructor may be called	1
constructor may be inlined	1
constructor must be called	1
constructor sets all elements	1
constructor specifying otherwise. In	1
constructor itself. Constructors are	1
constructor initializes x to	1
CPUs. The performance on	1
CPUs. The SSE2 instruction	1
CPUs. The Gnu compiler	1
CPUs. The Pentium Pro	1
CPUs. The sequence of	1
CPUs. This is called	1
CPUs. This method is	1
CPUs. It uses the	1
CPUs. These costs can	1
CPUs. However, a software	1
CPUs. On the other	1
CPUs. (See page 130	1
CPUs. Intel's profiler is	1
CPUs. 5. Calling conventions	1
CPUs. New versions are	2
CPUs. Includes many functions	1
CPUs. Half size execution	1
2; // Find numerically	1
2; } The loop	1
2; } A good	1
2; } } The	1
2; } } void	1
2; } void FuncB	1
2; } These two	1
2; } }; void	2
2; } else {	2
2; } list[300] =	1
2; i <= n;	1
2; return a +	2
2; i++) a[i] =	1
2; Unfortunately, some compilers	1
2; Common subexpression elimination	1
just a single function	1
just a few clock	1
just a matter of	1
just by turning off	1
just as a normal	1
just as fast as	3
just an arbitrary name	1
just because it is	1
just one or a	1
just one clock cycle.	1
just two additions by	1
just two branches: one	1
just long enough to	1
just want the program	1
just easier to write	1
just happened to be	1
a[i] is ecx+eax*4. The	1
a[i] and shift out	1
a[i] = b *	1
a[i] = i *	1
a[i] = r +	1
a[i] = temp; }	1
a[i] = temp; temp	1
a[i] = *p +	1
a[i] = log (b[i]	1
a[i] = b[i] +	1
a[i] = Induction; ;	1
a[i] = Induction; a[i+1]	1
a[i] = log(b[i]) +	2
a[i] = i+1; The	1
a[i] = 0.0; //	1
a[i] + b[i]; c[i]	1
a[i] More examples of	1
function, the compiler doesn't	1
function, and the function	1
function, and the AVX2	1
function, and it prevents	1
function, if possible. Use	1
function, then the exception	1
function, but it may	1
function, but it has	1
function, but unfortunately the	1
function, one that discriminates	1
function, each optimized for	1
function, while a function	1
function, means that the	1
function, though not all	1
function, provided that the	1
function, m is transferred	1
function, m is replaced	1
function, etc., and if	1
operands of the Boolean	1
operands and add b	1
operands in case the	1
operands The operands of	1
operands are integer expressions	1
operands are variables than	1
operands are comparisons, etc.	1
operands if the evaluation	1
operands have other values	1
operands have no other	1
operands have mixed precision	1
operands has side effects	1
operands because the expression	1
operands because you should	1
operands Intel Core 2	1
operands cannot be changed	1
operands AMD Opteron K8	1
operands means that source	1
innermost loop is predicted	1
innermost loop of a	2
innermost loop and without	1
innermost loop that includes	1
innermost loop by storing	1
innermost loop A function	1
innermost loop should preferably	1
innermost loop doing mathematical	1
innermost loop bigger than	1
innermost function, then the	1
innermost loop. The loop	1
innermost loop. This is	1
innermost loop. This reflects	1
innermost loop. Another possibility	1
innermost loop. log is	1
innermost loop: for (i	1
innermost loops. 13.1 CPU	1
require a very high	1
require a few extra	1
require a lot of	1
require a multiplication but	1
require a variable. Efficiency	1
require that the code	1
require that the operating	1
require that the arrays	1
require that the microprocessor	1
require that a new	1
require that data are	1
require more resources, even	1
require other access patterns.	1
require two floating point	1
require precision conversion instructions	1
require runtime type identification	1
require cleanup before terminating	1
require modifications in the	1
compiler. The compilers are	1
compiler. This library contains	1
compiler. This method is	1
compiler. It is therefore	1
compiler. You can disable	1
compiler. Some functions are	1
compiler. Some compilers can	1
compiler. Some compilers have	1
compiler. Use CPUs with	1
compiler. We can never	1
compiler. Many algebraic reductions	1
compiler. Supports only 32-bit	1
compiler. Loop invariant code	1
compiler. On the other	1
compiler. Object files generated	1
compiler. Not optimized as	1
compiler. 2.6 Choice of	1
compiler. Remember, therefore, always	1
advanced and complicated algorithm	1
advanced code version on,	1
advanced data structures with	1
advanced C++ programming, how	1
advanced version on all	1
advanced version on, then	1
advanced system performance options.	1
advanced programming constructs are	1
advanced optimizing features, and	1
advanced development tools. The	1
advanced mathematical functions are	1
advanced programmers and software	1
advanced features rarely found	1
advanced prediction mechanisms. Modern	1
advanced algorithms to predict	1
advanced principles of software	1
advanced facilities of the	1
advanced high-level language with	1
#define is certain to	1
#define makes no difference	1
#define directives are equivalent	1
#define directives when used	1
#define directive never takes	1
#define N1 (N &	1
#define pure_function #endif double	1
#define pure_function __attribute__((const)) #else	1
#define FUNCNAME SelectAddMul_SSE41 #elif	1
#define FUNCNAME SelectAddMul_SSE2 #elif	1
#define FUNCNAME SelectAddMul_AVX2 #endif	1
#define swapd(x,y) {temp=x; x=y;	2
#define EXCEPTION_FLT_OVERFLOW 0xC0000091L void	1
#define ABC 123 and	1
#define Alignd(X) X __attribute__((aligned(16)))	1
#define Alignd(X) __declspec(align(16)) X	1
#define MAX(a,b) (a >	1
points is not divisible	1
points to the dispatcher	1
points to the dispatcher.	1
points to the selected	1
points to is deleted	1
points to a dispatcher.	1
points to and you	1
points to an object	2
points to ; store	1
points to (see page	1
points in the end	1
points with the four	1
points out some typical	1
points to. A const	1
points to. A reference	1
points to. Therefore, it	1
points to. Now ebx	1
switch is a switch	1
switch to protected mode	1
switch in your program	1
switch between different tasks	1
switch statement if it	1
switch statement with many	1
switch statement with sequential	1
switch statement jump tables,	1
switch statement leads to	1
switch statements is a	1
switch statements The high	1
switch statements because switch	1
switch statements should preferably	1
switch statements often suffer	1
switch occurs during execution	1
switch statements, as explained	1
switch (n) { case	1
switch statements............................................................................. 43 7.13	1
range is possibly more	1
range of a variable	1
range of code in	1
range of an integer	1
range of memory addresses	1
range of floating point	1
range and we don't	1
range } } This	1
range then the value	1
range then a simple	2
range from -128 to	1
range from 0x2700 to	2
range (see page 134	1
range analysis The live	1
range analysis Join identical	1
range printf(Greek[n]); } The	1
start the calculation of	1
start the next calculation.	1
start a new floating	1
start a new addition	1
start of the function.	1
start of the program,	1
start of Func ;a	1
start to calculate (c+d)	1
start to program. Many	1
start to optimize anything,	1
start to code, you	1
start and stop the	1
start at an address	1
start at unpredictable times	1
start so that the	1
start calculations on the	1
start garbage collection when	1
start up, which is	1
modules of a big	1
modules and header files.	1
modules The compiler doesn't	1
modules that use the	1
modules that make up	1
modules are linked together.	1
modules or resource files	1
modules if necessary, each	1
modules with a different	1
modules with a well-defined	1
modules than the one	1
modules may be loaded	1
modules when the highest	1
modules into one by	1
modules call the function.	1
modules (See page 81).	1
modules contiguous in program	1
modules appear in the	1
smaller the data elements	1
smaller the integer size	1
smaller the system, the	1
smaller and the array	1
smaller and more efficient.	1
smaller and closer to	1
smaller in a computer	1
smaller if there is	1
smaller by declaring it	1
smaller by reordering the	1
smaller as well. The	1
smaller than the vector	1
smaller memory footprint. If,	1
smaller because relative addresses	1
smaller functions only makes	1
smaller size is done	1
smaller sizes (char, short	1
smaller squares and handle	1
here is the only	1
here is a list	1
here is a branch.	1
here is to remove	1
here is that the	1
here is that access	1
here is likely to	1
here to draw the	1
here in a rather	1
here // Virtual function	1
here if the compiler	1
here may apply to	1
here because the consequence	1
here because we are	1
here about Linux also	1
here about increment operators	1
here means that different	1
here gives a+b=0, and	1
core is running at,	1
core of modern microprocessors	1
core and an FPGA	1
core and high-priority threads	1
core by setting a	1
core with another thread	1
core on multi-core CPUs,	1
core will always compete	1
core then it is	1
core library contains optimized	1
core library contains similar	1
core clock cycles counter	1
core clock cycles per	1
core clock cycles. The	1
core clock cycle counter	2
core during time measurements	1
relevant to software optimization.	1
relevant to optimization MS	2
relevant to test the	1
relevant to small devices,	1
relevant to optimization. Prefetching	1
relevant for the programmer	1
relevant when the code	1
relevant when CPU access	1
relevant when testing worst-case	1
relevant optimization options and	1
relevant optimization options turned	3
relevant options. Many optimization	1
relevant information. 1.1 The	1
relevant books and manuals.	1
are: The process of	1
are: The overhead of	1
are: The syntax is	1
are: int BigArray[1024] __attribute__((aligned(64)));	1
are: It is easy	1
are: There is very	1
are: All calculations are	1
are: No loop-carried dependency	1
are: When you look	1
are: Avoid the conversions	1
are: Variables that are	1
are: Optimizing for present	1
are: Static linking includes	1
are: 146 Multiple applications	1
are: Long double precision	1
are: Non-static member functions	1
are: Coarse time measurement.	1
around the constant subexpression.	1
around the hot spot.	1
around and less efficient	1
around in the memory.	1
around in memory or	1
around in memory then	1
around in program memory.	1
around in memory. Function	1
around it so that	1
around on the hard	1
around on overflow and	1
around this problem. If	1
around this limitation and	1
around at different memory	1
around at different places	1
around such a subexpression	1
around 1980 where RAM	1
5 and 20 clock	1
5 and 9. Multiplications	1
5 by another thread.	1
5 } } In	1
5 * 0.5 ns	1
5 clock cycles to	1
5 clock cycles, then	2
5 times faster either	1
5 / 2 (be	1
5 #define FUNCNAME SelectAddMul_SSE41	1
5 Choosing the optimal	2
5 μs on the	1
5 2.2 Choice of	1
5 2.1 Choice of	1
5 Programmable logic devices	1
replaced by the function	1
replaced by the calculated	1
replaced by a table	1
replaced by a single	1
replaced by a shift	1
replaced by a blend	1
replaced by // Example	1
replaced by more efficient	1
replaced by its value	1
replaced by their values	1
replaced by their actual	1
replaced by storage on	1
replaced by my comments,	1
replaced by x<<3, which	1
replaced i by a	1
replaced with: // Example	2
a; // 2 bytes.	1
a; int b; a	1
a; int b; int	3
a; int b; static	1
a; int b;}; Sab	1
a; double b; a	1
a; double b; int	1
a; double b;}; S1	2
a; b = a	1
a; float x, y,	1
a; y = b;}	1
a; bool b; a	1
a; Plus2 (&a); The	1
a; 72 This may	1
things to make the	1
things to test when	1
things in parallel. Coarse-grained	1
things in parallel: Using	1
things that the programmer	1
things that can be	2
things with the sign	1
things with pointers that	1
things you can do	2
things at the same	1
things only after they	1
things very smart and	1
things very stupid. Some	1
things like a mouse	1
things like adding vectors.	1
negative or if one	1
negative or -0 }	1
negative by AND'ing it	1
negative integer will be	1
negative value of i	1
negative so that we	1
negative list of which	1
negative list of processors	1
negative list of processor	1
negative effect on performance.	1
negative inputs give infinity.	1
negative result. An overflow	1
negative numbers. The exponent	1
negative effects of object	2
negative list, on the	1
negative impacts on program	1
section is not shared	1
section is always position-independent	1
section and read-only data	1
section for some caveats.	1
section can be loaded	1
section if you are	1
section by summing up	1
section may contain pointers	1
section will be different	1
section so that it	1
section contains no absolute	1
section needs one instance	2
section (page 131) shows	1
section discusses how to	1
section position-independent, makes a	1
section 17.9: "Moving blocks	1
reductions the compilers are	1
reductions in my test	1
reductions that the compilers	1
reductions are not permissible	1
reductions on integer code.	1
reductions on integer expressions	1
reductions on floating point	2
reductions as 0/a =	1
reductions at their own	1
reductions such as -(-a)	1
reductions they cannot do.	1
reductions Most compilers can	1
reductions explicitly in many	1
reductions manually. I have	1
reductions involving integer addition,	1
reductions involving division and	1
go the same way	1
go to the desired	1
go to dispatched version	1
go more than two	1
go one way two	1
go into eight different	1
go through the PLT	1
go through a second	1
go through multiple layers	1
go based on the	1
go here // Virtual	1
go outside the bounds	1
go back into the	1
go away in the	1
go undetected. The principle	1
go undetected. Converting class	1
go deeper into the	1
depends on the size	1
depends on the number	1
depends on the value	1
depends on the way	1
depends on the calculations	1
depends on the result	2
depends on the preceding	1
depends on the previous	1
depends on the processor.	1
depends on how well	1
depends on calculations inside	1
depends on whether CriticalFunction	1
depends on what fits	1
depends only on the	1
depends only on n,	1
depends very much on	1
example: // Example 7.8	1
example: // Example 8.4	1
example: // Example 7.7	1
example: // Example 7.11	1
example: // Example 7.14	1
example: // Example 7.13	1
example: // Example 7.29a	1
example: // Example 8.17	1
example: // Example 7.35a	1
example: // Example 7.9a	1
example: // Example 8.24.	1
example: // Example 14.16a	1
example: // Example 7.37	1
example: // Example 14.15a	1
example: // Example 14.2a	1
example: Use a reference	1
example: 38 // Example	1
tested the strlen function	1
tested the capability to	1
tested and investigated by	1
tested in different browsers,	1
tested in Mac systems.	1
tested can convert example	1
tested with a realistic	1
tested on a network	1
tested on different platforms,	1
tested only on PC	1
tested library modules and	1
tested were able to	1
tested it. The insight	1
tested under worst-case conditions	1
tested implement OneOrTwo5[b!=0] as	1
tested seem to do	1
tested (not up to	1
contentions is that the	1
contentions is that branches	1
contentions and the time	1
contentions in the code	1
contentions in the data	2
contentions in large data	2
contentions can be prevented	1
contentions if the threads	2
contentions than for level-1	1
contentions will occur: if	1
contentions do not occur.	1
contentions occur in the	2
contentions expected. Use square	1
predicted to go the	1
predicted or if the	1
predicted if the value	1
predicted by the branch	1
predicted most of the	1
predicted well if the	1
predicted well only on	2
predicted quite well if	1
predicted depends on the	1
predicted well. A loop	1
predicted well. A switch	1
predicted well. Even function	1
predicted well, of course.	1
predicted perfectly on a	1
predicted perfectly varies between	1
predicted perfectly. As explained	1
main will be used,	1
main will take precedence,	1
main memory and therefore	1
main memory in a	1
main has the same	1
main through an imported	1
main advantage of the	1
main memory. A register	1
main program. See page	1
main reason why such	1
main executable to a	1
main executable has the	1
main executable because it	1
main reasons why object	1
main principles here: functional	1
main feedback comes from	1
main focus is on	1
references to data within	1
references to relocate, but	1
references in the code	1
references in 32-bit mode.	1
references in 64 bit	1
references in 32 bit	1
references are equally efficient	1
references then tell the	1
references do not need	1
references rather than pointers	1
references instead of pointers,	1
references require a variable.	1
references are: When you	1
references Pointers and references	1
references Pointers versus references	1
references ............................................................................................ 36 7.7	1
references accept expressions as	1
loaded or at run	1
loaded from memory each	1
loaded at a higher	1
loaded at an address	1
loaded at an arbitrary	1
loaded at round memory	1
loaded only when they	1
loaded into an arbitrary	1
loaded into memory when	1
loaded into memory. If	1
loaded into ecx and	1
loaded cannot be determined	1
loaded rather than each	1
loaded type casting operator	1
loaded every time the	1
loaded until the previous	1
loaded anyway. If we	1
positive and 1 for	1
positive and negative impacts	1
positive or the negative	1
positive } Example 14.27	1
positive integer constant. //	1
positive floating point numbers	1
positive number when i	1
positive number when converted	1
positive overflow of a	1
positive list of which	1
positive list of processor	1
positive list needs to	1
positive result. The conversion	1
positive effects are: Variables	1
positive n. You can	1
positive integer: // Example	1
positive value, n. But	1
loop. The time that	1
loop. The loop will	1
loop. The following example	1
loop. The effect of	1
loop. The loop-branch is	1
loop. This is done	1
loop. This reflects the	1
loop. It is not	1
loop. Example 12.4b executes	1
loop. Example 8.21 is	1
loop. If each floating	1
loop. In general, you	1
loop. Example: // Example	1
loop. Some implementations use	1
loop. Most compilers have	1
loop. Another possibility is	1
loop. log is a	1
computer is not always	1
computer is restarted anyway.	1
computer is reset or	1
computer is rebooted. To	1
computer for security reasons	1
computer with a slow	1
computer with multiple CPUs	1
computer with many such	1
computer has only one	1
computer where the level-1	1
computer while he or	1
computer during the update	1
computer users and much	1
computer starts up, even	1
computer game or animation.	1
computer games and animations	1
computer games. Such a	1
overhead of the operating	1
overhead of the iterator	1
overhead of call and	1
overhead of parameter transfer	3
overhead of transferring the	1
overhead of semaphores, mutexes,	1
overhead of switching to	1
overhead of managing a	1
overhead to the allocation	1
overhead to prevent such	1
overhead in the program	1
overhead which consumes CPU	1
overhead while other compilers	1
overhead cost of heap	1
overhead cost to memory	1
VIA processors because this	1
VIA processor and a	1
VIA processors. It is	1
VIA processors. See page	1
VIA processors. Explicit CPU	1
VIA CPUs. 5. Calling	1
VIA including the 64-bit	1
VIA processors, and it	1
VIA CPUs"). This is	1
VIA CPUs"). This can	1
VIA CPUs"). Const cast	1
VIA CPUs" for an	2
VIA CPUs" gives more	1
VIA CPUs: An optimization	1
VIA CPUs". A branch	1
VIA CPUs". 9.3 Functions	1
pointer. The pointer is	1
pointer. The copy constructor,	1
pointer. This is the	1
pointer. This can be	1
pointer. A variable in	1
pointer. It is important	1
pointer. It is recommended	1
pointer. It may be	1
pointer. It has the	1
pointer. It has some	1
pointer. If a program	1
pointer. You may make	1
pointer. But there is	1
pointer. These conversions do	1
pointer. Likewise, all non-static	1
pointer. Accessing an object	1
pointer. 7.9 Smart pointers	1
supports the corresponding instruction	1
supports a particular instruction	1
supports this option only	1
supports this kind of	1
supports then you are	1
supports at least the	1
supports vector intrinsics, automatic	1
supports CPU dispatching to	1
supports multiple programming languages,	1
supports 32-bit and 64-bit	1
supports Linux and Windows	1
supports both Intel, AMD	1
supports intrinsic functions, but	1
supports automatic vectorization, such	1
supports self-relative addressing of	1
supports self-relative addressing. In	1
supports this). Use rounding	1
C and C++ faster	1
C are too small	1
C = 3.3; //	1
C = 3.3; double	1
C or C++ code.	1
C or C++ file	1
C or C++ based	1
C or C++. Critical	1
C function library for	1
C if you follow	1
C functions such as	1
C language as a	1
C standard says that	1
C library. It requires	1
C style with character	1
C style as character	1
C style string functions	1
compatible with the other	1
compatible with a better	1
compatible with that branch.	1
compatible with different versions	1
compatible with other compilers	1
compatible with all CPUs	1
compatible with CPUs that	1
compatible with old microprocessors	2
compatible with 16-bit programs.	1
compatible with structured exception	1
compatible with Gnu. It	1
compatible with these. The	1
compatible on the object	1
compatible instruction sets is	1
compatible way is to	1
compatible across compilers. Fastcall	1
change the code in	1
change the value of	1
change the order of	1
change the sign of	1
change the expression -(-a)	1
change the value. The	1
change the behavior of	1
change of a hard	1
change in the YMM	1
change this to: //	1
change its possible exception	1
change their clock frequency	1
change what a pointer	1
change what it points	1
change && to &	1
change during the loop.	1
change pre-increment to post-increment.	1
global and one local,	1
global and static variables	1
global if it is	1
global if you can	1
global variable in the	1
global variable in main	1
global variable means that	1
global variables or hide	1
global variables by using	1
global variables (i.e. variables	1
global const variable or	1
global arrays require a	1
global variables. (See thread-local	1
global variables. They can	1
global offset table (GOT).	1
global offset table (GOT)	1
global object. The calling	1
my vector class library).	1
my optimization manuals are	1
my optimization manuals. I	1
my test tool for	1
my test examples. The	1
my manual will soon	1
my own research, not	1
my own research, I	1
my free E-book Usability	1
my study of how	1
my experiment are given	1
my blog. Here, you	1
my experiments. Contentions in	1
my crystal ball reveals	1
my blog for details.	1
my comments, in green.	1
my tests, the Intel	1
conversions is discussed below.	1
conversions and make the	1
conversions in the critical	1
conversions The C++ syntax	1
conversions are not safe,	1
conversions can be used	1
conversions can sometimes be	1
conversions by using different	1
conversions from integer to	1
conversions from floating point	1
conversions from float or	1
conversions do not produce	1
conversions between integers and	2
conversions take a lot	1
conversions out of the	1
statement and all the	1
statement in the condition	1
statement in this example	1
statement that calls the	1
statement can be made	1
statement can improve optimizations	1
statement if it follows	1
statement with many labels	1
statement with sequential labels	1
statement so that it	1
statement always calls the	1
statement several iterations ahead.	1
statement was executed. If	1
statement jump tables, and	1
statement leads to the	1
statement occupies a space	1
errors is to replace	1
errors in C++ programs	1
errors in C++ programs.	1
errors in case the	1
errors in cases where	1
errors in programs where	1
errors that would otherwise	1
errors that seldom occur	1
errors can happen if	1
errors can happen with	1
errors if the size	1
errors if they are	1
errors without using exceptions.	1
errors must be added.	1
errors elsewhere in the	1
errors associated with dynamic	1
off the loop unroll	1
off the exception handling	1
off the binary value	1
off the computer for	1
off the computer during	1
off the position-independent code	1
off the reading of	1
off and use alternative	1
off or until the	1
off or log off	1
off by default unless	1
off all optimizations of	1
off support for exception	1
off support for runtime	1
off debugging and profiling	1
off requirements for strict	1
unused bytes in the	1
unused bytes in a	1
unused bytes can be	1
unused bytes // 8	1
unused bytes between a	1
unused bytes byte at	1
unused bytes S1 ArrayOfStructures[100];	1
unused copy of an	1
unused points in the	1
unused columns to a	1
unused label ; return	1
unused label ; save	1
unused label ; restore	1
unused label ;eax=addressofa ;edx=addressinr	1
unused returns // Volatile	1
unused fourth value to	1
relative to the stack	1
relative to the beginning	4
relative to the current	1
relative addresses in the	1
relative addresses in 32-bit	1
relative addresses are often	1
relative reference to a	1
relative difference less than	1
relative references in 64	1
relative references do not	1
relative efficiency of different	1
relative addresses. Therefore, the	1
relative addressing of data.	1
columns is a power	1
columns a power of	1
columns to a matrix.	1
columns in a matrix	3
columns in this case	1
columns in matrix //	2
columns = 8; float	1
columns = 32; float	1
columns = 50; float	1
columns below diagonal //	1
columns below diagonal swapd(a[r][c],	1
columns had not been	1
columns unused. This removed	1
p is a simple	1
p is a pointer,	1
p is not i	1
p is therefore equal	1
p is identical to	1
p is incremented. See	1
p and r in	1
p and inlining the	1
p = & obj1;	1
p = p +	1
p = &Object1; p->NotPolymorphic();	1
p = &Object2; p->Hello();	1
p has been incremented,	1
p + i; Here,	1
p always points to	1
p points to (see	1
platforms. The Microsoft and	1
platforms. The Clang compiler	1
platforms. This library has	2
platforms. See the compiler	1
platforms. AMD AMD Math	1
platforms. However, C++ is	1
platforms. 2. Optimizing subroutines	1
platforms. PathScale C++ compiler	1
platforms. Microsoft, Intel, Gnu	1
platforms. Clang The Clang	1
platforms. Graphics accelerators The	1
platforms. 3. The microarchitecture	1
platforms. Comparison of function	1
platforms. Works well with	1
platforms. Pascal has many	1
languages and their implementations	1
languages in Microsoft's .NET	1
languages that do not	1
languages that do have	1
languages are out of	1
languages are good for	2
languages are implemented with	1
languages can be quite	1
languages as well. This	1
languages have the disadvantage	1
languages use an intermediate	1
languages such as C++	1
languages such as C#,	1
languages where everything happens	1
languages include C, C++,	1
installation of the program	1
installation of the framework	1
installation of downloaded program	1
installation and uninstallation of	1
installation The time it	1
installation time and compatibility	1
installation program makes a	1
installation time. Each code	1
installation process to take	1
installation process can proceed	1
installation process or by	1
installation process should always	1
installation options at the	1
installation tools. It should	1
installation tools. Automatic updates.	1
installation .................................................................................................. 18 3.4	1
depending on the available	1
depending on the work	1
depending on the processor	1
depending on the CPU.	1
depending on the processor.	2
depending on the specified	1
depending on the microprocessor.	2
depending on the context.	1
depending on the processor).	2
depending on instruction set	1
depending on how they	1
depending on how predictable	1
depending on what fits	1
syntax is so kludgy	1
syntax is very old-fashioned.	1
syntax is fully standardized	1
syntax is simpler when	1
syntax in example 8.15b.	1
syntax in example 7.43b	1
syntax in both Windows	1
syntax or See page	1
syntax may seem a	1
syntax has several different	1
syntax described in the	1
syntax checking and is	1
syntax 90 Gives a	1
syntax check. It does	1
syntax checks. These conversions	1
syntax restriction, but it	1
cases. The most critical	1
cases. The so-called iterators	1
cases. The equivalent expression	1
cases. The explicit use	1
cases. This is because	1
cases. This means that	1
cases. It is best	1
cases. See manual 5:	1
cases. For example: //	1
cases. An even more	1
cases. Integer expressions are	1
cases. Don't change &&	1
cases. Multiple threads? Container	1
cases. Does not allocate	1
cases. 7.28 Templates A	1
cases. Database queries can	1
Supports the OpenMP directives	1
Supports vector intrinsics and	1
Supports only 32-bit Windows.	2
Supports all x86 and	2
Supports all x86 platforms.	1
Supports 32-bit and 64-bit	2
Supports both AMD and	1
Supports three different object	1
Supports x86 and ARM	1
Supports parallel processing, OpenMP	2
Supports OpenMP and automatic	1
Supports 32- and 64-bit	1
choice of compiler may	1
choice of which method	1
choice of user interface	1
choice of programming language	2
choice of hardware platform	2
choice of platform is	1
choice of algorithm is	1
choice of n. The	1
choice for code that	1
choice for all platforms.	1
choice for all Unix-like	1
choice for Linux platforms	1
choice for future models	1
choice between optimizing for	1
1. The reason why	1
1. The AND operator	1
1. This makes operations	1
1. This ends the	1
1. This '1' is	1
1. See page 34.	1
1. Use a compiler	1
1. / (b1 *	1
1. Note that there	1
1. Optimizing software in	2
1. Add the keyword	1
1. Number 18 will	1
1. How much you	1
1. Writing a =	1
1. Relocation. All pointers	1
STL is not satisfactory.	1
STL is designed for	1
STL for accessing container	1
STL are universal, flexible,	1
STL as a vector	1
STL has been criticized	1
STL vector stores all	1
STL vector turned up	1
STL also costs in	1
STL container are allowed	1
STL containers is 95	1
STL containers do not	1
STL templates, such as	1
STL containers. See page	1
STL (Standard Template Library)	1
STL deque (doubly ended	1
intended to be platform-independent	1
intended to work in	1
intended to mimic the	1
intended for CPU dispatching	1
intended for array sizes	1
intended for variables that	1
intended for 32-bit Windows	1
intended for system code.	1
intended for calculating the	1
intended for finding hot	1
intended for detecting errors	1
intended as a plug-in	1
intended because of a	1
intended (see page 84).	1
intended for. In other	1
intended for. Some systems	1
dynamically and that measurements	1
dynamically with new and	1
dynamically when the size	1
dynamically when the total	1
dynamically allocated memory Memory	1
dynamically allocated objects are	1
dynamically allocated objects with	1
dynamically allocated memory. It	1
dynamically allocated memory. 9.6	1
dynamically allocated memory, using	1
dynamically allocated memory, windows,	1
dynamically allocated memory................................................................. 120	1
dynamically linked library functions.	1
dynamically depending on the	1
dynamically created by one	1
dynamically (with new or	1
consecutive elements in aa:	4
consecutive elements from cc	3
consecutive elements from bb	3
consecutive elements c.load(cc+i); //	1
consecutive elements b.load(bb+i); //	1
consecutive bytes of memory.	1
consecutive variables. Example: //	1
consecutive terms in one	1
consecutive indices or by	1
profiler is most useful	1
profiler is called CodeAnalyst.	1
profiler is called VTune;	1
profiler to find hot	2
profiler that can tell	1
profiler may sample more	1
profiler which determines the	1
profiler works then you	1
profiler counts how many	1
profiler tells the CPU	1
profiler tells the operating	1
profiler itself. Function addresses	1
profiler inserts temporary debug	1
profiler measures not only	1
profiler identifies any hot	1
become a serious legal	2
become more powerful. The	1
become very big. In	1
become less important than	1
become available in the	1
become too fragmented. This	1
become bigger and more	1
become fragmented and caching	1
become fragmented when objects	1
become fragmented. This makes	1
become fragmented. An alternative	1
become invalid. The heap	1
become invalid, and by	1
become imprecise or simply	1
become obsolete within the	1
Windows, the first four	1
Windows, you can use	1
Windows, you may write	1
Windows, while most of	1
Windows, Linux and Mac	2
Windows, Linux and Mac.	1
Windows, including an IDE.	1
Windows, Linux, Mac Windows,	1
Windows, Linux, BSD and	1
Windows, Linux, BSD or	1
Windows, Linux, Mac, BSD	1
Windows, allow variables to	1
Windows, SetThreadAffinityMask, in Linux,	1
Windows, -msse2, -mavx, etc.	1
Windows, Intel/MASM syntax: __asm	1
index is not out	1
index is out of	3
index of memory blocks.	1
index or key in	1
index by 8. 71	1
index than when n	1
index then the compiler	1
index then it is	1
index out of range");	1
index must be multiplied	1
index operator } };	1
index changes fastest: //	1
index changing in the	1
index multiplied by a	1
modern C++ compilers. The	1
modern programming languages use	1
modern processors prefetch data	1
modern CPUs can change	1
modern CPUs have two	1
modern microprocessors is obtained	1
modern microprocessors is split	1
modern microprocessors and operating	1
modern microprocessors are not	1
modern x86 CPUs can	1
modern CPUs. The SSE2	1
modern CPU. But it	1
modern CPUs, as described	2
modern computers have memory	1
modern software, it is	1
gives the value of	1
gives the advantage of	1
gives the simplest possible	1
gives the simplest code.	1
gives the chosen expression.	1
gives the worst possible	1
gives a measure that	1
gives an advantage in	1
gives an 9 extra	1
gives more details on	1
gives more reliable and	1
gives more reliable results.	1
gives access to the	1
gives zero. An OR	1
gives a+b=0, and then	1
gives rise to some	1
Loop to make table	1
Loop to print out	1
Loop with branch //	1
Loop with branch void	1
Loop through array cout	1
Loop counter // Calculate	1
Loop counter //=2*A //=A*x*x+B*x+C	1
Loop unrolling should only	1
Loop unrolling should preferably	1
Loop unrolling also has	1
Loop unrolling In some	1
Loop unrolling Some compilers	1
Loop r1 and c1	1
Loop r2 and c2	1
Loop invariant code motion	2
avoided in 64-bit systems	1
avoided for these variables.	1
avoided by using references	1
avoided by making the	1
avoided by making an	1
avoided by calling the	1
avoided by inlining the	1
avoided by copying the	1
avoided by joining the	1
avoided by rolling out	1
avoided by replacing an	1
avoided on processors with	1
avoided when speed is	1
avoided because of the	1
avoided because they cannot	1
avoided unless you have	1
turn it off and	1
turn on and off.	1
turn on this option.	2
turn on all relevant	1
turn on correction for	1
turn calls another function,	1
turn off the loop	1
turn off the computer	1
turn off the reading	1
turn off or log	1
turn off support for	2
turn off debugging and	1
turn off requirements for	1
turn them off or	1
inlining the call to	1
inlining the frame function	1
inlining the latter function,	1
inlining is that the	1
inlining is done at	1
inlining a function if	1
inlining and constant propagation	1
inlining The compiler can	1
inlining can open the	1
inlining more efficient and	1
inlining has the complication	1
inlining all the functions	2
inlining are: The overhead	1
inlining causes technical problems	1
inlining x-xxxx--x Constantfolding xxxxxxxxx	1
size. The alternative solution	1
size. This is because	1
size. If this is	1
size. In other words,	1
size. In fact, the	1
size. There is a	1
size. I tried to	1
size. However, it is	1
size. Integer operations are	1
size. When the critical	1
size. Alternatively, you may	1
size. Vectorized code is	1
size. Integers of smaller	1
size. Today, it is	1
size. Unpredictable branches that	1
size. Later models had	1
network is overloaded or	1
network is unstable or	1
network and other resources	1
network or database is	1
network with heavy traffic	1
network may be both	1
network access to virus	1
network access in separate	1
network access may be	1
network resources and servers	1
network resources are not	1
network resources cannot be	1
network resources. This time	1
network resources, databases, etc.	1
network connections. Temporary files	1
slow and fragmented hard	1
slow // Division by	1
slow // Modulo by	1
slow or completely absent	1
slow instruction that you	1
slow bit scan instruction	1
slow bit scan instructions.	1
slow unless the size	1
slow unless the Pentium-II	1
slow implementations of this	1
slow GOT lookup process	1
slow down the execution	2
slow down a program	1
slow CPU, an insufficient	1
b) is calculated in	1
b) a && !a	1
b) = (a >=	1
b) - n.a. Floating	1
b) { if (b)	4
b) { return a	1
b) + (c +	1
b) But beware of	1
b) etc. at compile	1
b) y = MAX(f(x),	1
b) >> n with	1
b) {x = a;	1
>= size can be	1
>= 0; i--, x++)	1
>= b) - n.a.	1
>= (unsigned int)size) {	1
>= 2) SelectAddMul_pointer =	1
>= 4) { //	2
>= 8) SelectAddMul_pointer =	1
>= size) { cout	1
>= 5) SelectAddMul_pointer =	1
>= 11) { //	2
>= min && i	1
>= operators). The same	1
>= N) { //	1
desired function version //	1
desired program structure. It	1
desired instruction set (/arch:SSE2,	1
desired instruction set. If	1
desired version of the	1
desired version in a	1
desired new features. User	1
desired function. The PLT	1
desired parameters typedef int	1
desired values before the	1
desired version. Note that	1
desired polymorphism effect with	1
desired functionality without polymorphism	1
desired measurement instruments into	1
desired interval is a	1
Such a branch will	1
Such a processor will	1
Such a list is	1
Such a soft processor	1
Such a coprocessor might	1
Such an extra framework	1
Such variables and objects	1
Such variables have one	1
Such dependency chains can	1
Such units can be	1
Such schemes are frequent	1
Such schemes cause problems	1
Such frameworks are frequent	1
Such events as task	1
Such hybrid solutions are	1
#pragma vector always to	1
#pragma vector always #pragma	1
#pragma vector always Optimize	1
#pragma vector aligned or	1
#pragma vector aligned #pragma	1
#pragma vector aligned Assume	1
#pragma vector nontemporal is	1
#pragma vector nontemporal Table	1
#pragma vector nontemporal #pragma	1
#pragma ivdep Assume function	1
#pragma ivdep __restrict #pragma	1
#pragma optimize("a",on). Specifies that	1
#pragma optimize(...) Fastcall function	1
#pragma optimize("a", on) __restrict	1
#pragma novector to tell	1
Dynamic memory allocation is	2
Dynamic memory allocation can	1
Dynamic memory allocation may	1
Dynamic memory allocation also	1
Dynamic memory allocation Dynamic	1
Dynamic memory allocation Any	1
Dynamic memory allocation Objects	1
Dynamic memory allocation ......................................................................................	1
Dynamic libraries are less	1
Dynamic linking and position-independent	2
Dynamic linking makes it	1
Dynamic linking works differently.	1
Dynamic cast The dynamic_cast	1
functions, and other complications	1
functions, and put seldom	1
functions, or if this	1
functions, but the function	1
functions, but in a	1
functions, but less optimized.	1
functions, but unfortunately there	1
functions, where static has	1
functions, called procedure linkage	1
functions, etc. in vectors.	1
functions, etc. are implemented	1
functions, inline assembly or	1
functions, trigonometric functions, etc.	2
functions, classes, templates or	1
whole program by turning	1
whole program optimization or	1
whole program optimization Some	1
whole program optimization. This	1
whole program optimization. 2.4	1
whole program execution, even	1
whole program optimization, which	1
whole program 81 optimization	1
whole loop will take	1
whole software project together	1
whole software package, including	1
whole structure of the	1
whole program. During the	1
whole polygon or bitmap	1
whole workday or more.	1
inefficient to use an	1
inefficient to use 32-bit	1
inefficient in large applications.	1
inefficient if the list	1
inefficient if a program	1
inefficient when the floating	1
inefficient because the compiler	1
inefficient because the body	1
inefficient because of the	1
inefficient because it is	1
inefficient virtual function dispatch	1
inefficient way. The Codeplay	1
inefficient way. See page	1
inefficient solution. Many containers	1
inefficient code-based methods or	1
level-2 cache is 512	2
level-2 cache of 256	1
level-2 cache and the	1
level-2 cache are so	1
level-2 cache as when	1
level-2 cache from loading	1
level-2 cache because the	1
level-2 cache cannot prefetch	1
level-2 cache contentions than	1
level-2 cache contentions will	1
level-2 cache miss can	1
level-2 cache. The level-2	1
level-2 cache. This has	1
level-2 cache. Using the	1
response is delayed for	1
response to pressing a	1
response time is so	1
response time is consistent	1
response time to user	1
response time to e.g.	1
response time under worst-case	1
response from a hard	1
response times to simple	1
response times to keyboard	1
response times for user	1
response times for simple	1
response times for network	1
response times. It is	1
response times, even for	1
described a mechanism called	1
described in the Gnu	1
described in the subsequent	1
described in the sections	1
described in the book	1
described in this chapter.	1
described in more detail	1
described in chapter 12.	1
described in chapter 11.	1
described in detail in	1
described on page 153.	1
described some of the	1
described above can still	1
described below. The program	1
described below. Make calls	1
2. The compiler has	1
2. The instruction add	1
2. The following example	1
2. The result is	1
2. Example: // Example	2
2. Use the latest	1
2. Using hexadecimal numbers,	1
2. (See page 71).	1
2. Optimizing subroutines in	1
2. Position-independent code. All	1
2. Objects bigger than	1
2. Contentions in the	1
2. Check that all	1
2. Put the function	1
variables. The negative effects	1
variables. This includes pointers	1
variables. A positive overflow	1
variables. It is important	1
variables. In these examples	1
variables. See chapter 10	1
variables. Example: // Example	1
variables. All global variables	1
variables. (See thread-local storage	1
variables. Vector operations are	1
variables. Obviously, this is	1
variables. They can be	1
variables. 9.5 Alignment of	1
variables. 31 7.3 Floating	1
variables. Move the conversions	1
lines is 8*1024/64 =	1
lines to use for	1
lines and sets. Let	1
lines in the set	1
lines in a 512	1
lines in set number	1
lines in each set.	1
lines in column 28	1
lines for matrix a:	1
lines are organized as	1
lines from set 0x1C.	1
lines should be split	1
lines we used above	1
lines follow the rows,	1
lines belong to the	1
hot spots and measuring	1
hot spots in the	2
hot spots have been	1
hot spots Before you	1
hot spots .................................................................................. 16	1
hot spot and make	1
hot spot that uses	1
hot spot has been	1
hot spot but also	1
hot spot. Use the	1
hot spot. Sometimes, the	1
hot spot. Repeating the	1
hot spots, but for	1
hot spots. The test	1
Unfortunately, the compiler cannot	1
Unfortunately, the CPU detection	1
Unfortunately, the way of	1
Unfortunately, the standard libraries	1
Unfortunately, the syntax is	1
Unfortunately, the syntax described	1
Unfortunately, the cross-platform compatibility	1
Unfortunately, this method doesn't	1
Unfortunately, many standard container	1
Unfortunately, some compilers unroll	1
Unfortunately, table lookup is	1
Unfortunately, these functions are	1
Unfortunately, few compilers are	1
Unfortunately, profilers are often	1
Unfortunately, contemporary operating systems	1
v. 8.42n, 2004. Open	1
v. 11.1 for IA-32/Intel64,	1
v. 10.1.020. Functions _intel_fast_memcpy	1
v. 3.1, 2007. PGI	1
v. 4.5.2, July 2011).	1
v. 9.0 CodeGear Borland	1
v. 1.4, 2005. Codeplay	1
v. 7.2). This library	1
v. 5.5 Mac: Darwin8	1
v. 2.00. Intel C++	1
v. 2.1.7, 2004. No	1
v. 14.00 for 80x86	1
v. 4.1.0, 2006 (Red	1
v. 2.7, 2.8. Asmlib:	1
v. 7.1-4, 2008. Digital	1
operation is performed on	2
operation in the application	1
operation that crashes the	1
operation can often be	1
operation on such processors	1
operation will be non-zero,	1
operation will then be	1
operation which is much	1
operation using the |	1
operation takes 5 clock	1
operation rather than reading	1
operation doesn't delay the	1
operation was split into	1
operation isolates the least	1
code, as the example	1
code, as explained on	1
code, as described in	1
code, you may consider	1
code, then you may	1
code, which is the	1
code, which supposedly is	1
code, but this makes	1
code, but there are	1
code, cache misses and	1
code, so you will	1
code, specific preferences for	1
code, see below. Installing	1
code, including user interface	1
code, interpreters, just-in-time compilers,	1
instance of the data	1
instance of the class	1
instance of the library	1
instance of the template	1
instance of the class.	1
instance of a polymorphic	1
instance of S1 in	1
instance in main will	1
instance for each set	1
instance for each process	1
instance for each thread.	2
instance for each process.	1
instance then you may	1
instance has its parameters	1
comes to optimization, it	1
comes to mind. In	1
comes with the compiler,	1
comes with most modern	1
comes with most distributions	1
comes with some of	1
comes on the market.	1
comes when a function	1
comes from a reliable	1
comes from testing. Here,	1
comes at a high	1
comes only in the	1
comes before the compiler	1
comes first when you	1
comes automatically. There is	1
fact that the floating	1
fact that the Intel	1
fact that the repeat	1
fact that the representation	1
fact that n is	1
fact be less than	1
fact it does not,	1
fact by replacing a	1
fact an integer that	1
fact only 64-bit execution	1
fact using each bit	1
fact accessed through pointers	1
fact doing the same	1
fact represented as two	1
fact addressed relative to	1
find the one that	1
find the address of	1
find the first byte	1
find the best algorithm.	1
find the optimal decomposition	1
find the right function	1
find the GOT through	1
find the answers in	1
find and resolve compatibility	1
find more examples of	1
find out which one	1
find out whether it	1
find hot spots Before	1
find hot spots ..................................................................................	1
find elsewhere. Faster than	1
rely on the compiler	2
rely on the strict	1
rely on the assumption	1
rely on is the	1
rely on a unit-test	1
rely on compiler optimization	1
rely on only the	1
rely on static or	1
rely on instructions that	1
rely on automatic vectorization.	1
rely on automatic prefetching	1
rely on anything else	1
rely on longjmp in	1
rely heavily on table	1
No function or class	1
No time is wasted	1
No memory will be	1
No program should leave	1
No cache contentions. Use	1
No error return a[i];	1
No stack frame /Oy	1
No exception handling /EHs-	1
No information about the	1
No runtime type identification	1
No link pointer can	1
No general statement can	1
No loop-carried dependency chain.	1
No differences were observed	1
No universal solution is	1
produce the same code	1
produce the same result.	1
produce the optimal code	1
produce a single result,	1
produce no other value	1
produce any extra code	1
produce any extra code.	2
produce less optimal code	1
produce 32 results when	1
produce Boolean output. The	1
produce binary code). Supports	1
produce tables of mathematical	1
produce undesired results. Integer	1
produce streaming audio or	1
position-independent code is smaller	1
position-independent code and table	1
position-independent code and lazy	2
position-independent code by default.	1
position-independent code when you	1
position-independent code Function libraries	1
position-independent code flag in	1
position-independent code ....................................................... 20	1
position-independent code everywhere by	1
position-independent code (option -fno-pic).	1
position-independent has the following	1
position-independent because this is	1
position-independent code. These workaround	1
position-independent code. 147 14.12	1
vectorization will be advantageous	1
vectorization then follow the	1
vectorization const int size	1
vectorization less favorable: Larger	1
vectorization (see page 107).	1
vectorization (see page 107),	1
vectorization works best if	1
vectorization Automatic paralleli- zation	1
vectorization is. Factors that	1
vectorization ......................................................................................... 107 12.4	1
vectorization leads to suboptimal	1
vectorization Not all code	1
vectorization Devirtualization ---x----- x	1
vectorization favorable: Small data	1
vectorization Good compilers such	1
including the library libmmt.lib	1
including the 64-bit versions.	1
including the while loop,	1
including the profiler itself.	1
including the terminating zero	2
including the ability to	1
including a header file	1
including an IDE. Does	1
including all runtime libraries	1
including 32-bit and 64-bit	1
including user interface etc.,	1
including local data that	1
including linear algebra and	1
including relaxed floating point	1
checking is explained below	1
checking is included for	1
checking and is therefore	1
checking and various efficient	1
checking for array bounds	1
checking for overflow, and	1
checking if b[i] and	1
checking all the array	1
checking multiple values at	2
checking In C++, it	1
checking how well the	1
checking template <typename T,	1
checking (see page 134)	1
checking .................................................................................................. 134 14.3	1
out-of-order execution and advanced	1
out-of-order execution mechanism can	1
out-of-order execution mechanism works	1
out-of-order mechanism allows the	1
out-of-order capabilities of modern	1
out-of-order capabilities are very	1
out-of-order capabilities can overlap	1
out-of-order capabilities (see page	1
out-of-order execution. The most	1
out-of-order execution. This means	1
out-of-order execution. It is	1
out-of-order execution. There is	1
out-of-order execution, as explained	1
out-of-order execution, you have	1
platforms and the possibility	1
platforms and other compiled	1
platforms and operating systems	1
platforms and various programming	1
platforms that use big	1
platforms or multiple configurations	1
platforms if the bias	1
platforms with Windows, Linux,	1
platforms with big-endian storage.	1
platforms as well, but	1
platforms as shown in	1
platforms because it doesn't	1
platforms By Agner Fog.	1
platforms (Windows, Linux, BSD,	1
particularly time consuming. Sometimes	1
particularly critical because they	1
particularly useful performance monitor	1
particularly important on small	1
particularly fast on newer	1
particularly slow instruction that	1
particularly slow implementations of	1
particularly critical. A very	1
particularly critical. 129 13.7	1
particularly bad on a	1
particularly problematic because there	1
particularly interesting because it	1
particularly risky because it	1
particularly tricky. I have	1
given a false model	1
given a name. #define	1
given in the following	1
given in example 14.19	1
given in manual 5:	1
given in www.agner.org/optimize/cppexamples.zip. An	1
given in advance. The	1
given on page 136	1
given as a template	1
given instruction set. The	1
given below. The time	1
given here may apply	1
given task is often	1
given above. 7. If	1
output of the first	1
output of a compiler	1
output are unacceptable. Each	1
output can often reveal	1
output can produce no	1
output more readable but	1
output should be measured	1
output option is also	1
output option then use	1
output after the test	1
output goes to the	1
output file. A console	1
output listing to see	1
output (/FAs or -fsource-asm).	1
level-1 and the level-2	1
level-1 data cache is	1
level-1 data cache of	1
level-1 data cache and	1
level-1 data cache, where	1
level-1 cache is used	1
level-1 cache are less	1
level-1 cache may not	1
level-1 cache from the	1
level-1 cache contentions is	1
level-1 cache size. This	1
level-1 cache. The different	1
level-1 cache. The advantage	1
level-1 cache. We can	1
resources. The system is	1
resources. This time is	1
resources. In this case	1
resources. There are various	1
resources. For example, a	1
resources. For these reasons,	1
resources. But it can	1
resources. However, the CISC	1
resources. Most of the	1
resources. Each graphics operation	1
resources. On the smallest	1
resources. Modern CPUs are	1
resources. Typically, a specific	1
resources. Consider running the	1
outside the loop or	1
outside the loop if	1
outside the loop without	1
outside the critical innermost	1
outside the innermost loop	1
outside the innermost loop.	1
outside the loop. In	1
outside the loop. Most	1
outside the bounds of	1
outside the loop: //	1
outside of any function	1
outside this interval, for	1
outside any function) should	1
outside both loops //	1
task is often determined	1
task is divided into	1
task of the program.	1
task in question. For	1
task that takes a	1
task that consumes most	1
task or thread are	1
task when the CPUID	1
task into a separate	1
task must have a	1
task switch occurs during	1
task switches and garbage	1
task switching. This cost	1
task switches; so that	1
limited is to do	1
limited to well-tested functions,	1
limited and there are	1
limited in scope. A	1
limited by the throughput	1
limited by the latency	1
limited by physical factors.	1
limited number of possible	1
limited number of variables	1
limited range then a	1
limited resources. Most of	1
limited resource. The CISC	1
limited "express" edition is	1
limited audience for educational	1
vectorized if the code	1
vectorized if you take	1
vectorized with the current	1
vectorized with SSE4.1 //	1
vectorized code or not.	1
vectorized code when the	1
vectorized code should therefore	1
vectorized as intended (see	1
vectorized as follows (using	1
vectorized table lookup Using	1
vectorized table lookup. These	1
vectorized code. Storing something	1
vectorized #include <dvec.h> //	1
vectorized automatically. For example,	1
sometimes be replaced by	1
sometimes be avoided by	1
sometimes be obtained by	1
sometimes be eliminated completely.	1
sometimes it does incredibly	1
sometimes have unacceptably long	1
sometimes more efficient than	2
sometimes possible to obtain	1
sometimes take more time	1
sometimes uses 32-bit absolute	1
sometimes able to predict	1
sometimes give misleading results	1
sometimes unacceptably long. Lazy	1
local A function that	1
local data that don't	1
local object is overwritten,	1
local object static then	1
local objects are called.	1
local variables and therefore	1
local variables in registers	1
local const variable means	1
local name for local	1
local variable. This is	1
local references. If we	1
local references. Shared objects	1
local variables, and for	1
local non-member functions. 80	1
costs of this bookkeeping	1
costs of software development,	1
costs of dynamic memory	1
costs of optimizing ...............................................................................................	1
costs of optimizing University	1
costs of position-independent code.	1
costs to other parts	1
costs to such a	1
costs to multithreading that	1
costs in terms of	2
costs are higher for	1
costs can be justified	1
costs if it is	1
S1 in the array	1
S1 { int a;	1
S1 { double b;	1
S1 { float a,	1
S1 { short int	1
S1 aligned // Structure	1
S1 x, y; ...	1
S1 list[100]; int i;	1
S1 {double a; double	2
S1 ArrayOfStructures[100]; This reordering	1
S1 ArrayOfStructures[100]; Here, there	1
S1 list[size]; int i,	1
S1 list[100], *temp; for	1
math is required for	1
math and the SSE	1
math function library with	1
math function libraries available.	1
math functions should work	1
math functions such as	1
math library (SVML). This	1
math library (VML, MKL).	1
math core library contains	1
math libraries. The Gnu	1
math allow addition of	1
math libraries: Intel vector	1
math libraries: Intel short	1
math libraries: long vector	1
temp a register variable	1
temp in one iteration	1
temp in memory. This	1
temp = b *	1
temp = a[i] +	1
temp = 3; for	1
temp = a+1; b	1
temp * temp; c	1
temp * temp; 104	1
temp < &list[100]; temp++)	1
temp before it is	1
temp even though the	1
temp += 9; }	1
temp / 4; Register	1
inlined for improved performance.	1
inlined or cannot be	1
inlined function and the	1
inlined function for the	1
inlined if the inline	1
inlined by declaring the	1
inlined - no need	1
inlined functions may not	1
inlined so that the	1
inlined even when it	1
inlined function. The static	1
inlined function. Function inlining	1
inlined automatically by the	1
inlined 15.1b and the	1
still the same regardless	1
still the fastest way	1
still be in the	1
still be used if	1
still be vectorized, but	1
still have a niche	1
still take 10 clock	1
still want to get	1
still uses a GOT.	1
still run on a	1
still needs careful optimization.	1
still give a considerable	1
still consumes a lot	1
still frustrated by unacceptably	1
class. The static keyword	1
class. The container class	1
class. The child class	1
class. The transfer of	1
class. This is only	1
class. This makes data	1
class. This check makes	1
class. It makes a	1
class. Make the function	1
class. Data members of	1
class. Calling a member	1
class. Storing variables in	1
class. Which solution you	1
class. Members of parent	1
database is heavily loaded.	1
database in the Windows	1
database in Windows. It	1
database for storing user	1
database can consume a	1
database by a plain	1
database It can take	1
database access. 3.10 Graphics	1
database ...................................................................................................... 20 3.9	1
database anyway if you	1
database connections. Open files	1
database integration, web application	1
database queries is beyond	1
database connections, etc. The	1
constants is very fast	1
constants and floating point	1
constants in the entire	1
constants that are never	1
constants are double precision	1
constants are stored in	1
constants are usually included	1
constants are defined with	1
constants are identical so	1
constants can be replaced	1
constants will be replaced	1
constants because it can	1
constants we can define	1
constants Sunday, Monday, etc.	1
bool is used as	1
bool in order to	1
bool a, b; b	1
bool a, b, c,	2
bool b; a =	1
bool b; if (b)	2
bool 1 1 char,	1
bool a; float x,	1
bool b) { if	4
Do not use the	1
Do not use a	2
Do not use one	1
Do not use lookup	1
Do not use STL	1
Do not make a	1
Do not make variables	1
Do not read or	1
Do not turn on	1
Do not mix single	1
Do not swap the	1
Do objects have a	1
Do objects have mixed	1
frame is used for	1
frame function is a	1
frame function can be	1
frame function or by	1
frame function because the	1
frame function into a	1
frame functions for reasons	1
frame functions then the	1
frame makes function calls	1
frame functions. A frame	1
frame functions. While an	1
frame unless your program	1
frame function, while a	1
frame /Oy -fomit- frame-	1
== 2 // make	1
== 2 #define FUNCNAME	1
== 2 12.6 Transforming	1
== 8 #define FUNCNAME	1
== 5 #define FUNCNAME	1
== 0) { //	1
== 0) { if	1
== 0) { d	1
== 0) { FuncA(i);	1
== 0) ? 1.0f	1
== Wednesday || Day	1
== EXCEPTION_FLT_OVERFLOW ? EXCEPTION_EXECUTE_HANDLER	1
== Friday) { DoThisThreeTimesAWeek();	1
== Tuesday || Day	1
d; a = b	1
d; // 2 bytes.	1
d; // makes intermediate	1
d; // 4 bytes.	1
d; if (a !=	1
d; This expression is	1
d; int i[2]; }	1
d; unsigned int u[2]}	1
d; c = a	2
d; }; void Func()	1
d; d = u;	1
d; d = (double)(signed	2
special vector registers. The	1
special loop predictor. On	1
special cache called the	1
special cases such as	1
special cases where the	1
special versions of the	1
special feature that the	1
special position-independent code is	1
special reasons to use	1
special purposes are also	1
special purpose libraries are	1
special trick which is	1
special precautions for speeding	1
special mathe- matical applications.	1
prevent the compiler from	2
prevent the CPU from	1
prevent it from fully	1
prevent this kind of	1
prevent memory leaks and	1
prevent cache contention. You	1
prevent two threads from	1
prevent such errors is	1
prevent such errors in	1
prevent such errors. See	1
prevent optimizing // Time	1
prevent optimization. The debugger	1
prevent legitimate backup copying	1
shift and add Divide	1
shift in software writing	1
shift out the sign	2
shift out sign bit:	1
shift operations take only	1
shift Floating point algebra	1
shift operation which is	1
shift right = divide	1
shift operations. Multiplying by	1
shift down sign bit	1
shift operation. For example,a	1
shift operation. x*8 is	1
shift operation, which is	1
destructor the object has	1
destructor is as efficient	2
destructor is called when	1
destructor of x. This	1
destructor to make sure	1
destructor to call or	1
destructor for the object	1
destructor that makes sure	1
destructor that needs to	1
destructor that destroys any	1
destructor if it is	1
destructor by constructing the	1
destructor causes another exception.	1
save a lot of	1
save by avoiding the	1
save time for the	1
save one unit of	1
save cache space or	1
save some information for	1
save time. The code	1
save several clock cycles.	1
save exception handling information.	1
save temp in memory.	1
save RAM space, if	1
save ebx on stack	1
save power. There are	1
save recovery information for	1
prevents the compiler from	5
prevents the use of	1
prevents the CPU from	2
prevents the level-2 cache	1
prevents a faster vectorized	1
prevents it from making	1
prevents all optimizations on	1
prevents certain optimizations. Do	1
prevents out-of-order execution. It	1
preceding one is called	1
preceding one (see page	1
preceding value of sum.	1
preceding example, this is	1
preceding branches and the	1
preceding addition is finished.	1
preceding addition then you	1
preceding iteration is finished.	1
preceding label plus one,	1
preceding one. This prevents	1
preceding one. You can	1
preceding paragraph and manual	1
preceding paragraph described a	1
preceding row. The same	1
safe to use algebraic	1
safe to make a	1
safe to do the	1
safe and flexible, but	1
safe if it has	1
safe if multiple threads	1
safe if there are	2
safe than the C-style	1
safe way to handle	1
safe way in case	1
safe programming practice, of	1
safe unless the length	1
safe formula a[i] =	1
d in assembly language	1
d = a |	1
d = a ||	1
d = 0; }	1
d = 1; }	1
d = u; If	1
d = x- x-	1
d = ((a*x+b)*x+c)*x+d x*x*x*x*x*x*x*x	1
d = (double)(signed int)u;	2
d = 1.6; int	1
d + 3.5; Here,	1
d + e +	1
d would all be	1
Choice of function libraries	1
Choice of function libraries........................................................................................	1
Choice of compiler There	1
Choice of compiler ....................................................................................................	1
Choice of operating system	1
Choice of operating system.........................................................................................	1
Choice of user interface	2
Choice of programming language	2
Choice of hardware platform	2
Choice of microprocessor The	1
Choice of microprocessor ...........................................................................................	1
tell the compiler to	2
tell the compiler that	4
tell the compiler not	1
tell the compiler e.g.	1
tell the compiler explicitly	1
tell a hyperthreading processor	1
tell it this by	1
tell how many times	1
tell these compilers that	1
tell explicitly what kind	1
Pentium 4 and AMD	1
Pentium 4 with different	1
Pentium 4 computer where	1
Pentium 4 processors, and	1
Pentium 4 processor. Extra	1
Pentium 4 computer. The	1
Pentium 4 (NetBurst) CPU	1
Pentium CPUs which may	1
Pentium 4, while all	1
Pentium 4. The if	1
Pentium 4. The reason	1
Pentium 4. Even worse,	1
Pentium M processor may	1
Pentium Pro instruction set	1
further if the loop	1
further by using function	1
further explained in the	1
further tested and investigated	1
further described in the	1
further discussion of the	2
further discussion of this	1
further discussion of system	1
further optimizations. Loops with	1
further explanation. The following	1
further discussion. Integer to	1
further expansions of the	1
further extension of vector	1
Assume that the numbers	1
Assume that a function	1
Assume that a program	1
Assume that a loop	1
Assume that you have	1
Assume function is pure	1
Assume function called only	1
Assume function does not	1
Assume no pointer aliasing	1
Assume no pointer aliasing.	1
Assume pointer is aligned	1
Assume pointer not aliased	1
Assume member function called	1
Assume now that we	1
efficiency is obtained when	1
efficiency is important. A	1
efficiency is reflected, first	1
efficiency of the data	1
efficiency of the final	1
efficiency of a loop	1
efficiency of different C++	3
efficiency of 32-bit integers	1
efficiency and code size	1
efficiency by using rounding	1
efficiency then it is	1
efficiency lies in the	1
repeat the above example	1
repeat or to exit	1
repeat loop if true	1
repeat count is not	1
repeat count is large	1
repeat count is small	1
repeat count is near	1
repeat count is mispredicted	1
repeat count is odd	1
repeat count and the	1
repeat count and no	1
repeat count and always	1
repeat count may be	1
repeat count has been	1
unroll the loop and	1
unroll the loop further	1
unroll a loop and	1
unroll a loop automatically	1
unroll a loop manually	1
unroll a loop. Example:	1
unroll by two then	1
unroll option in the	1
unroll too much. Excessive	1
unroll loops if a	1
unroll factor. A little	1
unroll factor. If not,	1
unroll factor. For example,	1
unroll factor. Loop unrolling	1
calls. The Gnu compiler	1
calls. The best performance	1
calls. The calculation of	1
calls. The usability may	1
calls. The principle of	1
calls. The consequence of	1
calls. It is recommended	1
calls. If the bottleneck	1
calls. There are three	1
calls. Example: // Example	1
calls. These are of	1
calls. Unfortunately, the compiler	1
calls. 48 Use macros	1
calls. Internal references to	1
algorithm is used inside	1
algorithm is very important	1
algorithm of sequential instructions,	1
algorithm in question. You	1
algorithm in question: Put	1
algorithm The first thing	1
algorithm that comes to	1
algorithm can do the	1
algorithm if a simple	1
algorithm with template metaprogramming,	1
algorithm than by optimizing	1
algorithm before you start	1
algorithm (e.g. Quine–McCluskey or	1
algorithm ....................................................................................... 24 6	1
sum of a long	1
sum of 100 numbers:	1
sum = 0; for	2
sum = 0; int	1
sum = 1.f; float	1
sum = (s0+s1)+(s2+s3); Now	1
sum += xn /	1
sum += a[i]; The	1
sum += a[i]; Converting	1
sum += list[i]; This	1
sum operator // add	1
sum depends on the	1
sum for(inti=0;i<16;i+=4){ //Loopby4 s	1
strings is the old	1
strings of different lengths	1
strings and similar objects	1
strings in the old	1
strings in a memory	2
strings in one memory	1
strings in classes like	1
strings in character arrays	1
strings are particularly problematic	1
strings typically have variable	1
strings including the terminating	2
On the other hand,	4
On the smallest devices,	1
On the contrary, the	1
On the contrary, you	1
On the contrary, each	1
On other processors, only	1
On most compilers you	1
On many processors, a	1
On big endian systems	1
On older processors, a	1
exponent is a positive	1
exponent is an integer	1
exponent is stored as	1
exponent is always normalized,	1
exponent is biased allows	1
exponent if there is	1
exponent } Example 14.26	1
exponent + 0x3FF unsigned	1
exponent + 0x3FFF unsigned	1
exponent + 0x7F unsigned	1
exponent : 8; //	1
exponent : 15; //	1
exponent : 11; //	1
Linux, the first six	1
Linux, 32-bit and 64-bit.	1
Linux, Mac Windows, Linux,	1
Linux, BSD and Mac	4
Linux, BSD or Mac	1
Linux, BSD, Windows and	1
Linux, BSD, Intel-based Mac	1
Linux, sched_setaffinity). The program	1
Linux, Mac, BSD Instruction	1
Linux, Gnu/AT&T syntax: __asm	1
possibility is to always	1
possibility is to compile	1
possibility of using the	1
possibility of compiling multiple	1
possibility of algebraic reduction.	1
possibility of overflow. Table	1
possibility for other optimizations,	1
possibility for further optimizations.	1
possibility for significant improvements.	1
possibility that the function	1
possibility that the variable	1
possibility that a particular	1
possibility that such contrived	1
discussion of the advantages	1
discussion of the increment	1
discussion of the techniques	1
discussion of this problem.	1
discussion of this method.	1
discussion of different algorithms	1
discussion of efficient container	1
discussion of system code.	1
discussion of container classes	1
discussion of aligning dynamically	1
discussion of profiling. When	1
discussion that the choice	1
discussion forums on the	1
conditions is not met	1
conditions in a single	1
conditions in a graceful	1
conditions in order to	1
conditions that make it	1
conditions are listed on	1
conditions are optimal. Best-case	1
conditions are met: the	1
conditions are satisfied. The	1
conditions are satisfied: 1.	1
conditions which are implemented	1
conditions using & enum	1
conditions enum Weekdays {	1
non-Intel processors can be	1
non-Intel processors (see page	1
non-Intel CPUs in a	2
non-Intel CPUs was more	1
non-Intel CPUs unless you	2
non-Intel processor makes the	1
non-Intel CPUs. Includes many	1
non-Intel CPU. If not,	1
non-Intel processors, as explained	1
non-Intel machines? Possible solutions	1
non-Intel processors). It has	1
it. The load time	1
it. The insight you	1
it. This is inefficient	1
it. A dynamic library	1
it. In C++ template	1
it. There are situations	1
it. I am using	1
it. I am giving	1
it. Therefore, you should	1
it. Global variables may	1
it. Possible solutions are:	1
it. Instead of returning	1
it. Complicated code is	1
(See page 130 for	1
(See page 49 and	1
(See page 137 about	1
(See page 71). The	1
(See page 137). The	1
(See page 81). 77	1
(See also page 119).	1
(See manual 3: "The	4
(See thread-local storage p.	1
(See Sutter: A Pragmatic	1
registers. The vector class	1
registers. The first processors	1
registers. The maximum size	1
registers. This problem has	1
registers. A class member	1
registers. It may not	1
registers. 64-bit Unix systems	1
registers. There are eight	1
registers. You need to	1
registers. Example: // Example	1
registers. Disadvantages are: Long	1
registers. Except for the	1
registers. Typical candidates for	1
maximum of four parameters	1
maximum loop count that	2
maximum size of each	1
maximum number of integer	1
maximum number of floating	1
maximum number of constants	1
maximum possible memory requirement.	1
maximum value in stdint.h	1
maximum advantage of out-of-order	1
maximum repeat count and	2
maximum value. There is	1
mode. The first two	1
mode. The next chapter	1
mode. The latter is	1
mode. The 32- bit	1
mode. A conversion from	1
mode. If there are	1
mode. See the manual	1
mode. Some 64-bit compilers	1
mode. Therefore, the __fastcall	1
mode. Make functions local	1
mode. 16-bit mode is	1
mode. Storing the parameters	1
mode. Much of the	1
per array element. Matrix	1
per element for a	1
per element Example 9.6a	1
per element Example 9.6b	1
per element 63 63	1
per matrix cell for	1
per byte of data	1
per vector. The simplest	1
per vector. You may	1
per row is a	1
per element. The table	1
per element. 100 As	1
per point. This does	1
testing is useful because	1
testing a condition is	1
testing and maintenance -	1
testing and maintenance easier.	1
testing and analyzing program	1
testing which version of	1
testing all bits except	1
testing multiple conditions in	1
testing single assembly instructions	1
testing contains debug information	1
testing Most performance tests	1
testing worst-case performance: The	1
testing ................................................................................................ 157 17	1
alignment is not visible	1
alignment of arrays and	1
alignment of structure and	1
alignment to addresses divisible	1
alignment and the resultant	1
alignment and aliasing. Operations	1
alignment can cause holes	1
alignment by 16 is	1
alignment problem void AddTwo(int	1
alignment problems. It is	1
alignment explicitly by writing:	1
alignment automatically. The alignment	1
alignment requirements are less	1
right in order to	1
right = divide by	1
right function for a	1
right from the beginning	1
right data into the	1
right vector elements. 12.1	1
right version of the	3
right prediction. The time	1
right format and getting	1
right formula in each	1
right positions in the	1
offset of the member	1
offset of the child	1
offset of a data	1
offset of b is	1
offset that is coded	1
offset can be expressed	1
offset as a 32-bit	1
offset at all. This	1
offset has to be	1
offset table (GOT). These	1
offset table (GOT) in	1
offset bigger than 127	1
offset relative to the	1
compatibility is not always	1
compatibility with a lineage	1
compatibility with some legacy	1
compatibility with old CPUs	1
compatibility with older microprocessors	1
compatibility with existing systems	1
compatibility with legacy code,	1
compatibility problems and they	1
compatibility problems and system	2
compatibility problems into account	1
compatibility problems. Software developers	1
compatibility problems, usability problems	1
macro is referencing it	1
macro to swap two	2
macro in the sense	1
macro for aligning data	1
macro by template template	1
macro as inline function	1
macro will interfere with	1
macro so that each	1
macro parameters are evaluated	1
macro declared with #define	1
macro INSTRSET is used	1
macro expansions. Programmers do,	1
bytes. The time it	1
bytes. This makes sure	1
bytes. first // 4	2
bytes. first // 6	1
bytes. first byte at	5
bytes. Some CPUs have	1
bytes. Each line covers	1
bytes. 7.19 Class member	1
object. The compiler can	1
object. The allocation of	1
object. The calling function	1
object. This so-called symbol	1
object. A little-known alternative	1
object. It is possible	1
object. If the object	1
object. There is no	1
object. Make the function	1
object. Any copy constructor	1
object. Obviously, all these	1
object. Likewise, when a	1
object. 7.17 Structures and	1
100 and jumps back	1
100 in the loop	1
100 floating point operations	1
100 * 5 *	1
100 clock cycles. The	1
100 so that it	1
100 rather than -156.	1
100 / jl $B1$2	1
100 As table 9.3	1
100 floats for (int	1
100 numbers: // Example	1
100 $B1$2 ebx ;	1
100 doubles: union {double	1
Note the difference between	2
Note that the CPU	1
Note that the Intel	2
Note that the system	1
Note that the dispatcher	1
Note that the C	1
Note that there are	1
Note that these methods	1
Note that these directives	1
Note that volatile doesn't	1
Note how efficient the	1
them to apply to.	1
them for the sake	1
them as integers: //	1
them into the right	1
them into the executable	1
them into a place	1
them into one thread.	1
them static if they	1
them off or until	1
them again takes extra	1
them separately with the	1
them all. In the	1
them enabled (there is	1
writing a variable from	1
writing a file on	1
writing a small bit	1
writing to the same	2
writing to a variable	1
writing to uncached memory	1
writing from the same	1
writing data files while	1
writing big blocks is	1
writing small bits in	1
writing data. Multidimensional arrays	1
writing style are that	1
library. The application program	1
library. The radical solution	1
library. This method is	1
library. A runtime DLL	1
library. It requires support	1
library. If the application	1
library. If you want	1
library. Supports x86 and	1
library. Open source. Supports	1
library. Add to this	1
library. Only available for	1
library. 119 The function	1
library. 78 Therefore, it	1
struct { int a:4;	1
struct S1 { int	1
struct S1 { double	1
struct S1 { float	1
struct S1 { short	1
struct S1 {double a;	2
struct abc {int a;	1
struct Bitfield { int	1
struct Sab {int a;	1
struct Sdouble { unsigned	1
struct Slongdouble { unsigned	1
struct Sfloat { unsigned	1
calculations. The code in	1
calculations. The time it	1
calculations. The program can	1
calculations. The loop branch	1
calculations. This should be	1
calculations. It is important	1
calculations. It is necessary	1
calculations. In other programs,	1
calculations. In such cases,	1
calculations. In some cases	1
calculations. Even with all	1
calculations. Division of a	1
calculations. Examples are image	1
operand is not evaluated	1
operand is not evaluated,	1
operand is more predictable	1
operand is faster to	1
operand is evaluated only	1
operand is infinity or	1
operand is valid. For	1
operand of && is	1
operand of || is	1
operand that is most	1
operand that is calculated	1
operand first. If one	1
operand determines whether the	1
reduced to 2 by	1
reduced to always true	1
reduced from 20 to	1
reduced number of cores	1
reduced performance on CPUs	1
reduced performance on non-Intel	2
reduced speed or not	1
reduced performance. 25 Since	1
reduced to: // Example	1
reduced 15.1b to 15.1c,	1
reduced 15.1a to an	1
reduced 15.1a to 15.1c).	1
cycles. The reason is	1
cycles. The core clock	1
cycles. The rules for	1
cycles. It may in	1
cycles. If you cannot	1
cycles. In most cases	1
cycles. You can improve	1
cycles. You cannot assume	1
cycles. But if all	1
cycles. Floating point comparisons	1
cycles. Obviously, the initial	1
cycles. Division takes 14	1
cycles. Calculations in a	1
final program and whether	1
final size cannot be	1
final size needed before	1
final array size right	1
final version of the	1
final value of the	1
final result to see	1
final result will be	1
final program. This requires,	1
final application depends on	1
final program, it is	1
final product. It is	1
final destination, but don't	1
sake of the possibility	1
sake of compatibility with	2
sake of optimization. 14	1
sake of parallel execution.	1
sake of fastest possible	1
sake of portability to	1
sake of backwards compatibility	1
sake of efficiency. Using	1
sake of security. b	1
sake of cross-platform portability.	1
sake of modularity. For	1
sake of security, but	1
operations. The most common	1
operations. The total size	1
operations. This can be	1
operations. A complex digital	1
operations. It can be	1
operations. You may choose	1
operations. You should use	1
operations. All you have	1
operations. When an integer	1
operations. Algorithms that rely	1
operations. 7.6 Pointers and	1
operations. 105 The vector	1
operations. Multiplying by a	1
When the function is	1
When the program is	1
When the floating point	1
When the most time-consuming	1
When the critical function	1
When a hot spot	1
When an integer is	1
When you look at	1
When used simply to	1
When we add a	1
When we reach element	1
When accessing a variable	1
When considering whether a	1
tasks in a multitasking	1
tasks that are running	1
tasks are available from	1
tasks on current Intel	1
tasks because this would	1
tasks into multiple threads.	1
tasks into separate threads	1
tasks such as copying	1
tasks such as sorting	1
tasks such as spell-checking	1
tasks such as sorting,	1
tasks like pressing a	1
tasks were not divided	1
Avoid the function scanf.	1
Avoid the use of	1
Avoid the conversions by	1
Avoid an excessive number	1
Avoid multiple inheritance, virtual	1
Avoid table lookup at	1
Avoid long dependency chains,	1
Avoid virtual functions if	1
Avoid branches at the	1
Avoid global and static	1
Avoid conversions between integers	1
Avoid unnecessary functions Some	1
Avoid nested function calls	1
effect is so much	1
effect is much more	1
effect is simply identical.	1
effect of the keyword	1
effect of the const_cast	1
effect of dependency chains	1
effect of nontemporal write	1
effect can be illustrated	1
effect with templates instead	1
effect on the execution	1
effect on the total	1
effect on performance. 7.18	1
effect on older processors	1
amount of code and	1
amount of memory used.	1
amount of memory space	1
amount of memory needed	1
amount of memory required	1
amount of cache space	1
amount of time. The	1
amount of time. A	1
amount of work into	1
amount of necessary communication	1
amount of space on	1
amount of RAM memory	1
amount of RAM, a	1
variable. The compiler can	1
variable. The different threads	1
variable. The register keyword	1
variable. The union forces	1
variable. This is efficient	1
variable. This can be	1
variable. For example, a	1
variable. Example: // Example	1
variable. Most compilers will	1
variable. Using pointers makes	1
variable. Make sure the	1
variable. (This eliminates the	1
variable. Efficiency Accessing a	1
time, of course, but	1
time, it also makes	1
time, then the code	1
time, then the solution	1
time, but the program	1
time, but not the	1
time, but also inconvenient	1
time, but expensive if	1
time, such as heavy	1
time, any processor that	1
time, RAM and disk	1
time, except for some	1
time, usability, program compactness,	1
Variables and objects are	1
Variables and objects should	1
Variables and objects declared	1
Variables that are used	3
Variables that are stored	1
Variables that are members	1
Variables that are declared	1
Variables stored on the	1
Variables declared inside a	2
Variables whose distance in	1
copying the code that	1
copying the return statement:	1
copying the entire list	1
copying a large object,	1
copying of memory blocks,	1
copying it Use a	1
copying an array or	1
copying different size matrices,	1
copying all data members.	1
copying without effectively preventing	1
copying them into a	1
copying blocks of memory.	1
copying process, and the	1
optimization. The debugger cannot	1
optimization. This works in	1
optimization. This works by	1
optimization. A mixed implementation	1
optimization. It is also	1
optimization. See www.agner.org/optimize and	1
optimization. For example, the	1
optimization. 14 Portability C++	1
optimization. 2.4 Choice of	1
optimization. Everything that is	1
optimization. 8.2 Comparison of	1
optimization. Prefetching data The	1
optimization. en.wikipedia.org/wiki/Compiler_optimization. ISO/IEC TR	1
accessing the same data	1
accessing a data member	1
accessing a variable through	1
accessing a member of	1
accessing a simple variable.	1
accessing it directly. The	1
accessing an object of	1
accessing an object through	1
accessing 32 bits of	1
accessing arrays forwards, not	1
accessing container elements are	1
accessing databases, network and	1
accessing list[i].a and list[i].b.	1
until the function returns	1
until the program is	1
until the value has	1
until the first time	1
until the next time	1
until the computer is	2
until the previous link	1
until the residual error	1
until a few clock	1
until you turn them	1
until 10 - 20	1
until seconds has been	1
performance. The Windows and	1
performance. The positive effects	1
performance. A good optimizing	1
performance. A copy constructor	1
performance. It is useful	1
performance. There are cases,	1
performance. I have no	1
performance. Integer size conversion	1
performance. We must bear	1
performance. 14.4 Integer multiplication	1
performance. 25 Since most	1
performance. 7.18 Class data	1
performance. Stefan Goedecker and	1
adding the first object	1
adding the length of	1
adding a constant to	2
adding an integer counter	1
adding one more integer	1
adding any extra code.	1
adding new instructions to	1
adding n to the	1
adding throw() to the	1
adding vectors. The operators	1
adding bounds-checking to an	1
adding -100 to -56	1
Define function type with	1
Define function name depending	1
Define vector objects Vec8s	1
Define vector classes //	1
Define vector classes void	1
Define vector classes (Intel)	1
Define size of squares:	1
Define multiple threads and	1
Define SSE2 intrinsic functions	1
Define vectors of four	1
Define macro to swap	1
Define macro for aligning	1
Define biggest possible vector	1
causes the memory to	1
causes the heap space	1
causes a long delay.	1
causes of compatibility problems	1
causes an entire cache	1
causes all writes to	1
causes all subsequent elements	1
causes floating point division	1
causes another exception. 64	1
causes problem that were	1
causes misses in the	2
causes technical problems or	1
processing the data in	1
processing and image processing.	1
processing in C++ and	1
processing speed exceeding that	1
processing power of the	1
processing unit for other	1
processing unit intended for	1
processing Memory and string	1
processing capabilities still have	1
processing instructions, multiple cores,	1
processing power. Connecting several	1
processing unit. Various graphics	1
processing unit, either on	1
divide the data set	1
divide the work into	2
divide the work evenly	1
divide the matrix into	1
divide the job into	1
divide the workload between	1
divide it into multiple	1
divide by 2 ;	1
divide by 2n by	1
divide an integer with	1
divide i by 2.	2
so-called time stamp counter.	1
so-called objects are instances	1
so-called virtual table is	1
so-called intrinsic functions. This	1
so-called nontemporal write instructions	1
so-called Java virtual machine.	1
so-called soft processor. Such	1
so-called position- independent code.	1
so-called symbol interposition is	1
so-called partial flags stall	1
so-called commpage. These functions	1
so-called iterators that are	1
so-called CPU-dispatcher that checks	1
clear to the reader	1
clear and more difficult	1
clear and well-structured code	1
clear and intelligible way	1
clear and modular. The	1
clear that static linking	1
clear that p is	1
clear or mask out	1
clear from this discussion	1
clear program structure in	1
clear whether r is	1
clear unless the function	1
clear correspondence between function	1
total size of each	1
total number of objects	1
total number of elements	2
total time. Optimizing less	1
total execution time because	1
total execution time. Loop	1
total calculation time. A	1
total offset bigger than	1
total amount of code	1
total waste of the	1
total size, because these	1
total computation time. 4	1
mix the two types	1
mix of additions and	1
mix different kinds of	1
mix integer and floating	1
mix floating point addition	1
mix float and double	1
mix float and double.....................................................................................	1
mix simple integer with	1
mix single and double	1
mix signed and unsigned	1
mix mathematical calculations with	1
mix nontemporal writes with	1
16-bit systems or 64-bit	1
16-bit integers or four	1
16-bit mode is used	1
16-bit mode and some	1
16-bit Windows, allow variables	1
16-bit integers. The branch	1
16-bit systems: int 16	1
16-bit systems: long int	1
16-bit systems: unsigned int	1
16-bit systems: unsigned long	1
16-bit programs. It is	1
16-bit programs, except for	1
child are typically stored	1
child class is given	1
child class are accessed	1
child class by type-casting	1
child class through a	1
child class name and	1
child class name as	1
child class members. The	1
child classes implement the	1
child class. This is	1
child class. Members of	1
child function: (static_cast<MyChild*>(this))->Disp(); }	1
containers is the Standard	1
containers is that you	1
containers is 95 not	1
containers in the STL	1
containers in cases where	1
containers for each thread	1
containers use linked lists.	1
containers should be identified	1
containers should definitely be	1
containers class templates in	1
containers do not have	1
containers 93 themselves. But	1
fit the size of	1
fit the biggest vectors:	1
fit the actual load	1
fit the eight-element vectors:	4
fit into the vector.	1
fit into a vector	1
fit specific needs. 9.8	1
fit their CPUs. Intel's	1
fit nicely into the	1
predict the loop control	1
predict the target if	1
predict a switch statement	1
predict that the loop	1
predict with certainty which	1
predict which compiler will	1
predict which variables will	1
predict which way a	1
predict which resources are	1
predict where the obstacles	1
predict whether the compiler	1
predict correctly whether vectorization	1
priority is no more	1
priority of program efficiency	1
priority of structured software	1
priority to one thread	1
priority in the same	1
priority than the number	1
priority than the user	1
priority than code generality.	1
priority before the test	1
priority back to normal	1
priority level, typically in	1
priority thread, and only	1
disk or other hardware	1
disk or network. Various	1
disk if the RAM	1
disk because of disk	1
disk often takes much	1
disk operations to finish.	1
disk space were scarce	1
disk cache. Files on	1
disk space. It may	1
disk files. See page	1
disk copying. Security. The	1
disk caching, but it	1
frequency is 2 GHz	1
frequency is limited is	1
frequency is increased when	1
frequency is doubled. The	1
frequency of the CPU	1
frequency that the CPU	1
frequency than other CPUs,	1
frequency may be a	1
frequency may vary dynamically	1
frequency goes up and	1
frequency dynamically depending on	1
frequency (in Windows: __rdtsc()).	1
unknown at the time	6
unknown CPU based on	1
unknown processors that support	1
unknown processors properly. Many	1
unknown brand or model	1
unknown factors in the	1
unknown sources. The above	1
obtained in a computationally	1
obtained if the critical	1
obtained by the use	1
obtained by using a	1
obtained by choosing a	1
obtained by dropping the	1
obtained with the function	1
obtained with the time	1
obtained with the Gnu,	1
obtained with a fully	1
obtained with virtual member	1
obtained when the code	1
libraries. The memory address	1
libraries. The dynamic libraries	1
libraries. The Gnu C++	1
libraries. A shared object	1
libraries. C++ is an	1
libraries. Use Gnu or	1
libraries. These factors are	1
libraries. Supports 32- and	1
libraries. Several special purpose	1
libraries. To explain the	1
libraries. Numbers in the	1
libraries. www.agner.org/optimize/#vectorclass All these	1
iteration is a significant	1
iteration is finished. Example:	1
iteration is repeated until	1
iteration of the loop	1
iteration of the loop.	1
iteration to the next.	1
iteration that has to	1
iteration it decides whether	1
iteration should depend on	1
iteration before the preceding	1
iteration needs the result	1
iteration (except for the	1
counters in all the	1
counters in each CPU	1
counters are CPU-specific and	1
counters can be very	1
counters when you are	1
counters when they are	1
counters will stay on	1
counters before running a	1
counters inside your program	1
counters instead of (or	1
counters Many CPUs have	1
counters .................................................................... 155 16.2	1
Optimizing for size is	1
Optimizing for speed is	1
Optimizing for present processors	1
Optimizing memory access .............................................................................................	1
Optimizing memory access 9.1	1
Optimizing compilers will often	1
Optimizing software in C++	1
Optimizing software in C++:	1
Optimizing less critical parts	1
Optimizing file access is	1
Optimizing database queries is	1
Optimizing subroutines in assembly	1
128-bit vector so that	1
128-bit vector registers had	1
128-bit vector register, do	1
128-bit execution units and	1
128-bit XMM and 256-bit	1
128-bit XMM register can	1
128-bit XMM registers are	1
128-bit XMM vectors must	1
128-bit XMM register. In	1
128-bit operation was split	1
128-bit vectors. The following	1
128-bit reads. The same	1
possibly in a different	1
possibly be more (128	1
possibly be compiled as	1
possibly be relevant when	1
possibly be obtained in	1
possibly not with earlier	1
possibly more serious when	1
possibly also a lookup	1
possibly block the execution	1
possibly improve the code.	1
possibly save exception handling	1
possibly throw an exception	1
x, and last the	1
x, int m) {	1
x, unsigned int n)	1
x, while other functions	1
x, y; // x,y	1
x, y; x =	1
x, y; ... x.a	1
x, y; bool b;	1
x, n, factorial =	2
x, y, z; a	1
x, y, z; bool	1
stack. The memory space	1
stack. This can cause	1
stack. This can improve	1
stack. This makes function	1
stack. This behaviour is	1
stack. A static member	1
stack. These registers have	1
stack. Each thread has	1
stack. Alternatively, you may	1
stack. Is the size	1
stack. Deallocation has no	1
stack. String constants and	1
2, x = 2.0;	1
2, b * c);	2
2, so the compiler	1
2, 4 or 8,	1
2, etc. This means	1
2, 4, 8, 16,	1
2, 4, etc.). Older	1
2, 6, 24, 120,	2
2, 3, 4, 6,	1
2, Tuesday = 4,	1
full use rather than	1
full size vector. The	1
full 64-bit addresses for	1
full advantage of a	1
full information about the	1
full optimization. It is	1
full 128-bit execution units	1
full declaration of c1	1
full metaprogramming features, including	1
full debugging support which	1
full speed. A simple	1
full generality and flexibility	1
Another function __intel_cpu_features_init_x() does	1
Another problem with accessing	1
Another disadvantage is that	1
Another disadvantage of intermediate	1
Another disadvantage of complicated	1
Another example: // Example	1
Another possibility is to	2
Another thing that you	1
Another alternative worth considering	1
Another serious burden is	1
Another open source compiler	1
overloaded or the user	1
overloaded or limited in	1
overloaded function are simply	1
overloaded functions. 7.27 Overloaded	1
overloaded operators for things	1
overloaded operators will cause	1
overloaded operator is as	1
overloaded operator is exactly	1
overloaded operator is equivalent	1
overloaded operators. Function parameters	1
overloaded operators. Vectorized code	1
overloaded assignment operator, or	1
possible. The first count	1
possible. The AVX instructions	1
possible. This also makes	1
possible. A compiler that	1
possible. See page 141.	1
possible. SSE2 is always	1
possible. Use inline functions	1
possible. However, there are	1
possible. Don't rely on	1
possible. Template meta- programming	1
possible. Smaller microprocessors have	1
possible. Typically it should	1
efficiently if the code	1
efficiently if it is	1
efficiently if functions that	1
efficiently if pieces of	1
efficiently by better standardization	1
efficiently with coarse-grained parallelism	1
efficiently on all sizes	1
efficiently than static memory.	1
efficiently when the data	1
efficiently when data are	2
efficiently from the previous	1
models of the same	1
models to avoid running	1
models to run the	1
models that were unknown	2
models if the problem	1
models on which a	1
models on which this	1
models have a strict	1
models then you will	1
models rather than processor	1
models had the full	1
OS and Itanium systems.	1
OS support and is	1
OS independent and checks	1
OS X The code	1
OS X make position-independent	1
OS X operating system	1
OS X operating systems,	1
OS X Compilers for	1
OS X (Darwin) are	1
OS X, 32-bit and	1
OS X, unless you	1
OS X. 14.13 System	1
needed. The C++ language	1
needed. The bitwise operators	1
needed. This makes data	1
needed. You may write	1
needed. Example: // Example	1
needed. These complicated cases	1
needed. All the code	1
needed. Obviously, the best	1
needed. Even better, you	1
needed. Objects inside containers	1
needed. 11 Out of	1
needed. Predictable branches that	1
classes. The object oriented	1
classes. The standard template	1
classes. The splitting of	1
classes. You may avoid	1
classes. An appendix to	1
classes. Each instance of	1
classes. Unfortunately, many standard	1
classes. Text strings are	1
classes. 7.2 Integers variables	1
classes. Size of each	1
classes. Security The most	1
classes. Including the appropriate	1
changed to the old	1
changed to a =	1
changed to c =	1
changed to truncation and	1
changed by another thread.	1
changed then the target	1
changed so that it	1
changed without the risk	1
changed to: // Example	2
changed five times. Thread-local	1
changed freely. The loop	1
true a && a	1
true a && true	1
true that some development	1
true = a, a	1
true = true a	1
true or always false:	1
true ; unused label	1
true last in an	1
true anyway. It may	1
true 50% of the	1
true (1) or false	1
true 10% of the	1
thread. The cost of	1
thread. This method works	1
thread. This structure or	1
thread. This prevents the	1
thread. A variable that	1
thread. It is not	1
thread. If you forget	1
thread. If seconds was	1
thread. You cannot be	1
thread. However, in most	1
thread. Pointers to contained	1
thread. Thread-local storage is	1
names of the header	1
names of inlined functions	1
names and code addresses.	1
names and variable names	1
names and variable names.	1
names and model numbers,	1
names in the SVML	1
names that begin with	1
names are not compatible	1
names are undocumented. 2.7	1
names with suffixes such	1
names from string functions.	1
though the logical register	1
though the latter has	1
though the rules of	1
though the 61 function	1
though the CPU-type is	1
though it is doing	1
though it could free	1
though not all libraries	1
though this only happens	1
though less user friendly.	1
though these operating systems	1
though future compilers may	1
execute the loop control	1
execute the program, and	1
execute a code one	1
execute then the profiler	1
execute then measurements can	1
execute faster than other	1
execute instructions out of	1
execute it. The load	1
execute CriticalFunction when code	1
execute faster. The most	1
execute slower than intended	1
execute _mm_empty() after the	1
% 2 == 0)	1
% 32 = 28.	1
% 128 == 0)	1
% c; a =	1
% means modulo. For	1
% 3; } This	1
% 10; a =	2
% 16; a =	1
% 16; // This	1
% (number of sets).	1
% 0x20 = 0x1C.	1
mov add cmp jl	1
mov mov mov lea	1
mov mov 2:8+esp eax,	1
mov mov lea $B2$2:	1
mov DWORD PTR [ecx+eax*4],ebx	1
mov xor mov $B1$2:	1
mov shr add sar	1
mov eax,0. The loop	1
mov ebx,eax / shr	1
mov $B1$2: mov shr	1
mov 2:8+esp eax, edx,	1
mov lea $B2$2: mov	1
N is a power	2
N is a positive	1
N is not a	1
N a power of	1
N = 0 //	1
N = 1. This	1
N with the rightmost	1
N into the individual	1
N elements of type	1
N template <int N>	1
N supports a particular	1
kinds of code gives	1
kinds of code execute	1
kinds of vector math	1
kinds of variable storage	2
kinds of variable storage.............................................................................	1
kinds of operations in	1
kinds of costs to	1
kinds of storage. See	1
kinds of optimizations. The	1
kinds of jobs. For	1
kinds of strange and	1
details of instruction timing,	1
details of cache organization	1
details in both compiler,	1
details that make function	1
details are given in	1
details on when objects	1
details on branch predictions	1
details about how caches	1
details about name mangling	1
details about rounding. Pointer	1
details depend on the	1
details (www.agner.org/optimize/testp.zip). A particularly	1
RAM and disk space.	1
RAM than there is,	1
RAM than end users	1
RAM memory and disk	1
RAM memory can take	1
RAM memory if it	1
RAM memory may even	1
RAM size is insufficient.	1
RAM memory. This may	1
RAM memory. Big arrays	1
RAM memory. Efficient caching	1
RAM space, if necessary,	1
rows and columns in	2
rows in the matrix	1
rows in a big	1
rows for (c =	1
rows are accessed in	1
rows are accessed consecutively	1
rows are indexed in	1
rows // loop columns	1
rows = 20, columns	2
rows = 10, columns	1
square by the code	1
square x // get	1
square at a time.	1
square (float a) {	1
square blocking for the	1
square blocking or tiling.	1
square brackets mean use	1
square brackets index, just	1
square root and mathematical	2
square blocking: int r1,	1
square root, RGB color	1
fail to see the	1
fail to start the	1
fail to keep their	1
fail to eliminate common	1
fail to distinguish elements	1
fail to recognize VIA	1
fail in the event	1
fail if the object	1
fail if the destructor	1
fail if an int	1
fail if both are	1
fail completely because of	1
purposes. The use of	1
purposes. The most commonly	1
purposes. The const keyword	1
purposes. This is advantageous	1
purposes. This memory space	1
purposes. If the code	1
purposes. All these examples	1
purposes. All dynamic memory	1
purposes. However, the STL	1
purposes. Floating point operations	1
purposes. Unfortunately, the standard	1
purposes. Available from www.agner.org/optimize/asmlib.zip.	1
(e.g. in linear algebra)	1
(e.g. with _finite()) and	1
(e.g. an if-else structure),	1
(e.g. option /MT). In	1
(e.g. GetLogicalProcessorInformation in Windows)	1
(e.g. PowerPC). We can	1
(e.g. DEC, JNZ). This	1
(e.g. GetProcessAffinityMask in Windows).	1
(e.g. IsProcessorFeaturePresent in Windows).	1
(e.g. '>') are not	1
(e.g. Quine–McCluskey or Espresso)	1
(e.g. Sandy Bridge) because	1
compiling the intermediate code.	1
compiling the module with,	1
compiling in two steps.	1
compiling for the AVX	1
compiling for a lower	1
compiling for 32-bit Mac	1
compiling for Windows and	1
compiling for Linux. It	1
compiling for AVX2, or	1
compiling multiple .cpp files	1
compiling without -fpic in	1
compiling module2.cpp. The simplest	1
convert the unsigned integer	1
convert the result back	1
convert it to a	1
convert it to signed	1
convert an integer in	1
convert example 15.1b to	1
convert example 15.1a to	1
convert example 12.8a to	1
convert b from single	1
convert float to int.	1
convert unsigned integers to	1
convert these types to	1
thing is to avoid	1
thing to do when	1
thing to do. The	1
thing and the CPUID	1
thing and if you	1
thing and they are	1
thing that can be	1
thing that you can	1
thing as p and	1
thing at the same	1
thing we notice is	2
least the same instruction	1
least the cache line	1
least a large part	1
least in some situations,	1
least in simple cases.	1
least at the last	1
least one other function.	1
least one virtual member	1
least significant bit of	1
least significant n bits	1
least recently 4 ?Func2@@YAXQAHAAH@Z	1
least temporarily. Using the	1
containing the functions that	1
containing the address range	1
containing the members of	1
containing only constants will	1
containing multiple streams with	1
containing many objects can	1
containing container classes and	1
containing integers. It can	1
containing pure function calls.	1
containing thread-specific data and	1
containing (2,2,2,2), and store	1
containing numerical data is	1
0) { // test	1
0) { // Make	1
0) { // Cache	1
0) { if (n	1
0) { if (b	2
0) { c =	1
0) { d =	1
0) { FuncA(i); }	1
0) ? 1.0f :	1
0) ? (cc[i] +	1
0) *(p++) |= 0x20;	1
precision. The compilers will	1
precision. The following compiler	1
precision. The speed is	1
precision. You may use	1
precision. But the software	1
precision. These conversions take	1
precision. Using double precision	1
precision. When the floating	1
precision. Conversions between different	1
precision. And who would	1
precision. Let's repeat the	1
precision. Long double precision	1
algebraic expressions on seven	1
algebraic expressions using the	1
algebraic reductions in my	1
algebraic reductions are not	1
algebraic reductions on floating	2
algebraic reductions such as	1
algebraic reductions explicitly in	1
algebraic expressions. For example,	1
algebraic manipulations of floating	1
algebraic manipulations on integer	1
algebraic reduction. For example,	1
structures to addresses divisible	1
structures and classes. The	1
structures in the end	1
structures for standard tasks	1
structures that typically use	1
structures are accessed through	1
structures by 16 for	1
structures with non-sequential access	1
structures with First-In-First-Out or	1
structures It is not	1
structures ............................................................. 96 9.11	1
structures (without member functions)	1
little or no overhead	1
little or no idea	1
little more complicated if	1
little more syntax check.	1
little data for analysis.	1
little faster than 32-bit	1
little work as possible.	1
little space in the	1
little overhead to the	1
little math is required	1
little explanation. The value	1
little odd here. The	1
Any function that needs	1
Any code that accesses	1
Any other allocated resource.	1
Any floating point operation	1
Any array or object	1
Any pointers to data	1
Any language that requires	1
Any specific bottleneck or	1
Any copy constructor must	1
Any expression that is	1
Any task that takes	1
Any writable data section	1
logical register that appears	1
logical processors available in	1
logical processors available can	1
logical processors usually share	1
logical processors (0, 2,	1
logical processor is not	1
logical structure and clarity	1
logical processors. There is	1
logical processors. Hyperthreading is	1
logical register. This advantage	1
logical architecture of the	1
logical sequence. If you	1
level of optimization is	1
level of optimization can	1
level of abstraction which	1
level = InstructionSet(); //	2
level framework based on	1
level framework still consumes	1
level linking (remove unreferen-	1
level framework. The optimized	1
level 9. Avoid table	1
level 108 You may	1
level linking" if available.	1
access. The code section	1
access. The compiler may	1
access. The execution core	1
access. Assume that a	1
access. 12 Using vector	1
access. Reading or writing	1
access. Available protocols and	1
access. 7.20 Virtual member	1
access. 3.10 Graphics A	1
access. 12.9 Aligning RGB	1
access. Sequential forward access	1
access. Run multiple processes	1
bitwise operators is more	1
bitwise operators for checking	2
bitwise operators are single	1
bitwise operators are calculated	1
bitwise operators using integers	1
bitwise operators produce 32	1
bitwise operators &, |,	2
bitwise operators (& and	1
bitwise AND operation isolates	1
bitwise OR operator, which	1
handle the strings including	2
handle is invalid. Boolean	1
handle an unrecoverable error	1
handle only known processors.	1
handle one square at	1
handle its own block	1
handle eight elements at	1
handle strings is the	1
handle unknown processors properly.	1
handle current CPUs optimally.	1
handle text strings in	1
heap is reserved for	1
heap to be filled	1
heap can easily become	1
heap has become fragmented.	1
heap space to become	1
heap space has become	1
heap space becomes fragmented	1
heap manager for each	1
heap manager can spend	1
heap manager will start	1
heap manager has a	1
heap management and garbage	1
DWORD PTR [edx] DWORD	2
DWORD PTR [edx] adds,	1
DWORD PTR [esp+8] DWORD	1
DWORD PTR [esp+8] eax,	1
DWORD PTR [eax+400] DWORD	1
DWORD PTR [eax+4], ecx	1
DWORD PTR [esp+4] DWORD	1
DWORD PTR [ecx+eax*4],ebx stores	1
DWORD PTR [esp+12] ;	1
DWORD PTR [eax], ecx	1
DWORD PTR[ecx+eax*4],ebx eax, 1	1
Other compilers need assembly	1
Other compilers offer the	1
Other system resources ..........................................................................................	1
Other system resources Writes	1
Other cases of stack	2
Other programs use time	1
Other tasks such as	1
Other brands or models	1
Other manuals by Agner	1
Other databases Many software	1
Other databases ....................................................................................................... 21	1
during the development of	1
during the loop. It	1
during the installation process	1
during the update process.	1
during this time has	1
during time measurements to	1
during program execution then	1
during program development, and	1
during execution of CriticalFunction.	1
during start of the	1
during installation of the	2
initialized to zero by	1
initialized to desired values	1
initialized to valid values	1
initialized or comes from	1
initialized by a list	1
initialized when the function	1
initialized when the program	2
initialized only the first	1
initialized variables that may	1
initialized arrays. I have	1
occur and recovering from	1
occur in the multiplication	1
occur in the level-2	2
occur in this hot	1
occur in multiplication here:	1
occur if a program	1
occur as a result	1
occur at random times	1
occur has the unfortunate	1
occur quite often as	1
target of branches and	1
target if the changes	1
target address is likely	1
target address is predicted	1
target address can be	1
target buffer is also	1
target buffer can occur	1
target buffer (BTB). Contentions	1
target pointed to is	1
target buffer. Contentions in	1
target buffer, branch pattern	1
especially in floating point	1
especially in 32-bit mode.	2
especially in 32-bit mode,	1
especially if the code	1
especially if the user	1
especially if the branches	1
especially if there is	1
especially on the Pentium	1
especially when the code	1
especially loop-carried dependency chains	1
smart and other things	1
smart pointer is an	1
smart pointer is created,	1
smart pointer may be	1
smart pointer then you	1
smart pointer (see page	1
smart pointers is to	1
smart pointers are auto_ptr	1
smart pointer. If a	1
smart pointer. But there	1
smart pointer. Accessing an	1
includes the time it	1
includes the critical functions	1
includes the libraries named	1
includes the addresses of	1
includes the low-level C	1
includes only the part	1
includes static variables, floating	1
includes pointers and references,	1
includes optimized versions of	1
includes standard function libraries.	1
includes languages such as	1
entire program in multiple	1
entire program will be	1
entire cache line to	1
entire floating point library.	1
entire library (or at	1
entire 64 or 0x40	1
entire file in a	1
entire list from static	1
entire level-1 cache is	1
entire object. Any copy	1
entire contents copied to	1
executable to a function	1
executable to be as	1
executable has the same	1
executable because it is	1
executable code. Most implementations	1
executable file and all	1
executable file and one	1
executable file when static	1
executable file needs to	1
executable file stub. If	1
executable file. Only the	1
subexpression to make sure	1
subexpression containing only constants	1
subexpression occurs more than	1
subexpression elimination and loop-invariant	1
subexpression elimination x n.a.	1
subexpression elimination If the	1
subexpression c+b can be	1
subexpression elimin., integer Common	1
subexpression elimin., float Register	1
subexpression elimination, constant propagation,	2
insert the values in	1
insert the piece of	1
insert the reciprocal in	1
insert a code that	1
insert a switch in	1
insert a fixed breakpoint	1
insert an instruction that	1
insert only the SSE2	1
insert any other error	1
insert optimization hints as	1
insert nontemporal writes automatically	1
nontemporal is used. However,	1
nontemporal write instruction prevents	1
nontemporal write instructions are	2
nontemporal write instructions becomes	1
nontemporal write instructions (MOVNT)	1
nontemporal Table 18.3. Predefined	1
nontemporal #pragma vector nontemporal	1
nontemporal writes with normal	1
nontemporal writes automatically in	1
nontemporal writes. If the	1
bounds is probably the	1
bounds of valid addresses,	1
bounds check on n	1
bounds checking is explained	1
bounds checking and various	1
bounds checking template <typename	1
bounds violations, invalid pointers,	1
bounds checking, as illustrated	1
bounds checking). An error	1
bounds violations and invalid	1
bounds violation, integer overflow,	1
improved is that r+i/2	1
improved in the following	1
improved by a factor	1
improved by using a	1
improved by using one	1
improved by using static	1
improved by inlining the	1
improved by adding an	1
improved by modifications of	1
improved by consistent modularity	1
improved performance. A copy	1
SSE and SSE2 instruction	1
SSE and later instruction	1
SSE or SSE2 instruction	1
SSE or higher instruction	1
SSE instruction set (128	1
SSE double 64 2	1
SSE 128 bit float	1
SSE Store 4 bytes	1
SSE Store 16 bytes	2
SSE xmmintrin.h SSE2 emmintrin.h	1
discussed in the following	1
discussed in manual 2:	1
discussed on page 60.	1
discussed on page 158.	1
discussed which of the	1
discussed which method is	1
discussed how to identify	1
discussed how to overcome	1
discussed below. Many libraries	1
discussed below. Signed /	1
discussed below. Cannot optimize	1
updates to the operating	1
updates are necessary then	1
updates if the current	1
updates may come unpredictably	1
updates should be optional	1
updates should be postponed	1
updates each time the	1
updates through the Internet	1
updates every time the	1
updates Many software programs	1
updates .................................................................................................... 19 3.5	1
consider the following alternatives:	1
consider that the bit	1
consider it unwise to	1
consider if the cost	1
consider if it is	1
consider if there is	1
consider if intermediate calculations	1
consider which method is	1
consider making highly optimized	1
consider whether it is	1
consider whether others have	1
loading the entire floating	1
loading a cache line.	1
loading a cache line:	1
loading of the code,	1
loading of several drivers,	1
loading of modules or	1
loading can be a	1
loading any cache lines	1
loading files or accessing	1
loading ....................................................................................................... 19 3.6	1
loading Often, it takes	1
below the maximum value.	1
below the diagonal is	1
below the diagonal and	1
below the diagonal are	1
below in example 16.1.	1
below on page 134.	1
below 2 GB, but	1
below diagonal // swap	1
below diagonal swapd(a[r][c], a[c][r]);	1
below shows. The best	1
below shows. It is	1
reading the value from	1
reading the performance counters	1
reading of the counters	1
reading of x must	1
reading and writing from	1
reading and writing data	1
reading or writing a	1
reading or writing small	1
reading as well as	1
reading them again takes	1
reading disk files. See	1
directly to the next	1
directly to the CPU-specific	1
directly to memory without	1
directly // Writes "Hello	1
directly if the target	1
directly with the use	1
directly into the code	1
directly without using the	1
directly compiled code and	1
directly compiled version is	1
directly compiled code. (Compile	1
simplest and most clean	1
simplest possible user interface	1
simplest possible implementation if	1
simplest way to solve	1
simplest code. If the	1
simplest case is a	1
simplest cases, but its	1
simplest cases, composite objects	1
simplest expressions and operators.	1
simplest cases. See manual	1
simplest method, but it	1
situation is a waste	1
situation is more complex	1
situation of the maximum	1
situation where the loop	1
situation where the network	1
situation where the logic	1
situation where a program	2
situation where a long	1
situation where a task	1
situation where they are	1
message is provoked here	1
message and then calls	1
message and stop the	1
message in a protected	1
message in this case.	1
message if it is.	1
message when it sees	1
message loop of a	1
message loop in the	1
message function. The following	1
message systems. All of	1
delay the subsequent instructions.	1
delay the availability of	1
delay is less than	1
delay is just long	1
delay is significant if	1
delay in the CPU	2
delay that the end	1
delay on lazy binding	1
delay comes when a	1
delay due to the	1
condition is a simple	1
condition is known from	1
condition is relatively expensive,	1
condition The most efficient	1
condition can be calculated	1
condition can be reduced	1
condition will generate the	1
condition i < 100.	1
condition inside the loop	1
condition terminates the program	1
condition clause. Comparing an	1
monitor counter is a	1
monitor counter in Intel	1
monitor counters in all	1
monitor counters are CPU-specific	1
monitor counters when they	1
monitor counters before running	1
monitor counters instead of	1
monitor counters Many CPUs	1
monitor counters .................................................................... 155	1
monitor counters. A performance	1
monitor counters. My test	1
resource in 32-bit systems.	1
resource for many computer	1
resource use in system	1
resource use on such	1
resource then it may	1
resource files from disk.	1
resource problems and compatibility	1
resource problems that cause	1
resource files, help files	1
resource files, configuration files,	1
resource conflicts. But if	1
cores is to divide	2
cores is slow. If	1
cores and leave them	1
cores in order to	1
cores that do not	1
cores are advantageous for	1
cores can run eight	1
cores or logical processors	2
cores will grow in	1
parallel if certain conditions	1
parallel vector processing capabilities	1
parallel because it defines	1
parallel calculations on vectors	1
parallel structure that can	1
parallel calculations. Examples are	1
parallel processing in C++	1
parallel processing, OpenMP and	2
parallel execution. Example: //	1
parallel processing. Scott Meyers:	1
either in the carry	1
either in the form	1
either by making the	1
either on a graphics	1
either as a runtime	1
either as static link	2
either C or C++	1
either way. Such a	1
either case. Intrinsic functions	1
either sixteen integers of	1
implementations of the same	1
implementations of this bit	1
implementations of string classes	1
implementations of smart pointers	1
implementations of Java are	1
implementations of C++, directly	1
implementations of C++, Pascal	1
implementations of Pascal used	1
implementations are less efficient	1
implementations use just-in-time compilation.	1
implementations reveal a zigzag	1
calculating the value each	1
calculating the address of	2
calculating the addresses of	1
calculating the physical movements	1
calculating the logarithm again,	1
calculating the movements of	1
calculating a new value	1
calculating a polynomial. Scheduling	1
calculating row addresses at	1
calculating self- relative addresses	1
ebx is then stored	1
ebx is pushed on	1
ebx that was saved	1
ebx on stack ;	1
ebx as a temporary	1
ebx from stack ;	1
ebx ; shift down	1
ebx ; top of	1
ebx contains i/2+r. The	1
ebx ecx, DWORD PTR	1
ebx restores the value	1
generation of processors is	1
generation of processors that	2
generation of CPUs increased	1
generation of computers and	1
generation of identifier names.	1
generation can cause complications	1
generation class through a	1
generation class gets information	1
generation class (CGrandParent) contains	1
generation class (CParent<>) contains	1
enable the compiler to	3
enable the SSE2 or	1
enable the SSE2 instruction	2
enable the desired instruction	1
enable one or more	1
enable constant propagation and	1
enable fast floating point	1
enable optimizations across modules	1
instructions. The automatic vectorization	1
instructions. The 512 512	1
instructions. The built-in code	1
instructions. This is coded	1
instructions. A further extension	1
instructions. There are other	1
instructions. Example: // Example	1
instructions. Function Assembly name	1
instructions. Each type has	1
instructions. My recommendation is	1
instructions. Intrinsic functions are	1
copied to the new	1
copied to the disk	1
copied to the parameter,	1
copied to a local	1
copied or transferred from	1
copied or moved with	1
copied by assignment, as	1
copied from static memory	1
copied because the same	1
copied into registers. A	1
copied simply by copying	1
e.g. the option /QaxAVX	1
e.g. a menu click	1
e.g. Intel Math Kernel	1
e.g. how often a	1
e.g. four numbers, then	1
e.g. four floats. The	1
e.g. every millisecond. The	1
e.g. C++, and a	1
e.g. AVX, AVX2 Mathematical	1
e.g. .R. for AVX.	1
e.g. /arch:SSE2. The compiler	1
keep the same precision	1
keep the two modules	1
keep multiple memory blocks,	1
keep pointers to all	1
keep up with the	2
keep their CPU dispatchers	1
keep together on the	1
keep adding new instructions	1
keep track of the	1
keep track of when	1
PTR [edx] DWORD PTR	1
PTR [edx] DWORD PTR[ecx+eax*4],ebx	1
PTR [edx] adds, not	1
PTR [esp+8] DWORD PTR	1
PTR [esp+8] eax, eax	1
PTR [eax+400] DWORD PTR	1
PTR [eax+4], ecx 86	1
PTR [esp+4] DWORD PTR	1
PTR [ecx+eax*4],ebx stores this	1
PTR [esp+12] ; edx	1
PTR [eax], ecx DWORD	1
Automatic CPU dispatch Automatic	1
Automatic vectorization const int	1
Automatic vectorization Automatic paralleli-	1
Automatic vectorization ......................................................................................... 107	1
Automatic vectorization Devirtualization ---x-----	1
Automatic vectorization Good compilers	1
Automatic updates Many software	1
Automatic updates .................................................................................................... 19	1
Automatic updating of software	1
Automatic paralleli- zation by	1
Automatic updates. Automatic updating	1
Library functions are typically	1
Library versions tested (not	1
Library exp function of	1
Library (STL) which comes	1
Library (MKL v. 7.2).	1
Library __vrs4_expf __vrd2_exp AMD	1
Library (WTL). A WTL	1
Library (WTL): // Example	1
Library (ATL) and Windows	1
Library (OWL). Several graphical	1
Library amd_vrs4_expf amd_vrd2_exp Agner's	1
? a : b;	1
? a : b)	1
? b : c	2
? c + 2	2
? 1 : 0]	1
? 1.0f : 2.5f;	1
? 1.5f : 2.6f;	1
? (cc[i] + 2)	1
? EXCEPTION_EXECUTE_HANDLER : EXCEPTION_CONTINUE_SEARCH)	1
defined a constructor, an	1
defined in a different	1
defined in a separate	1
defined in other ways	1
defined in Intel header	1
defined in two libraries	1
defined with enum, const,	1
defined as powers of	1
defined inside the function.	1
defined inside a class	1
defined outside any function)	1
Visual Studio can build	1
Visual Studio This is	1
Visual Studio when compiling	1
Visual Studio IDE. Has	1
Visual Studio optimizes reasonably	1
Visual Studio 2008 version).	1
Visual Basic .NET and	1
Visual Basic .NET, which	1
Visual Studio. This tool	1
Visual studio 2008, v.	1
Visual Basic, etc. But	1
align the arrays as	1
align by cache line	1
align by 4 ;	1
align data members to	1
align table by 16	1
align its b member	1
align large static arrays	1
align large objects and	1
align ; mark end	1
align dynamically allocated memory.	1
align arrays. // Example	1
sizes of the data	1
sizes of matrices. An	1
sizes to 1024 bits	1
sizes and array indices	1
sizes are allocated and	2
sizes other than 8,	1
sizes were measured on	1
sizes 1, 2, 3,	1
sizes Integers can be	1
sizes (char, short int)	1
temp; for (i =	1
temp; for (r =	2
temp; // Define size	1
temp; } 70 Induction	1
temp; c = temp	1
temp; temp = b	1
temp; temp = 3;	1
temp; temp = a+1;	1
temp; temp += 9;	1
temp; 104 } Microprocessors	1
allow the compiler to	1
allow you to define	1
allow you to manipulate	1
allow vector objects as	1
allow variables to be	1
allow up to fourteen	2
allow addition of integers	1
allow lazy binding of	1
allow compile- time if	1
allow assembly-like intrinsic functions,	1
PathScale and Intel compilers	1
PathScale and Gnu compilers.	1
PathScale compiler for Unix	1
PathScale compilers can in	1
PathScale compilers can automatically	1
PathScale C++ compiler for	1
PathScale C++ v. 3.1,	1
PathScale Gnu Intel Borland	1
PathScale compilers. Intel C++	1
PathScale compilers. 8.3 Obstacles	1
PathScale compilers. (The PGI	1
BSD and Mac systems	1
BSD and Mac OS	2
BSD and Mac allow	1
BSD are identical to	1
BSD or Mac operating	1
BSD work the same	1
BSD systems. The Intel-based	1
BSD comes at a	1
BSD Instruction set control	1
BSD Shared objects in	1
f; The compiler may	1
f; int i; }	7
f; } This calculation	1
f; unsigned int i;	1
f; f=i; f =	1
previous value as xn	1
previous value as n!	1
previous value than from	1
previous link pointer has	1
previous iteration (except for	1
previous chapter (page 146).	1
previous value. It does	1
previous value. Example: //	1
previous branch. Example: //	1
previous one. It may	1
previous iteration. This allows	1
size; i += 2)	1
size; i++) { //	1
size; i++) { a[i]	1
size; i++) { temp	1
size; i++) { j	1
size; i++) { b[i]	1
size; i++) { aa[i]	1
size; i++) { ab[i].b	1
size; i++) a[i] =	1
size; i++) sum +=	1
size; i++) b[i] =	1
rarely the other way	1
rarely in Linux. Address	1
rarely program their own	1
rarely possible for the	1
rarely necessary to use	1
rarely needed anyway. You	1
rarely needed. 11 Out	1
rarely enough to justify	1
rarely worth the effort	1
rarely found in other	1
rarely justifies the relatively	1
way. The first count	1
way. The fact that	1
way. The Codeplay compiler	1
way. A branch that	1
way. If the first	1
way. There is no	1
way. You may think	1
way. See page and	1
way. Such a branch	1
way. Here you have	1
way. First you compile	1
vector. The use of	1
vector. The other STL	1
vector. The simplest and	1
vector. This is a	1
vector. It may be	1
vector. If n =	1
vector. You may even	1
vector. For example, if	1
vector. These units are	1
vector. Organize the data	1
vector. 6. If arrays	1
easier to use vector	1
easier to write a	1
easier to write 2.0/3.0	1
easier to maintain. The	1
easier to understand when	1
easier to test, maintain	1
easier for the compiler	2
easier for the CPU.	1
easier if we use	1
easier said than done	1
identical to one of	1
identical to some other	1
identical to Linux in	1
identical for the two	1
identical code for the	1
identical so that only	1
identical performance for 32-bit	1
identical branches The code	1
identical branches Eliminate jumps	1
identical constants in the	1
identical pieces of code.	1
20 to 10 means	1
20 clock cycles later	1
20 clock cycles. The	1
20 clock cycles. It	1
20 times and calls	1
20 Copyright notice This	1
20 Copyright notice ..........................................................................................................	1
20 3.8 System database	1
20 3.9 Other databases	2
20 3.7 File access................................................................................................................	1
well. The conversion from	1
well. The reason is	1
well. This is the	1
well. This compiler is	1
well. A loop with	1
well. A switch statements	1
well. Supports three different	1
well. Even function calls	1
well. Open Watcom Another	1
well. Codeplay VectorC A	1
well. Very poor performance	1
program, and the runtime	1
program, and one for	1
program, and while the	1
program, for example when	1
program, or between different	1
program, it is very	1
program, it is likely	1
program, you will be	1
program, you should choose	1
program, one for initialized	1
program, especially if the	1
list[i] is invalid when	1
list[i] is equal to	1
list[i] = i %	1
list[i] = 0; list[i+1]	1
list[i] += i /	1
list[i] += 1.0f; }	2
list[i] += i_div_3; list[i+1]	1
list[i] > 1.0) {	1
list[i] << endl; //	1
list[i] =0; list[i+1] =	1
under the worst- case	1
under the framework, during	1
under the best-case conditions.	1
under this unit-test may	1
under CPU cache (en.wikipedia.org/wiki/L2_cache).	1
under test but also	1
under test finishes in	1
under advanced system performance	1
under worst-case conditions in	1
under worst-case conditions. Programs	1
under test, but is	1
expect the compiler to	1
expect the table to	1
expect the && expression	1
expect a compiler to	2
expect a particular compiler	1
expect a directive for	1
expect to use later	1
expect to 99 read	1
expect this to be	1
expect 64-bit programs to	1
except the sign bit	1
except the sign bit:	1
except in the long	1
except in the simplest	1
except in special mathe-	1
except for the cases	1
except for some small	1
except for small embedded	1
except for char pointers.	1
except when several applications	1
except perhaps for a	1
loops are implemented as	1
loops are predicted well	2
loops // The purpose	1
loops or compile-time generation	1
loops if the loop	1
loops if a high	1
loops by calls to	1
loops would make the	1
loops (except in Fortran	1
loops (less than 65	1
why the compiler doesn't	1
why it is safe	1
why this effect is	1
why this delaying process	1
why all modern computers	1
why compilers do not	1
why object oriented programs	1
why there is virtually	1
why such runtime frameworks	1
why exception handling can	1
why bookkeeping is needed:	1
dispatching. The code in	1
dispatching. This function is	1
dispatching. For example, the	1
dispatching. For example, you	1
dispatching. Many Intel library	1
dispatching. Unfortunately, the CPU	1
dispatching. Obviously, you should	1
dispatching. Add to this	1
dispatching. Test if the	1
dispatching. Underestimating the cost	1
cout << 1; }	2
cout << 2; }	2
cout << list[i] <<	1
cout << "Hello ";	2
cout << "Error: Index	2
cout << x.f; //	1
references. It is OK,	1
references. If we compile	1
references. 64-bit Mac OS	1
references. There is no	1
references. You can change	1
references. Therefore, it will	1
references. Most importantly, it	1
references. Shared objects in	1
references. Arrays are always	1
references. References are safer	1
come with the Intel	1
come with the operating	1
come with compilers and	1
come from example 15.1b	1
come from operators that	1
come from unknown sources.	1
come into force when	1
come last in a	1
come first. If it	1
come unpredictably at inconvenient	1
statements is a kind	1
statements The high speed	1
statements that you want	1
statements are most efficient	1
statements because switch statements	1
statements should preferably be	1
statements often suffer from	1
statements like throw(A,B,C) to	1
statements within each clause	1
statements (called static if),	1
u; if (u.i &	1
u; if (u.i[1] <	1
u; int n; u.i	1
u; int n; 143	1
u; If you are	1
u; double d; d	3
u; u.i ^= 0x80000000;	1
u; u.i &= 0x7FFFFFFF;	1
SSE4.1 and one for	1
SSE4.1 and integer division.	1
SSE4.1 // Function to	1
SSE4.1 // AVX2 //	1
SSE4.1 instruction set is	2
SSE4.1 some more vector	1
SSE4.1 gives an advantage	1
SSE4.1 instr. set AVX	1
SSE4.1 smmintrin.h SSE4.2 nmmintrin.h	1
chapter is aiming at	1
chapter in manual 2:	1
chapter 10 page 101	1
chapter (page 146). In	1
chapter 12. If the	1
chapter 12. Most modern	1
chapter describes how this	1
chapter 9.10, then the	1
chapter "Register usage in	1
chapter 11. Using the	1
similar to the Gnu	1
similar to a macro	1
similar CPU dispatch mechanisms,	1
similar objects of variable	1
similar method can be	1
similar methods are further	1
similar functions, but less	1
similar thanks to heavy	1
similar solutions may some	1
similar utility for modifying	1
course a considerable job,	1
course that reflects the	1
course be the easiest	1
course be a destructor	1
course make the program	1
course there is no	1
course also time consuming,	1
course inefficient. Variables declared	1
course far from optimal.	1
course system-specific. In order	1
back to the $B1$2	1
back to single precision.	1
back to around 1980	1
back to normal afterwards.	1
back in the sequence,	1
back into the for-loop:	1
back again. This may	1
back again. If there	1
back again. Obviously, it	1
back again. Accessing system	1
risk of memory leaks	1
risk of overflow Integer	1
risk of overflow, such	1
risk of overflow: //	1
risk of underflow. The	1
risk of losing precision.	1
risk of activating the	1
risk that the programmer	1
risk that several variables	1
risk factor in itself,	1
garbage collection can occur	1
garbage collection may start	1
garbage collection when the	1
garbage collection takes a	1
garbage collection. The allocated	1
garbage collection. A more	1
garbage collection. Objects that	1
garbage collector at inconvenient	1
garbage collector which is	1
garbage collection, as mentioned	1
templates in www.agner.org/optimize/cppexamples.zip. These	1
templates for several different	1
templates for polymorphism A	1
templates are available for	1
templates // Place non-polymorphic	1
templates or modules with	1
templates where the type	1
templates makes the code	1
templates (see p. 57).	1
templates instead of virtual	1
buffer is also a	1
buffer and read or	1
buffer that some microprocessors	1
buffer can occur if	1
buffer or send data	1
buffer with fixed size	1
buffer with fixed size,	1
buffer than as a	1
buffer overflow on input	1
buffer (BTB). Contentions in	1
header for intrinsic functions	1
header file for the	1
header file for a	1
header file will give	1
header file stdint.h or	1
header file timingtest.h from	1
header file mathimf.h that	1
header files are as	1
header files For example,	1
header files. 121 13	1
future compilers may be	1
future compilers will do	1
future version of C++	1
future we may also	1
future processors. There are	1
future processors. Consider the	1
future CPUs. Half size	1
future models of the	1
future processors, and choose	1
future due to general	1
whenever the objects they	1
whenever a function of	1
whenever a public variable	1
whenever a smart pointer	1
whenever it is possible.	1
whenever it goes another	1
whenever it feeds a	1
whenever an object is	1
whenever an instance of	1
whenever they are available,	1
unrolling the loop and	1
unrolling the loop in	1
unrolling is not optimal	1
unrolling in example 14.12b	1
unrolling should only be	1
unrolling should preferably be	1
unrolling also has disadvantages:	1
unrolling In some cases	1
unrolling so that the	1
unrolling Some compilers will	1
CriticalFunction is called in	1
CriticalFunction is called once	1
CriticalFunction in example 13.1	1
CriticalFunction in example 16.2.	1
CriticalFunction = &CriticalFunction_386; }	1
CriticalFunction = &CriticalFunction_SSE2; }	1
CriticalFunction = &CriticalFunction_AVX; }	1
CriticalFunction = &CriticalFunction_Dispatch; //	1
CriticalFunction when code and	1
CriticalFunction (); __asm__ (".type	1
swap the order of	3
swap the operands if	1
swap memory to disk.	1
swap two array elements:	1
swap two elements: #define	1
swap elements // align	1
swap elements } }	1
swap these elements with	1
newer instruction set when	1
newer instruction sets enable	1
newer Intel CPUs have	1
newer version of the	1
newer method of doing	1
newer versions of Linux	1
newer processors. The following	1
newer processors. Many processors	1
newer microprocessors in the	1
newer models that were	1
fraction is stored as	1
fraction of the time	1
fraction of the total	1
fraction 2 63 .	1
fraction 2 23 ,	1
fraction 2 52 ,	1
fraction : 23; //	1
fraction : 52; //	1
fraction : 63; //	1
fraction bits: // Example	1
modify the program to	1
modify the carry flag	1
modify the ones that	1
modify a double by	1
modify an existing object	1
modify x *const_cast<int*>(&x) +=	1
modify data members. It	1
modify example 9.5 so	1
modify objects simultaneously. In	1
modify x, while other	1
seconds to access the	1
seconds to zero at	1
seconds and wait until	1
seconds = 0; while	1
seconds or microseconds as	1
seconds has been incremented	1
seconds because it requires	1
seconds count to 5	1
seconds was not declared	1
seconds remains zero in	1
unaligned integer vector from	3
unaligned integer vector into	3
unaligned arrays. There are	1
unaligned reads and writes	1
unaligned op. Intel Core	1
unaligned op. AMD Opteron	1
address. The address of	1
address. The linker will	1
address. A call from	1
address. If this address	1
address. There are two	1
address. Pointer arithmetic operations	1
address. Pointers can be	1
address. (3) look up	1
address. Step (1) is	1
address. Relocation is done	1
Store the result vector	4
Store 4 bytes without	1
Store 8 bytes without	1
Store 16 bytes without	3
Store result // Update	1
sequence of operations can	1
sequence of calculations then	1
sequence of calculations without	1
sequence of calculations forms	1
sequence of consecutive variables.	1
sequence of backwards compatible	1
sequence to be moved.	1
sequence in a temporary	1
sequence are not necessarily	1
sequence where each label	1
compiler, the assumption that	1
compiler, and the library	1
compiler, or vice versa.	1
compiler, you will notice	1
compiler, then make sure	1
compiler, which is available	1
compiler, operating system and	1
compiler, etc. #define Alignd(X)	1
compiler, v. 10.1.020. Functions	1
compiler, linker and loader	1
significant if a parameter	1
significant as long as	1
significant bit of ebx.	1
significant part of the	1
significant n bits of	1
significant effect on older	1
significant amount of time.	1
significant contribution to the	1
significant improvements. Making too	1
significant digits, so the	1
might be a better	1
might be possible to	2
might not be able	1
might have other values	1
might also be used	1
might check for overflow	1
might store the floating	1
might experience unacceptably long	1
might clash with another	1
CPU. It can be	1
CPU. If the vector	1
CPU. If not, then	1
CPU. See page 130	1
CPU. But it is	1
CPU. These virtual processors	1
CPU. These methods also	1
CPU. Algebraic reductions Most	1
CPU. Unrolling a loop	1
CPU. Should we try	1
Vector class code with	1
Vector class library Intel	1
Vector class libraries 113	1
Vector operations are useful	1
Vector operations are available	1
Vector operations are particularly	1
Vector classes defined in	2
Vector class, Intel Vector	1
Vector class, Agner 8	1
length is not known	1
length of the string	1
length of the desired	1
length of a clock	3
length of a row	1
length of a string.	1
length of each string	1
length function scans a	1
sets. The program should	1
sets. The different versions	1
sets. However, the Intel	1
sets. Most compilers will	1
sets. Supports only 32-bit	1
sets. Vector operations are	1
sets. Likewise, the compiler	1
sets. Does not optimize	1
sets. Let me explain	1
sets. Covers PC's, workstations	1
linear function of a	1
linear function of i	1
linear array for the	1
linear array with a	1
linear array will be	1
linear list with a	1
linear array. No link	1
linear algebra and statistics,	1
linear search, is fast	1
linear algebra) require other	1
something to clean up	1
something in a separate	1
something in static memory	1
something that can be	1
something that can steal	1
something on these data.	1
something takes 10 clock	1
something takes 10 μs	1
something about it. Possible	1
something about them. You	1
f is set by	1
f is zero }	1
f is added to	1
f is nonzero }	1
f = 1; for	1
f = (float)i; f	1
f = float(i); f	1
f = static_cast<float>(i); //	1
f cout << x.f;	1
f *= i; return	1
penalty is only a	1
penalty of cache misses	1
penalty of 10 -	1
penalty to using inheritance.	1
penalty for using overloaded	1
penalty for mixing different	1
penalty for mixing single	1
penalty for organizing data	1
penalty when going from	1
penalty should be avoided	1
F1 is prevented from	1
F1 is supposed to	1
F1 will never throw	1
F1 has to check	1
F1 has saved all	1
F1 only if all	1
F1 also have an	1
F1 without returning. F1	1
F1 calls another function	2
invalid and cause fatal	1
invalid in a particular	1
invalid if a thread	1
invalid if a was	1
invalid as soon as	1
invalid when i is	1
invalid pointers can be	1
invalid pointers, etc. And	1
invalid pointers. The absence	1
invalid pointers. This is	1
reasons of mathematical purity.	2
reasons to use denormal	1
reasons for this shift	1
reasons before leaving their	1
reasons explained on page	4
reasons why object oriented	1
setting the sign bit	1
setting the priority back	1
setting the fraction bits:	1
setting the flush-to-zero mode	1
setting a register to	1
setting a thread affinity	1
setting an array to	1
setting pointers to zero	1
setting these variables to	1
setting up a stack	1
module for correctness must	1
module or a function	1
module by compiling the	1
module then the compiler	1
module then it is	1
module then add the	1
module static static static	1
module (i.e. the current	1
module __attribute__ ((visibility ("internal")))	1
module with, e.g. the	1
beginning of the object	1
beginning of the new	1
beginning of the structure	2
beginning of the program.	1
beginning of the array.	1
beginning of the object,	1
beginning of a cache	1
beginning of list plus	1
beginning rather than allocating	1
within the same shared	1
within the same module	1
within the first 128	1
within the DLL use	1
within the lifetime of	1
within a certain interval:	1
within a block of	1
within a limited range	1
within a year or	1
within each clause are	1
used, for example, to	1
used, it is recommended	1
used, then use #pragma	1
used, then there may	1
used, but not if	1
used, but any of	1
used, there is simply	1
used, even when accessed	1
used, while the speed	1
used, though. Some instructions	1
checks for such errors	1
checks for array bounds	1
checks which instruction set	1
checks where necessary (see	1
checks where necessary. Fast	1
checks makes the code	1
checks whether the code	1
checks whether the processor	1
checks whether the original	1
checks both the CPU	1
input and output should	1
input in order to	1
input or network resources.	1
input or reading disk	1
input data is a	1
input less efficient than	1
input check if the	1
input never exceeds an	1
input data. A missing	1
input file. The output	1
not. The loop can	1
not. The Intel compiler	1
not. The following example	1
not. The advise of	1
not. There are various	1
not. You cannot rely	1
not. See page 107	1
not. I will conclude	1
not. Supports 32-bit and	1
not. Static cast The	1
programmers to some of	1
programmers and compiler makers.	1
programmers and software developers	1
programmers and they are	1
programmers have little or	1
programmers have discovered that	1
programmers use a hash	1
programmers do not know	1
programmers write expressions like	1
programmers rarely program their	1
alternative is the Windows	1
alternative is to run	1
alternative is to keep	1
alternative to using new	1
alternative solution is to	1
alternative solution of making	1
alternative implementations are less	1
alternative version. The penalty	1
alternative worth considering is	1
alternative implementations. 7.22 Inheritance	1
My vector class library	1
My example is a	2
My test tool can	1
My test tool supports	1
My own function library	1
My recommendation is to	1
My recommendation for good	1
My experimental results in	1
My preference is for	1
organized in a first-in-last-out	1
organized if you are	1
organized as a vector	1
organized as a register	1
organized as 32 sets	1
organized as follows: //	1
organized into lines and	1
organized into vectors. A	1
organized so that the	2
stride is a multiple	2
stride is 8192 /	1
stride and cause contentions	1
stride for the level-2	1
stride can be calculated	1
stride will contend for	1
stride then this can	1
stride (see above, page	1
stride causes all writes	1
set, and a generic	1
set, as listed in	1
set, then you cannot	1
set, but it may	1
set, but possibly not	1
set, one for SSE4.1	1
set, using asmlib library	2
set, another version for	1
set, e.g. /arch:SSE2. The	1
current instruction set. Do	1
current compilers may not	1
current compilers don't vectorize	1
current Intel CPUs can	1
current array element. Rather	1
current version satisfies the	1
current operating systems need	1
current CPUs optimally. The	1
current .cpp file) should	1
current position. Windows DLLs	1
'this' is incurred on	1
'this' in a register	1
'this' pointer to a	1
'this' pointer in member	1
'this' pointer which is	1
'this' pointer which does	1
'this' pointer takes up	1
'this' pointer. It is	1
'this' pointer. You may	1
'this' pointer, common subexpressions,	1
problem. The compiler sometimes	1
problem. The most important	1
problem. The official C	1
problem. This new insight	1
problem. If the number	1
problem. If a function	1
problem. These instructions write	1
problem. Whenever the code	1
problem. 7.11 Type conversions	1
problem. Vectors of 256-bit	1
3 The latest versions	1
3 for a list	1
3 - 4 clock	1
3 - 5 clock	1
3 - 6 clock	1
3 breakpoint and show	1
3 breakpoint again. The	1
3 Finding the biggest	2
3 1.1 The costs	1
counts a one parameter.	1
counts for threads that	1
counts that you should	1
counts that you measure	1
counts are often fluctuating	1
counts at the CPU	1
counts should be multiplied	1
counts how many times	1
counts give the execution	1
counts represent the "worst	1
gain in performance can	1
gain in performance over	1
gain in speed by	2
gain in performance. There	1
gain if such dependency	1
gain by optimizing database	1
gain by testing and	1
gain by unrolling the	1
gain depends on the	1
processors, a loop that	1
processors, a switch statement	1
processors, and it is	1
processors, and choose this	1
processors, and 3 -	1
processors, as explained on	1
processors, only the innermost	1
processors, but is less	1
processors, but not on	1
processors, between PC's and	1
happen to be equal	1
happen to be spaced	2
happen in the code	1
happen that a low-priority	1
happen that (b*c) overflows,	1
happen if the size	2
happen with the loops	1
happen quite often. This	1
enough to be noticeable	1
enough to be annoying.	1
enough to hold the	1
enough to identify a	1
enough to justify the	1
enough to justify such	1
enough for the specific	1
enough for a specific	1
enough registers then the	1
enough bits for holding	1
apply the empty throw()	1
apply to other platforms	2
apply to floating point	1
apply to very big	1
apply to arrays that	1
apply to modulo calculations:	1
apply as to the	1
apply CPU dispatching only	1
apply to. It is	1
Obviously, the best way	1
Obviously, the directly compiled	1
Obviously, the initial value	1
Obviously, a function should	1
Obviously, it is more	1
Obviously, you should apply	1
Obviously, this is not	1
Obviously, this is only	1
Obviously, all these table	1
Obviously, we loose the	1
version. The CPU dispatcher	1
version. The Gnu compiler	1
version. The examples are	1
version. The penalty of	1
version. See the vectorclass	1
version. For team projects,	1
version. For one-man projects,	1
version. 2. Check that	1
version. Note that the	1
version. Updating mechanisms often	1
row is a constant	1
row to the address	1
row or column. The	1
row by adding the	1
row + column; Do	1
row < NUMROWS; row++)	1
row addresses at each	1
row length is not	1
row 28 below the	1
row 28 share the	1
Compiler has insufficient information	1
Compiler optimization options All	1
Compiler optimization options ...................................................................................	1
Compiler directives and keywords	1
Compiler v. 8.42n, 2004.	1
Compiler v. 11.1 for	1
Compiler v. 14.00 for	1
Compiler identification 16 bit	1
Compiler Documentation for details.	1
Compiler Documentation". Included with	1
matter of programming style.	4
matter of interpreting the	2
matter of convenience -	1
matter of habit, it	1
matter and there is	1
matter if the size	1
declaration of the table	1
declaration of c1 before	1
declaration to tell the	1
declaration and the most	1
declaration and the object	1
declaration may in some	1
declaration class CChild1 :	1
declaration makes it easier	1
declaration size, bits minimum	1
declaration "static" or "__attribute__((visibility	1
allocate the final array	1
allocate a new memory	2
allocate a new bigger	1
allocate a small block	1
allocate more memory blocks	1
allocate more space than	1
allocate more RAM than	1
allocate one big block	1
allocate variable-size arrays with	1
series of branches every	1
series of statements that	1
series of five manuals	1
series of five manuals.	1
series of five manuals:	1
series of manuals. 7.1	1
series of calculations: //	1
series of calculations, where	1
series of experiments on	1
series float Exp(float x)	1
features of the position-independent	1
features of Intel C++	1
features of Java and	1
features to each new	1
features and for code	1
features for automatic CPU	1
features it has. Assuming	1
features as the Microsoft	1
features rarely found in	1
features 80386 32 bit	1
added a bounds check	1
added to the first	1
added to the second	1
added to the offset	1
added to a pointer	1
added to a variable	1
added to p is	1
added and then use	1
added at any time,	1
added information about the	1
user. The advantages of	1
user. There may be	1
user. Dynamic linking works	1
user. Time is a	1
user. Making exception-safe code	1
user. With the high	1
user. Installation problems. The	1
user. Menus, buttons, dialog	1
user. Compatibility problems. All	1
user. Feature bloat. It	1
to: // Example 14.14b	1
to: // Example 14.5b	1
to: // Example 8.15b	1
to: // Example 7.10b	1
to: // Example 8.13b	1
to: // Example 8.11b	1
to: // Example 14.17b	1
to: // Example 8.10b	1
to: // Example 8.12b	1
to: // Example 8.14b	1
waste a lot of	1
waste of the user's	1
waste of the programmers'	1
waste of time in	1
waste of time for	1
waste of cache space.	1
waste of cache space,	1
waste of resources. For	1
waste of resources. Consider	1
waste of time, it	1
metaprogramming is the only	1
metaprogramming in C++: Preprocessor	1
metaprogramming can be used	1
metaprogramming // Template for	1
metaprogramming so complicated? Because	1
metaprogramming would be straightforward.	1
metaprogramming implementation analogous to	1
metaprogramming is. // Example	1
metaprogramming features, including the	1
metaprogramming tools to be	1
map is needed in	1
map are prone to	1
map can be used	1
map or an assembly	1
map may also be	1
map file from the	1
map file includes the	1
map file tells the	1
map file /Fm Generate	1
map file" option for	1
define a structure or	1
define a macro to	1
define in this way	1
define function type typedef	1
define function names and	1
define 64-bit integers, but	1
define matrix // call	1
define your own error-handling	1
define application-specific instructions that	1
define fprintf // define	1
returns. The next time	1
returns. The preferred method	1
returns. This is because	1
returns. There is no	1
returns. But what if	1
returns. Make the function	1
returns. Alternatively, you may	1
returns. alloca may not	1
returns. Global or static	1
returns. Every time a	1
Windows. The disadvantage of	1
Windows. The integrated development	1
Windows. It is more	1
Windows. In 64-bit Linux,	1
Windows. Gnu Comes with	1
Windows. 10 Multithreading The	1
Windows. Borland / CodeGear	1
Windows. Does not support	1
Windows. Does not, by	1
Windows. Integrates into the	1
style that doesn't automatically	1
style are that software	1
style if it is	1
style with character arrays.	1
style as character arrays.	1
style has both positive	1
style floating point code.	1
style string functions have	1
style type-casting with a	1
Load library at initialization.	1
Load eight consecutive elements	8
3; for (i =	1
3; or __asm ("int	1
3; } The compiler	1
3; } if (b)	1
3; } This can	2
3; } return a	1
3; return a -	1
3; return a +	1
approximately two clock cycles	1
approximately two clock cycles.	1
approximately three times faster.	1
approximately 12 - 25	1
approximately six in 32-bit	1
approximately six integer registers	1
approximately seven significant digits,	1
approximately so. It may	1
approximately 500 clock cycles.	1
order. The same applies	1
order. The heap manager	1
order. The advice of	1
order. This makes data	1
order. If the code	1
order. See page 103	1
order. Example: // Example	1
order. Some compilers have	1
order. Long dependency chains	1
3: "The microarchitecture of	8
3: printf("Delta"); break; }	1
microarchitecture of Intel, AMD	9
easy to make floating	1
easy to trace with	1
easy to port to	1
easy way to control	1
easy way to roll	1
easy development of user	1
easy linking to assembly	1
easy development. For example,	1
easy GUI development, database	1
situations to avoid that	1
situations where the compiler	1
situations where the number	1
situations where a vector	1
situations where a high	1
situations where code caching	1
situations where automatic vectorization	1
situations where pre-increment is	1
situations like example 12.4a	1
implement the functions that	1
implement the many rules	1
implement the dispatch on	1
implement a microprocessor in	1
implement a queue as	1
implement a universal algorithm	1
implement in a compiler.	1
implement this "override" feature.	1
implement OneOrTwo5[b!=0] as OneOrTwo5[(b!=0)	1
65 8 Optimizations in	2
65 bytes of code).	1
65 65 33 11.8	1
65 65 13.6 80.9	1
65 33 11.8 127	1
65 13.6 80.9 512	1
65 7.32 Preprocessing directives	1
65 7.33 Namespaces........................................................................................................... 65	1
chosen the wrong branch.	1
chosen for the sake	1
chosen for the label.	1
chosen as the basis	1
chosen compiler doesn't provide	1
chosen only when running	1
chosen version return (*CriticalFunction)(parm1,	1
chosen based on the	1
chosen expression. Example 12.4b	1
256-bit vector as two	1
256-bit vector register for	1
256-bit integer vectors. Code	1
256-bit size are only	1
256-bit registers named YMM	1
256-bit instructions were splitting	1
256-bit read operations into	1
256-bit YMM vectors are	1
256-bit YMM registers. The	1
slightly more efficient to	1
slightly more efficient than	1
slightly more efficient because	1
slightly more time. Single	1
slightly more resources than	1
slightly faster in 64-bit	1
slightly less efficient. In	1
slightly less compact. See	1
slightly less efficiently. This	1
scattered around in memory	2
scattered around in program	1
scattered around in memory.	1
scattered around on the	1
scattered around at different	2
scattered everywhere in the	1
scattered randomly around in	1
contain the different versions	1
contain is provided as	1
contain a typical degree	1
contain all data members	1
contain many tips on	1
contain pointers or addresses	1
contain useful discussions about	1
contain either sixteen integers	1
contain pure function calls	1
writes a file can	1
writes to any other	1
writes to matrix a	1
writes to load a	1
writes or reads to	1
writes with normal writes	1
writes may slow down	1
writes automatically in vectorized	1
writes only, then the	1
device is a chip	1
device than in a	1
device should preferably be	1
device itself is a	1
device drivers for 64-bit	1
device drivers for Windows.	1
device drivers are particularly	1
device drivers may need	1
device driver. A call	1
independent of the loop	1
independent of the value	1
independent of changes in	1
independent and checks both	1
independent code more efficient.	1
independent then you can	1
independent code. The name	1
independent code, see below.	1
independent divisions. Example: //	1
allocation. The heap can	1
allocation. This method also	1
allocation. There is no	1
allocation. You should avoid	1
allocation. See page 93	1
allocation. Some programming languages,	1
allocation. Dynamic memory allocation	1
allocation. Do not use	1
allocation. Container classes can	1
non-static data members or	2
non-static variables and objects	2
non-static member function because	2
non-static member functions. The	1
non-static member functions. A	1
non-static access. 7.20 Virtual	1
subsequent elements in the	1
subsequent times because of	1
subsequent instructions. The 512	1
subsequent counts give the	1
subsequent counts represent the	1
subsequent sections describe various	1
subsequent manuals are for	1
subsequent manuals. Please note	1
subsequent counts. This is	1
applies to the modulo	1
applies to an array	1
applies to arrays of	1
applies to reading as	1
applies to BSD systems.	1
applies to default constructors,	1
applies to decrement operators	1
applies to 3-dimensional geometry	1
applies only when elements	1
applied to a function	1
applied to a class	1
applied to a global	1
applied to a local	1
applied to a non-member	1
applied to all instances	1
applied to 32-bit integers,	1
applied to integers. It	1
applied to integers. 7.25	1
destructors of each object	1
destructors to take care	1
destructors to call. I	1
destructors for local objects	1
destructors are called and	1
destructors are called. The	1
destructors A constructor is	1
destructors after jumping out	1
destructors .................................................................................. 55 7.24	1
integers. The branch inside	1
integers. The allocation and	1
integers. It is more	1
integers. It is faster	1
integers. It can contain	1
integers. But there are	1
integers. Many 32-bit systems	1
integers. 7.25 Bitfields Bitfields	1
integers. 7.5 Booleans The	1
terms of code size.	1
terms of program performance	1
terms of execution speed	2
terms of specific processor	1
terms of usability problems	1
terms of speed. Assume	1
terms of development, testing	1
terms in one vector.	1
help the compiler optimize	1
help the CPU doing	1
help the programmer choosing	1
help of the compiler	1
help if you want	1
help files and other	1
help files and databases.	1
help files etc. scattered	1
help files, data base	1
transfer is more efficient	1
transfer is avoided for	1
transfer is avoided. The	1
transfer a pointer or	1
transfer of a parameter	1
transfer for 'this' is	1
transfer are eliminated. Code	1
transfer across all .cpp	1
transfer ownership of the	1
blocks is more efficient.	1
blocks is faster than	1
blocks of memory. These	1
blocks of data", where	1
blocks in order to	1
blocks than there are	1
blocks such as gates,	1
blocks makes the access	1
blocks rather than a	1
away the variable in	1
away the extra overhead	1
away a const reference	1
away and the result	1
away in the future	1
away in reusable and	1
away an overflow check.	1
away p and inlining	1
away cpuid // Read	1
15.1b is easier to	1
15.1b is implemented. The	1
15.1b to metaprogramming would	1
15.1b to 15.1c was	1
15.1b to 15.1c. We	1
15.1b to 15.1c, but	1
15.1b to 15.1c? We	1
15.1b and the Gnu	1
15.1b and d in	1
low in order to	1
low instruction set can	1
low power consumption are	1
low positive result. The	1
low repeat count may	1
low priority of program	1
low priority thread, and	1
low priority. In many	1
low priority. Especially the	1
multiply a nonzero floating	1
multiply and shift Floating	1
multiply // square x	1
multiply it by 100	1
multiply by a power	1
multiply by - reciprocal	1
multiply by xx-xx--x- reciprocal	1
multiply integers of any	1
multiply j by is	1
share the same code	1
share the same memory	2
share the same cache	1
share the same register	1
share the same dynamic	1
share the same cache.	1
share the same piece	1
share the same cache,	1
enabled. The compiler will	1
enabled. The advantage of	1
enabled. A more primitive,	1
enabled. There are no	1
enabled. Conversion from integer	1
enabled. Conversions between integers	1
enabled. Typically, the conversion	1
enabled. Volatile The volatile	1
enabled. Few compilers are	1
explanation of the instruction	1
explanation of this option.	1
explanation of return prediction).	1
explanation of branch prediction.	2
explanation of register stack	1
explanation and possible workaround.	1
explanation if you are	1
explanation why this delaying	1
near the maximum repeat	1
near then the even	1
near each other in	3
near each other are	2
near each other. See	2
provided in the asmlib	1
provided in an appendix	1
provided in manual 4:	1
provided that the function	1
provided that the operands	1
provided as a template	1
provided as an example	1
provided several examples of	1
provided below, on page	1
latter is more efficient.	1
latter is slightly more	1
latter is executed even	1
latter function also has	1
latter has one operator	1
latter case the reading	1
latter function, but it	1
latter case, the calculation	1
latter case, you may	1
6 The 64-bit systems	1
6 clock cycles, depending	1
6 unused bytes //	1
6 unused bytes between	1
6 integer, pointer or	1
6 Development process There	1
6 Development process...................................................................................................... 25	1
6 2.3 Choice of	1
6 2.4 Choice of	1
stores the time consumption	1
stores the result in	1
stores the offset of	1
stores the lower 16	1
stores the thousand results	1
stores a double without	1
stores a pointer to	1
stores this result in	1
stores all the objects	1
to. A const member	1
to. A reference is	1
to. It is advantageous	1
to. It is safer	1
to. For example: //	2
to. Example: // Example	1
to. Therefore, it cannot	1
to. Now ebx contains	1
default in 64-bit mode.	1
default integer size in	1
default size when doing	1
default unless there is	1
default constructor is not	1
default constructor that does	1
default constructor // constructor	1
default anyway in 64-bit	1
default constructors, copy constructors,	1
Instruction set SSE2 not	1
Instruction set char 8	1
Instruction set needed _mm_shuffle_epi8	1
Instruction set control no	1
Instruction set Header file	1
Instruction set Prefetch PREFETCH	1
Instruction set Important features	1
Instruction sets A more	1
Instruction tables: Lists of	1
finding the most efficient	1
finding the hot spots	1
finding the right version	1
finding the right formula	1
finding the numerically largest	1
finding a suitable pivot	1
finding problems that relate	1
finding hot spots, but	1
finding elements. A hash	1
inefficient. The modern microprocessors	1
inefficient. If a program	1
inefficient. There is a	1
inefficient. An allocated array	1
inefficient. Dynamic memory allocation	1
inefficient. Variables declared inside	1
inefficient. Objects of a	1
inefficient. Division, square root	1
inefficient. Linear arrays are	1
c, d; a =	1
c, d; if (a	1
c, d; c =	2
c, d; }; void	1
c, temp; temp =	1
c, d, y; y	2
c, d, e, f,	1
search for updates should	1
search for updates every	1
search for finding elements.	1
search instructions AVX 256	1
search times 24 dramatically	1
search facilities are needed,	2
search facilities, binary trees,	1
search requests for elements	1
Modern compilers can do	1
Modern CPUs are so	1
Modern CPUs are actually	1
Modern CPUs are capable	1
Modern CPUs can do	1
Modern microprocessors in the	1
Modern microprocessors are using	1
Modern microprocessors are able	1
Modern microprocessors can do	1
block. This is inefficient,	1
block. This requires a	1
block. A large block	1
block. A linked list	1
block. There is a	1
block. Do not use	1
block. Any pointers to	1
block. Thread-local storage should	1
block. Walking through a	1
critical. The branch target	1
critical. The fastest execution	1
critical. The worst problem	1
critical. A very time-consuming	1
critical. It is possible	1
critical. However, there may	1
critical. Therefore, the number	1
critical. Optimizing for speed	1
critical. 129 13.7 CPU	1
chains is stronger when	1
chains in the code	1
chains can be very	1
chains can be broken	1
chains with long latencies.	1
chains then each thread	1
chains (see p. 22).	1
chains Modern microprocessors can	1
chains ................................................................................................ 22 3.16	1
time-consuming function in system	1
time-consuming than a simple	1
time-consuming data processing. Running	1
time-consuming part of the	1
time-consuming (see page 140).	1
time-consuming parts of the	1
time-consuming tasks because this	1
time-consuming tasks into separate	1
time-consuming garbage collector at	1
brands of C++ compilers	1
brands of CPUs such	1
brands of CPUs unequally	1
brands of microprocessors are	1
brands of CPUs. The	1
brands of CPUs, different	1
brands and similarly sets	1
brands or specific models	1
brands or models that	1
available. The most important	1
available. The number of	1
available. The best compilers	1
available. The older MMX	1
available. It should be	1
available. See page 81	1
available. Some compilers offer	1
available. Microsoft Comes with	1
available. declaration size, bits	1
Don't use an advanced	1
Don't put a task	1
Don't put something in	1
Don't change && to	1
Don't rely on longjmp	1
Don't mix float and	2
Don't mix nontemporal writes	1
Don't panic if you	1
brand is likely to	1
brand of CPU. These	1
brand or model the	1
brand new today will	1
brand check is bypassed	1
brand simply by setting	1
brand was less popular	1
brand name and model	1
brand names and model	1
executed. The compiler can	1
executed. This has the	1
executed. It is therefore	1
executed. If the value	1
executed. An example is	1
executed. However, the pipeline	1
executed. Furthermore, you may	1
executed. Optimizes very well.	1
executed. Without static, the	1
faster. The most important	1
faster. The advantage of	1
faster. The logic of	1
faster. It is assumed	1
faster. In the case	1
faster. In the above	1
faster. There may be	1
faster. Division by a	1
faster. Of course, this	1
diagonal is swapped with	1
diagonal and swap these	1
diagonal are accessed column-wise.	1
diagonal are accessed row-wise,	1
diagonal // swap elements	1
diagonal have been lost	1
diagonal there is only	1
diagonal remain unchanged. The	1
diagonal swapd(a[r][c], a[c][r]); //	1
n; static char const	1
n; i++) { 92	1
n; i++) f *=	1
n; switch (n) {	1
n; #if defined(__unix__) ||	1
n; #endif return n;}	1
n; x++) factorial *=	1
n; u.i = (n	1
n; 143 if (u.i	1
*p and calculate *p+2	1
*p = *p +	2
*p = string; int	1
*p = string; while	1
*p or p->member is	1
*p + 2; }	2
*p + 2;} int	1
logic of the program	1
logic may need extra	1
logic structure of a	1
logic allows parallel calculations.	1
logic allows it, it	1
logic device is a	1
logic device than in	1
logic devices A programmable	1
logic behind the program	1
Microsoft, Intel and Gnu	2
Microsoft, Intel and Gnu.	1
Microsoft, Intel and Gnu).	1
Microsoft, Intel, Gnu and	3
Microsoft, Intel, PathScale and	1
Microsoft, Gnu, Clang Supported	1
hard disk or other	1
hard disk or network.	1
hard disk if the	1
hard disk because of	1
hard disk often takes	1
hard disk copying. Security.	1
hard disk. A few	1
hard disk. Test with	1
hard working software users.	1
purposes the standard PC	1
purposes is beyond the	1
purposes is allowed. The	1
purposes in 32-bit operating	1
purposes are also available.	1
purposes than it is	1
purposes than rendering graphics	1
purposes such as email	1
purposes (www.boost.org). The "Intel	1
typical set of test	1
typical software project goes	1
typical way to test	1
typical uses of dynamic	1
typical application to calculate	1
typical implementation of the	1
typical repeat count is	1
typical sources of frustration	1
typical degree of randomness	1
usability may be poor	1
usability A better performing	1
usability problem in interactive	1
usability problems and necessary	1
usability problems and desired	1
usability problems that software	1
usability reasons. The programmer	1
usability ............................................................................................... 23 5	1
usability issues, and I	1
pure function is a	1
pure function with the	1
pure function calls and	1
pure function calls. The	1
pure function calls. Unfortunately,	1
pure if the function	1
pure function. Example: //	1
pure functions, but unfortunately	1
pure __attribute(( const)) __attribute((	1
vectorize the code if	1
vectorize the code automatically	2
vectorize the code automatically.	1
vectorize the code explicitly.	1
vectorize the loop in	1
vectorize a loop or	1
vectorize code explicitly by	1
vectorize automatically. The code	1
problems. The performance monitor	1
problems. The procedures for	1
problems. It is not	1
problems. It is recommended	1
problems. Some common problems	1
problems. All software should	1
problems. Avoid nested function	1
problems. Software developers should	1
problems. More details about	1
could be a member	1
could be calculated by	1
could be achieved more	1
could have been defined	1
could calculate *p+2 and	1
could possibly be relevant	1
could free the memory	1
could benefit from using	1
could benefit from register	1
parameter. The order of	1
parameter. It can call	1
parameter. If MultiplyBy in	1
parameter. In other words,	1
parameter. There is no	1
parameter. But it may	1
parameter. No time is	1
parameter. Templates may be	1
parameter. Further details are	1
derived class is implemented	1
derived class in another	1
derived class are stored	1
derived class are called	1
derived class (see page	1
derived class through a	1
derived class. This check	1
derived class, it checks	1
derived class: // Example	1
mentioned in the above	1
mentioned in table 9.2,	1
mentioned in chapter 12.	1
mentioned above for the	1
mentioned below. Microsoft Visual	1
mentioned above. The generality	1
mentioned above. An object	1
mentioned above. Now the	1
mentioned here: A large	1
Time is a precious	1
Time for transposition of	1
Time for transposing and	1
Time // Serialize //	1
Time before test //	1
Time difference for each	1
Time per element Example	2
Time per element 63	1
Optimization of Numerically Intensive	2
Optimization in embedded systems	2
Optimization method Function inlining	1
Optimization directives Some compilers	1
Optimization directives .............................................................................................. 82	1
Optimization Guide for AMD	1
Optimization Reference Manual". developer.intel.com.	1
expressions. It is therefore	1
expressions. There are lots	1
expressions. See page 80	1
expressions. For example, a	1
expressions. For example, only	1
expressions. Most reductions involving	1
expressions. Floating point variables	1
expressions. Whether the constants	1
expressions. Operations that are	1
include the appropriate header	1
include a performance test	1
include a few instructions	1
include a profiler that	1
include not only a	1
include any part of	1
include standard libraries for	1
include C, C++, D,	1
include JavaScript, PHP, ASP	1
y; // x,y coordinates	1
y; x = a	1
y; } double xpow10(double	1
y; ... x.a =	1
y; y = a	3
y; y = (a	1
y; bool b; if	1
overflow. The exception is	1
overflow. This function is	1
overflow. For example, in	1
overflow. Example: // Example	2
overflow. Table 8.1 (page	1
overflow. Likewise, it is	1
overflow. Signed versus unsigned	1
overflow. Taking the logarithm	1
element. The integer comparison	1
element. The most common	1
element. The table shows	1
element. The multiplication by	1
element. In some cases	1
element. I have confirmed	1
element. 100 As table	1
element. Matrix size Total	1
element. Rather than comparing	1
oriented programming are dominating.	1
oriented programming can be	1
oriented programming as a	1
oriented programming without paying	1
oriented programming are: Non-static	1
oriented programming style if	1
oriented programming style has	1
oriented programs can be	1
oriented programs. If you	1
fully compiled code. Compiled	1
fully optimized code because	1
fully optimized yet. Supports	1
fully compatible on the	1
fully standardized and supported	1
fully portable in the	1
fully optimized. Library functions	1
fully utilize systems with	1
fully utilizing its out-of-	1
storage. The same register	1
storage. Example 14.23b and	1
storage. If you access	1
storage. See page 26.	1
storage. All x86 platforms	1
storage. No function or	1
storage. Variables that are	1
storage. Optimizing file access	1
storage. Live range analysis	1
addition, a floating point	1
addition, and a floating	1
addition, set the denormals-are-zero	1
addition, fast approximate reciprocal,	1
addition, subtraction and multiplication	3
addition, subtraction, multiplication, etc.	1
addition, subtraction, comparison, bit	1
everything is double There	1
everything is float 140	1
everything in case of	1
everything that is allocated	1
everything that has been	1
everything that depends only	1
everything happens at runtime).	1
everything else. This normally	1
everything else. System code	1
involves the problems that	1
involves the overhead of	1
involves the risk of	2
involves eight or sixteen	1
involves eight floating point	1
involves allocation of memory	1
involves multiplication or division.	1
involves pure function calls.	1
Here the iteration is	1
Here is a list	1
Here are some examples:	1
Here it is possible	1
Here you have to	1
Here you cannot swap	1
Here we can eliminate	1
Here we prefer a	1
Here CParent is a	1
factorial = 1.0; for	1
factorial = 1.0; int	1
factorial function looks like	1
factorial function (n!) as	1
factorial } return sum;	1
factorial (int n) {	2
factorial *= x; This	1
factorial *= x; Note	1
OpenMP is a standard	1
OpenMP and automatic vectorization.	2
OpenMP and automatic parallelization.	1
OpenMP and automatic parallelization	1
OpenMP directives for parallel	1
OpenMP directives for multi-core	1
OpenMP directives 32 bit	1
OpenMP directives. OpenMP is	1
eax to the address	1
eax = i =	1
eax with 100 and	1
eax / sar ebx,1	1
eax ebx, 1 ebx,	1
eax ebx, 31 ebx,	1
eax edx, DWORD PTR	1
eax holds the index,	1
eax $B2$2 ; Induction++;	1
bb[], short int cc[])	8
bb[], short int cc[]);	1
mispredicted for this reason.	1
mispredicted only when it	3
mispredicted only one time	1
mispredicted even if they	1
mispredicted (See manual 3:	1
mispredicted whenever it goes	1
mispredicted 50% of the	1
standardized and done by	1
standardized and supported on	1
standardized as possible for	1
standardized file formats should	1
standardized allows us to	1
standardized installation tools. It	1
standardized details in both	1
standardized across platforms. See	1
standardized manner. 3.4 Automatic	1
(or in addition to)	1
(or if a reasonable	1
(or at least a	1
(or part of it).	1
(or malloc and free)	1
(or int) instead of	1
(or later) instruction set	1
(or higher) is enabled.	1
(or eight) points with	1
across the function call.	1
across a call to	1
across function calls. There	1
across function calls. Example:	1
across all .cpp modules	1
across compilers. Fastcall is	1
across modules The compiler	1
across modules (See page	1
across platforms. See the	1
cycle is the reciprocal	2
cycle is 1 0.5ns.	1
cycle if the source	1
cycle on one computer	1
cycle on most microprocessors.	1
cycle on another computer.	1
cycle counter is very	1
cycle counter (see below)	1
aliasing is to turn	1
aliasing does not occur.	1
aliasing (see page 78).	2
aliasing When accessing a	1
aliasing rule of standard	2
aliasing (/Oa). The easiest	1
aliasing /Oa -fno-alias Non-strict	1
aa[], short int bb[],	9
tool is not a	1
tool is faster to	1
tool is Microsoft Visual	1
tool for using the	1
tool for details (www.agner.org/optimize/testp.zip).	1
tool can be used	1
tool can make two	1
tool can set up	1
tool supports both Intel,	1
parent and child are	1
parent and child class	1
parent and child class.	1
parent class and a	1
parent class and derived	1
parent class in one	1
parent class data members	1
parent classes in the	1
parent class. The child	1
care of the CPU	1
care of the user	1
care of the alignment.	1
care of this alignment	1
care of all cleanup	1
care of some of	1
care of communication with	1
care to calculate the	1
care about the sign	1
systems, and API's. Memory	1
systems, you may use	1
systems, you cannot increase	1
systems, this may work	1
systems, but in registers	1
systems, there is only	1
systems, though these operating	1
systems, especially if the	1
parm1, int parm2) {	1
parm1, int parm2) {...}	6
parm1, int parm2); //	1
included in the operating	1
included in the profile.	1
included in the representation,	1
included in a single	1
included in compiler price	1
included for the sake	1
included with the Gnu	1
included as part of	1
false and 1 for	1
false = a a	1
false = false, a	1
false where it should	1
false model number to	1
false regardless of the	1
false (0); and the	1
false vendor string. In	1
value. The loop would	1
value. The copy constructor	1
value. The keyword static,	1
value. This is useful	1
value. It does this	1
value. There is no	1
value. Example: // Example	1
value. However, the const	1
file. The output goes	1
file. This enables the	2
file. A console mode	1
file. If the member	1
file. Use another function	1
file. Only the executable	1
file. Keep often used	1
*= i; return f;	1
*= x; This can	1
*= x; x *=	1
*= x; n >>=	1
*= x; Note the	1
*= x; nfac *=	1
*= n+1; // Approximate	1
*= xx4; // next	1
temporary object for the	1
temporary array before calling	1
temporary objects for intermediate	1
temporary variable outside the	1
temporary register for computing	1
temporary storage. Variables that	1
temporary debug breakpoints at	1
temporary intermediates, loop counters,	1
12 or 16 8	1
12 - 25 clock	1
12 option -fno-builtin to	1
12 Using vector operations	1
12 Using vector operations...............................................................................................	1
12 bytes. The time	1
12 2.7 Choice of	1
12 $B1$1: push mov	1
memcpy is unsafe because	1
memcpy function implicitly when	1
memcpy rather than moving	1
memcpy function. There are	1
memcpy 16kB aligned operands	2
memcpy 16kB unaligned op.	2
procedure to calculate self-relative	1
procedure 4 Most of	1
procedure linkage table (PLT)	3
procedure linkage table (PLT).	2
procedure linkage table. If	1
PC and then transferred	1
PC processors is not	1
PC processors are preferred	1
PC processors with CISC	1
PC processors. The application	1
PC platform with an	1
PC platforms. Graphics accelerators	1
PC platform. However, with	1
frequent if the time	1
frequent cause of unacceptably	1
frequent allocation and de-allocation	1
frequent source of errors	1
frequent causes of compatibility	1
frequent updates are necessary	1
frequent sources of compatibility	1
frequent sources of resource	1
unlimited 4 bytes =	4
unlimited 8 bytes =	4
parallelism is the situation	1
parallelism is obvious and	1
parallelism is obvious. See	1
parallelism and fine-grained parallelism	1
parallelism than with fine-grained	1
parallelism when deciding whether	1
parallelism because communication and	1
parallelism refers to the	1
detection function of the	1
detection function in Intel	1
detection function that I	1
detection function as described	1
detection function In some	1
detection mechanism in Intel	1
detection function, one that	1
detection mechanism. The CPU	1
c2 and bc for	1
c2 for elements inside	1
c2 = _mm_add_epi16(c, two);	2
c2 = _mm_and_si128(c2, mask);	1
c2 with the bit-mask:	1
c2 < c1+TILESIZE; c2++)	1
c2 < r2; c2++)	1
"The microarchitecture of Intel,	8
throw() to the function	1
throw() statement can improve	1
throw() Assume function called	1
throw() throw() Assume function	1
throw() throw() throw() Assume	1
throw() throw() throw() throw()	1
throw() specification. The empty	1
throw() specification to F1	1
prediction and misprediction of	1
prediction are different for	1
prediction or estimate of	1
prediction into account in	1
prediction (see p. 43).	1
prediction turns out to	1
prediction mechanism. See page	1
prediction mechanisms. Modern microprocessors	1
polymorphic function goes in	1
polymorphic class has a	1
polymorphic member of its	1
polymorphic member function is	1
polymorphic function. The }	1
polymorphic functions. The second	1
polymorphic child function: (static_cast<MyChild*>(this))->Disp();	1
polymorphic classes. Each instance	1
#if is more efficient	1
#if is resolved at	1
#if instead of if.	1
#if directives are useful	1
#if directives around it	1
#if INSTRSET == 2	2
#if defined(__unix__) || defined(__GNUC__)	1
now that we are	1
now be vectorized as	1
now as follows. The	1
now used in some	1
now contains the address	1
now contains only six	1
now overlap. Compilers do	1
now discontinued Object Windows	1
unit is clock cycles	1
unit is pipelined, as	1
unit of received data	1
unit for other purposes	1
unit as additions. Divisions	1
unit intended for calculating	1
unit throughput There is	1
unit throughput ....................................................................................... 22	1
conventions for different C++	6
conventions for functions that	1
conventions are different. 64-bit	1
register. The library function	1
register. The above example	1
register. This advantage comes	1
register. If the carry	1
register. In example 12.2,	1
register. Factors that make	1
register. Everything that is	1
register. Registers are a	1
kind of branch that	1
kind of instructions for	1
kind of error is	1
kind of problems you	1
kind of optimizations is	1
kind of registers. There	1
kind of branch. After	1
kind of exceptions a	1
graphical user interface and	1
graphical user interface can	1
graphical user interface (OnIdle	1
graphical user interface. A	1
graphical user interface. Otherwise	1
graphical user interfaces from	1
graphical interface calls. The	1
graphical interface frameworks are	1
lower than a certain	1
lower instruction set. The	1
lower 8 or 16	1
lower 16 bits of	1
lower priority than the	1
lower priority level, typically	1
lower priority. If the	1
lower case: // Example	1
label is equal to	1
label if i <	1
label ; return from	1
label ; save ebx	1
label ; restore ebx	1
label plus one, because	1
label $B1$2:. This is	1
label ;eax=addressofa ;edx=addressinr ;	1
iterations is not divisible	1
iterations of redesign. Some	1
iterations and start the	1
iterations in one. The	1
iterations such as Taylor	1
iterations are: No loop-carried	1
iterations back. The method	1
iterations ahead. It is	1
misprediction is approximately 12	1
misprediction of virtual function	1
misprediction long before the	1
misprediction before it is	1
misprediction every time the	1
misprediction penalty is only	1
misprediction penalty of 10	1
misprediction penalty. Branches are	1
integer, and the fraction	1
integer, and this pointer	1
integer, or an integer	1
integer, then you can	1
integer, pointer or reference	1
integer, so that the	1
integer, signed or unsigned	1
integer, usually 32. In	1
binding is that the	1
binding of function calls.	1
binding can be useful	1
binding by default, which	1
binding by default, even	1
binding should therefore be	1
binding definitely degrades performance	1
binding leads to a	1
just-in-time compiler can optimize	1
just-in-time compilation of the	1
just-in-time compilation of an	1
just-in-time compilation may be	1
just-in-time compilation. The program	1
just-in-time compilation. Some early	1
just-in-time compilers, system database,	1
just-in-time compilers, etc., as	1
try to do as	1
try to run two	1
try to optimize this	1
try to fix the	1
try { F1(); }	1
try different libraries and	1
try block or function	1
try block. There is	1
background is further explained	1
background are unnecessary for	1
background calculations piece by	1
background process running when	1
background job can be	1
background processes running, and	1
background services under advanced	1
background jobs. The context	1
converted to a pointer	2
converted to a longer	1
converted to a pointer.	1
converted to an integer,	1
converted to unsigned. //	1
converted to OMF format.	1
converted by the compiler	1
pointed to is a	1
pointed to is identical	1
pointed to is known.	1
pointed to can be	2
pointed to by r	1
pointed to by p	1
pointed to. For example:	1
CPUs, as described in	3
CPUs, not for other	1
CPUs, different types of	1
CPUs, but it uses	1
CPUs, but not on	1
CPUs, but event-counters do.	1
account in the software.	1
account for unaligned arrays.	1
account that each value	1
account when optimizing multithreaded	1
account when deciding whether	3
account when choosing a	1
p) { int i;	1
p) { return _mm_loadu_si128((__m128i	3
p) { return _mm_load_si128((__m128i	1
p) { *p =	2
p) {return p->a +	1
chain is a series	1
chain of function calls	1
chain in two: //	1
chain may fill up	1
chain has a latency	1
chain which prevents out-of-order	1
chain where each addition	1
chain would make the	1
algorithms is that it	1
algorithms to predict which	1
algorithms and data structures	1
algorithms in the planning	1
algorithms in order to	1
algorithms for different purposes	1
algorithms are described in	1
algorithms used for branch	1
PLT and GOT. The	1
PLT for all functions	1
PLT for internal references.	1
PLT tables are not	2
PLT entry with the	1
PLT entry initially points	1
PLT lookups for local	1
heavy work to do	1
heavy mathematical calculations, should	1
heavy graphics application is	1
heavy graphics calculations. In	1
heavy background calculations piece	1
heavy marketing of 64-bit	1
heavy competition. Processors with	1
heavy traffic and a	1
once the hot spots	1
once The bitwise operators	1
once for each function	1
once for each version	1
once or multiple times	1
once more by the	1
once then the compiler	1
once made a Windows	1
additions and no multiplications.	1
additions and shift operations.	1
additions and multiplications. Subtractions	1
additions in the same	1
additions in one operation.	1
additions are independent then	1
additions by the use	1
additions with double's. It	1
hash table for even	1
hash table can improve	1
hash table increases the	1
hash map is needed	1
hash map can be	1
hash map may also	1
hash maps etc. It	1
hash map. Do objects	1
ecx and edx can	1
ecx and edx, respectively.	1
ecx = a ;	1
ecx = Induction ;	1
ecx contains the address	1
ecx DWORD PTR [eax+4],	1
ecx now contains the	1
ecx 86 add add	1
system. The number of	1
system. The best performance	1
system. This is very	1
system. It will crash	1
system. See page 122	1
system. See page 29	1
system. AVX is supported	1
system. Note that the	1
variables, and for saving	1
variables, if possible. See	1
variables, loop counters, etc.	1
variables, but will save	1
variables, integer Register variables,	1
variables, floating point constants,	1
variables, float Live range	1
variables, arrays and objects.	1
equally efficient because they	1
equally efficient because, in	1
equally likely to be	1
equally fast whether p	1
equally efficient. If you	1
equally efficient. Simple function	1
equally near then the	1
equally fast. In general,	1
however, to pass a	1
however, and it may	1
however, if the array	1
however, when b is	1
however, there is a	1
however, where there are	1
however, where template metaprogramming	1
however, often write expressions	1
designed to handle only	1
designed to solve this	1
designed for a higher	1
designed for this purpose.	1
designed for generality and	1
designed by Intel but	1
designed so as to	1
designed program. 6 Development	1
profiling and debugging. A	1
profiling (see page 16)	1
profiling support in the	1
profiling support. Then you	1
profiling tools that fit	1
profiling instruments in the	1
profiling feasible. Interference from	1
profiling methods: Instrumentation: The	1
fragmented and caching becomes	1
fragmented and scattered around	1
fragmented and involve a	1
fragmented when the code	1
fragmented when objects of	2
fragmented hard disk. Test	1
fragmented thanks to the	1
inputs is limited and	1
inputs to the calculations	1
inputs for a console	1
inputs are the integers	1
inputs have any other	1
inputs when the program	1
inputs give overflow and	1
inputs give infinity. A	1
fast. The result of	1
fast. The lesson we	1
fast. This can be	1
fast. In general, you	1
fast. All optimizing compilers	1
fast. Simple integer operations	1
fast. Value of b	1
fast. Calculating the difference	1
family of microprocessors from	1
family and model numbers	1
family and model number.	2
family can run in	1
family have two different	1
family number 6! The	1
family number, which is	1
4, we have: //	1
4, while all newer	1
4, 8, 16, 32,	1
4, Wednesday = 8,	1
4, 6, 9 and	1
4, 2007 (www.intel.com/technology/itj/). 10.1	1
4, etc.). Older operating	1
4, anda * 17is	1
Virtual function // Call	1
Virtual functions and function	1
Virtual functions in C++	1
Virtual functions are used	1
Virtual member functions are	1
Virtual member functions Virtual	1
Virtual member functions ........................................................................................	1
Virtual call to C1::f	1
j = order(i); matrix[j][0]	1
j = order(i); list[j].a	1
j by is (columns	1
j as index then	1
j * 32 with	1
j * (columns *	1
j < columns; j++)	1
j << 5. If	1
interrupt the user but	1
interrupt should preferably be	1
interrupt 3 breakpoint and	1
interrupt 3 breakpoint again.	1
interrupt occurs in each	1
interrupt 3. The code	1
interrupt service routine should	1
interrupt service routines, system	1
-1 = a, a	2
-1 = -1 -	1
-1 = -1 x	1
-1 = ~a a	1
-1 - n.a. -	1
-1 x - -	1
-1 (a&~b)|(~a&b)=a^b --------- ~a	1
8, but not any	1
8, 16 or 32	1
8, last byte at	2
8, 16, 32 and	1
8, 16, 32, 64,	1
8, 10, 12 or	1
8, Thursday = 0x10,	1
units. The size of	1
units. The problem is	1
units. This means that	1
units. If any of	1
units. For example, a	1
units. Each 128-bit operation	1
units. Any floating point	1
units. Typically, there are	1
who is still frustrated	1
who are satisfied with	1
who have sent me	1
who has to invest	1
who want to make	1
who want to go	1
who would like to	1
who would know that	1
fastest on different processors.	1
fastest because you can	1
fastest possible access to	1
fastest way to set	1
fastest way to handle	1
fastest execution is no	1
fastest solution on future	1
fastest first. However, you	1
__restrict or #pragma optimize("a",on).	1
__restrict or __restrict__, if	1
__restrict #pragma ivdep Assume	1
__restrict #pragma ivdep __restrict	1
__restrict __restrict __declspec( noalias)	1
__restrict __declspec( noalias) __restrict	1
__restrict aa, int *	1
__restrict bb) { for	1
arithmetic A pointer is	1
arithmetic operations are therefore	1
arithmetic operations with pointers.	1
arithmetic calculations go outside	1
arithmetic operations. The most	1
arithmetic operations. When an	1
arithmetic units, etc. and	1
arithmetic expression. The size	1
DLL is relocated (rebased)	1
DLL can be accessed	1
DLL or a static	1
DLL with the best	1
DLL use absolute references	1
DLL at the same	1
DLL takes more memory	1
DLL goes through an	1
factors in the early	1
factors for the performance	1
factors that can make	1
factors that can prevent	1
factors that decide how	1
factors are explained in	1
factors are generated from	1
factors as template parameters	1
Gnu, Intel and PathScale	1
Gnu, Clang and Intel	2
Gnu, Clang Supported operating	1
Gnu, Clang, Intel or	3
Gnu, Clang, Intel, Microsoft	1
arrays. // Example 12.5.	1
arrays. It is the	1
arrays. There are various	1
arrays. I have no	1
arrays. An array overflow	1
arrays. Note that the	1
arrays. Array size divisible	1
arrays. Strings can be	1
devices and using advanced	1
devices and machines with	1
devices are becoming more	1
devices are CPLDs and	1
devices if you avoid	1
devices with limited resources.	1
devices A programmable logic	1
devices typically have much	1
branch. The common excuse	1
branch. It may seem	1
branch. If it is	1
branch. There is nothing	1
branch. See the preceding	1
branch. Example: // Example	1
branch. After each iteration	1
branch. Microprocessor designers have	1
required is not known	1
required a PC. Similarly,	1
required for performance reasons.	1
required for finding the	1
required for putting the	1
required // This function	1
required amount of memory	1
required amount of space	1
(unsigned int if (i	1
(unsigned int)b / 10;	1
(unsigned int)b / 16;	1
(unsigned int)b % 10;	1
(unsigned int)b % 16;	1
(unsigned int)size) { cout	1
(unsigned int)a / 10;	1
(unsigned int)(max - min))	1
almost the entire level-1	1
almost all modern microprocessors	1
almost all respects relevant	1
almost always advantageous to	1
almost certain to become	1
almost certain that this	1
almost identical performance for	1
almost independent of changes	1
GOT and PLT for	1
GOT and PLT tables	2
GOT and PLT lookups	1
GOT for all public	1
GOT through a self-relative	1
GOT lookup process is	1
GOT entry. You can	1
array. The values are	1
array. The disadvantage of	1
array. The constructor sets	1
array. // Example 9.6a	1
array. This method requires	1
array. But the same	1
array. No link pointer	1
array. eax holds the	1
listed in the compiler	1
listed in the table.	1
listed in table 19	1
listed in table 8.1	1
listed in table 9.2.	1
listed in manual 4:	1
listed on page 164	1
listed below in example	1
general function libraries that	1
general method is to	1
general case where you	1
general statement can be	1
general purposes in 32-bit	1
general case, but in	1
general literature on algorithms	1
general improvements in microprocessor	1
preferred to use the	1
preferred to use a	1
preferred to declare objects	1
preferred when speed is	1
preferred because of their	1
preferred method for transferring	1
preferred programming language when	1
preferred language will often	1
cycles, then this loop	1
cycles, then we can	1
cycles, but it can	1
cycles, depending on the	5
explicitly in many cases.	1
explicitly that pointers do	1
explicitly if data access	1
explicitly by using the	1
explicitly by writing: __declspec(align(64))	1
explicitly as in example	1
explicitly when alloca is	1
explicitly what kind of	1
space. The syntax in	1
space. A floating point	1
space. A union can	1
space. A situation where	1
space. It may be	1
space. It should therefore	1
space. Excessive use of	1
space. Putting simple variables	1
fixed size to avoid	1
fixed size array or	1
fixed size arrays inside	1
fixed address might clash	1
fixed repeat count and	1
fixed size, not as	1
fixed breakpoint in the	1
fixed strides. Uncached memory	1
Memory and string manipulation	1
Memory access Accessing data	1
Memory allocated with new	2
Memory swapping is a	1
Memory copying. There are	1
Memory swapping. Software developers	1
Memory access....................................................................................................... 22 3.14	1
zero. The [] operator	1
zero. A good implementation	1
zero. It is not	1
zero. You may remove	1
zero. An OR combination	1
zero. Execution time too	1
zero. 14.3 Use bitwise	1
zero. Zero can be	1
non-sequential which makes the	1
non-sequential order in order	1
non-sequential access and you	1
non-sequential order. The same	1
non-sequential order. The advice	1
non-sequential order. Example: //	1
non-sequential manner then it	1
non-sequential manner. It is	1
multiplying the index by	1
multiplying by other constants	1
multiplying by 3, 5	1
multiplying with the double	1
multiplying with the constant	1
multiplying with the reciprocal:	1
multiplying with a constant.	1
multiplying them. This would	1
Conversion of a floating	1
Conversion of a signed	1
Conversion of an unsigned	1
Conversion of unsigned integers	1
Conversion of integers to	1
Conversion to floating point	1
Conversion from integer to	1
Conversion from floating point	1
down the execution to	1
down the execution considerably.	1
down a program for	1
down to zero than	1
down to 36. There	1
down and restarted anyway.	1
down sign bit of	1
down dependency chains (see	1
software. This is annoying	1
software. A negative list,	1
software. It may even	1
software. You should be	1
software. For more on	1
software. Such an extra	1
software. Smaller microcontrollers have	1
software. Background services. Many	1
interpreted in the following	1
interpreted as a very	1
interpreted as an unsigned	1
interpreted version of Basic	1
interpreted line by line	1
interpreted languages where everything	1
interpreted again and again	1
interpreted script languages, it	1
exactly the same thing	1
exactly the same effect.	1
exactly the same. If	1
exactly as efficient as	2
exactly what you want	1
exactly identical for the	1
exactly identical code for	1
jump to a different	1
jump to top of	1
jump by copying the	1
jump from a=a*2; to	1
jump between multiple CPU	1
jump through a pointer	1
jump targets. A switch	1
jump tables, and virtual	1
determined in advance, because	1
determined by the floating	1
determined by the operating	1
determined by the requirements	1
determined by a system	1
determined by considerations such	1
determined with system calls	1
determined where the object	1
cc[]) { for (int	1
cc[]) { // Make	3
cc[]) { // go	1
cc[]) { // Define	1
cc[]) { // Detect	1
cc[]) { Vec16s a,	1
line. The cache line	1
line. The delay is	1
line. This is advantageous	1
line. Some compilers will	1
line. But these eight	1
line. Only one of	1
line. 132 Table lookup	1
line. Time-based sampling: The	1
easily be implemented as	1
easily be organized into	1
easily be obtained. In	1
easily available from a	1
easily optimize away a	1
easily become fragmented when	1
easily justify a possible	1
easily ported to systems	1
identification 16 bit platform	1
identification adds extra information	1
identification (RTTI) If any	1
identification (RTTI) Runtime type	1
identification (RTTI) /GR– -fno-rtti	1
identification (RTTI) ........................................................................... 54	1
identification (RTTI). See page	1
identification (RTTI), which affects	1
vectors. The following example	1
vectors. The operators are	1
vectors. This data conversion	1
vectors. A lot of	1
vectors. There are also	1
vectors. These function libraries	1
vectors. 12.10 Conclusion There	1
vectors. Code that is	1
2) { // abs(u.f)	1
2) { a[i] =	1
2) { sum1 +=	1
2) { FuncA(i); FuncC(i);	1
2) 2 - n.a.	1
2) 2 a+a+a+a=a*4 -(-a)=a	1
2) : (bb[i] *	1
2) SelectAddMul_pointer = &SelectAddMul_SSE2;	1
applications. The string classes	1
applications. The choice of	1
applications. Some systems have	1
applications. But we do	1
applications. Therefore, it is	1
applications. Alternatively, use a	1
applications. Remember that container	1
applications. 2.8 Overcoming the	1
volatile is that it	1
volatile int DontSkip; long	1
volatile int seconds; //	1
volatile then an optimizing	1
volatile doesn't mean atomic.	1
volatile keyword makes sure	1
volatile keyword specifies that	1
volatile volatile int seconds;	1
misses is not seen	1
misses and branch mispredictions.	2
misses in the level-2	1
misses in the level-	1
misses are very expensive.	1
misses by making the	1
misses have occurred. This	1
tables of mathematical functions	1
tables are not used	2
tables are particular advantageous	1
tables can be useful	1
tables if this prevents	1
tables Reading a value	1
tables ................................................................................................. 132 14.2	1
random than normal. 157	1
random number generators. In	1
random times and make	1
random access. Reading or	1
random order. The heap	1
random order. This makes	1
random manner. This applies	1
random events that are	1
X The code section	1
X make position-independent code	1
X operating system is	1
X operating systems, though	1
X Compilers for 32-bit	1
X #else // Gnu	1
X (Darwin) are part	1
X __attribute__((aligned(16))) #endif const	1
Conversions of float or	1
Conversions between different precisions	1
Conversions between floating point	2
Conversions between integers and	1
Conversions between signed and	1
Conversions between float, double	1
Conversions involving class objects	1
YMM in the AVX	1
YMM register state. This	1
YMM registers The 128-bit	1
YMM registers are available	1
YMM registers ................................................................. 107	1
YMM vectors are preferably	1
YMM registers. The first	1
YMM registers. Disadvantages are:	1
resolved when the program	1
resolved when the library	1
resolved at compile time	2
resolved at compile time.	1
resolved at runtime. #define	1
resolved before the program	1
purpose is to detect	1
purpose of the while	1
purpose of this is	1
purpose of using smart	1
purpose of finding a	1
purpose in order to	1
purpose libraries are also	1
-fpic is much faster,	1
-fpic and it will	1
-fpic in 32-bit Linux	1
-fpic in 64 bit	1
-fpic because the relocations	1
-fpic according to the	1
-fpic option. Then we	1
D is compiled to	1
D are not yet	1
D has many of	1
D language allows compile-time	1
D : public B1	1
D : public B1,	1
D language. D has	1
had the full 128-bit	1
had a different type	1
had in fact only	1
had not been a	1
had an interpreter for	1
had used intrinsic functions.	1
had read from different	1
parameters. This is called	1
parameters. A template with	1
parameters. In 64-bit Windows,	1
parameters. There is no	1
parameters. Therefore, make sure	1
parameters. Floating point parameters	1
parameters. Or it might	1
ebx, 1 ebx, DWORD	1
ebx, DWORD PTR [edx]	2
ebx, eax / sar	1
ebx, eax ebx, 1	1
ebx, eax ebx, 31	1
ebx, 31 ebx, eax	1
measure the clock count	1
measure that is almost	1
measure are much higher	1
measure // Number of	1
measure how long time	1
measure how much time	1
measure exactly what you	1
poorly for the end	1
poorly designed program. 6	1
poorly predictable then replace	1
poorly predictable branch by	1
poorly predictable. It may	1
poorly predictable. For example:	1
poorly predictable, then it	1
this: // Example 16.2	1
this: // Example 14.1a	1
this: // Example 12.4e.	1
this: // Example 7.9b	1
this: // Example 12.9a.	1
this: // Example 14.4a	1
this: Use assembly language	1
sections are dominating and	1
sections can be shared.	1
sections below. The stack	1
sections SSE instruction set	1
sections /Gy -ffunction- sections	1
sections describe some of	1
sections describe various ways	1
Software that relies on	1
Software should use standard	1
Software developers should take	1
Software developers typically have	1
Software Developer’s Manual", Volume	2
Software distributors are often	1
Even function calls can	1
Even with all relevant	1
Even some of the	1
Even big software companies	1
Even worse, many software	1
Even better, you may	1
Even better: store the	1
19 in manual 5:	1
19 }; S1 ArrayOfStructures[100];	1
19 Avoid an excessive	1
19 Literature Other manuals	1
19 Literature ..................................................................................................................... 163	1
19 3.5 Program loading	1
19 3.6 Dynamic linking	1
important. This can be	1
important. This manual does	1
important. A language based	1
important. A virtual processor	1
important. Some systems allow	1
important. An important disadvantage	1
important. 9.2 Cache organization	1
carry and zero flags	1
carry bit is kept	1
carry bit can be	1
carry bit must be	1
carry flag or in	1
carry flag then the	1
carry flag (e.g. DEC,	1
lazy loading of the	1
lazy binding is that	1
lazy binding of function	1
lazy binding by default,	2
lazy binding definitely degrades	1
lazy binding leads to	1
xn is calculated from	1
xn = x; float	1
xn = x∙xn-1, and	1
xn as x4∙xn-4. There	1
xn / nfac; xn	1
xn n 0 n!	1
xn *= x; nfac	1
stamp counter in the	1
stamp counter can be	1
stamp counter // For	1
stamp counter before and	1
stamp counter becomes invalid	1
stamp counter. The test	1
stamp counter. This is	1
debugging and exception handling.	1
debugging and profiling support	1
debugging and maintaining such	1
debugging if required for	1
debugging support which is	1
debugging options prevent optimization.	1
debugging facilities, easy GUI	1
10; a = b	2
10; a = (unsigned	2
10; // Convert to	1
10; int i; long	1
10; Templates are instantiated	1
table. The 16-byte instructions	1
table. If the standard	1
table. If a dispatched	1
table. Unfortunately, few compilers	1
table. Optimization method Function	1
table. Even better: store	1
table. Type size, bytes	1
1, but operators that	1
1, 2, 4 or	1
1, 2, 6, 24,	2
1, 2, 3, 4,	1
1, Monday = 2,	1
1, 2A, 2B, and	1
vector, the four G	1
vector, and the four	1
vector, such as 32-bit	1
vector, bits Vector class,	1
vector, bits Instruction set	1
vector, while you can	1
vector, uses SSE3. //	1
(b) { a =	4
(b) { return a	1
(b) { y =	2
object, and a member	1
object, and ownership is	1
object, you may consider	1
object, then the version	1
object, then the instance	1
object, unless there is	1
object, except for char	1
allowed to have constructors	1
allowed to change the	1
allowed and which not.	1
allowed in C++ so	1
allowed in assembly names.	1
allowed only for classes.	1
allowed inputs are the	1
delete the object. 7.17	1
delete is to allocate	1
delete to allocate a	1
delete or with the	1
delete or malloc and	1
delete it and create	1
delete (or malloc and	1
Likewise, the compiler can	1
Likewise, a pointer can	1
Likewise, it is advantageous	1
Likewise, if the first	1
Likewise, you cannot replace	1
Likewise, when a global	1
Likewise, all non-static variables	1
follows: // Example 9.1b	1
follows: struct Sfloat {	1
follows: Instruction set Header	1
follows: Instruction set Important	1
follows: Type of elements	1
follows: Matrix size Time	1
follows: floatvalue ( 1)sign	1
simultaneously. This is also	1
simultaneously. This processor has	1
simultaneously. If the microprocessor	1
simultaneously. If the computer	1
simultaneously. In multithreaded applications	1
simultaneously. Each thread will	1
simultaneously. Actually, only the	1
itself is a very	1
itself is a big	1
itself and take more	1
itself and recompile it.	1
itself in order to	1
itself when running. Programs	1
itself is. The 64-bit	1
solution. The compiler is	1
solution. It might be	1
solution. Many containers use	1
solution. (In my tests,	1
solution. Is a multidimensional	1
solution. Is searching needed	1
solution. Sort the array	1
algebra and statistics, and	1
algebra in a compiler.	1
algebra are the same	1
algebra reductions: x-- x	1
algebra reductions: a+b =	1
algebra reductions: a+b=b+a a*b=b*a	1
algebra reductions: !(!a)=a x-xxxxxxx	1
suitable for example 9.5	1
suitable functions in a	1
suitable set of test	1
suitable choice of n.	1
suitable containers class templates	1
suitable pivot element. The	1
suitable duration. The best	1
Template for pow(x,N) where	1
Template Library (STL) which	1
Template Library (WTL). A	1
Template Library (WTL): //	1
Template Library (ATL) and	1
Template meta- programming is	1
Template Library) and other	1
spend a lot of	1
spend on redesigning a	1
spend time on deciding	1
spend time doing the	1
spend more CPU time	1
spend most of their	2
switches is smaller in	1
switches and garbage collection	1
switches are more frequent	1
switches can reduce the	1
switches by making longer	1
switches A context switch	1
switches after each time	1
disk. A big file	1
disk. A few files,	1
disk. Memory swapping is	1
disk. Software that relies	1
disk. Test with different	1
disk. Provoke cache misses	1
disk. Memory-hungry applications force	1
serious when n is	1
serious problem with the	1
serious errors can happen	1
serious legal issue. See	1
serious legal issue, as	1
serious limitations to what	1
serious burden is the	1
c); // Store the	2
c); // Compare each	2
c); ... return 0;	2
c); a.store(aa+i); } }	1
Studio can build code	1
Studio This is a	1
Studio when compiling for	1
Studio IDE. Has not	1
Studio optimizes reasonably well,	1
Studio 2008 version). This	1
Studio 2005). Borland C++	1
a[100]; for (i =	1
a[100]; // 400 bytes.	1
a[100]; int i; float	1
a[100]; int i; for(i=0;	1
a[100]; int i, sum	1
a[100]; float sum =	1
a[100]; float s0 =	1
trick is to roll	1
trick of using a	1
trick of using bitwise	1
trick that N1 =	1
trick will fail if	1
trick which is used	1
trick violates the strict	1
disadvantages of using pointers	1
disadvantages of dynamic memory	1
disadvantages that make developers	1
disadvantages when C++ is	1
disadvantages when deciding whether	1
disadvantages mentioned above for	1
disadvantages compared to 32	1
eax, 8 edx, eax	1
eax, 1 eax, 100	1
eax, 100 / jl	1
eax, 100 $B1$2 ebx	1
eax, eax edx, DWORD	1
eax, ecx and edx	1
eax, edx, ecx, edx,	1
distributed to the end	2
distributed and stored as	1
distributed as it is	1
distributed as object or	1
distributed as binary executable	1
distributed between multiple dynamic	1
generally not thread safe	1
generally used that most	1
generally possible on Linux	1
generally very fast. Simple	1
generally faster and more	1
generally assume that the	2
mode, the parameters would	1
mode, and an error	1
mode, and more efficient	1
mode, for reasons explained	1
mode, as explained below.	1
mode, where it still	1
mode, we encounter another	1
Linux. The compiler comes	1
Linux. It can also	1
Linux. 32-bit Mac OS	1
Linux. Has many good	1
Linux. 82 Keywords that	1
Linux. Asmlib My own	1
Linux. Address calculation is	1
C1 or C2, then	1
C1 { public: ...	1
C1 : public CHello	1
C1 : public C0	1
C1 x; ... }	1
C1 obj1; C0 *	1
C1 Object1; C2 Object2;	1
instances of the same	1
instances of the class.	1
instances of S1 aligned	1
instances of structures and	1
instances that take up	1
instances will be joined	1
instances makes the compiled	1
called, a dispatch is	1
called, or what a	1
called, it is necessary	1
called, it can use	1
called, it allocates the	1
called, even if the	1
called, while the Gnu	1
update the program that	1
update or even telling	1
update when the next	1
update automatically when the	1
update mechanism to advertise	1
update process should run	1
update process. 3.5 Program	1
<= n < 223	1
<= n; i++) f	1
<= n; x++) factorial	1
<= (unsigned int)(max -	1
<= 16; n++) {	1
<= u.f < 2.0	1
<= max) { ...	1
integer. The compiler does	1
integer. The conversion time	1
integer. If a loop	1
integer. If two integers	1
integer. But the &	1
integer. Floating point precision	1
integer. 158 Integer variables	1
body is very small	1
body is defined inside	1
body of the called	1
body of a loop	1
body inside the class	1
body now contains only	1
body begins at the	1
definition code in addition	1
definition language is that	1
definition language is inherently	1
definition language in the	1
definition language defines hardware	1
definition language. Such a	1
definition language, such as	1
Java and C# and	1
Java are based on	1
Java virtual machine are	1
Java virtual machine. The	1
Java machines use just-in-time	1
Java implementations. However, these	1
Java today. But this	1
Math core library contains	1
Math Library __vrs4_expf __vrd2_exp	1
Math Kernel Library (MKL	1
Math Kernel Library" and	1
Math Kernel Library" contains	1
Math Kernel Library, available	1
Math Kernel Library. The	1
generates the following assembly	2
generates is to use	1
generates to see how	1
generates no extra code	1
generates too little data	1
generates 127. The calculation	1
executing the same piece	1
executing the critical code.	1
executing a critical piece	1
executing library functions. Time-	1
executing instructions are less	1
executing instructions out of	1
executing instructions during this	1
Open files and network	1
Open source library. Supports	1
Open database connections. Open	1
Open BSD are identical	1
Open Watcom Another open	1
Open Watcom C/C++ v.	1
Open source. Supports all	1
256; // Array size	1
256; i += 8)	4
256; i += 16)	1
256; i++) { aa[i]	1
optimizations. The keyword static,	1
optimizations. The results are	1
optimizations. In most cases	1
optimizations. See page 80.	1
optimizations. Most C++ compilers	1
optimizations. Do not use	1
optimizations. Loops with a	1
Cache control instructions. There	1
Cache contentions in large	2
Cache contentions expected. Use	1
Cache misses are very	1
Cache organization It is	1
Cache organization ................................................................................................... 87	1
slower or require more	1
slower than the subsequent	1
slower than a thread	1
slower than a dedicated	1
slower than static link	1
slower than intended because	1
slower than truncation when	1
free the memory when	1
free the memory used	1
free and open source.	1
free in the Microsoft	1
free register left for	1
free are: There is	1
free E-book Usability for	1
consuming because it may	2
consuming library functions often	1
consuming calculations into a	1
consuming parts only. Critical	1
consuming updates may come	1
consuming features of the	1
hold the value of	1
hold the numbers in	1
hold only one element	1
hold many renamed instances	1
hold 8 double's of	1
hold four double precision	1
hold e.g. four numbers,	1
memory, as in example	1
memory, at least temporarily.	1
memory, but not if	1
memory, using new. The	1
memory, such as DOS	1
memory, depending on how	1
memory, windows, mutexes, database	1
p. 43). There is	1
p. 87). There is	1
p. 104). The table	1
p. 22). 159 18	1
p. 28) The threads	1
p. 26). Variables stored	1
p. 57). It is	1
SIZE; r++) { for	3
SIZE; r++) { //	1
SIZE; c++) { StoreNTD(&a[c][r],	1
SIZE; c++) { a[c][r]	1
SIZE; r1 += TILESIZE)	1
case. The best solution	1
case. The -fpie option	1
case. A binary tree	1
case. You cannot expect	1
case. Loop unrolling should	1
case. Intrinsic functions look	1
case. Inlined functions have	1
( short int bb[size]	1
( short int cc[size]	1
( short int aa[size]	1
( ; i <	1
( 1)sign 2exponent 127	1
( 1)sign 2exponent 16383	1
( 1)sign 2exponent 1023	1
expensive and more error	1
expensive in some compilers.	1
expensive that it is	1
expensive if they are	1
expensive - in terms	1
expensive than an uncached	1
expensive cache contentions, as	1
rounding and truncation. The	1
rounding and truncation. Efficient	1
rounding mode has to	1
rounding unless the SSE2	1
rounding instead of truncation	1
rounding instead of truncation.	1
rounding 137 errors must	1
130 for an explanation	1
130 for how to	2
130 for details). The	1
130 14 Specific optimization	1
130 14.4 511 511	1
130 Compile for a	1
far from the server.	1
far from each other	1
far from optimal. The	1
far data segment by	1
far pointers, and far	1
far procedures are inefficient.	1
far (arrays can also	1
They can be accessed	1
They can be joined	1
They can detect that	1
They may be scattered	1
They have not been	1
They have worked well	1
They sometimes give misleading	1
exceptions is to return	1
exceptions a function can	1
exceptions in this block:	1
exceptions are indeed of	1
exceptions can be ruled	1
exceptions throw() throw() throw()	1
exceptions thrown by F2	1
system, the more important	1
system, and therefore the	1
system, and 512 bits	1
system, as explained below.	1
system, not by the	1
system, this requires static	1
system, but you can	1
absolute value of the	2
absolute value by setting	1
absolute addresses that need	1
absolute references in 32	1
absolute addresses. This works	1
absolute values: // Example	1
(a + b) +	1
(a * c >	1
(a > b /	1
(a > b ?	1
(a >= b) -	1
(a == 0) {	1
(a != 0) {	1
machine are frameworks that	1
machine code is the	1
machine code to the	1
machine code and how	1
machine code becomes the	1
machine instructions executed, cache	1
machine instructions. Intrinsic functions	1
Induction = r; for	1
Induction variables for other	1
Induction variables for float	1
Induction variables for array	1
Induction variables are often	1
Induction variables An expression	1
Induction ; edx =	1
120 for how to	1
120 for discussion of	1
120 However, there are	1
120 13 Making critical	1
120 ms by selecting	1
120 12.10 Conclusion ..........................................................................................................	1
120 12.9 Aligning RGB	1
hardly any performance penalty	1
hardly any speed advantage	1
hardly any effect on	1
hardly any loss of	1
hardly relevant to optimization.	1
hardly worth the effort	1
hardly ever used, though.	1
CPUID is artificially changed	1
CPUID instruction doesn't give	1
CPUID instruction was certain	1
CPUID instruction directly, or	1
CPUID information that we	1
CPUID information about supported	1
CPUID was manipulated to	1
saved in the beginning.	1
saved in a special	1
saved in registers, not	1
saved from one iteration	1
saved all information about	1
saved variable members of	1
saved either in the	1
changes the function pointer	1
changes the function calling	1
changes of the function	1
changes in the clock	1
changes for each version.	1
changes then you may	1
changes fastest: // Example	1
integers, and they always	1
integers, as long as	1
integers, then the expression	1
integers, which is less	1
integers, but they are	1
integers, while the multiplication	1
integers, depending on the	1
collection of a variable	1
collection of example container	1
collection can occur at	1
collection may start at	1
collection when the heap	1
collection takes a considerable	1
collection contains well-tested libraries	1
manuals is copyrighted by	1
manuals are for those	1
manuals are used by	1
manuals are always available	1
manuals can be used	1
manuals by Agner Fog	1
manuals from Intel: "IA-32	1
processor. The CPU dispatcher	1
processor. This is called	1
processor. However, this involves	1
processor. Such a soft	1
processor. Extra time is	1
processor. Nested loops are	2
Shared objects in 64	1
Shared objects in 32	1
Shared objects in Linux,	1
Shared objects in BSD	2
Shared objects in Unix-like	1
Shared objects are normally	1
storing the elements consecutively	1
storing function return addresses	1
storing data without caching	1
storing user data. A	1
storing intermediate results as	1
storing strings in character	1
storing text or input	1
developers may therefore fail	1
developers should be aware	1
developers should take installation	1
developers typically have more	1
developers choose other programming	1
developers who want to	1
developers feel that a	1
parm2) { // Get	1
parm2) {...} // SSE2	2
parm2) {...} // AVX	2
parm2) {...} // Dispatcher.	1
parm2) {...} // Prototype	1
T is a class	1
T to T+5, then	1
T // Constructor //	1
T const & b)	1
T & operator[] (unsigned	1
T max(T const &	1
T a[N]; public: SafeArray()	1
eliminate this jump by	1
eliminate one division by	1
eliminate i and use	1
eliminate common subexpressions that	1
eliminate common sub-expressions. Why	1
eliminate everything that depends	1
eliminate branches, as explained	1
2: // Example 14.7b.	1
2: template <bool IsPowerOf2,	1
2: 12 $B1$1: push	1
2: "Optimizing subroutines in	3
2: printf("Gamma"); break; case	1
composite objects to a	1
composite objects are returned	1
composite type is more	1
composite type is most	1
composite type can be	1
composite type such as	1
composite object, you may	1
profilers are not always	1
profilers are often unreliable.	1
profilers are useful for	1
profilers such as AQtime,	1
profilers available which are	1
profilers require that the	1
profilers are: Coarse time	1
highly system dependent and	1
highly optimized for the	1
highly optimized for large	1
highly optimized code with	1
highly optimized program is	1
highly compatible with Gnu.	1
highly optimized, using assembly	1
again and again for	1
again and again. If	1
again for every iteration	1
again from address 0x2710	1
again two times the	1
again takes extra time.	1
again before the cache	1
127 int CriticalFunction_AVX(int parm1,	1
127 will generate -128,	1
127 bytes is slightly	1
127 1 fraction 2	1
127 127 126 12.2	1
127 126 12.2 128	1
127 int8_t short int	1
language. It is important	1
language. C++ takes only	1
language. In fact, you	1
language. See page 141	1
language. Such a processor	1
language. Here are some	1
language. D has many	1
aware of when type-casting	1
aware of possible overflow	1
aware of these obstacles	1
aware of situations where	1
aware that there is	1
aware that there are	1
aware of. Big runtime	1
Alternatively, you can use	1
Alternatively, you may call	1
Alternatively, you may define	1
Alternatively, you may reuse	1
Alternatively, you may actively	1
Alternatively, use a negative	1
Alternatively, make a DLL	1
capabilities of modern CPUs,	1
capabilities for 32-bit and	1
capabilities are very smart.	1
capabilities can overlap the	1
capabilities (see page 103)	1
capabilities still have a	1
capabilities (except in device	1
4) { // SSE2	2
4) { // Check	1
4) { s0 +=	1
4) + a. You	1
4) | ((C &	1
4) | (C <<	1
linker to a specific	1
linker to remove unreferenced	1
linker and the loader.	1
linker and loader (requires	1
linker will generate an	1
linker makes an error	1
linker extracts the functions	1
int64_t 2 AVX2 _mm256_i64gather_epi32	1
int64_t 4 AVX2 _mm_i32gather_ps	1
int64_t 64 I64vec1 8	1
int64_t 128 I64vec2 Vec2q	1
int64_t 256 uint64_t 256	1
int64_t MS compiler: __int64	1
int64_t 29 64-bit Linux:	1
bits. The vector instructions	1
bits. The unsigned integer	1
bits. The method is	1
bits. This is only	1
bits. This is usually	1
bits. This makes data	1
bits. There is no	1
measurements to avoid this.	1
measurements to see if	1
measurements are unstable due	1
measurements can become imprecise	1
measurements on this part	1
measurements as accurate and	1
measurements may require a	1
representation is particularly tricky.	1
representation of the exponent	1
representation of float, double	1
representation of &list[100] is	1
representation of N: #define	1
representation directly with the	1
representation according to the	1
SomeFunction (int a, int	1
SomeFunction (int a, bool	4
SomeFunction (int x) {	1
SomeFunction (int n) {	1
size, not as a	1
size, because these are	1
size, which is typically	1
size, bits minimum value	1
size, while high-level languages	1
size, bytes alignment, bytes	1
size, etc. There are	1
is. The 64-bit version	1
is. The type __m128i	1
is. // Example 15.1d.	1
is. This above code	1
is. It is important	1
is. ecx contains the	1
is. Factors that make	1
reductions: Common subexpression elimination	1
reductions: x-- x x--	1
reductions: a+b = b+a	1
reductions: a+b=b+a a*b=b*a a+b+c=a+(b+c)	1
reductions: !(!a)=a x-xxxxxxx ---x-----	1
reductions: a+b=b+a, a*b=b*a x	1
reductions: ~(~a) = a	1
waiting for each other	1
waiting for user input	2
waiting for better metaprogramming	1
waiting for response from	1
waiting for disk operations	1
waiting for response. It	1
available, one from Intel	1
available, such as the	1
available, we may choose	1
available, 256 bits (YMM)	1
available, though less user	1
available, e.g. AVX, AVX2	1
available, i.e. in 64-bit	1
automatically. The code has	1
automatically. The development time	1
automatically. The alignment of	1
automatically. It is also	1
automatically. There is no	1
automatically. For example, let's	1
automatically. However, there are	1
powers of 2 if	1
powers of 2 when	1
powers of 2 does	1
powers of 2 applies	1
powers of 2 (i.e.	1
powers of 2. Using	1
powers of 2: //	1
debug and maintain. Most	1
debug version of the	2
debug version and a	1
debug version with full	1
debug information in order	1
debug breakpoints at every	1
polymorphism is needed only	1
polymorphism that is obtained	1
polymorphism or with compile-time	1
polymorphism with virtual functions	1
polymorphism with templates //	1
polymorphism A template class	1
polymorphism effect with templates	1
Clang and Intel compilers	1
Clang and Intel compilers.	1
Clang The Clang compiler	1
Clang compiler is a	1
Clang compiler combined with	1
Clang compilers. The code	1
Clang Supported operating systems	1
measured in this way	1
measured with millisecond resolution	1
measured on a Pentium	1
measured time is interpreted	1
measured simply by removing	1
measured results were as	1
measured separately. The fallacy	1
details. The behavior of	1
details. The funny looking	1
details. // Example 12.7.	1
details. Use function libraries	1
details. Note that the	1
details. Development time Some	1
details. Inheritance from multiple	1
factor is a power	1
factor of 1, 2,	1
factor to multiply j	1
factor in itself, and	1
factor 4 in the	1
factor rather than the	1
factor sizeof(S1) = 16	1
x); // x^1, x^2,	1
x); } // Branch/loop	1
x); } void SelectAddMul(short	1
x); } 112 Vectorized	1
x); const int size	1
x); s = _mm_hadd_ps(s,	1
x); 136 ... for	1
core. It is the	1
core. It is often	1
core. There are four	1
core. For example, a	1
core. Unfortunately, contemporary operating	1
core. Two threads running	1
core. Try to allocate	1
rules of algebra in	1
rules of algebra are	1
rules of algebra, we	1
rules for prediction and	1
rules about register use,	1
rules apply to modulo	1
rules apply as to	1
speed. This includes languages	1
speed. A simple solution	1
speed. In the same	1
speed. In this case	1
speed. Assume that you	1
speed. Optimizing for size	1
speed. Delays or glitches	1
vectorization. The compiler will	1
vectorization. The Gnu compiler	1
vectorization. The newest instruction	1
vectorization. It is possible	1
vectorization. 3. Use appropriate	1
vectorization. Optimizes reasonably well.	1
vectorization. Optimizes moderately well.	1
anyway. The exception is	1
anyway. It may be	1
anyway. If we modify	1
anyway. You may preferably	1
anyway. Software distributors are	1
anyway. Pure function. __attribute__((const))	1
anyway. Updates to the	1
smallest data size that	1
smallest integer size that	3
smallest list of data.	1
smallest members last: //	1
smallest devices, you don't	1
responsibility of the operating	1
responsibility of the exception	1
responsibility of the programmer	5
Mathematical vector function libraries.	1
Mathematical functions The most	1
Mathematical functions for vectors	1
Mathematical functions for vectors........................................................................	1
Mathematical functions must use	1
Mathematical functions ....................................................................................... 145	1
Mathematical functions Encryption, decryption,	1
MMX to 128-bit XMM	1
MMX int 32 2	1
MMX long long 64	1
MMX short int 16	1
MMX char 8 16	1
MMX registers, which are	1
MMX mmintrin.h SSE xmmintrin.h	1
reliable and reproducible results.	1
reliable than third party	1
reliable source so that	1
reliable results for branch	1
reliable solution. (In my	1
reliable results. If you	1
reliable decision. 13.4 Test	1
Borland and Digital Mars	1
Borland compiler with other	1
Borland C++ builder. Not	1
Borland C++ 5.82 (Embarcadero/CodeGear/Borland	1
Borland / CodeGear /	1
Borland Microsoft Constant propagation	1
Borland bcc, v. 5.5	1
sense to dispatch by	1
sense that the template	1
sense that the syntax	1
sense that all operators	1
sense that each calculation	1
sense that each intrinsic	1
sense that C++ compilers	1
latest instruction set and	1
latest instruction set extensions.	1
latest compilers from Microsoft,	1
latest version of the	2
latest version of Mathcad	1
latest versions of these	1
Now the code will	1
Now the two parentheses	1
Now it is the	1
Now call the chosen	1
Now ebx contains i/2+r.	1
Now s0, s1, s2	1
Now 1.0 <= u.f	1
units and hence higher	1
units in the CPU.	1
units are used twice	1
units can be used	1
units same size as	1
units rather than by	1
units smaller than the	1
do. The following sections	1
do. The reason why	1
do. This is called	1
do. This results in	1
do. It is important	1
do. All the reductions	1
do. Hence, it is	1
reciprocal of the clock	2
reciprocal in the code,	1
reciprocal n.a. - n.a.	1
reciprocal Boolean algebra reductions:	1
reciprocal square root, RGB	1
reciprocal factorials so that	1
d, __m128i const &	4
d, y; y =	2
d, e, f, x,	1
threads. The compiler supports	1
threads. The use of	1
threads. The overhead of	1
threads. There are two	1
threads. Each thread can	1
threads. Don't put a	1
threads. Out-of-order execution (chapter	1
log is a library	1
log are pure functions,	1
log on with a	1
log on process is	1
log on process may	1
log off the computer	1
log (b[i] * c[i]);	1
thousand cache misses have	1
thousand so the misprediction	1
thousand times then the	1
thousand times lower; and	1
thousand numbers as a	1
thousand results in another	1
thousand numbers. With a	1
compile-time if statements (called	1
compile-time constant n, then	1
compile-time while loops, then	1
compile-time whether the object	1
compile-time generation of identifier	1
compile-time polymorphism. It is	1
compile-time polymorphism, which is	1
remove the const restriction	1
remove the interrupt 3	1
remove the memset line	1
remove or modify objects	1
remove all disturbing influences	1
remove any objects if	1
remove unreferenced functions. It	1
Intel's CPU dispatcher. See	2
Intel's compilers and invoked	1
Intel's profiler is called	1
Intel's Math Kernel Library	1
Intel's Math Kernel Library,	1
Intel's term for running	1
16. This is a	1
16. This method is	1
16. If you read	1
16. In example 12.1a,	1
16. You can generally	1
16. Library versions tested	1
16. Alignment of data	1
registers, and possibly save	1
registers, not in memory.	1
registers, not on variables	1
registers, which are 64	1
registers, regardless of whether	1
registers, whereas 64-bit Linux,	1
registers, totaling up to	1
transpose the matrix when	1
transpose a matrix when	1
transpose a matrix using	1
transpose and copy matrix	2
transpose function swapd(a[r][c], a[c][r]);	1
transpose matrix // define	1
wait for the new	1
wait for the result	1
wait for a result	1
wait for another memory	1
wait until the value	1
wait until a few	1
wait until seconds has	1
number. The only CPUID	1
number. If the offset	1
number. If a and	1
number. I have seen	1
number. Therefore, it is	1
number. We can convert	1
number. Failure to handle	1
break a few times	1
break a dependency chain.	1
break will occur in	1
break at the interrupt	1
break while the program	1
break down dependency chains	1
constant. The compilers also	1
constant. // General case,	1
constant. It is therefore	1
constant. If the loop	1
constant. Example: // Example	1
constant. 14.2 Bounds checking	1
linkage table (PLT) and	1
linkage table (PLT) in	1
linkage table (PLT) that	1
linkage table (PLT). The	1
linkage table (PLT). And	1
linkage table. If a	1
possible, and the dispatching	1
possible, and make sure	1
possible, and avoid dynamic	1
possible, and replaced by	1
possible, or the error	1
possible, so that the	1
scan instruction is executed	1
scan instruction and have	1
scan instruction and expect	1
scan instructions. My recommendation	1
scan instruction. Programmers that	1
scan forward) instruction to	1
systems: The number of	1
systems: int 16 -32768	1
systems: long int 32	1
systems: unsigned int 16	1
systems: unsigned long 32	1
systems: Pointers, references, and	1
predictable the branch inside	1
predictable than the other,	1
predictable than integer comparisons.	1
predictable then replace it	1
predictable branch by a	1
predictable operand first. If	1
"Hello 2" The dispatching	1
"Hello 2" Here CParent	1
"Hello "; // call	1
"Hello "; Disp(); class	1
"Hello 1" // Writes	2
equal to the time	1
equal to the number	1
equal to the address	1
equal to the critical	1
equal to the preceding	1
equal amount of work	1
CodeGear compiler cannot make	1
CodeGear / Embarcadero Comes	1
CodeGear Microsoft Table 2.1.	1
CodeGear Borland bcc, v.	1
CodeGear compiler). Fastcall functions	1
CodeGear compiler) integer parameters	1
compact and efficient if	1
compact and takes little	1
compact if the offset	1
compact by joining identical	1
compact than an MFC	1
compact so that the	1
polynomial of the loop	1
polynomial The calculation of	1
polynomial can be done	1
polynomial // Polynomial coefficients	1
polynomial with induction variables	1
polynomial (Vec4f const &	1
Common subexpression elimination x	1
Common subexpression elimination If	1
Common subexpression elimin., integer	1
Common subexpression elimin., float	1
Common devices are CPLDs	1
Common Language Runtime, CLR,	1
reads to the same	1
reads and writes may	1
reads or writes a	1
reads or writes to	1
reads from address 0x2710	1
reads from addresses 0x2F00,	1
plus the costs to	1
plus a constant plus	1
plus an index multiplied	1
plus 6 integer, pointer	1
plus one, because it	1
plus i*sizeof(S1). This is	1
5: calling conventions. The	1
5: "Calling conventions for	5
increase the time slices	1
increase the size of	1
increase the speed or	1
increase the throughput of	1
increase the likelihood that	1
increase in develop- ment	1
casting of pointers may	1
casting of pointers because	1
casting // C++ casting	1
casting // Constructor-style type	1
casting operator that specifies	1
casting operator These different	1
course, and causes the	1
course, that you compile	1
course, if the value	1
course, this works only	1
course, because you will	1
course, but this is	1
scope of the function	1
scope of a variable	1
scope of this manual.	2
scope of this manual,	1
scope or namespaces. Therefore,	1
principle is useful whenever	1
principle of table lookup	1
principle of lazy binding	1
principle for a 2'nd	1
principle for objects stored	1
principle as in example	1
throughput of the execution	1
throughput of an execution	1
throughput of CPU-intensive programs	1
throughput There is an	1
throughput (see p. 104).	1
throughput ....................................................................................... 22 4	1
spent in the program	1
spent in the innermost	1
spent on function calls	1
spent on reading and	1
spent on executing instructions	1
spent fighting with the	1
16; a = (unsigned	2
16; // This is	2
16; int i; float	1
16; n++) { sum	1
Func is executed. This	1
Func is executed. Without	1
Func with a lot	1
Func 87 used cache	1
Func () { static	1
Func ;a ;r ;	1
identify the critical parts	1
identify the circumstances around	1
identify a hot spot.	1
identify and isolate the	1
identify performance bottlenecks is	1
identify individual functions or	1
15 on the old	1
15 clock cycles (depending	1
15 Integer overflow is	1
15 byte at 16,	1
15 Metaprogramming Metaprogramming means	1
15 Metaprogramming ....................................................................................................... 150	1
14 - 45 clock	1
14 3 Finding the	1
14 2.8 Overcoming the	1
14 Specific optimization topics	2
14 Portability C++ is	1
this. The Intel compiler	1
this. It also prevents	1
this. See page 140	1
this. Unfortunately, the syntax	1
this. My example is	1
this. (In Windows, SetThreadAffinityMask,	1
Register variables The most	1
Register allocation and function	1
Register storage A limited	1
Register ebx is pushed	1
Register variables, integer Register	1
Register variables, float Live	1
complex and often inefficient.	1
complex if the parameter	1
complex integer expressions. See	1
complex cases it might	1
complex framework requiring many	1
complex digital operation can	1
Intrinsic function name Instruction	1
Intrinsic function Size of	1
Intrinsic functions for vectorized	1
Intrinsic functions are supported	1
Intrinsic functions are primitive	1
Intrinsic functions look clumsy	1
call. The function is	1
call. A branch tree	1
call. I have implemented	1
call. Load library at	1
call. Algebraic reduction Most	1
call. (2) find the	1
notice is that the	1
notice is that it	1
notice that the code	1
notice that some compilers	1
notice This series of	1
notice .......................................................................................................... 164 1	1
Add the keyword static	1
Add to this the	2
Add to 122 this	1
Add 2 to each	2
prediction. The time it	1
prediction. A loop with	1
prediction. A Pentium M	1
prediction. If one operand	1
prediction. Example: // Example	1
prediction. Modern microprocessors are	1
expected to be available	1
expected to be higher	1
expected to replace the	1
expected for further expansions	1
expected that the number	1
expected real-time speed. Delays	1
declare the function inline.	1
declare the table static.	1
declare it locally in	1
declare an int, without	1
declare all functions static	1
declare objects and fixed	1
application. The integer size	1
application. The development time	1
application. The availability of	1
application. If hyperthreading is	1
application. In example 12.3a,	1
application. You may use	1
here. The compiler option	1
here. The address of	1
here. It may be	1
here. It reveals a	1
here. You cannot use	1
here. Any code that	1
largest vector register size	1
largest available register size.	1
largest element in a	1
largest element in an	1
largest element (approximately): if	1
largest vector. These units	1
dispatched function is never	1
dispatched function then the	1
dispatched function call inline	1
dispatched function calls another	1
dispatched version return (*SelectAddMul_pointer)(aa,	2
members. The code that	1
members. This alignment can	1
members. A simple constructor	1
members. It is recommended	1
members. If the class	1
members. But each member	1
fits the microprocessor it	1
fits the application. In	1
fits into a single	1
fits into a 128-bit	1
fits best into the	2
x-xxxx--x x-xxxx--x x-xx----- x--x-----	1
x-xxxx--x x-xx----- x--x----- ---x-----	1
x-xxxx--x Profile-guided optimization Whole	1
x-xxxx--x ~a&~b=~(a|b) --xxxx--- a	1
x-xxxx--x (a|b)&(a|c) = a|(b&c)	1
x-xxxx--x Constantfolding xxxxxxxxx Codeplay	1
giving the function a	1
giving it some heavy	1
giving this example only	1
giving each constant a	1
giving access to low-level	1
giving specific optimization instructions	1
comparisons are more predictable	1
comparisons are slow unless	1
comparisons are inefficient when	1
comparisons by one makes	1
comparisons more efficient. This	1
comparisons i < 0	1
Performance and usability A	1
Performance and usability ...............................................................................................	1
Performance for further explanation.	1
Performance Primitives (IPP). Works	1
Performance Primitives" library contains	1
Performance Primitives". These function	1
above, the maximum loop	1
above, it is clear	1
above, but read one	1
above, page 87) is	1
above, so that it	1
above, p. 26). Variables	1
above. The generality of	1
above. A shared object	1
above. An object cannot	1
above. Now the code	1
above. Examples are provided	1
above. 7. If the	1
Pointer type conversion A	1
Pointer aliasing When accessing	1
Pointer arithmetic A pointer	1
Pointer arithmetic operations are	1
Pointer elimination A pointer	1
Pointer elimination Common subexpression	1
detect the misprediction before	1
detect that the value	1
detect if any objects	1
detect an error if	1
detect which instruction set	1
detect opportunities for parallelization	1
normal on some microprocessors	1
normal return route. This	1
normal unsigned int exponent	1
normal writes or reads	1
normal array. The constructor	1
normal afterwards. The clock	1
Several function libraries published	1
Several other programming languages	1
Several modern programming languages	1
Several special purpose libraries	1
Several graphical interface frameworks	1
Several internet forums and	1
convenient to have the	1
convenient to make a	1
convenient to calculate the	1
convenient to rely on	1
convenient for adding bounds-checking	1
convenient way of making	1
show the values of	1
show a discrete icon	1
show a disassembly, probably	1
show that it takes	1
show how tortuous and	1
show various ways of	1
column to the diagonal.	1
column < NUMCOLUMNS; column++)	1
column 28 because the	1
column 28 above the	1
column 29 with line	1
column 28, the cache	1
{...} // SSE2 version	2
{...} // AVX version	2
{...} // Dispatcher. Will	1
{...} // Prototype for	1
Test the whole software	1
Test and maintenance There	1
Test and maintenance ..........................................................................................	1
Test if the program	1
Test with different brands	1
Test Processor memcpy 16kB	1
c1 for all squares:	1
c1 { const int	1
c1 other than its	1
c1 < r1; c1	1
c1 before MemberPointer is	1
c1 += TILESIZE) {	1
x- x x x	3
x- x ----- -	1
x- x (x) x	1
x- x- x (x)	1
Number of elements in	1
Number of elements Total	1
Number of times to	1
Number of simultaneous lookups	1
Number 18 will evict	1
Number 17 will evict	1
portability is important. This	1
portability to 64-bit mode,	1
portability and development time.	1
portability and ease of	1
portability could be achieved	1
portability issue to catching	1
SSE3 instruction set Suppl.	1
SSE3 required // This	1
SSE3 instr. set SSE4.1	1
SSE3 tmmintrin.h SSE4.1 smmintrin.h	1
SSE3 pmmintrin.h Suppl. SSE3	1
SSE3 horizontal add, etc.	1
evaluate the loop control	1
evaluate a only when	1
evaluate and are equally	1
evaluate b when a	1
evaluate whether it is	1
evaluate both operands. Nevertheless,	1
embedded systems ............................................................................. 158	1
embedded systems Microcontrollers used	1
embedded systems. A look	1
embedded systems. Today (2013)	1
embedded applications have less	1
embedded microcontrollers. I am	1
Agner vector classes #include	1
Agner 8 8 char	1
Agner Available from Intel	1
Agner Fog. Technical University	1
Agner Fog. Public distribution	1
Agner Fog The present	1
availability of an update,	1
availability of x for	1
availability of these instruction	1
availability of good development	1
availability of various instruction	1
availability of powerful development	1
13.1 can be placed	1
13.1 // CPU dispatching	1
13.1 CPU dispatch strategies........................................................................................	1
13.1 CPU dispatch strategies	1
13.1 page 127. The	1
13.1 below. 126 Make	1
reference, the compiler may	1
reference, a const reference	1
reference, or the function	1
reference, or void. Returning	1
reference, 64-bit mode 8	1
reference, 32-bit mode 4	1
.NET and the best	1
.NET framework and the	1
.NET framework are based	1
.NET framework as well	1
.NET framework should definitely	1
.NET framework. Obviously, the	1
!= 0; 35 This	1
!= 0) { if	2
!= 0) { c	1
!= 0) *(p++) |=	1
!= INVALID_HANDLE_VALUE && WriteFile(handle,	1
files, data base access,	1
files, preferably in the	1
files, resource files, help	1
files, help files and	1
files, help files etc.	1
files, configuration files, help	1
Pointers to contained objects?	1
Pointers and references are	1
Pointers and references Pointers	1
Pointers and references ............................................................................................	1
Pointers can be invalid	1
Pointers versus references Pointers	1
half the size of	1
half the single-thread speed.	1
half a square. //	1
half of it, for	1
half speed or full	1
half speed because of	1
converting the data to	1
converting a to double	1
converting a to unsigned	1
converting a pointer to	1
converting to floating point:	1
converting to double In	1
occurs in the innermost	1
occurs in each part	1
occurs more than once	1
occurs because the addresses	1
occurs during execution of	1
occurs somewhere in F1?	1
Set function pointer if	1
Set pointer to the	2
Set sign bit of	1
Set flush-to-zero and denormals-are-zero	1
Set flush-to-zero mode (SSE):	1
costly to many users.	1
costly and which are	1
costly if XMM registers	1
costly when it occurs,	1
costly because all caches	1
costly because they must	1
newest CPU of a	1
newest CPU model, which	1
newest instruction set is	1
newest instruction sets include	1
newest instruction set. High	1
newest processors. Supports all	1
specifying the type and	1
specifying the size. Integers	1
specifying that two pointers	1
specifying that pointers of	1
specifying parallel processing in	1
specifying otherwise. In difficult	1
follows the mathematical notion	1
follows a simple regular	1
follows a simple periodic	2
follows in 64-bit mode	1
follows (using Intel vector	1
comparing the loop counter	1
comparing it to any	1
comparing i with 100	1
comparing bits 32-62. This	1
comparing signed with unsigned	1
comparing them as integers:	1
efficient, and sometimes it	1
efficient, and that's what	1
efficient, but the syntax	1
efficient, but not safe	1
efficient, but risky. The	1
efficient, way of doing	1
computers to keep up	1
computers and my manual	1
computers with more RAM	1
computers have memory caches.	1
computers have very different	1
computers have become more	1
B and C are	1
B = 2.2, C	2
B value in the	1
B before the calculation	1
B values. The choice	1
System code has to	1
System code should be	1
System programming .......................................................................................... 150	1
System programming Device drivers,	1
System database It can	1
System database ...................................................................................................... 20	1
five or ten years	1
five values have to	1
five manuals is copyrighted	1
five times. Thread-local storage	1
five manuals. See page	1
five manuals: 1. Optimizing	1
step of the sequence	1
step of interpretation or	1
step in the sequence	1
step by step. In	1
step where the compilation	1
step rather than the	1
poor if data are	1
poor because it lacks	1
poor CPU dispatching. For	1
poor performance for vector	1
poor branch prediction. Example:	1
poor documentation and lack	1
prefetch the data. The	1
prefetch more than one	1
prefetch data for regular	1
prefetch data automatically thanks	1
prefetch data explicitly if	1
prefetch instruction can be	1
9 and 13 objects,	1
9 and 64, depending	1
9 + 3; }	1
9 extra overhead which	1
9 Optimizing memory access	2
deciding which version to	1
deciding whether to use	1
deciding whether to store	1
deciding whether to base	1
deciding whether it is	2
self-relative addresses is much	1
self-relative references in 32-bit	1
self-relative address. (3) look	1
self-relative addressing of data.	2
self-relative addressing. In 32-bit	1
(float const x) {	1
(float x) { return	3
(float a) { return	1
(float *)alloca(n * sizeof(float));	1
Core and later Intel	1
Core 2 0.12 0.18	1
Core 2 0.77 0.89	1
Core 2 0.63 0.75	1
Core Math Library __vrs4_expf	1
Core i7 processor with	1
debugger is not the	1
debugger to identify the	1
debugger and press break	1
debugger can execute a	1
debugger then it will	1
debugger cannot set a	1
^ b ---xx---- a<<b<<c=a<<(b+c)	1
^ 1; You cannot	1
^ -1 = ~a	1
^ ~a = -1	1
^ operator. The &	1
^ ~b = a	1
regardless of the value	1
regardless of the size.	1
regardless of precision on	1
regardless of whether you	1
regardless of whether they	1
regardless of scope or	1
truncation and make a	1
truncation and back again.	1
truncation when the SSE2	1
truncation takes much longer	1
truncation so the floating	1
truncation towards zero, rather	1
base is not guaranteed	1
base a software package	1
base class is converted	1
base address plus a	1
base classes. You may	1
base access, etc. The	1
result. The conversion between	1
result. A compiler can	1
result. You can assume	1
result. Example: // Example	1
result. An overflow of	1
result. An uncaught overflow	1
How compilers optimize Modern	1
How compilers optimize ............................................................................................	1
How much is a	2
How much you gain	1
How was it possible	1
chain. A microprocessor with	1
chain. If a floating	1
chain. We want the	1
chain. Such dependency chains	1
chain. 3.16 Execution unit	1
chain. Nothing in the	1
Reading a value from	1
Reading or writing a	2
Reading or writing to	1
Reading or writing big	1
Reading again from address	1
compilation is finished. Register	1
compilation of the most	1
compilation of an intermediate	1
compilation or interpretation on	1
compilation may be a	1
compilation before it can	1
spots and measuring the	1
spots in the program	1
spots in the code.	1
spots have been identified.	1
spots Before you start	1
spots .................................................................................. 16 3.3	1
behavior of the Intel	1
behavior of the first	1
behavior of static libraries.	1
behavior of signed integers	1
behavior can be prevented	1
behavior well-defined with option	1
happens if the program	1
happens when a task	1
happens at runtime). The	1
happens inside the loop,	1
happens quite often because	1
happens rarely. The above	1
7 and Windows Server	1
7 The efficiency of	2
7 int d; //	1
7 program can take	1
7 through 14, with	1
87 for a discussion	1
87 used cache line	1
87 about memory caching.	1
87 9.3 Functions that	1
87 9.1 Caching of	1
87 9.2 Cache organization	1
Type of elements Total	1
Type of elements Size	1
Type conversions The C++	1
Type size, bytes alignment,	1
Type casting of pointers	1
Type conversions.................................................................................................... 40 7.12	1
places in the code.	1
places when the heap	1
places making the dispatch	1
places back in the	1
places back. Thus, we	1
places back, where n	1
unwinding The preceding paragraph	1
unwinding that is used	1
unwinding information can be	1
unwinding mechanism is also	1
unwinding mechanism may be	1
unwinding .............................................................................. 65 7.32	1
static, the logarithm would	1
static, as explained on	1
static, when applied to	4
am not making any	1
am not going to	1
am using this for	1
am using CPU clock	1
am always happy to	1
am giving this example	1
leaf function is a	1
leaf function is simpler	1
leaf function by inlining	2
leaf functions and frame	1
leaf function. Leaf functions	1
evaluated in the following	1
evaluated if a is	2
evaluated at all because	1
evaluated only when needed.	1
evaluated every time they	1
completely because of technical	1
completely independent divisions. Example:	1
completely rule out the	1
completely contained in a	1
completely unrolled to avoid	1
completely absent in a	1
again. The following example	1
again. This may take	1
again. If there are	2
again. Obviously, it is	1
again. Accessing system devices	1
powerful and may be	1
powerful solution is the	1
powerful development tools. One	1
powerful computers to keep	1
powerful computers with more	1
powerful facilities that do	1
form a logical sequence.	1
form of a linked	1
form of a re-	1
form of error reporting.	1
form of templates where	1
form than if the	1
deallocated in all possible	1
deallocated in random order.	2
deallocated when the function	2
deallocated when returning from	1
times. This is because	1
times. This can be	1
times. A queue should	1
times. It is often	1
times. Then again two	1
times. Thread-local storage Most	1
32- and 64-bit Windows	1
32- and 64-bit Windows,	1
32- and 64-bit Linux.	1
32- bit version for	1
32- bit x86 instruction	1
32- bit mode, where	1
edx can be changed	1
edx = point to	1
edx = r ebx,	1
edx as a memory	1
edx but the variable	1
edx contains the address	1
rule of standard C,	2
rule out the possibility	2
rule out the theoretical	1
rule out aliasing (see	1
one. The compiler has	1
one. The existing object	1
one. This prevents the	1
one. It may neverthe-	1
one. You can improve	1
one. I have provided	1
permissible to assume that	1
permissible in all cases,	1
permissible for reasons of	2
permissible if the unsafe	1
permissible when it is	1
worst possible case and	1
worst possible performance. We	1
worst case is a	1
worst case situation is	1
worst case situation of	1
worst problem of the	1
job of the application	1
job can be divided	1
job into multiple threads.	1
job before you. Optimized	1
job optimizing a particular	1
job fast enough. For	1
due to the so-called	1
due to the design	1
due to general improvements	1
due to poor documentation	1
due to interrupts and	1
due to controversies over	1
1.0; for (x =	1
1.0; int i; for	1
1.0; } }; //	1
1.0; while (n !=	1
1.0; list[i].b = 2.0;	1
1.0; temp->b = 2.0;	1
depend on the result	1
depend on the hardware	1
depend on the system,	1
depend on x so	1
depend on network resources	1
depend on system-specific graphical	1
biggest time consumers ................................................................................	1
biggest time consumers 3.1	1
biggest possible vector objects	1
biggest disadvantage of using	1
biggest vectors: for (int	1
biggest time-consumer in the	1
?Func@@YAXQAHAAH@Z is the name	1
?Func@@YAXQAHAAH@Z ?Func@@YAXQAHAAH@Z PROCNEAR ;	1
?Func@@YAXQAHAAH@Z ?Func@@YAXQAHAAH@Z PROC NEAR	1
?Func@@YAXQAHAAH@Z ENDP + esp	1
?Func@@YAXQAHAAH@Z PROCNEAR ; parameter	1
?Func@@YAXQAHAAH@Z PROC NEAR ;	1
defines a 128 bit	3
defines an algorithm of	1
defines hardware circuits consisting	1
defines electrical connections rather	1
overlap. If c =	1
overlap. You can save	1
overlap. You should use	1
overlap. See page 89	1
overlap. Compilers do not	1
overlap. 27 The number	1
processing, and mathematical operations	1
processing, data compression and	1
processing, OpenMP and automatic	2
processing, signal processing, data	1
processing, sound processing, and	1
SelectAddMul(short int aa[], short	6
users and much time	1
users in many different	1
users with nagging pop-up	1
users as well as	1
users will prefer to	1
users have. The developers	1
soon be obsolete. But	1
soon as the function	1
soon as you have	1
soon also 512 bits	1
soon get a lot	1
soon became available because	1
six in 32-bit systems	1
six integer registers available	1
six integer parameters and	1
six instructions rather than	1
six times as long	1
six years old version	1
Testing the speed of	1
Testing for the overflow	1
Testing multiple conditions using	1
Testing multiple conditions enum	1
Testing speed Testing the	1
Testing speed.............................................................................................................. 153 16.1	1
general, the out-of-order execution	1
general, it is faster	1
general, you can assume	1
general, you can expect	1
general, you have this	1
general, there is no	1
roll out the loop	3
roll out the calculation	1
roll out a loop	1
roll out a big	1
(i.e. the current .cpp	1
(i.e. if the member	1
(i.e. where the function	1
(i.e. variables defined outside	1
(i.e. 2, 4, 8,	1
(i.e. Microsoft, Intel and	1
edx, to ebx. The	1
edx, DWORD PTR [esp+4]	1
edx, DWORD PTR [esp+12]	1
edx, eax $B2$2 ;	1
edx, ecx, edx, DWORD	1
edx, respectively. (In 64-bit	1
C++, and a hardware	1
C++, and other languages	1
C++, it is often	1
C++, directly compiled code	1
C++, Pascal and Fortran	1
C++, D, Pascal, Fortran	1
i); // result =	1
i); // Load eight	3
i); // Add 2	2
mixed with x87 style	1
mixed language 11 programming,	1
mixed precision require precision	1
mixed implementation can be	1
mixed types or sizes?	1
mixed sizes. For example:	1
protection means are among	1
protection schemes are based	2
protection schemes are annoying	1
protection against overflow is	1
protection scheme should be	1
counter. The test tool	1
counter. This is a	1
counter. A microprocessor with	1
counter. Example: // Example	2
counter. Any expression that	1
structure. The extra time	1
structure. The situation is	1
structure. This is equally	1
structure. It is important	1
structure. For example: //	1
structure. Incrementing or decrementing	1
4. The if branch	1
4. The reason is	1
4. Instruction tables: Lists	1
4. Even worse, many	1
4. So the address	1
4. Align arrays and	1
security reason for updating.	1
security reasons before leaving	1
security problem. The official	1
security software. Background services.	1
security advices in critical	1
security matters. Problems with	1
branches. The following methods	1
branches. The algorithms used	1
branches. A simple periodic	1
branches. If you are	1
branches. They can be	1
branches. Manual 3: "The	1
Is16vec8 a = select_gt(b,	1
Is16vec8 b = LoadVector(bb	1
Is16vec8 c = LoadVector(cc	1
Is16vec8 Vec8s 16 8	1
Is16vec8 two(2,2,2,2,2,2,2,2); // Roll	1
Is16vec8 zero(0,0,0,0,0,0,0,0); // Make	1
cores. A process or	1
cores. You may have	1
cores. You may need	1
cores. Each thread should	1
cores. 3.15 Dependency chains	1
cores. 60 The cost	1
communication and synchronization between	2
communication with a remote	1
communication between different threads,	1
communication between threads is	1
communication between threads becomes	1
avoiding the virtual function	1
avoiding the costs of	1
avoiding pointer arithmetics and	1
avoiding any public variables.	1
avoiding this. The Intel	1
avoiding infinite loop if	1
anything it has allocated	1
anything by using the	1
anything else on a	1
anything else than finding	1
anything else being initialized.	1
anything here because we	1
INSTRSET is used for	1
INSTRSET == 2 //	1
INSTRSET == 2 #define	1
INSTRSET == 2 12.6	1
INSTRSET == 8 #define	1
INSTRSET == 5 #define	1
Accessing a data member	1
Accessing a variable or	1
Accessing a member of	1
Accessing an object by	1
Accessing data from RAM	1
Accessing system devices and	1
internal functions in a	1
internal variables and internal	1
internal references. 64-bit Mac	1
internal references. There is	1
internal references. Therefore, it	1
internal multi-threading, e.g. Intel	1
type-casting with a little	1
type-casting i to unsigned	1
type-casting without adding any	1
type-casting its 'this' pointer	1
type-casting its address: //	1
type-casting pointers: The trick	1
requirements of the task	1
requirements of optimizing the	1
requirements of compatibility with	1
requirements for strict floating	1
requirements are less strict	1
requirements are often conflicting	1
profiler. The result will	1
profiler. This does not	1
profiler. A simple alternative	1
profiler. It is not	1
profiler. For Intel CPUs	1
__fastcall or __attribute__((fastcall)). The	1
__fastcall keyword is not	1
__fastcall changes the function	1
__fastcall __attribute(( fastcall)) __fastcall	1
__fastcall Noncached write #pragma	1
loss of precision for	1
loss of precision. Let's	1
loss of precision, as	1
loss of precision, especially	1
loss of efficiency. The	1
cleanup of allocated resources.	1
cleanup that may be	1
cleanup before terminating a	1
cleanup jobs is to	1
cleanup jobs to do.	1
Functions that are used	2
Functions Function calls may	1
Functions _intel_fast_memcpy and __intel_new_strlen	1
Functions ................................................................................................................ 48 7.15	1
handling. It is recommended	1
handling. You have to	1
handling. See the manual	1
handling. 8.6 Optimization directives	1
handling. Omitting the standard	1
Fortran is also quite	1
Fortran and several other	1
Fortran are based on	1
Fortran where the storage	1
Fortran code. The main	1
increment the loop counter	1
increment and decrement operators.	1
increment an integer variable,	1
increment operators also applies	1
increment i++. cmp eax,	1
drivers for 64-bit Windows).	1
drivers for Windows. 10	1
drivers are particularly critical	1
drivers may need assembly	1
drivers differ a lot	1
economize the use of	2
economize the library function	1
economize the resource use	1
economize resource use in	1
Templates are efficient because	1
Templates are instantiated at	1
Templates may be used	1
Templates A template is	1
Templates make the source	1
28 because the cache	1
28 above the diagonal.	1
28 Dynamic memory allocation	1
28 below the diagonal	1
28 share the same	1
seven memory allocations of	1
seven different compilers. The	1
seven different brands of	1
seven times faster than	1
seven significant digits, so	1
turned into a leaf	1
turned up to cause	1
turned on, the compilers	1
turned on, including relaxed	1
turned on. Most IDE's	1
inheritance is now as	1
inheritance by making objects	1
inheritance class B1; class	2
inheritance where a much	1
overcome the dangers of	1
overcome the obstacle of	1
overcome by defining a	1
overcome this limitation). 14.11	1
overcome these disadvantages when	1
maintain. The time you	1
maintain. If the compiler	1
maintain. Most compiler packages	1
maintain. Any specific bottleneck	1
maintain. And it is	1
fourteen in 64-bit systems.	1
fourteen integer registers in	1
fourteen register parameters. In	1
fourteen parameters to be	2
122 for how to	2
122 this the time	1
122 13.1 CPU dispatch	1
122 13.2 Model-specific dispatching	1
consuming. A collection of	1
consuming. There is a	1
consuming. Therefore, the data	1
consuming. Therefore, you should	1
consuming. Sometimes it takes	1
method. // This is	1
method. A longer loop-	1
method. When the function	1
method. 7.29 Threads Threads	1
method. Your measurement code	1
backwards and much less	1
backwards compatible with 16-bit	1
backwards compatible instruction sets	1
backwards compatibility with a	1
backwards though the 61	1
remote or removable media	1
remote data locally. Access	1
remote help files, data	1
remote databases usually requires	1
remote database, and a	1
int, without specifying the	1
int, signed or unsigned	2
int, float, double, bool,	1
int, float. Similar operations	1
bc for each element	1
bc = _mm_mullo_epi16 (b,	2
bc = _mm_andnot_si128(mask, bc);	1
bc with the inverted	1
tools. The simplest possible	1
tools. A popular user	1
tools. It should be	1
tools. Automatic updates. Automatic	1
tools. One popular development	1
operation. A good compiler	1
operation. For example, if	1
operation. For example,a *	1
operation. Example: // Example	1
operation. x*8 is replaced	1
future. If a future	1
future. 6 The 64-bit	1
future. Typically, the full	1
future. To use multiple	1
future. 12.3 Automatic vectorization	1
swapping the order of	1
swapping is a frequent	1
swapping of memory to	1
swapping and other resource	1
swapping column 29 with	1
AVX512 instruction set is	1
AVX512 double 64 8	1
AVX512 float 32 16	1
AVX512 long long 64	1
AVX512 Table 12.1. Vector	1
considerable amount of time.	1
considerable delay comes when	1
considerable improvement in performance	1
considerable job, but it	1
considerable debate about which	1
memset is deprecated. This	1
memset and memcpy is	1
memset and memcpy, at	1
memset and memcpy: //	1
memset line if you	1
rest of the code.	1
rest of the program.	1
rest of the installation	1
rest of the code,	1
rest of the present	1
on, the compilers will	1
on, then it will	2
on, while it is	1
on, including relaxed floating	1
Agner's vector class library	3
Agner's vector class library.	1
Agner's vector classes looks	1
Digital Mars This is	1
Digital Mars compiler is	1
Digital Mars compilers produce	1
Digital Mars Compiler v.	1
Digital Mars PGI PathScale	1
third thread can do	1
third thing that can	1
third generation class through	1
third party security software.	1
third generations classes contain	1
Roll out loop by	5
Critical function to test	1
Critical parts of the	1
Critical innermost loop: for	1
Critical device drivers may	1
Critical pieces of code	1
"Calling conventions for different	5
CISC instruction set is	1
CISC instruction set may	1
CISC instruction set (called	1
CISC instruction sets have	1
CISC processors, between PC's	1
22 one or two	1
22 4 Performance and	1
22 3.14 Context switches.....................................................................................................	1
22 3.15 Dependency chains	1
22 3.16 Execution unit	1
AND each element in	2
AND operator (&) and	1
AND operation isolates the	1
AND operations: __m128i a	1
effort is concentrated on	2
effort to make a	1
effort to make special	1
effort on that particular	1
numbers. The exponent is	1
numbers. It can also	1
numbers. You may, in	1
numbers. Therefore, 64-bit Linux	1
numbers. With a long	1
popular and used for	1
popular at the time	1
popular version of Basic	1
popular user interface library	1
popular development tool is	1
SIZE = 512; //	2
SIZE = 64; //	1
SIZE must be divisible	1
SIZE % 128 ==	1
Runtime type identification adds	1
Runtime type identification (RTTI)	2
Runtime polymorphism is needed	1
Runtime polymorphism with virtual	1
principles of software develop-	1
principles to use. I	1
principles in order to	1
principles are the same	1
principles here: functional decomposition	1
context switch is a	1
context switches is smaller	1
context switches can reduce	1
context switches by making	1
context switches after each	1
names. The details about	1
names. Use fastcall functions	1
names. But a highly	1
names. We can only	1
names. Remember to remove	1
reducing the time spent	1
reducing the number of	1
reducing the performance because	1
reducing integer expressions than	1
reducing example 15.1d to	1
benefit from the larger	1
benefit from using registers	1
benefit from register storage.	1
benefit from its many	1
benefit from setting the	1
worth the effort to	2
worth the effort. 7.21	1
worth the effort. Square	1
worth considering is the	1
manual. The subsequent manuals	1
manual. This option makes	1
manual. There are various	1
manual. You have to	1
manual. 2.3 Choice of	1
specifies the calculation of	1
specifies that a variable	1
specifies that all floating	1
specifies how to do	1
specifies truncation so the	1
searching and parsing are	1
searching for updates each	1
searching for vacant spaces.	1
searching needed before all	1
searching needed after all	1
versus unsigned integers In	1
versus dynamic libraries Function	1
versus dynamic libraries............................................................................ 146	1
versus XMM registers. Example:	1
versus references Pointers and	1
propagation is not possible	1
propagation and other optimizations.	1
propagation and reduce a	1
propagation An expression or	1
propagation Pointer elimination Common	1
reduction is a complicated	1
reduction in this case.	1
reduction would be invalid	1
reduction would cause overflow	1
reduction Most compilers can	1
effects of object oriented	2
effects or if the	1
effects into account. You	1
effects are: Variables that	1
1.; } The compiler	1
1.; } else {	1
1.; } Here, the	1
1.; Eliminate jumps Jumps	1
1.; x.b = y.b	1
live range of a	1
live ranges do not	3
live ranges now overlap.	1
multidimensional array is less	1
multidimensional array should be	2
multidimensional array sequentially. Some	1
multidimensional structure needed? A	1
install a program package	1
install a software package	1
install a large runtime	1
install this important new	1
install automatic updates to	1
development, and a release	1
development, and that computers	1
development, each new generation	1
development, database integration, web	1
development, testing and maintenance	1
strict when compiling for	1
strict floating point calculations	1
strict aliasing rule of	2
strict formalism that requires	1
(c = 0; c	4
(c + d); Now	1
Position-independent code is used	1
Position-independent code is inefficient,	1
Position-independent code Shared objects	1
Position-independent code. All addresses	1
Position-independent code.................................................................................. 148 14.13	1
obvious to the programmer	1
obvious to do so.	1
obvious and the code	1
obvious reductions as 0/a	1
obvious thing to do.	1
swapped to the hard	1
swapped to disk. Software	1
swapped with element matrix[c][r]	1
swapped with element matrix[c][r].	1
swapped then both can	1
21 3.10 Graphics .................................................................................................................	1
21 3.11 Other system	1
21 3.13 Memory access	1
21 3.13 Memory access.......................................................................................................	1
21 3.12 Network access	1
vectors: for (int i	5
OR the results of	1
OR operator (|) works	1
OR operator (^) may	1
OR combination of these	1
OR operator, which can	1
Array of 100 doubles:	1
Array with N elements	1
Array with bounds checking	1
Array size divisible by	1
Array size Alignd (	1
processes or threads simultaneously.	1
processes because it often	1
processes running on the	1
processes simultaneously. Actually, only	1
processes running, and a	1
portable to systems with	1
portable to platforms that	1
portable in the sense	2
portable way of defining	1
consume a lot of	2
consume a significant amount	1
consume time at unpredictable	1
consume more time than	1
schemes are based on	2
schemes are frequent sources	1
schemes are annoying to	1
schemes cause problems when	1
80 for an example	1
80 into a and	1
80 clock cycles for	1
80 clock cycles, depending	1
80 Unfortunately, this method	1
Arrays that are too	1
Arrays are often used	1
Arrays are always transferred	1
Arrays An array is	1
Arrays ..................................................................................................................... 38 7.11	1
lists the available vector	1
lists of specific CPU	1
lists and other data	1
lists in most cases.	1
lists that are so	1
event of an exception.	1
event that it becomes	1
event that it attempts	1
event it is servicing.	1
event counts for threads	1
computer. The Pentium 4	1
computer. The measured results	1
computer. The proxy is	1
computer. Big supercomputers with	1
computer. Security software that	1
Static linking includes only	1
Static linking (multithreaded) /arch:AVX	1
Static versus dynamic libraries	1
Static versus dynamic libraries............................................................................	1
Static cast The static_cast	1
becoming more and more	1
becoming more popular and	1
becoming better and better	1
becoming increasingly important. A	1
becoming increasingly blurred as	1
select the most efficient	1
select the best implementation	1
select all installation options	1
select between two simple	1
select function, and the	1
list, the compiler must	1
list, on the other	1
list, set and map	1
list, database, or other	1
list, rolled out by	1
executed as it is,	1
executed only once for	1
executed faster in a	1
executed even though the	1
executed 10 times rather	1
actual clock frequency that	1
actual values before it	1
actual load address. Relocation	1
actual calculations. This should	1
actual processor. However, this	1
case, the performance is	1
case, the calculation of	1
case, you may view	1
case, but in this	1
case, N is not	1
over the disadvantages when	1
over the C99 standard.	1
over other programming languages	1
over new and delete	1
over 32 bit systems:	1
realistic set of data	1
realistic set of test	1
realistic number of cache	1
realistic performance test should	1
realistic goal is to	1
abc is a power	1
abc is 12 bytes.	1
abc can be increased	1
abc * p; int	1
abc {int a; int	1
finished. The optimal number	1
finished. This method is	1
finished. Example: // Example	1
finished. Obviously, this is	1
finished. Register allocation and	1
hand, the compiler may	1
hand, a just-in-time compiler	1
hand, it is not	1
hand, if your optimization	1
hand, does not need	1
_WIN64 not _WIN64 64	1
_WIN64 64 bit platform	1
_WIN64 _M_X64 _M_X64 162	1
_WIN64 _LP64 Windows platform	1
_WIN64 _LP64 _WIN64 _LP64	1
recover in the event	1
recover from a branch	1
recover from errors. The	1
recover from errors. If	1
recover from exceptions. See	1
console or to an	1
console mode program is	2
console mode program are	1
console mode program. The	1
advice of making the	1
advice in the rest	1
advice given here may	1
advice given above. 7.	1
advice applies to arrays	1
ways. The critical stride	1
ways. The first way	1
ways. This means that	1
ways. Example: // Example	1
ways. Switch statements are	1
16.2 The pitfalls of	2
16.2 calls the critical	1
16.2 #include <stdio.h> #include	1
16.2 above, but read	1
pow and log are	1
pow The method used	1
pow function when the	1
pow function uses logarithms	1
pow at compile- time,	1
split the tasks into	1
split into two 64-bit	1
split between several execution	1
split up the data	1
split up into multiple	1
generated by the compiler	2
generated by the Intel	1
generated by the compiler,	1
generated from the same	1
created a file by	1
created or modified. This	2
created it will generate	1
created by one function	1
hundred or even a	1
hundred clock cycles to	1
hundred clock cycles if	1
hundred times because the	1
hundred times. This is	1
250 times with four	1
250 μs is less	1
250 μs on a	1
250 ms. This delay	1
250 ms. If the	1
computing power than PCs.	1
computing mathematical functions such	1
computing resources than standard	1
computing resources. Typically, a	1
computing i/2+r. The instructions	1
pointers, and far procedures	1
pointers, by initializing pointers	1
pointers, etc. And it	1
pointers, references, 'this' pointer,	1
pointers, e.g.: // Example	1
limit the range of	1
limit to the length	1
limit to the required	1
limit can be set	1
limit can be defined.	1
90 for a further	1
90 for examples of	1
90 9.6 Dynamic memory	1
90 9.7 Container classes	1
90 Gives a more	1
follow the advice given	1
follow the guidelines below.	1
follow the track backwards	1
follow the rows, not	1
follow a sequence where	1
loop-carried dependency chains with	1
loop-carried dependency chain. A	1
loop-carried dependency chain. Such	1
loop-carried dependency chain. Nothing	1
loop-carried dependency chains, namely	1
library, you are feeding	1
library, you divide the	1
library, but this is	1
library, except when several	1
library, SSE4.1 gives an	1
recommendation is to use	1
recommendation of which one	1
recommendation for good code	1
recommendation about which platforms	1
recommendation was the opposite:	1
Objects of a composite	1
Objects and arrays can	1
Objects that are allocated	1
Objects inside containers should	1
Objects bigger than 16	1
compromise on the advanced	1
compromise when portability and	1
compromise between development time,	1
compromise between efficiency, portability	1
compromise safety is to	1
Mars This is a	1
Mars compiler is mostly	1
Mars compilers produce less	1
Mars Compiler v. 8.42n,	1
Mars PGI PathScale Gnu	1
already in the cache	1
already been allocated. If	1
already works is of	1
already known then it	1
already known at this	1
nothing to gain by	1
nothing to clean up	1
nothing between 8 bit	1
nothing while seconds count	1
nothing inside the loop	1
(a&&b) || (a&&c) =	1
(a&&b) || (a&&c) ||	1
(a&&b) || (a&&b&&c) =	1
(a&&b) || (!a&&c) =	1
(a&&b) || (!a&&c) ||	1
physical register to temp	1
physical processors and the	1
physical processors but eight	1
physical movements of objects	1
physical factors. The way	1
((unsigned int)i < 10)	1
((unsigned int)i >= (unsigned	1
((unsigned int)n < 4)	1
((unsigned int)n < 13)	1
((unsigned int)(i - min)	1
xxxxxxxxx Codeplay Watcom Digital	1
xxxxxxxxx x-xxx---- a-(-b)=a+b a-a	1
xxxxxxxxx -- - xx	1
xxxxxxxxx 0/a=0 ---x---xx (-a==-b)=(a==b)	1
xxxxxxxxx xxxxxxx-x xxxxxxxxx x-xxx----	1
constructors and overloaded operators.	1
constructors and destructors of	1
constructors and destructors to	1
constructors and destructors. The	1
constructors are called. Therefore,	1
increased the available instruction	1
increased to 16 bytes	1
increased by more than	1
increased when the work	1
increased from 64-bit MMX	1
programming, compiler technology, and	1
programming, but in applications	1
programming, how to avoid	1
programming, etc. In cases	1
programming, modularity, reusability and	1
factor. A little math	1
factor. If a and	1
factor. If not, then	1
factor. For example, if	1
factor. Loop unrolling should	1
i.e. in 64-bit mode	1
i.e. if there is	1
i.e. each element matrix[r][c]	1
i.e. stored at a	2
nonzero and normal unsigned	1
nonzero } else {	1
nonzero floating point number	1
nonzero floating point numbers	1
nonzero u.i += n	1
unacceptably long response times	3
unacceptably long response times,	1
unacceptably long. Lazy binding	1
process. This can be	1
process. A dynamic library	1
process. These requirements are	1
process. Obviously, we loose	1
process. 3.5 Program loading	1
Calculate x to the	1
Calculate integer power using	1
Calculate integer power, loop	1
Calculate polynomial The calculation	1
Calculate polynomial with induction	1
Only the registers eax,	1
Only the executable file	1
Only for SSE2 or	1
Only one of the	1
Only available for 64-bit	1
adds the elements of	1
adds an extra level	1
adds this to i	1
adds 16 to the	1
adds extra information to	1
() { // Table	1
() { static const	1
() { C1 Object1;	1
() { CChild1 Object1;	1
() { __declspec(__align(64)) double	1
Division of a loop	1
Division by a constant	2
Division by a constant:	1
Division takes 14 -	1
pitfalls of CPU dispatching	1
pitfalls of unit-testing It	1
pitfalls of unit-testing ......................................................................................	1
pitfalls here. You cannot	1
pitfalls here: The inequality	1
package is not traditionally	1
package and make it	1
package in order to	1
package on a complex	1
package several times in	1
equivalent to a function.	1
equivalent to const definitions	1
equivalent expression b &&	1
equivalent reductions at their	1
equivalent if(!(a || b))	1
understand and therefore difficult	1
understand when we roll	1
understand how variables are	1
understand it. I am	1
understand compiler-generated assembly code.	1
Fortunately, the solution to	1
Fortunately, it is rarely	1
Fortunately, all compilers are	1
Fortunately, most compilers will	1
Fortunately, there are more	1
command or do other	1
command line or a	1
command line or an	1
command line with all	1
command received by an	1
a[i]; The above code	1
a[i]; // Return a	1
a[i]; It is often	1
a[i]; s1 += a[i+1];	1
a[i]; Converting an integer	1
relatively small gain in	1
relatively costly because they	1
relatively cheap if they	1
relatively primitive programming style	1
relatively expensive, while the	1
priority. The gain in	1
priority. If the different	1
priority. In many cases,	1
priority. Other tasks such	1
priority. Especially the memory	1
files. This can actually	1
files. See page 16	1
files. Use 64-bit mode	1
files. 13.2 Model-specific dispatching	1
files. 121 13 Making	1
inefficient, of course, and	1
inefficient, and it will	1
inefficient, especially in 32-bit	1
inefficient, however, when b	1
inefficient, (4) get a	1
guidelines are provided below,	1
guidelines can be used	1
guidelines by using a	1
guidelines should be obeyed.	1
guidelines below. You may	1
Kernel Library (MKL v.	1
Kernel Library" and "Integrated	1
Kernel Library" contains many	1
Kernel Library, available from	1
Kernel Library. The multiple	1
necessarily stored sequentially in	1
necessarily accessed through a	1
necessarily done by the	1
necessarily stay in the	1
necessarily newer. The CPU	1
returns a pointer to	1
returns a reference to	1
returns // Volatile to	1
returns from the function.	1
returns even though it	1
jobs is to make	1
jobs to do. This	1
jobs and 10 ms	1
jobs simultaneously. Each thread	1
jobs simultaneously or seemingly	1
Data that are read-only	1
Data caching is poor	1
Data members of a	2
Data alignment. __declspec(align(16)) or	1
frameworks that typically take	1
frameworks are used at	1
frameworks are available for	1
frameworks are frequent sources	1
frameworks typically used on	1
excessive memory swapping and	1
excessive loop unrolling so	1
excessive number of function	1
excessive number of separate	1
excessive number of DLLs,	1
safer to use a	1
safer to use than	1
safer to do this	1
safer to calculate the	1
safer implementation would only	1
Aligning data Loading data	1
Aligning dynamically allocated memory	1
Aligning dynamically allocated memory.................................................................	1
Aligning RGB video or	2
execution. The most important	1
execution. This means that	1
execution. It is often	1
execution. There is no	1
execution. Example: // Example	1
a[size], b[size]; // set	2
a[size], b[size]; // ...	1
a[size], b[size], i; ...	1
a[size], b[size], c[size]; float	1
latency of the multiplication	1
latency of a floating	1
latency and the throughput	1
latency or by memory	1
latency which is the	1
specify the compiler option	1
specify the options for	1
specify the alignment explicitly	1
specify an option that	1
specify static linking for	1
for(i=0; i<300; i++){ list[i]	2
for(i=0; i<300; i+=3){ list[i]	1
for(i=0; i<100; i++)a[i]=2*i; The	1
for(i=0; i<301; i+=3){ list[i]	1
larger than the largest	1
larger memory footprint than	1
larger vector size. Later	1
larger floating point vectors.	1
larger address space of	1
-(-a) to a. I	1
-(-a) = a -	2
-(-a) = a, but	1
-(-a) very often, but	1
Multiple calls to a	1
Multiple applications running simultaneously	1
Multiple inheritance class B1;	1
Multiple divisions can be	1
Multiple threads? Container classes	1
unfortunately the unit-test does	1
unfortunately it prevents certain	1
unfortunately this is not	1
unfortunately there is no	1
unfortunately very common. Even	1
n! is calculated from	1
n! // Table of	1
n! = n∙(n-1)!. If	1
n! int i, f	1
n! 117 A C++	1
pieces of a suitable	1
pieces of code that	1
pieces of code can	1
pieces of data that	1
pieces of code. Example:	1
Basic is Visual Basic	1
Basic was too slow.	1
Basic .NET and the	1
Basic soon became available	1
Basic .NET, which is	1
(In the above example,	1
(In 64-bit mode, the	1
(In Windows you can	1
(In my tests, the	1
(In Windows, SetThreadAffinityMask, in	1
microprocessors. The function is	1
microprocessors. Integer division takes	1
microprocessors. Many of the	1
microprocessors. 7.13 Loops The	1
microprocessors. Multiplication and division	1
modules. This may cause	1
modules. This makes inlining	1
modules. This enables interprocedural	1
modules. You may add	1
modules. 3.12 Network access	1
s = (short int)i;	1
s = _mm_hadd_ps(x, x);	1
s = _mm_hadd_ps(s, s);	1
s += xxn *	1
s += x^n/n! xxn	1
project at hand. Low-level	1
project together and tested	1
project goes to the	1
project window or makefile.	1
project built with another	1
divided into multiple threads	1
divided into many small	1
divided into threads with	1
divided into small pieces	1
divided into three parts:	1
www.agner.org/optimize/asmlib.zip. The following example	1
www.agner.org/optimize/asmlib.zip. The name of	1
www.agner.org/optimize/asmlib.zip. // Example 16.1	1
www.agner.org/optimize/asmlib.zip. If you want	1
www.agner.org/optimize/asmlib.zip. Currently includes optimized	1
Wednesday = 8, Thursday	1
Wednesday or Friday is	1
Wednesday | Friday) in	1
Wednesday | Friday)) {	1
Wednesday || Day ==	1
mispredictions. The performance measurement	1
mispredictions. Boolean vector operations	1
mispredictions. When the most	1
mispredictions. Test the whole	1
mispredictions. 44 In some	1
relies on the CPU	1
relies on exception handling.	1
relies on network resources	1
relies on structured exception	1
relies on non- standardized	1
And it is discussed	1
And it is unlikely	1
And here is a	1
And whenever a public	1
And who would know	1
platforms, and in some	1
platforms, it is recommended	1
platforms, different screen resolutions,	2
platforms, including 32-bit and	1
compare the performance of	1
compare it to the	1
compare with end of	1
compare two positive floating	1
compare absolute values: //	1
valid only until the	1
valid values or if	1
valid address. Pointers can	1
valid 63 number (e.g.	1
valid addresses, or if	1
CPU-intensive software is to	1
CPU-intensive code. But many	1
CPU-intensive programs when the	1
CPU-intensive applications with many	1
CPU-intensive code, as described	1
Is the size known	2
Is a multidimensional structure	1
Is searching needed before	1
Is searching needed after	1
so. The compilers are	1
so. It may fail	1
so. See page 73.	1
so. These containers should	1
so. 58 If it	1
seen in the broader	1
seen in the unit-	1
seen in 64 bit	1
seen can reduce them	1
seen many examples of	1
Typically, the conversion takes	1
Typically, the full advantage	1
Typically, a specific graphics	1
Typically, there is a	1
Typically, there are two	1
107 for how to	1
107 number of elements	1
107 12.2 AVX-512 instruction	1
107 12.4 Using intrinsic	1
107 12.3 Automatic vectorization	1
contiguous in program memory.	1
contiguous with other objects	1
contiguous with other local	1
contiguous memory block. Do	1
contiguous memory. See the	1
gets the new version	1
gets the latest version	1
gets from the dispatcher	1
gets information about the	1
gets information about its	1
manuals. See page 3	1
manuals. I want to	1
manuals. I am always	1
manuals. 7.1 Different kinds	1
manuals. Please note that	1
tells the compiler that	1
tells the CPU to	1
tells the address of	1
tells the operating system	1
tells that a variable	1
wrap the allocated memory	1
wrap the allocated array	1
wrap around on overflow	1
wrap around. Adding 1	1
wrap around, (3) trap	1
separately and test their	1
separately in software development.	1
separately if there are	1
separately with the appropriate	1
separately through multiple function	1
__attribute(( aligned(16))) Assume pointer	1
__attribute(( aligned(16))) __declspec( align(16))	1
__attribute(( const)) Assume function	1
__attribute(( const)) __attribute(( const))	1
__attribute(( fastcall)) __fastcall Noncached	1
necessary. A virtual destructor	1
necessary. If F1 calls	1
necessary. 101 Multithreading works	1
necessary. Take the example:	1
necessary. Fast versions of	1
increasing the thread priority	1
increasing function of the	1
increasing number of purposes	1
increasing number of devices	1
increasing faster than the	1
16, 32 and 64	1
16, last byte at	1
16, i.e. stored at	2
16, 32, 64, ...).	1
threads, but the compiler	1
threads, but it can	1
threads, but that's about	1
threads, such as semaphores,	1
threads, while data that	1
Development in C++ is	1
Development time Some developers	1
Development process There is	1
Development Environments) have facilities	1
Development process...................................................................................................... 25 7	1
AND'ed with the inverted	1
AND'ed with this mask,	1
AND'ed with all 0's	1
AND'ed with all 1's	1
AND'ed b with 1	1
elimination and loop-invariant code	1
elimination x n.a. Constant	1
elimination A pointer or	1
elimination If the same	1
elimination Common subexpression elimin.,	1
all. This makes the	1
all. This method can	1
all. In the case	1
all. Fortunately, there are	1
all. Can only run	1
.......................................................................................... 21 3.12 Network	1
.......................................................................................... 96 9.10 Cache	1
.......................................................................................... 126 13.5 Implementation	1
.......................................................................................... 150 15 Metaprogramming	1
.......................................................................................... 66 8.1 How	1
upper 32 bits of	2
upper limit to the	1
upper limit can be	2
addresses. The names of	1
addresses. This works in	1
addresses. If caching is	1
addresses. Therefore, the code	1
addresses. Especially the use	1
loop-invariant code that can	1
loop-invariant code containing pure	1
loop-invariant code motion manually	1
loop-invariant code motion. See	1
loop-invariant expression that it	1
sum1 and sum2 are	1
sum1 = 0, sum2	1
sum1 from time T	1
sum1 += list[i]; sum2	1
sum1 += sum2; If	1
~a a ^a =	1
~a = 0 a	1
~a = 0 -	1
~a = -1 (a&~b)|(~a&b)=a^b	1
~a ^ ~b =	1
Compilers and IDE's for	1
Compilers for 32-bit Mac	1
Compilers will usually unroll	1
Compilers do not normally	1
Compilers cannot make floating	1
); // Function to	1
); // Make three	1
); #else // 32-bit	1
); Alignd ( short	1
); 7.26 Overloaded functions	1
18 will evict number	1
18 software optimization is	1
18 3.4 Automatic updates	1
18 Overview of compiler	2
them. The hardware definition	1
them. This would require	1
them. You should therefore	1
them. Some important obstacles	1
them. Pure functions A	1
point. The reason is,	1
point. // After first	1
point. This does not	1
point. Use 64-bit mode	1
point. Conversion of unsigned	1
consumption of different type	1
consumption of each run	1
consumption are actually quite	1
consumption as the difference	1
consumption was down to	1
8. The size should	1
8. The number of	1
8. There are also	1
8. Avoid branches at	1
8. 71 The compilers	1
key in the container	1
key or moving the	1
key values are confined	1
key press or mouse	1
key press. 19 Avoid	1
explanation. The value of	1
explanation. The following example	1
explanation. Note that these	1
explanation. (The Microsoft compiler	1
explanation. Please skip the	1
itself. You may add	1
itself. But a solution	1
itself. Function addresses are	1
itself. Another disadvantage of	1
itself. Constructors are therefore	1
updated to a new	1
updated every time a	1
updated since 2004. Can	1
updated 2014-08-07. Contents 1	1
updated lately. Vector class	1
appear to take longer	1
appear in the class	1
appear in the source	1
appear in the project	1
appear as a large	1
Codeplay and Watcom compilers	1
Codeplay compiler has some	1
Codeplay Watcom Digital Mars	1
Codeplay VectorC A commercial	1
Codeplay VectorC v. 2.1.7,	1
(except in device drivers	1
(except in Fortran where	1
(except for the loop	1
(except for the <,	1
(except for char pointers).	1
combined by some formula	1
combined with the LLVM	1
combined size of code	1
combined size of all	1
combined into a 128-bit	1
definitely the preferred programming	1
definitely be avoided when	1
definitely be avoided unless	1
definitely be avoided. 37	1
definitely degrades performance for	1
jumps between different CPU	1
jumps back to the	1
jumps to. Example: //	1
jumps Eliminate branches Remove	1
jumps Jumps can be	1
elements. The instruction add	1
elements. The size of	1
elements. A hash map	1
elements. Example: // Example	1
elements. 12.1 AVX instruction	1
.cpp files into a	2
.cpp modules that make	1
.cpp modules into one	1
.cpp file) should be	1
features, and you may	1
features, and current operating	1
features, but also very	1
features, see http://www.agner.org/optimize/ -	1
features, including the ability	1
flag and don't modify	1
flag in the compiler.	1
flag or in a	1
flag then the loop	1
flag (e.g. DEC, JNZ).	1
8) { // Load	4
8) SelectAddMul_pointer = &SelectAddMul_AVX2;	1
ever more powerful computers	1
ever bigger software packages	1
ever used, though. Some	1
ever seen can reduce	1
ever happens. This is	1
Writes to a printer	1
Writes "Hello 2" The	1
Writes "Hello 2" Here	1
Writes "Hello 1" //	2
13 // 2 unused	1
13 Making critical code	2
13 Asmlib Gnu 64	1
13 objects, respectively (MS	1
b[i] and c[i] are	2
b[i] = a[i]; It	1
b[i] = Func(a[i]); }	1
b[i] + 2; }	1
doubled. The time it	1
doubled. The length of	1
doubled. This makes it	1
doubled. A thread that	1
doubled. Thin clients that	1
written in C, C++	1
written in Java, C#,	1
written as 2eee 1.fffff,	1
written table may go	1
written back. The so-called	1
languages, it is often	1
languages, but also less	1
languages, such as Java,	1
languages, operating systems, and	1
languages, profiling and debugging.	1
malloc is typically aligned	1
malloc and free are:	1
malloc and free. This	1
malloc and free. These	1
malloc and free) causes	1
runs most of the	1
runs quite fast on	1
runs under the framework,	1
runs alone in the	1
runs satisfactorily on a	1
true, and all 0's	1
true, if any of	1
true, then the second	1
true, which is only	1
true, which is 50%	1
division. The compiler will	1
division. Some compilers will	1
division. Older CPUs with	1
division. 12.4 Using intrinsic	1
division. Correction for the	1
C; } polynomial //	1
C; double Z =	1
C; Assuming that the	1
C; x.abc = A	1
C; x.a = A;	1
0.18 0.18 0.18 0.11	1
0.18 0.18 0.11 memcpy	1
0.18 0.11 memcpy 16kB	1
0.18 0.11 1.21 0.57	1
0.18 0.12 0.11 0.18	1
MS compiler Windows Gnu	3
MS compiler: unsigned __int64	1
MS compiler: __int64 64	1
#endif // SSE2 //	1
#endif // INSTRSET ==	1
#endif double Func1(double) pure_function	1
#endif return n;} This	1
#endif const int size	1
present in the old	1
present processors rather than	1
present manual is number	1
present manual is also	1
present manual. There are	1
15.1c is faster than	1
15.1c as intended, while	1
15.1c would of course	1
15.1c was done by	1
15.1c automatically, and only	1
1000; int i; float	1
1000; int List[ArraySize]; ...	1
1000; float a[size], b[size];	1
1000; unsigned int dummy;	1
1000; i++) { ...	1
strlen function in isolation	1
strlen function for CPUs	1
strlen function. The string	1
strlen 128 bytes Intel	1
strlen 128 bytes AMD	1
__asm int 3; or	1
__asm fistp dword ptr	1
__asm fld qword ptr	1
__asm ("fldl %1 \n	1
__asm ("int 3"); or	1
cycle. The operators &,	1
cycle. The OR operator	1
cycle. The highest performance	1
cycle. This means that	1
cycle. In 64-bit systems,	1
11 clock cycles on	1
11 short int a;	1
11 programming, etc. In	1
11 Out of order	2
belong to the same	1
belong to the thread	1
belong to one of	1
belong to set number	1
belong to each compiler	1
50 - 100 clock	1
50 clock cycles per	1
50 simple cases, the	1
50 7.16 Function return	1
50 7.17 Structures and	1
facilities of the operating	1
facilities for making a	1
facilities that do much	1
facilities are needed, and	1
facilities are needed, but	1
5. The loop count	1
5. If columns had	1
5. But the compiler	1
5. Calling conventions for	1
5. www.amd.com. 163 Internet	1
currently not up to	1
currently only supported on	1
currently used for calculating	1
currently doesn't works (gcc	1
currently available, one from	1
here: The inequality sign	1
here: A large array	1
here: return *(T*)0; }	1
here: a[i] = log	1
here: functional decomposition and	1
Does not support the	1
Does not optimize as	1
Does not optimize well.	1
Does not allocate more	1
Does not, by default,	1
macros is that the	1
macros are sometimes more	1
macros with short or	1
macros instead of functions	1
macros Compiler identification 16	1
prefer is a matter	1
prefer a to be	1
prefer to use the	1
prefer to run a	1
prefer to write if(!a	1
divisor is a power	2
divisor is not known	1
divisor is known at	1
divisor that is a	1
Program installation The time	1
Program installation .................................................................................................. 18	1
Program loading ....................................................................................................... 19	1
Program loading Often, it	1
better. The loop body	1
better. If the problem	1
better. Whenever a processor	1
better. Remember again, that	1
BSD, the slow GOT	1
BSD, but the compiler	1
BSD, Windows and Mac.	1
BSD, Intel-based Mac OS,	1
bit-mask: __m128i mask =	2
bit-mask: c2 = _mm_and_si128(c2,	1
bit-mask: bc = _mm_andnot_si128(mask,	1
two. In the preceding	1
two. Some other compilers	1
two. Some compilers will	1
two. Often, it is	1
up, as explained below.	1
up, which is a	1
up, which happens quite	1
up, even if the	1
up. The two summation	1
up. This is a	1
up. If an error	1
up. Some modules may	1
reasons. The programmer can	1
reasons. This may cause	1
reasons. C++ is supported	1
reasons. Use these example	1
103 for examples of	1
103 // Example 11.1b	1
103 12 Using vector	1
103 11 Out of	1
Choosing the optimal platform	2
Choosing the optimal algorithm	2
slices is determined by	1
slices of typically 30	1
slices to 120 ms	1
slices allocated to each	1
exception. The costs of	1
exception. A frame function	1
exception. 64 If you	1
exception. Therefore, you should	1
enum is simply an	1
enum as well as	1
enum Weekdays { Sunday,	1
enum Weekdays { Sunday	1
repeats a thousand times	1
repeats 20 times and	1
repeats 1000 times and	1
repeats 1000 times then	1
highest instruction set in	1
highest performance that can	1
highest efficiency is obtained	1
highest level of optimization	1
96 void transpose(double a[SIZE][SIZE])	1
96 9.9 Access data	1
96 9.11 Explicit cache	1
96 9.10 Cache contentions	1
recommend that no function	1
recommend that every function	1
recommend object oriented programming	1
recommend any specific model.	1
lead to a more	1
lead to a better	1
lead to a dramatic	1
lead to a complete	1
additional integer counter. Example:	1
additional floating point variable:	1
additional information about a	1
additional parameters. Therefore, make	1
51 for the pros	1
51 performance penalty for	1
51 7.19 Class member	1
51 7.18 Class data	1
56 public: float x,	1
56 7.27 Overloaded operators	1
56 7.28 Templates...............................................................................................................57 7.29	1
56 7.26 Overloaded functions	1
type. The example on	1
type. Likewise, a pointer	1
type. References are useful	1
type. Interrupt service routines	1
place the user interface	1
place to the right	1
place in the program.	1
place indicated by the	1
preferable to make a	1
preferable to keep the	1
preferable to allocate the	1
preferable for speed-critical functions.	1
overlap the call and	1
overlap the calculations of	1
overlap the iterations and	1
overlap or if they	1
eight-element vectors: for (int	4
40 - 80 clock	1
40 i = s;	1
40 clock cycles. If	1
40 7.12 Branches and	1
43 for an explanation	1
43 about branch prediction.	1
43 7.13 Loops...................................................................................................................... 45	1
43 speculatively executing instructions	1
sixteen in 64-bit operating	1
sixteen in 64-bit systems.	1
sixteen vector registers (XMM	1
sixteen integers of 8	1
turning the frame function	1
turning off the exception	1
turning off the position-independent	1
turning off all optimizations	1
initialization. The compiler may	1
initialization. The program or	1
initialization. A copy constructor	1
initialization. Each code version	1
Graphics and sound processing	1
Graphics A graphical user	1
Graphics accelerators The choice	1
Graphics ................................................................................................................. 21 3.11	1
obstacles to efficient use	1
obstacles to optimization are	1
obstacles to optimization are.	1
obstacles and to know	1
asmlib function library and	1
asmlib library int level	2
asmlib library at www.agner.org/optimize/asmlib.zip.	1
Furthermore, it is not	1
Furthermore, you may read	1
Furthermore, this solution is	1
Furthermore, most C++ compilers	1
obtain the desired polymorphism	1
obtain the desired functionality	1
obtain most of the	1
obtain much more by	1
ebx. The next two	1
ebx. The square brackets	1
ebx. 9 Optimizing memory	1
ebx. Only the registers	1
estimate is correct or	1
estimate of the final	1
estimate that the loop	1
estimate can be made)	1
enabled in 64-bit mode.	1
enabled there is no	1
enabled (there is one	1
enabled (single precision requires	1
enables the compiler to	2
enables interprocedural optimizations. The	1
enables interprocedural optimizations. See	1
Obstacles to optimization by	4
r) { int i;	2
r) { r =	1
r) {return r.a +	1
regular time intervals. Some	1
regular access patterns containing	1
regular patterns with fixed	1
regular pattern, while Pentium	1
m is transferred to	1
m is transferred at	1
m is replaced by	1
m and therefore cannot	1
Metaprogramming can be useful	1
Metaprogramming means to make	1
Metaprogramming Metaprogramming means to	1
Metaprogramming ....................................................................................................... 150 16	1
explain the above code	1
explain the difference, let's	1
explain this with an	1
explain how metaprogramming can	1
Dispatch on first call.	1
Dispatch on every call.	1
Dispatch at load time.	1
Dispatch at installation time.	1
well, of course. A	1
well, but the examples	1
well, but it is	1
well, others are not.	1
sufficiently large to handle	2
sufficiently fast on a	1
sufficiently accurate for the	1
126 Make pointer at	1
126 12.2 128 128	1
126 13.6 CPU dispatching	1
126 13.5 Implementation .....................................................................................................	1
bad The C/C++ standard	1
bad on a particular	1
bad CPU dispatching. Obviously,	1
bad dilemma. You may	1
p(double x) { //	1
p(double x) { return	3
said that the use	1
said than done to	1
said here about Linux	1
said here about increment	1
modulo operator %. Conversion	1
modulo 16. This method	1
modulo calculations: // Example	1
modulo operations: // Example	1
databases with lots of	1
databases Many software applications	1
databases usually requires log	1
databases ....................................................................................................... 21 3.10	1
_EM_OVERFLOW); // if above	2
_EM_OVERFLOW); // _controlfp(0, _EM_OVERFLOW);	2
against the costs in	1
against this problem: (1)	1
against overflow is needed:	1
against overkill. Don't use	1
Vectorized with SSE2 #include	1
Vectorized code is more	1
Vectorized code often contains	1
Vectorized table lookup Lookup	1
break; } This can	1
break; case 3: printf("Delta");	1
break; case 2: printf("Gamma");	1
break; case 1: printf("Beta");	1
loader to a different	1
loader will have more	1
loader calls the dispatcher	1
loader (requires binutils version	1
Failure to do so	3
Failure to handle unknown	1
declared. If the variable	1
declared. An object of	1
declared. Therefore, it has	1
declared. Avoid multiple inheritance,	1
resources, and the transitions	1
resources, such as cache	1
resources, even if the	1
resources, databases, etc. The	1
true. The program may	1
true. The trick of	1
true. Boolean variables are	1
true. template<> class powN<true,0>	1
objects. The size (in	1
objects. This is of	1
objects. STL vector stores	1
objects. Storage on the	1
parallel. Modern CPUs are	1
parallel. Small lightweight processors	1
parallel. Fine-grained parallelism is	1
parallel. Coarse-grained parallelism refers	1
one, and only one,	1
one, because it can	1
one, into an STL	1
one, auto_ptr that owns	1
list[300]; int i; for(i=0;	3
list[300]; int i, i_div_3;	1
r++) { for (c	3
r++) { // loop	1
parabola (float x) {	3
parabola (2.0f); b =	1
x^4 // Define vectors	1
x^4 // x^8 //	1
x^4 F32vec4 xx4(x4); //	1
x^4 F32vec4 s(0.f, 0.f,	1
mouse inputs when the	1
mouse move or key	1
mouse input. It is	1
mouse move. It is	1
specialization is allowed only	1
specialization for N a	1
specialization for N =	2
index. The data cache	1
index. The integer division	1
index. A good compiler	1
index. Are objects identified	1
options. CPU vendors are	1
options. I don't know	1
options. Many optimization options	1
options. Supports parallel processing,	1
c++) { // loop	2
c++) { StoreNTD(&a[c][r], b[r][c]);	1
c++) { a[c][r] =	1
are. For example, you	1
are. However, there are	1
are. Dynamic memory allocation	1
are. Declare the function	1
needed, and new objects	1
needed, or they may	1
needed, but only after	1
needed, however, if the	1
declaring the function body	1
declaring the table inside	1
declaring it inside {}	1
declaring an integer of	1
SVML and LIBM libraries	1
SVML + ia32intrin.h _mm_exp_ps	1
SVML v.10.3 & later	1
SVML v.10.2 & earlier	1
*.so). The program has	1
*.so). The mechanism of	1
*.so). The installation program	1
*.so). There are several	1
(u.i * 2 >	1
(u.i & 0x7FFFFFFF) {	2
(u.i > v.i) {	1
support. There is a	1
support. Make a member	1
support. Then you make	1
support. Hardware updating. The	1
subtraction and multiplication are	1
subtraction and multiplication (27	1
subtraction and multiplication (20	1
subtraction (3 - 10	1
Multiply by constant =	1
Multiply b and c	2
Multiply (int x, int	1
|= 0x80000000; // set	1
|= 0x80000000; // Set	1
|= 0x20; If the	1
|= 0x20; 46 A	1
pool. See the examples	1
pool. See www.agner.org/optimize/cppexamples.zip. If	1
pool. 15 Integer overflow	1
pool. Alignment? Some applications	1
performs best under this	1
performs better on very	1
performs well. The reason	1
performs poorly. It is	1
"Intel 64 and IA-32	1
"Intel Math Kernel Library"	2
"Intel Performance Primitives" library	1
Are objects accessed in	2
Are objects identified by	1
Are objects numbered consecutively?	1
pre-increment is more efficient	1
pre-increment to post-increment. There	1
pre-increment or post-increment. The	1
pre-increment operator ++i and	1
ownership is transferred from	1
ownership of the memory	3
88 for details. Inheritance	1
88 9.5 Alignment of	1
88 Object oriented programming	1
88 9.4 Variables that	1
0x80000000; // set sign	1
0x80000000; // Set sign	1
0x80000000; // flip sign	1
0x80000000; because this is	1
move the object in	1
move or key press.	1
move out loop-invariant code	1
move outside the loop.	1
Can the container be	1
Can be reduced to:	1
Can only run on	1
Can do automatic vectorization.	1
defining a container class	1
defining integer types of	1
defining constants. For example,	1
defining _mm_malloc and _mm_free.	1
produces a string and	1
produces a negative result.	1
produces a low positive	1
produces another C++ program	1
precision, and intermediate results	1
precision, as explained on	1
precision, but there is	1
precision, especially in floating	1
non-inlined copy is dead	1
non-inlined copy of the	2
non-inlined copy Function inlining	1
drawbacks of the C++	2
drawbacks of using dynamic	1
drawbacks of C++. Yet,	1
__declspec(align(16)) or __attribute__((aligned(16))). Specifies	1
__declspec(align(16)) static const float	1
__declspec(align(16)) struct S1 {	1
__declspec(align(16)) X #else //	1
u.f and v.f are	1
u.f < 2.0 This	1
u.f We can take	1
u.f > v.f if	1
commercial compiler for 32-bit	1
commercial compilers due to	1
commercial compilers. Mixing object	1
commercial license Table 12.4.	1
configuration files and system	1
configuration files (*.ini files).	1
configuration files, resource files,	1
configuration files, help files	1
134 and 135 show	1
134 on bounds checking).	1
134 } else {	1
134 14.3 Use bitwise	1
lines. The critical stride	1
lines. The 17 debug	1
lines. This makes code	1
lines. A few decades	1
restrictions on using the	1
restrictions on using alloca.	1
restrictions on alignment and	1
restrictions on mixing code	1
Constant propagation Pointer elimination	1
Constant folding and constant	2
Constant folding - n.a.	1
manager for each allocated	1
manager can spend a	1
manager will start garbage	1
manager has a garbage	1
pattern can also be	1
pattern can be, for	1
pattern or if it	1
pattern history, etc. may	1
x86-64 instruction set supports	1
x86-64 platform _M_IX86 and	1
x86-64 platforms. AMD AMD	1
x86-64 platforms. Comparison of	1
*p+2 is a loop-invariant	2
*p+2 a hundred times	1
*p+2 and store it	1
Watcom compilers are not	1
Watcom Another open source	1
Watcom Digital Mars PGI	1
Watcom C/C++ v. 1.4,	1
round function using assembly	1
round memory addresses divisible	1
round addresses in order	1
round addresses. Especially the	1
cores, and a processing	1
cores, and it can	1
cores, vector processing instructions,	1
cores, we need to	1
chooses the least recently	1
chooses between two or	1
chooses between two expressions	1
chooses between two constants	1
running. The main reason	1
running. If there is	1
running. Such frameworks are	1
running. Programs using such	1
serial in the sense	1
serial code for vectorization	1
serial code for vectorization.............................................................	1
serial because each value	1
cc into vector c:	4
Header file for InstructionSet()	2
Header file MMX mmintrin.h	1
Header files for intrinsic	1
150 for further discussion	1
150 you want as	1
150 16 Testing speed..............................................................................................................	1
150 15 Metaprogramming .......................................................................................................	1
thanks to the availability	1
thanks to the first-in-last-out	1
thanks to out-of-order execution	1
thanks to heavy competition.	1
2.0; x <= n;	1
2.0; } The factor	1
2.0; } In order	1
2.0; i >= 0;	1
pipeline and later discovers	1
pipeline then the error	1
pipeline where instructions are	1
pipeline structure has one	1
n) { // n!	2
n) { if (n	1
n) { double y	1
input. The time used	1
input. It is possible	1
input. Many programs spend	1
input. (In Windows you	1
8.1 below. Devirtualization An	1
8.1 How compilers optimize	2
8.1 (page 77) shows	1
conditions. A dispatcher function	1
conditions. For example, if	1
conditions. All disturbing influences	1
conditions. Programs that produce	1
choosing the most efficient	1
choosing the best algorithm	1
choosing a programming language	1
choosing a container for	1
146 below. Position-independent code	1
146 below. 3.7 File	1
146 Multiple applications running	1
146 14.12 Position-independent code..................................................................................	1
.............................................................................................. 50 7.17 Structures	1
.............................................................................................. 56 7.27 Overloaded	1
.............................................................................................. 82 8.7 Checking	1
.............................................................................................. 99 10 Multithreading..............................................................................................................	1
_mm256_zeroupper() before any transition	1
_mm256_zeroupper() before calling the	1
_mm256_zeroupper() before leaving the	2
Making critical code in	2
Making too many branches.	1
Making exception-safe code Assume	1
flush-to-zero and denormals-are-zero mode	1
flush-to-zero mode rather than	1
flush-to-zero mode unless you	1
flush-to-zero mode (SSE): #include	1
Taylor series float Exp(float	1
Taylor expansions and Newton-Raphson	1
Taylor series, vectorized #include	1
Taylor series. The exponential	1
SelectAddMul_pointer = &SelectAddMul_AVX2; (iset	1
SelectAddMul_pointer = &SelectAddMul_dispatch; //	1
SelectAddMul_pointer = &SelectAddMul_SSE2; //	1
SelectAddMul_pointer = &SelectAddMul_SSE41; (iset	1
dispatcher. The dispatcher changes	1
dispatcher. // After first	1
dispatcher. See page 131.	2
Clang, Intel or Microsoft	1
Clang, Intel or PathScale	1
Clang, Intel or PathScale.	1
Clang, Intel, Microsoft and	1
14.9 is changed so	1
14.9 Using integer operations	2
14.9 struct S1 {	1
n, then we need	1
n, including the while	1
n, factorial = 1.0;	2
14.8 and 14.9 is	1
14.8 const int rows	1
14.8 Conversions between floating	2
overflow, and the code	1
overflow, and invalid pointers.	1
overflow, this code can	1
overflow, such as simple	1
x++) { Table[x] =	2
x++) factorial *= x;	2
optimal. The branches may	1
optimal. There are certain	1
optimal. Use 12 option	1
optimal. Best-case testing is	1
*)d, x); } //	1
*)d, x); } void	1
*)d, x); } 112	1
*)d, x);} void SelectAddMul(short	1
class, it checks whether	1
class, Intel Vector class,	1
class, structure or union	1
class, Agner 8 8	1
z = y +	3
z != 0; 35	1
advance and the multiplication	1
advance and stored in	1
advance which of the	1
advance rather than allocating	1
c: CPU dispatching with	1
c: __m128i c =	2
c: Is16vec8 c =	1
guaranteed to be in	1
guaranteed to be less	1
guaranteed to be 0	1
guaranteed to wrap around,	1
think that it is	1
think that you can	1
think that exception handling	1
think that programmers write	1
example. The only allowed	1
example. A union can	1
example. We might check	1
example. My example is	1
older processors and on	1
older microprocessors is lost.	1
older processors, a switch	1
older MMX registers, which	1
commonly the case with	1
commonly used set of	1
commonly used variables are	1
commonly used methods for	1
queue of pending instructions	1
queue as a circular	1
queue should be implemented	2
{} which would be	1
{} brackets in which	1
{} brackets. However, most	1
{} vector(float a, float	1
1.0f; The compiler may	1
1.0f; This needs a	1
1.0f; } The two	1
1.0f; } A possible	1
ALIGN 4 PUBLIC ?Func@@YAXQAHAAH@Z	2
ALIGN ; mark_end; This	1
ALIGN ?Func@@YAXQAHAAH@Z ENDP +	1
modification is profitable. On	1
modification of the program	1
modification to compensate for	1
modification if implemented on	1
solutions to this problem	1
solutions are now used	1
solutions may some day	1
solutions are: Avoid the	1
guide for assembly programmers	1
guide for x86 platforms.	1
guide for Windows, Linux	2
appendix to this manual	3
appendix at www.agner.org/optimize/cppexamples.zip for	1
17 will evict number	1
17 Optimization in embedded	2
17 debug version of	1
empty throw() statement can	1
empty throw() specification. The	1
empty throw() specification to	1
empty throw()specification is useful	1
maintenance - to make	1
maintenance There are two	1
maintenance .......................................................................................... 126 13.5	1
maintenance easier. I have	1
1: // Example 7.10a	1
1: 4 + esp	1
1: 8 + esp	1
1: printf("Beta"); break; case	1
Out of order execution	2
Out (FIFO) basis then	1
Out (FILO) basis then	1
protected operating system if	1
protected operating system, but	1
protected mode and back	2
Container classes are generally	1
Container classes can also	1
Container classes Whenever dynamic	1
Container classes ..................................................................................................... 93	1
alternatives to the standard	1
alternatives to using a	1
alternatives to exception handling	1
alternatives that can be	1
modifications of the source	1
modifications to the code	1
modifications in the code.	1
modifications actually increase the	1
i_div_3; } 138 A	1
i_div_3; list[i+1] += i_div_3;	1
i_div_3; list[i+2] += i_div_3;	1
i_div_3; for(i=i_div_3=0; i<300; i+=3,i_div_3++){	1
s; An integer is	1
s; s = (short	1
s; s = _mm_hadd_ps(x,	1
s; 40 i =	1
case" and "best case"	1
case" counts that you	1
case" counts. In any	1
case" values. Which of	1
distinguish between coarse-grained parallelism	1
distinguish between recoverable and	1
distinguish elements with a	1
distinguish these two versions	1
missing in the instruction	1
missing in many commercial	1
missing functions can be	1
missing check for buffer	1
subroutines in assembly language".	2
subroutines in assembly language",	1
subroutines in assembly language:	1
tools to be available,	1
tools for supporting multi-threaded	1
tools that fit their	1
tools have powerful facilities	1
0x2710 and later reads	1
0x2710 and (set) =	1
0x2710 will cause the	1
0x2710 will cause a	1
spot and make measurements	1
spot that uses 90%	1
spot has been identified,	1
spot but also the	1
powN is // erroneously	1
powN { public: static	1
powN template is a	1
powN template is calling	1
C-style method of storing	1
C-style type casting //	1
C-style type-casting without adding	1
C-style type-casting. It is	1
While an empty throw()	1
While C++ has many	1
While we are waiting	1
While some of the	1
Bitfield { int a:4;	1
Bitfield { struct {	1
Bitfield x; int A,	2
clean up in case	1
clean up then it	1
clean up everything in	1
clean solution is to	1
according to the Gnu	1
according to the table.	1
according to the rules	1
according to the IEEE	1
Bounds checking is included	1
Bounds checking In C++,	1
Bounds checking (see page	1
Bounds checking .................................................................................................. 134	1
u.i = (n &	1
u.i += n <<	1
u.i ^= 0x80000000; //	1
u.i &= 0x7FFFFFFF; //	1
dramatic when contentions occur	1
dramatic effect on the	1
dramatic degradation of performance	1
dramatic consequences. I once	1
IDE. It is intended	1
IDE. Does not optimize	1
IDE. Has not been	1
IDE. Free trial versions	1
lengths of the time	1
lengths to reduce this	1
lengths in the same	1
lengths that are not	1
expensive. A variable can	1
expensive. A limited "express"	1
expensive. You may use	1
expensive. Using complicated techniques	1
efficiency. The expression (Tuesday	1
efficiency. For example, x	1
efficiency. These are available	1
efficiency. Using unaligned reads	1
Copyright conditions are listed	1
Copyright notice This series	1
Copyright notice .......................................................................................................... 164	1
Copyright © 2004 -	1
extended to the general	1
extended to 64 bits.	1
extended to 256-bit registers	1
extended number of bits.	1
size) = (total cache	1
size) { cout <<	1
size) / (number of	1
size) % (number of	1
(Gnu) all intrin.h (MS)	1
(Gnu) AMD FMA4 fma4intrin.h	1
(Gnu) Table 12.2. Header	1
(Gnu) AES, PCLMUL wmmintrin.h	1
contained in a DLL.	1
contained in p1 and	1
contained object because the	1
contained objects? It may	1
transferring the variable as	1
transferring 'this' in a	1
transferring composite objects to	1
transferring additional parameters. Therefore,	1
Access to static or	1
Access to remote databases	1
Access data sequentially A	1
Access data sequentially ..........................................................................................	1
saving a backup copy	1
saving and restoring registers,	1
saving memory space by	1
saving registers that have	1
years to come. Even	1
years before your code	1
years old version of	1
years old. The CPU	1
y, a1, a2, b1,	2
y, z; a =	1
y, z; bool b;	1
structured and object-oriented programming,	1
structured software development and	1
structured exception handling and	1
structured exception handling. See	1
documentation and lack of	1
documentation for the size	1
documentation for detailed instructions.	1
documentation Intel: "IA-32 Intel	1
CChild1 * p1; p1	1
CChild1 : public CParent<CChild1>	2
CChild1 Object1; CChild2 Object2;	1
PGI compiler supports intrinsic	1
PGI C++ compiler for	1
PGI C++ v. 7.1-4,	1
PGI PathScale Gnu Intel	1
As we can see,	1
As table 9.3 shows,	1
As explained above, the	1
As soon as you	1
(RTTI) If any of	1
(RTTI) Runtime type identification	1
(RTTI) /GR– -fno-rtti /GR-	1
(RTTI) ........................................................................... 54 7.22	1
default, which makes it	1
default, so 1.2 in	1
default, even when shared	1
default, conform to the	1
xpow10(double x) { double	1
xpow10(double x) { return	3
a2, b1, b2; y	2
a2, b1, b2, y1,	2
inconvenient to the end	1
inconvenient times when a	1
inconvenient times. This can	1
inconvenient times. A queue	1
expressed as a 32-bit	1
expressed as a base	1
expressed as an 8-bit	1
expressed as follows: struct	1
bottleneck is file access	1
bottleneck is elsewhere then	1
bottleneck or any particularly	1
bottleneck than memory access	1
directive to tell the	1
directive for a Windows	1
directive never takes memory	1
directive __declspec(cpu_dispatch(...)). See the	1
not, and therefore fail	1
not, by default, conform	1
not, then it may	1
not, then you must	1
scarce resources. However, the	1
scarce resource in 32-bit	1
scarce resource. Do not	1
scarce resource, especially in	1
12.4b and 12.4c is	1
12.4b can be replaced	1
12.4b shows how this	1
12.4b executes three to	1
lrint function is given	1
lrint (double const x)	2
lrint function: // Example	1
versions. The x86 processors	1
versions. This method is	1
versions. A 32- bit	1
versions. It is recommended	1
............................................................................................. 87 9.1 Caching	1
............................................................................................. 56 7.28 Templates...............................................................................................................57	1
............................................................................................. 136 14.5 Integer	1
............................................................................................. 113 12.6 Transforming	1
Alignment of data A	1
Alignment of data structures	1
Alignment of data members.	1
Alignment of data ......................................................................................................	1
going to be very	1
going to recommend any	1
going from AVX code	1
going either way. Such	1
underflow and give the	1
underflow in XMM registers	1
underflow except in special	1
underflow neutralize each other.	1
ranges do not overlap.	3
ranges now overlap. Compilers	1
splitting the dependency chain	1
splitting of software into	1
splitting of N into	1
splitting 256-bit read operations	1
user's time. The time	1
user's time. Other programs	1
user's needs. The search	1
user's computers. At this	1
__INTEL_COMPILER n.a. n.a. _MSC_VER	1
__INTEL_COMPILER __INTEL_COMPILER n.a. n.a.	1
__INTEL_COMPILER __INTEL_COMPILER 161 32	1
__INTEL_COMPILER 161 32 bit	1
cleaned up in case	1
cleaned up include: Memory	1
cleaned up, as explained	1
cleaned up. If an	1
cached. The subsequent counts	1
cached. This can have	1
cached. See page 26	1
cached. Usually it takes	1
video or 3-dimensional vectors	2
video should also be	1
video processing, signal processing,	1
aa: StoreVector(aa + i,	3
aa: a.store(aa+i); } }	1
information. It is often	1
information. Each function call	1
information. They have worked	1
information. 1.1 The costs	1
Whenever the code has	1
Whenever a function in	1
Whenever a processor has	1
Whenever dynamic memory allocation	1
area is usually divided	1
area of system programming,	1
area for a and	1
area for different objects	1
consequence is that the	1
consequence of such contentions	1
consequence of n being	1
consequence that it allows	1
a1, a2, b1, b2;	2
a1, a2, b1, b2,	2
unsigned. The following table	1
unsigned. The following guidelines	1
unsigned. // Example 7.4.	1
unsigned. This typically takes	1
pointers. The advantages of	1
pointers. The absence of	1
pointers. This is a	1
pointers. 144 The above	1
26 point constants, string	1
26 about data storage	1
26 7.2 Integers variables	1
26 7.1 Different kinds	1
Smaller microprocessors have no	1
Smaller microcontrollers have no	3
29 for details. Development	1
29 with line 29.	1
29 64-bit Linux: long	1
29 7.3 Floating point	1
sum2 are called accumulators.	1
sum2 = 0; int	1
sum2 from time T+1	1
sum2 += list[i+1];} sum1	1
(n & 1) y	1
(n & 0x7FFFFF) |	1
(n > 0) {	1
(n != 0) {	1
(b + c) The	1
(b == 0) {	1
(b == 0) ?	1
(b != 0) {	1
2n and not negative	1
2n by adding n	1
2n by subtracting n	1
2n -1. The bitwise	1
idea to make a	1
idea to put time-	1
idea to collect the	1
idea how a piece	1
...................................................................................................... 20 3.9 Other	1
...................................................................................................... 21 3.13 Memory	1
...................................................................................................... 90 9.6 Dynamic	1
...................................................................................................... 37 7.8 Member	1
C, C++ or assembly	1
C, specifying that two	1
C, specifying that pointers	1
C, C++, D, Pascal,	1
Same as example 13.1,	1
Same example, using Intel	1
Same example, using Agner	1
Same example, vectorized with	1
disable it in order	1
disable exception handling for	2
disable power-save options in	1
assumption is that the	1
assumption that the variable	1
assumption that signed integer	1
assumption about an unknown	1
treated as an integer.	1
treated as different functions.	1
treated as bigger than	1
treated like a parameter,	1
Fastcall is not needed	1
Fastcall function __fastcall __attribute((	1
Fastcall functions are not	1
Fastcall functions /Gr Function	1
RGB video or 3-dimensional	2
RGB image data have	1
RGB color difference. Newest	1
avoids the branch inside	1
avoids the overflow. Taking	1
avoids many of the	1
avoids overflow: a[i] =	1
prevented in other ways,	1
prevented by calling vector::reserve	1
prevented from assuming that	1
prevented from cleaning up	1
....................................................................................... 5 2.2 Choice	1
....................................................................................... 22 4 Performance	1
....................................................................................... 145 14.11 Static	1
....................................................................................... 24 6 Development	1
seldom used branches such	1
seldom used functions, and	1
seldom used. It is	1
seldom occur and recovering	1
mixing code compiled for	1
mixing code compiled with	1
mixing different floating point	1
mixing single and double	1
Branches and switch statements	1
Branches and switch statements.............................................................................	1
Branches are implemented by	1
Branches are relatively cheap	1
double. The intrinsic vector	1
double. Another problem with	1
double. Here we prefer	1
double. Misaligned data. Extra	1
16.1 const int NumberOfTests	1
16.1 Using performance monitor	2
16.1 #include <intrin.h> long	1
(r = 0; r	2
(r = 1; r	2
50% of the time	1
50% of the time.	1
50% of the cases.	1
50% or less each	1
suboptimal way has become	1
suboptimal code. Intrinsic functions	1
suboptimal way. The fact	1
suboptimal way. Here you	1
16kB aligned operands Intel	1
16kB aligned operands AMD	1
16kB unaligned op. Intel	1
16kB unaligned op. AMD	1
tasks. A critical innermost	1
tasks. For example, in	1
tasks. Sometimes it is	1
tasks. Before you start	1
image data have three	1
image base is not	1
image processing, sound processing,	1
image processing. Yeppp. Open	1
worst-case conditions in order	1
worst-case maximum repeat count	1
worst-case conditions. Programs that	1
worst-case performance: The first	1
(1) is not needed	1
(1) or false (0);	1
(1) get its own	1
(1) check for overflow	1
float, but not if	1
float, double and long	2
float, double, bool, enum	1
9.5 because we are	1
9.5 so that it	1
9.5 Alignment of data	2
Induction; ; parameter $B1$1:	1
Induction; ; a[i+1] =	1
Induction; a[i+1] = Induction;	1
Induction; Induction++; } }	1
uncached or even swapped	1
uncached memory and we	1
uncached write is more	1
uncached read because the	1
individual functions or code	1
individual array elements more	1
individual bits of its	1
individual installation tools. Automatic	1
begin the calculation of	1
begin with _mm. These	1
begin at an address	1
begin calculating a new	1
interface. A console mode	1
interface. It is 102	1
interface. Applications that are	1
interface. Otherwise the program	1
9.3 #include <malloc.h> void	1
9.3 Functions that are	2
9.3 shows, the method	1
option. This requires that	1
option. Use the option	1
option. Then we get	1
option. 8.4 Obstacles to	1
diagonal. The elements at	1
diagonal. The first eight	1
diagonal. The c loop	1
diagonal. Each element matrix[r][c]	1
interfaces to network resources,	1
interfaces and system calls.	1
interfaces and interfaces to	1
interfaces from scratch. This	1
floats for (int i	1
floats A structure of	1
floats F32vec4 xxn(x4, x2*x,	1
floats exp function of	1
another. The object that	1
another. These costs are	1
another. Therefore, it can	1
another. Therefore, micro- processors	1
N> class powN {	1
N> class SafeArray {	1
N> class powN<true,N> {	1
N> static inline double	1
Class data members (properties)	2
Class member functions (methods)	1
Class member functions (methods).........................................................................	1
Small data types: char,	1
Small functions are often	1
Small hand-held devices are	1
Small lightweight processors with	1
N1 = N&(N-1) gives	1
N1 } }; //	1
N1 could have been	1
N1 (N & (N-1))	1
alloca is used. The	1
alloca may not be	1
alloca was called. There	1
alloca over new and	1
aliasing. The only way	1
aliasing. See page 78	1
aliasing. Operations that are	1
aliasing. __declspec(noalias) or __restrict	1
eliminated if the target	1
eliminated if the condition	2
eliminated completely. For example:	1
detailed optimization more difficult.	1
detailed instructions. Example: //	1
detailed explanation of the	1
detailed overview of the	1
F32vec4 xx4(x4); // x^4	1
F32vec4 xxn(x4, x2*x, x2,	1
F32vec4 F64vec2 F32vec8 F64vec4	1
F32vec4 s(0.f, 0.f, 0.f,	1
mask to choose between	1
mask = _mm_cmpgt_epi16(b, zero);	2
mask out multiple bits	1
original is destroyed. In	1
original pointer actually points	1
original object is not	1
original method of doing	1
caches and cause large	1
caches are organized into	1
caches have to adapt	1
caches work can be	1
recognize that the two	1
recognize that the values	1
recognize that 10 is	1
recognize VIA processors because	1
513 513 58.7 168.3	1
513 513 2056 38.1	1
513 58.7 168.3 Table	1
513 2056 38.1 97	1
Threads are used for	1
Threads are useful for	1
Threads Threads are used	1
Threads .................................................................................................................. 60 7.30	1
Overloaded functions The different	1
Overloaded functions .............................................................................................. 56	1
Overloaded operators An overloaded	1
Overloaded operators ............................................................................................. 56	1
Contentions in the branch	1
Contentions in the level-2	1
Contentions in the level-1	1
Contentions in the BTB	1
illustrated in this example:	1
illustrated in example 13.1	1
illustrated in example 9.5b.	1
illustrated by the following	1
words, the program must	1
words, it is inefficient	1
words, you need to	1
words, you must make	1
returned in registers only	1
returned in registers. Except	1
returned by copying them	1
returned pointer or reference	1
existing object can be	1
existing object rather than	1
existing systems and a	1
existing program. Weighing the	1
Let's take the integer	1
Let's look at the	1
Let's look at what	1
Let's repeat the above	1
is, and is compiled	1
is, in order to	1
is, but must go	1
is, I guess, that	1
illustrates the difference between	1
illustrates such a case:	1
illustrates how to use	1
illustrates this. My example	1
unit-testing is necessary for	1
unit-testing is unfortunately very	1
unit-testing It is common	1
unit-testing ...................................................................................... 156 16.3	1
i<300; i++){ list[i] =	1
i<300; i++){ list[i] +=	1
i<300; i+=3){ list[i] =0;	1
i<300; i+=3,i_div_3++){ list[i] +=	1
{return a + b;}	1
{return b;} }; The	1
{return r.a + r.b;}	1
{return p->a + p->b;}	1
b2; This can be	1
b2; int c; };	1
b2; y = a1/b1	1
b2; y = (a1*b2	1
Remember to insert a	1
Remember to remove the	1
Remember that container classes	1
Remember again, that most	1
explicit use of memset	1
explicit CPU dispatching in	1
explicit induction variable. (This	1
explicit checks for such	1
mirror the entire file	1
mirror the remote data	1
mirror elements matrix[c][r] above	1
mirror position above the	1
dedicated test server. Use	1
dedicated microprocessor and therefore	1
dedicated microprocessor core and	1
dedicated physics processor for	1
Disp() { cout <<	4
r, c; for (r	2
r, c; double temp;	2
8.26a by rolling out	1
8.26a void Func(int a[],	1
8.26a compiled to assembly:	1
8.26a (32-bit mode): ;	1
breakpoint and show a	1
breakpoint in the code	1
breakpoint in the fully	1
breakpoint again. The following	1
b1, b2; y =	2
b1, b2, y1, y2;	1
b1, b2, y1, y2,	1
appears to be an	1
appears to be profitable	1
appears in the machine	1
appears on the market.	1
functionality of an optimized	1
functionality to an existing	1
functionality and a well-defined	1
functionality without polymorphism or	1
languages. This section discusses	1
languages. But the C++	1
languages. My preference is	1
languages. www.yeppp.info And here	1
sequential order and it	1
sequential order. If the	1
sequential labels is simply	1
sequential instructions, where a	1
www.agner.org/optimize/cppexamples.zip for how to	1
www.agner.org/optimize/cppexamples.zip for examples of	1
www.agner.org/optimize/cppexamples.zip contains examples of	1
www.agner.org/optimize/cppexamples.zip containing container classes	1
style. The time consumption	1
style. The advantages of	1
style. It is often	1
style. Some compilers make	1
MOVNTQ instruction cannot be	1
MOVNTQ instruction must be	1
MOVNTQ _mm_stream_pi SSE Store	1
MOVNTQ _mm_empty(); // EMMS	1
optimized. We cannot change	1
optimized. Note that the	1
optimized. Library functions are	1
optimized. Jumps between CPU	1
......................................................................................... 65 7.33 Namespaces...........................................................................................................	1
......................................................................................... 87 9.2 Cache	1
......................................................................................... 107 12.4 Using	1
......................................................................................... 132 14.1 Use	1
CHello { public: void	1
CHello { public: virtual	2
CHello * p; p	1
found in other languages.	1
found in my vector	1
found in Wikipedia under	1
found elsewhere. 13.5 Implementation	1
me explain the above	1
me explain this with	1
me corrections and suggestions	1
me manually, but if	1
counts. The value of	1
counts. This is the	1
counts. It is measured	1
counts. In any event,	1
measurement code should have	1
measurement should not include	1
measurement instruments into the	1
measurement instruments directly into	1
layers of abstraction is	1
layers of abstraction in	1
layers and it needs	1
layers and frameworks typically	1
handler to call the	1
handler in the program	1
handler calls exit(), abort(),	1
handler needs all information	1
coded in a hardware	2
coded as an 8-bit	1
coded as _mm_empty() as	1
changing the dividend to	1
changing in the innermost	1
changing this to: //	1
changing then the CPU	1
unit-test may have a	1
unit-test but has a	1
unit-test without taking cache	1
unit-test does not give	1
implicit pointer known in	1
implicit parameter to the	1
implicit 'this' pointer in	1
implicit 'this' pointer which	1
smaller. The lengths of	1
smaller. This manual discusses	1
smaller. It is faster	1
smaller. Structure and class	1
interval is a power	1
interval from 0 to	1
interval 0 <= n	1
interval [1.0, 2.0) by	1
33 result is known	1
33 7.5 Booleans................................................................................................................... 33	1
33 7.6 Pointers and	1
33 11.8 127 127	1
31 for more discussion	1
31 ebx, eax ebx,	1
31 7.3 Floating point	1
31 11.6 64 64	1
int)b / 10; a	1
int)b / 16; //	1
int)b % 10; a	1
int)b % 16; //	1
3. The code is	1
3. The Gnu compiler	1
3. The microarchitecture of	1
3. Use appropriate compiler	1
μs is less than	1
μs on the next	1
μs on a 2	1
μs today, then it	1
module. The compiler has	1
module. The size of	1
module. The static declaration	1
module. This non-inlined copy	1
cast The dynamic_cast operator	1
cast The const_cast operator	1
cast The reinterpret_cast operator	1
cast The static_cast operator	1
8-bit integers with the	1
8-bit integers which range	1
8-bit signed number. If	1
8-bit signed number, or	1
Integers of smaller sizes	1
Integers can be different	1
Integers variables and operators	1
Integers variables and operators...............................................................................	1
Calling a function through	1
Calling a member function	1
Calling conventions for different	1
Calling exit may not	1
(double const x) {	2
(double x) { //	1
(double x, unsigned int	1
Weekdays { Sunday, Monday,	1
Weekdays { Sunday =	1
Weekdays Day; if (Day	2
application-specific code. The best	1
application-specific code. If you	1
application-specific instructions that can	1
application-specific information in a	1
first. If it is	1
first. If one operand	1
first. However, you must	1
first. b+c = 100000001.23456.	1
considerations of efficiency, platform	1
considerations that are particularly	1
considerations should be taken	1
considerations such as price,	1
63 number (e.g. with	1
63 31 11.6 64	1
63 63 31 11.6	1
63 . The value	1
represented with or without	1
represented with 64 bits,	1
represented as an integer.	1
represented as two 32-bit	1
force the operating system	1
force the swapping of	1
force a member function	1
force when I die.	1
manually. The effect of	1
manually. This principle is	1
manually. It must be	1
manually. I have tested	1
identified by a key?	1
identified by a unique	1
identified by their index	1
identified by consecutive indices	1
www.agner.org/optimize/cppexamples.zip. If the number	1
www.agner.org/optimize/cppexamples.zip. An array using	1
www.agner.org/optimize/cppexamples.zip. These may be	1
www.agner.org/optimize/cppexamples.zip. 9.9 Access data	1
virus scanners to consume	1
virus scanners and other	1
virus scanner that scans	1
virus attacks and other	1
structures. For example, if	1
structures. On the contrary,	1
structures. Accessing a data	1
structures. Useful for vector	1
exp function of 2	1
exp function of 4	1
exp exp 12.8 Aligning	1
exp 12.8 Aligning dynamically	1
(in bytes) is a	1
(in bytes) of the	1
(in bytes) of each	1
(in Windows: __rdtsc()). The	1
pointer, a reference, or	1
pointer, but it is	1
pointer, but this feature	1
pointer, common subexpressions, and	1
kept in the carry	1
kept in different source	1
kept small in the	1
kept entirely inside one	1
Y and Z. Each	1
Y // Update induction	1
Y = C; double	1
Y += Z; Z	1
interprocedural optimization is enabled.	1
interprocedural optimizations of the	1
interprocedural optimizations. The keyword	1
interprocedural optimizations. See page	1
incompatible or error prone.	1
incompatible with floating point	1
incompatible with old CPUs.	1
incompatible with debugging. A	1
bytes) is a high	1
bytes) of the objects	1
bytes) of each array	1
bytes) on future processors.	1
selected if the processor	1
selected instruction set. Make	1
selected version FuncType *	1
selected during the installation	1
multiplied by the size	2
multiplied by the clock	1
multiplied by a factor	1
reproducible as possible. However,	1
reproducible time measurements: warm	1
reproducible results. This is	1
reproducible results. If you	1
normally use the so-called	1
normally use this principle	1
normally compiled with the	1
normally belongs to the	1
constants. For example, a	1
constants. For example, #define	1
constants. Integer constants are	1
constants. Register storage A	1
cache, code cache, branch	1
cache, at least at	1
cache, where it is	1
cache, branch target buffer,	1
entry with the pointer	1
entry point extern "C"	1
entry point. // After	1
entry initially points to	1
inferior to the Intel	1
inferior to their 32-bit	1
inferior version of the	1
inferior version on the	1
obsolete. But if I	1
obsolete. Programmers very often	1
obsolete. Microprocessor documentation Intel:	1
obsolete. Rick Booth: "Inner	1
simultaneously can share the	1
simultaneously or out of	1
simultaneously or seemingly simultaneously.	1
simultaneously prefetching the code	1
routine that is called	1
routine that loads the	1
routine should do as	1
routine sets a function	1
auto_ptr to another by	1
auto_ptr and shared_ptr. auto_ptr	1
auto_ptr that owns the	1
auto_ptr has the feature	1
tree or a hash	2
tree or switch statement	1
tree may be used	1
unable to access the	1
unable to predict which	1
unable to vectorize the	1
unable to respond quickly	1
Optimizes very well. This	1
Optimizes reasonably well. Codeplay	1
Optimizes reasonably well. Very	1
Optimizes moderately well. Supports	1
constants, and initialized arrays.	1
constants, array initializer lists,	1
constants, string constants, and	1
constants, string constants, array	1
techniques of multithreading. 7.30	1
techniques in the present	1
techniques can be considered	1
techniques like square blocking	1
otherwise can only be	1
otherwise would be predicted	1
otherwise optimize across the	1
otherwise go undetected. Converting	1
Smart pointers are used	1
Smart pointers can be	1
Smart pointers A smart	1
Smart pointers .......................................................................................................... 38	1
opens the possibility for	2
opens a file in	1
opens and closes the	1
modified by the program.	1
modified by the program,	2
modified should be separate	1
15.1a to an inlined	1
15.1a to 15.1c would	1
15.1a to 15.1c). 16	1
15.1a to 151 15.1c	1
Comparison of function libraries	1
Comparison of different compilers	1
Comparison of different compilers.............................................................................	1
Comparison of optimizations in	1
finished the calculations on	1
finished the calculation of	1
finished the time-consuming data	1
finished using the previous	1
run. The time it	1
run. Some implementations of	1
run. Examples include JavaScript,	1
run. Both the executable	1
sequentially in memory if	1
sequentially in memory. They	1
sequentially A cache works	1
sequentially .......................................................................................... 96 9.10	1
Intel: "Intel 64 and	1
Intel: "IA-32 Intel Architecture	2
Intel: "Intel® C++ Compiler	1
format. The intermediate files	1
format. The formats can	1
format. Other compilers offer	1
format. Alternatively, make a	1
programs. The profiler identifies	1
programs. It is not	1
programs. If you can	1
programs. Writing past the	1
manner to make sure	1
manner by returning a	1
manner then it is	1
manner where the critical	1
work. The C++ language	1
work. The updating mechanism	1
work. The recommendations are	1
work. Data alignment. __declspec(align(16))	1
uint64_t 128 Vec2uq 8	1
uint64_t 256 float 128	1
uint64_t Table 7.1. Sizes	1
uint64_t MS compiler: unsigned	1
(level >= 4) {	2
(level >= 11) {	2
tests are done under	1
tests with the sizeof	1
tests on Intel compiler	1
tests were carried out	1
Then you make a	1
Then we are breaking	1
Then we get rid	1
Then again two times	1
soft processor is much	1
soft processor activates critical	1
soft cores that do	1
soft processor. Such a	1
100, c = 100,	1
100, y; y =	1
100, max = 110;	1
100, NUMCOLUMNS = 100;	1
results. This is because	1
results. If you are	1
results. If you want	1
results. Integer operators Integer	1
hyperthreading is not advantageous	1
hyperthreading or not in	1
hyperthreading by using only	1
hyperthreading processor to give	1
operators. Function parameters that	1
operators. Make a C++	1
operators. Vectorized code often	1
operators. 7.7 Function pointers	1
simpler in 64-bit mode	1
simpler than a frame	1
simpler when using references.	1
simpler because it needs	1
format is not standardized.	1
format is standardized allows	1
format and getting them	1
format instead of the	1
reasonable solution is to	1
reasonable upper limit to	1
reasonable upper limit can	1
reasonable estimate can be	1
resolution of the CPU	1
resolution and the critical	1
resolution can be obtained	1
resolution if time intervals	1
units, and 22 one	1
units, memory ports, etc.	1
units, one or two	1
units, etc. and the	1
12.2 128 128 128	1
12.2 __declspec(align(16)) struct S1	1
12.2 AVX-512 instruction set	2
b: from cc into	1
b: __m128i b =	2
b: Is16vec8 b =	1
processing. Visual Studio optimizes	1
processing. Yeppp. Open source	1
processing. Running multiple threads	1
processing. Scott Meyers: "Effective	1
well-defined with option -fwrapv	1
well-defined interface to the	2
well-defined functionality and a	1
Still faster if unsigned	4
45 for (i =	1
45 clock cycles. Floating	1
45 clock cycles). Floating	1
45 7.14 Functions ................................................................................................................	1
bb into vector b:	4
detail in manual 3:	1
detail in manual 2:	1
detail on page 146	1
advices in critical parts	1
advices on optimization of	1
advices may apply to	1
conclusion is that the	1
conclusion is that we	1
conclusion to this argument	1
deleted by another function	1
deleted when the pointer	1
deleted properly and the	1
49 and manual 5:	1
49 for a discussion.	1
49 first eight floating	1
parameters, as example 7.15b	1
parameters, local variables, and	1
parameters, pointers, references, 'this'	1
Storing the parameters on	1
Storing variables in a	1
Storing something in static	1
(set) = (memory address)	1
(set) = (10000 /	1
(set) = (0x2710 /	1
fine-grained parallelism when deciding	1
fine-grained parallelism because communication	1
fine-grained parallelism. The way	1
Execution time too small	1
Execution unit throughput There	1
Execution unit throughput .......................................................................................	1
LoadVector(cc + i); //	3
arbitrary memory address and	1
arbitrary cache line. Only	1
arbitrary name that the	1
Which of these two	1
Which method you use	1
Which solution you prefer	1
behave according to the	1
behave differently on different	1
behave differently because there	1
bits, and the result	1
bits, but 32-bit systems	1
bits, so you can	1
compact. The biggest disadvantage	1
compact. See page 52.	1
compact. Accessing a member	1
behaves like a pointer.	1
behaves like an array	1
behaves differently on signed	1
FPGA in the same	1
FPGA as a so-called	1
FPGA soft cores that	1
earlier Intel processors are	1
earlier CPUs. The sequence	1
earlier vmlsExp4 vmldExp2 Intel	1
5) { // do	1
5) SelectAddMul_pointer = &SelectAddMul_SSE41;	1
5) {} which would	1
&, |, ^, ~	1
&, |, ^, ~,	1
&, |, ~. The	1
101 for further discussion	1
101 Multithreading works more	1
101 10.1 Hyperthreading .....................................................................................................	1
reasons: The function call	1
reasons: The size of	1
reasons: Each object is	1
consecutively and can calculate	1
consecutively in the order	1
consecutively in memory. No	1
Extra time is needed	1
Extra memory space is	1
Extra data conversion, shuffling,	1
error. The calculations may	1
error. The allocated memory	1
error. // You may	1
carried out with all	1
carried out independently of	1
carried dependency chain would	1
reordering the data members.	1
reordering has made the	1
reordering easier for the	1
platform. Intel The Intel	1
platform. However, with a	1
platform. 14.8 Conversions between	1
satisfied with the way	1
satisfied with more heuristic	1
satisfied with making software	1
catch an exception in	1
catch programming errors that	1
catch (...) { ...	1
/arch:AVX etc. for Windows,	1
/arch:AVX /openmp /MT -msse3	1
/arch:AVX /QaxSSE3, etc. -msse3	1
93 for discussion of	1
93 9.8 Strings ......................................................................................................................	1
93 themselves. But implementing	1
53 function at runtime.	1
53 7.21 Runtime type	1
53 7.20 Virtual member	1
#else // 32-bit Windows,	1
#else // Gnu compiler,	1
#else #define pure_function #endif	1
addition. This is small	1
addition. If the size	1
addition. Comparing two pointers	1
Text strings and similar	1
Text strings are particularly	1
Text strings typically have	1
big-endian storage. Example 14.23b	1
big-endian storage. All x86	1
big-endian storage. Optimizing file	1
54 class D :	1
54 7.22 Inheritance ..............................................................................................................	1
54 7.23 Constructors and	1
119 The function names	1
119 for more information	1
119 12.8 Aligning dynamically	1
!a = true a	1
!a = false, a	1
!a && !b =	1
abstraction is a common	1
abstraction in the logical	1
abstraction which makes detailed	1
each, or two integers	1
each, four integers of	1
each, eight integers of	1
11) and vector operations	1
11) { // AVX	2
code). The source code	1
code). If the repeat	1
code). Supports 32-bit and	1
...................................................................................... 16 3.2 Use	1
...................................................................................... 90 9.7 Container	1
...................................................................................... 156 16.3 Worst-case	1
wrong branch is fed	1
wrong branch. Microprocessor designers	1
wrong type. References are	1
LoadVector(bb + i); //	3
alias any elements in	1
alias anything by using	1
alias upon the double.	1
blocks, for example: Use	1
blocks, or if the	1
blocks, either in the	1
feedback should be handled	1
feedback comes from testing.	1
feedback seriously. User complaints	1
pure_function ; double Func2(double	1
pure_function #endif double Func1(double)	1
pure_function __attribute__((const)) #else #define	1
a-a = 0 -	2
a-a = 0 a+0=a	1
chains. A dependency chain	1
chains. In this case,	1
chains. Another thing that	1
prefetching the code of	1
prefetching data for the	1
prefetching so this feature	1
compiler-generated code in the	1
compiler-generated code by making	1
compiler-generated assembly code. Let	1
redesign of the program,	1
redesign of a program	1
redesign can not only	1
differently on different test	1
differently on signed and	1
differently because there are	1
B, and the calculation	1
B, C; x.abc =	1
B, C; x.a =	1
reasonably well. Codeplay VectorC	1
reasonably well. Very poor	1
reasonably well, but it	1
Two or more template	1
Two libraries of predefined	1
Two threads running in	1
55 In this example,	1
55 7.24 Unions ....................................................................................................................	1
55 7.25 Bitfields ...................................................................................................................	1
libraries: Intel vector math	1
libraries: Intel short vector	1
libraries: long vector libraries	1
projects can be improved	1
projects have become bigger	1
projects made with Microsoft	1
1)sign 2exponent 127 1	1
1)sign 2exponent 16383 one	1
1)sign 2exponent 1023 1	1
14.6 float list[16]; int	1
14.6 Floating point division	2
combination of a dedicated	1
combination of these two	1
combination of additions and	1
libraries, but who would	1
libraries, also called shared	2
mean use the value	1
mean good performance). Aligned	1
mean atomic. It doesn't	1
inserts extra code at	1
inserts temporary debug breakpoints	1
inserts built-in code instead	1
const*)p); } // Function	3
hidden by using the	1
hidden pointer. The copy	1
hidden behind the C++	1
x*x*x*x*x*x*x*x = ((x2) 2)	2
x*x*x*x*x*x*x*x = ((x2)2)2 a+a+a+a=a*4	1
errors. The following example	1
errors. If you just	1
errors. See page 90	1
One may argue that	1
One popular development tool	1
One kilobyte is 1024	1
blocking and similar methods	1
blocking for the level-1	1
blocking or tiling. This	1
Faster if divisor is	2
Faster than most other	1
sources of compatibility problems	1
sources of resource problems	1
sources of frustration and	1
well-tested libraries for many	1
well-tested container classes. The	1
well-tested functions, classes, templates	1
devices, as discussed on	1
devices, you don't even	1
devices, but there are	1
multiplication, to mix simple	1
multiplication, etc. is still	1
multiplication, etc.) inside the	1
part. It is discussed	1
part. If a function	1
part. If a piece	1
API and the application	1
API function which then	1
API calls rather than	1
starts running and before	1
starts up, even if	1
starts up. Some modules	1
only. The following algorithm	1
only. This can be	1
only. Critical pieces of	1
counters, function parameters, pointers,	1
counters, as in example	1
counters, etc. In large	1
execution, as explained on	1
execution, you have to	1
execution, even if the	1
list[i+1] = 1; list[i+2]	2
list[i+1] += i_div_3; list[i+2]	1
distance the critical stride.	1
distance in memory is	1
distance between rows in	1
14.28 can be implemented	1
14.28 will shift out	1
14.28 union { float	1
zero, by setting pointers	1
zero, rather than rounding.	1
zero, c + two,	1
r1 and c1 for	1
r1 < SIZE; r1	1
r1 += TILESIZE) {	1
r2 and c2 for	1
r2 < r1+TILESIZE; r2++)	2
(MS) smmintrin.h (Gnu) AES,	1
(MS) xopintrin.h (Gnu) AMD	1
(MS) x86intrin.h (Gnu) Table	1
aligning the data optimally,	1
aligning data #ifdef _MSC_VER	1
aligning dynamically allocated memory.	1
assuming that the occurrence	1
assuming that *p+2 is	1
assuming no pointer aliasing	1
r; for (i =	1
r; c++) { //	2
analysis of the data	1
analysis The live range	1
analysis Join identical branches	1
seem a little odd	1
seem to do so.	1
seem illogical that the	1
perhaps for a very	1
perhaps }; // constant	1
perhaps Mac OS. See	1
service routine should do	1
service routines and device	1
service routines, system core	1
Comes with the Gnu	1
Comes with the Borland	1
Comes with Microsoft compiler.	1
esp ; align by	1
esp ebx ecx, DWORD	1
esp ;alignby4 ; mangled	1
features. The programmer typically	1
features. User feedback should	1
features. Take user feedback	1
---xx---- (a+c==b+c)=(a==b) ----x---- !(a<b)=(a>=b)	1
---xx---- a<<b<<c=a<<(b+c) x-xxx--xx a	1
---xx---- (-a>-b)=(a<b) ---xx---x Divide	1
............................................................................................... 4 2 Choosing	1
............................................................................................... 50 7.16 Function	1
............................................................................................... 23 5 Choosing	1
C/C++ standard specifies that	1
C/C++ standard specifies truncation	1
C/C++ v. 1.4, 2005.	1
100. It compares eax	1
100. pop ebx restores	1
100. Now, according to	1
b;}; S1 list[100]; int	1
b;}; S1 list[100], *temp;	1
b;}; Sab ab[size]; int	1
consumes a lot of	1
consumes CPU time. But	1
consumes most of the	1
numbers, then you have	1
numbers, but on what	1
numbers, we have a	1
129 130 14.4 511	1
129 129 130 14.4	1
129 13.7 CPU dispatching	1
reload the value from	1
reload the level-1 cache	1
reload *p and calculate	1
124 2 13.4 Test	1
124 necessary information about	1
124 13.3 Difficult cases........................................................................................................	1
motion A calculation may	1
motion Induction variables for	1
motion manually when it	1
speed-critical program on the	1
speed-critical functions by using	1
speed-critical functions. Many function	1
numbers: // Example 11.2a	1
numbers: // Example 8.18	1
numbers: // Example 12.8a.	1
(page 77) shows which	1
(page 131) shows a	1
(page 146). In the	1
12. If the code	1
12. Most modern CPUs	1
12. Higher inputs give	1
1000 * 100 *	1
1000 times and that	1
1000 times then we	1
long. This is often	1
long. If the program	1
long. Lazy binding should	1
organization for different processors	1
organization It is useful	1
organization ................................................................................................... 87 9.3	1
slow, you know). The	1
slow, then the microprocessor	1
slow, difficult to use,	1
performed with a realistic	1
performed on a sequence	1
performed on multiple data	1
high-level language with a	1
high-level language need only	1
high-level languages are good	1
advance. The frequent allocation	1
advance. The disadvantages of	1
advance. This reduces the	1
anyway and you want	1
anyway in 64-bit code.	1
anyway if you are	1
(*.dll or *.so). The	2
(*.dll or *.so) that	1
Intel-based Mac OS and	1
Intel-based Mac OS X	1
Intel-based Mac OS, etc.)	1
main() are compiled without	1
main() { int a,	2
x2 = x *	1
x2 = x *x;	1
x2 * x2; //	1
database, and a third	1
database, and other extra	1
database, or other data	1
Works with all x86	2
Works well with non-Intel	1
calculations: for ( ;	1
calculations: // Example 14.11	1
calculations: // Example 8.3a	1
basis for this manual	1
basis then use a	2
updating of software can	1
updating in the likely	1
updating mechanism should never	1
manipulation is required for	1
manipulation Mathematical functions Encryption,	1
manipulation tricks Michael Abrash:	1
28. The calculation becomes	1
28. This means that	1
28. We take the	1
C0 { public: virtual	2
C0 * p =	1
access, as given in	1
access, etc. The problem	1
access, sort and search	1
calculations, and then use	1
calculations, should be scheduled	1
calculations, where each calculation	1
multi-core CPUs, as described	1
multi-core CPUs, but event-counters	1
multi-core processing. Visual Studio	1
level, and the Digital	1
level, and in some	1
level, typically in a	1
Exception handling is not	1
Exception handling is intended	1
Exception Specifications, Dr Dobbs	1
optimization, the compiler needs	1
optimization, it does have	1
optimization, which will enable	1
Whether the constants are	1
Whether you want to	1
Whether you choose to	1
contents of the old	1
contents of data cache,	1
contents copied to the	1
books and manuals. I	1
books contain many tips	1
books 1994. Mostly obsolete.	1
removed the contentions and	1
removed from the above	1
removed after debugging if	1
164 1 Introduction This	1
164 below. Those who	1
matrix[rows][columns]; int i; float	1
matrix[rows][columns]; int i, j;	2
list. Each element in	1
list. Do not use	1
list. 94 Are objects	1
exponential function can be	1
exponential functions, trigonometric functions,	2
generality of the STL	1
generality and flexibility of	1
generality and flexibility, while	1
takes. The version that	1
takes. See page 153	1
takes. Debugging. The profiler	1
multithreaded applications it is	1
multithreaded program, or between	1
multithreaded applications: The cost	1
list[i+2] = 2; }	2
list[i+2] += i_div_3; }	1
Total size of vector,	2
Total kilobytes Time per	1
explicitly. In example 8.21,	1
explicitly. There are various	1
explicitly. Divisions can sometimes	1
programs, more than 99%	1
programs, except for small	1
programs, 99% of the	1
optimizes the code. Sometimes	1
optimizes a piece of	1
optimizes reasonably well, but	1
instruments in the code	1
instruments into the program	1
instruments directly into the	1
After each iteration it	1
After first call it	2
involving integer addition, subtraction	1
involving class objects (rather	1
involving division and relational	1
(vector) reductions: Common subexpression	1
(vector) reductions: a+b=b+a, a*b=b*a	1
(vector) reductions: ~(~a) =	1
unfortunate because truncation takes	1
unfortunate method that delays	1
unfortunate consequence that it	1
"Optimizing subroutines in assembly	3
parameter, and the destructor,	1
parameter, or as a	1
parameter, so there may	1
exceptions. The function that	1
exceptions. The mechanism relies	1
exceptions. See page 61.	1
time- consuming calculations into	1
time- consuming features of	1
time- consuming. There is	1
K8 0.24 0.25 0.24	1
K8 1.09 1.25 1.61	1
K8 0.38 0.44 0.40	1
loaded. This makes a	1
loaded. This method requires	1
loaded. 21 3.13 Memory	1
(i=0; i<100; i++) sum	1
(i=0; i<n; i++) is	1
(i=0; i<n; ++i). But	1
14.30 will therefore need	1
14.30 const int size	1
14.30 finds the numerically	1
b;} vector operator +	1
b;} }; The offset	1
b;} }; int Sum2(S3	1
wasteful in the STL.	1
wasteful copying of memory	1
wasteful behavior can be	1
Return the size of	1
Return a null reference	1
Return reference to a[i]	1
StoreVector(void * d, __m128i	3
microcontrollers have no cache	1
microcontrollers have no branch	1
microcontrollers have no out-of-order	1
character arrays is fast	1
character arrays. Note that	1
character arrays. Strings can	1
implemented. The highest efficiency	1
implemented. The recursion must	1
implemented. Use the option	1
fact, the compiler may	1
fact, the STL has	1
fact, you may get	1
runtime. Example 7.43 on	1
runtime. #define directives are	1
runtime. Polymorphism is one	1
manually by the programmer.	1
manually when it involves	1
manually unless there is	1
xxn * _mm_load_ps(coef+i); //	1
xxn rather than the	1
xxn *= xx4; //	1
|, ^, ~ are	1
|, ^, ~, <<,	1
|, ~. The Boolean	1
7.2 a = b	1
7.2 Integers variables and	2
Thread-local storage is inefficient	1
Thread-local storage should be	1
Thread-local storage Most compilers	1
81 for an explanation	1
81 optimization is to	1
81 8.6 Optimization directives	1
7.1 float SomeFunction (int	1
7.1 Different kinds of	2
signal an error simply	1
signal processing and image	1
signal processing, data compression	1
circular buffer with fixed	2
circular buffer than as	1
7.4 we are converting	1
7.4 Enums An enum	1
7.4 Enums ...................................................................................................................... 33	1
ignore the problem and	1
ignore a request for	1
ignore overflow or assume	1
keywords and directives which	1
keywords relevant to optimization	1
keywords Fast function calling.	1
7.8 if (handle !=	1
7.8 Member pointers In	1
7.8 Member pointers.......................................................................................................37 7.9	1
once. The reasons for	1
once. Example: // Example	1
once. One may argue	1
89 for an example	1
89 for an example.	1
89 int a[1000]; float	1
list[100]; int i; for	1
list[100]; Func1(list, &list[8]); }	1
list[100]; memset(list, 0, sizeof(list));	1
considered a software optimization	1
considered a container that	1
considered metaprogramming in C++:	1
Windows). The XMM vector	1
Windows). There are several	1
Windows). Alternatively, you may	1
for. The names of	1
for. In other words,	1
for. Some systems also	1
divisions are given on	1
divisions can be combined.	1
divisions (Division is slow,	1
8; // exponent +	1
8; // SIZE must	1
8; float matrix[rows][columns]; int	1
reflects the floating point	1
reflects the order in	1
reflects the conflicting considerations	1
..................................................................................................... 103 11 Out	1
..................................................................................................... 126 13.6 CPU	1
..................................................................................................... 93 9.8 Strings	1
lies in the way	2
lies r places back	1
trigonometric functions. The code	1
trigonometric functions, etc. in	1
trigonometric functions, etc. are	1
manipulate the data cache.	1
manipulate the different parts	1
manipulate all the bits	1
fractional part unsigned int	2
fractional part 142 unsigned	1
-128 to +127. An	1
-128 generates 127. The	1
-128 127 int8_t short	1
spaced a multiple of	1
spaced by a multiple	2
approximate reciprocal square root,	1
approximate comparison of doubles	1
approximate reciprocal, fast approximate	1
comparisons, which are relatively	1
comparisons, such as <.	1
comparisons, etc. For example:	1
User work that needs	1
User feedback should be	1
User complaints should be	1
dividend is unsigned Examples:	1
dividend is unsigned. The	1
dividend to unsigned if	1
unpredictable times and cause	1
unpredictable errors elsewhere in	1
unpredictable intervals which may	1
LoadVector(void const * p)	3
step. The intermediate file	1
step. In most systems,	1
step. With a short	1
Z = A +	1
Z } The loop	1
Z += A2; //	1
separated by commas. There	1
separated by semicolons, while	1
separated from the application	1
64, but the alignment	1
64, depending on the	1
64, ...). We can	1
copies the table to	1
copies the sign bit	1
copies them into the	1
brand. The version that	1
brand. Critical parts of	1
brand. Future processors will	1
annoying to the user	1
annoying to the user.	1
annoying time consumer to	1
CodeAnalyst. There are several	1
CodeAnalyst. These profilers are	1
CodeAnalyst. Unfortunately, profilers are	1
Literature on code optimization	1
Literature Other manuals by	1
Literature ..................................................................................................................... 163 20	1
study the code that	1
study the available options	1
study of how compilers	1
stack, which is very	1
stack, which makes data	1
stack, except for the	1
collection. The allocated memory	1
collection. A more efficient	1
collection. Objects that are	1
occurs, but this is	1
occurs, even for arrays	1
occurs, (2) use unsigned	1
-fno-pic and link with	1
-fno-pic when compiling for	1
-fno-pic apparently has no	1
_M_IX86 and _WIN64 _M_X64	1
_M_IX86 x86-64 platform _M_IX86	1
_M_IX86 _M_IX86 x86-64 platform	1
elsewhere and get a	1
elsewhere in the program	1
elsewhere then there is	1
bypassing the dispatch mechanism	1
bypassing the so-called CPU-dispatcher	1
bypassing syntax checks. These	1
0x273F will be evicted	1
0x273F into one of	1
0x273F would still be	1
135 The if statement	1
135 show various ways	1
135 14.4 Integer multiplication	1
looks like this: //	3
{double a; double b;};	2
{double d; unsigned int	1
implementing a matrix in	1
implementing a compile-time polymorphism,	1
implementing polymorphic classes. Each	1
int. A short int	1
int. Therefore, it is	1
int. Reinterpret cast The	1
space, if necessary, by	1
space, as explained in	1
space, even when it	1
skip the following explanation	1
skip this section if	1
skip large expressions when	1
137 about division). The	1
137 errors must be	1
137 14.6 Floating point	1
132 Table lookup cannot	1
132 14.2 Bounds checking	1
132 14.1 Use lookup	1
position- independent code more	1
position- independent code. The	1
position- independent code, see	1
Index out of range";	2
Index out of range.	1
Specifies a function to	1
Specifies that pointer aliasing	1
Specifies alignment of arrays	1
residual error is lower	1
residual error and compare	1
residual error for each	1
operations, and to mix	1
operations, as explained on	1
operations, see page 105.	1
C++. This typically happens	1
C++. Critical device drivers	1
C++. Yet, D is	1
input/output than the specific	1
input/output operations. It can	1
input/output Graphics and sound	1
packages and who is	1
packages faster and smaller.	1
packages include a profiler	1
operations: // Example 14.13a	1
operations: // Example 7.41b	1
operations: __m128i a =	1
Explicit CPU dispatching works	1
Explicit cache control ..............................................................................................	1
Explicit cache control Microprocessors	1
purpose. The clumsy AND-OR	1
purpose. It is possible	1
purpose. It just happened	1
reciprocal_divisor; y2 = a2	1
reciprocal_divisor; 14.7 Don't mix	1
reciprocal_divisor; reciprocal_divisor = 1.	1
compilation. The program code	1
compilation. The following example	1
compilation. Some early implementations	1
(number of sets). Here,	1
(number of sets) (line	1
(number of ways). If	1
endian systems you have	1
endian storage (e.g. PowerPC).	1
endian storage. If you	1
allocates the required amount	1
allocates memory on the	1
allocates one memory block	1
136 and 137, respectively.	1
136 ... for (i	1
136 14.5 Integer division......................................................................................................	1
reveals a funda- mentally	1
reveals that similar solutions	1
reveals three things that	1
filled up if the	1
filled up, which happens	1
filled up. This is	1
(requires a microprocessor that	1
(requires no specific option)	1
(requires binutils version 2.20,	1
offer the choice between	1
offer the possibility of	1
offer profile-guided optimization. This	1
Bitfields may be useful	1
Bitfields Bitfields may be	1
Bitfields ................................................................................................................... 56 7.26	1
At the diagonal there	1
At this time, any	1
At least, it can	1
up-to-date function library that	1
up-to-date version. The CPU	1
up-to-date solution. The compiler	1
leaving the AVX part.	2
leaving their workplace and	1
Inheritance from multiple parent	1
Inheritance An object of	1
Inheritance .............................................................................................................. 54 7.23	1
153 for further discussion	1
153 16.1 Using performance	1
153 spends most of	1
degree of optimization is	1
degree of randomness in	1
degree polynomial of the	1
_mm_storeu_si128((__m128i *)d, x); }	2
_mm_storeu_si128((__m128i *)d, x);} void	1
automatically, and only the	1
automatically, but as long	1
automatically, although it appears	1
sequentially. The opposite order	1
sequentially. It works somewhat	1
sequentially. Some applications (e.g.	1
Enums are exactly as	1
Enums An enum is	1
Enums ...................................................................................................................... 33 7.5	1
Algebraic reductions Most compilers	1
Algebraic reduction is a	1
Algebraic reduction Most compilers	1
A, B and C	1
A, B, C; x.abc	1
A, B, C; x.a	1
operands. The advantages of	1
operands. You cannot swap	1
operands. Nevertheless, the bitwise	1
i<100; i++) sum +=	1
i<100; i++,i2+=2.0f)a[i]=i2; 41 Float	1
i<100; i++)a[i]=2*i; The conversion	1
0.11 memcpy 16kB unaligned	1
0.11 0.18 0.18 0.18	1
0.11 1.21 0.57 0.44	1
0.12 memcpy 16kB aligned	1
0.12 0.18 0.12 0.11	1
0.12 0.11 0.18 0.18	1
nearest integer int n;	1
nearest element to x?"	1
nearest integer. If two	1
To use multiple CPUs	1
To prevent this kind	1
To explain the difference,	1
x-- x x-- x	2
x-- x --- -	1
language, all conversions from	1
language, such as VHDL	1
language, e.g. C++, and	1
145 and 119 for	1
145 SSE2 instruction set	1
145 14.11 Static versus	1
140 a = b	1
140 for further discussion.	1
140 14.8 Conversions between	1
141 for details about	1
141 #include <emmintrin.h> static	1
141 14.9 Using integer	1
RISC and CISC processors,	1
RISC in situations where	1
RISC cores, vector processing	1
Consider the time it	1
Consider the following example,	1
Consider running the services	1
text or input data.	1
text strings in the	1
text strings in classes	1
Object Windows Library (OWL).	1
Object files generated by	1
Object oriented programming can	1
14.10 int a, b,	1
14.10 Mathematical functions The	1
14.10 Mathematical functions .......................................................................................	1
14.11 int a, b,	1
14.11 Static versus dynamic	2
<int N> class powN<true,N>	1
<int N> static inline	1
<int m> int MultiplyBy	1
back. The method of	1
back. The so-called nontemporal	1
back. Thus, we will	1
8.4 double a =	1
8.4 Obstacles to optimization	2
8.7 int SomeFunction (int	1
8.7 Checking what the	2
listing to see if	1
listing reveals three things	1
listing /FA -S -	1
twice for handling a	1
twice because the macro	1
twice because both the	1
Pascal and Fortran are	1
Pascal has many of	1
Pascal used an intermediate	1
expected. The 64 64	1
expected. I believe that	1
expected. Use square blocking:	1
14.4 Integer multiplication Integer	1
14.4 Integer multiplication .............................................................................................	1
14.4 511 511 2040	1
Vec16s when compiling for	1
Vec16s a, b, c;	1
Vec16s Vec16us Vec8i Vec8ui	1
Simple function parameters are	1
Simple integer operations such	1
Simple member pointers /vms	1
Manual", Volume 1 -	1
Manual", Volume 1, 2A,	1
Manual", Volume 2A and	1
leave the last 8	1
leave a background process	1
leave them enabled (there	1
solved by making the	1
solved by making sure	1
solved this problem by	1
supplied in the library	1
supplied in Intel's Math	1
supplied with Intel's compilers	1
Available from Intel and	1
Available from www.agner.org/optimize/asmlib.zip. Currently	1
Available protocols and standardized	1
translated to the instruction	1
translated to just one	1
translated into machine code	1
Linux: long int unsigned	1
Linux: unsigned long int	1
Linux: -ffunction-sections) which allows	1
With the high complexity	1
With a long vector	1
With a short vector	1
Has not been updated	1
Has an IDE with	1
Has many good optimization	1
overriding of public functions	1
overriding Intel's CPU dispatcher.	2
Opteron K8 0.24 0.25	1
Opteron K8 1.09 1.25	1
Opteron K8 0.38 0.44	1
systems". The parameters a	1
systems". For this reason,	1
systems". 7.16 Function return	1
correct or if the	1
correct result because the	1
correct child class name	1
caching. This problem can	1
caching. Smaller microcontrollers have	1
caching. 3.14 Context switches	1
overflow: // Example 7.25	1
overflow: a[i] = log(b[i])	1
overflow: _controlfp_s(&dummy, 0, _EM_OVERFLOW);	1
scans a string of	1
scans all files on	2
way: // Example 7.40b	1
way: There are two	1
way: bool a, b,	1
Sometimes the compiler does	1
Sometimes it is necessary	1
Sometimes it takes hours	1
-fno-builtin to get library	1
-fno-builtin Gnu 32-bit Mac	1
-fno-builtin Gnu 32-bit -fno-builtin	1
justify the method. A	1
justify a possible minor	1
justify such a complicated	1
contrary, the code becomes	1
contrary, you should by	1
contrary, each thread may	1
conventions. The dot in	1
conventions. Optimizes reasonably well.	1
conventions. FreeBSD and Open	1
initialization routine that is	1
initialization routine that loads	1
initialization routine sets a	1
Internet at regular time	1
Internet where you can	1
Internet forums Several internet	1
cover the worst case	2
cover graphics processors. 5	1
Constructors and destructors A	1
Constructors and destructors ..................................................................................	1
Constructors are therefore as	1
PC's and mainframes, and	1
PC's in a network	1
PC's had an interpreter	1
7.21 int i; short	1
7.21 Runtime type identification	2
delays in the program	1
delays if the distance	1
delays execution by causing	1
a); } } The	2
a); } 111 }	1
c[i] are so big	1
c[i] are too big	1
c[i] = temp *	1
cleaning up and calling	1
cleaning up because it	1
cleaning up spaces that	1
way, the first processors	1
way, then many times	1
way, etc. The worst	1
Big arrays should be	1
Big runtime frameworks. The	1
Big supercomputers with massively	1
ZMM registers The first	1
ZMM registers by 64,	1
ZMM registers .......................................................... 107	1
coefficients is calculated at	1
coefficients // Table //	1
coefficients double Table[100]; int	1
DOS and Windows 3.x.	1
DOS and 16-bit Windows,	1
DOS compilers). The representation	1
-fpie because the linker	1
-fpie option is less	1
-fpie instead of -fpic.	1
labels is simply predicted	1
labels that have values	1
labels follow a sequence	1
6, 9 and 13	1
6, 24, 120, 720,	2
ret returns from the	1
ret ALIGN ; mark_end;	1
ret ALIGN ?Func@@YAXQAHAAH@Z ENDP	1
Signed and unsigned integers	1
Signed / unsigned conversion	1
Signed versus unsigned integers	1
logarithms and trigonometric functions.	1
logarithms in the general	1
logarithms take a long	1
stored. The storage principles	1
stored. This makes the	1
stored. All identical constants	1
manner. This applies to	1
manner. It is usually	1
manner. 3.4 Automatic updates	1
Today, the 8 most	1
Today, the choice of	1
Today, it is not	1
easiest and the most	1
easiest way to make	1
easiest way to overcome	1
pop ebx restores the	1
pop ebx. 9 Optimizing	1
pop ret ALIGN ?Func@@YAXQAHAAH@Z	1
3.5 will be stored	1
3.5 Program loading .......................................................................................................	1
3.5 Program loading Often,	1
-S or /Fa for	1
-S - masm=intel /FA	1
-S Generate map file	1
inlined. An alternative solution	1
inlined. But beware that	1
inlined. (In the above	1
cmp eax, 100 /	1
cmp jl $B1$3: pop	1
cmp ja $B2$3: ret	1
flow and the number	1
flow and algorithms in	1
flow at inconvenient times	1
directives. This is sure	1
directives. For example use	1
directives. OpenMP is a	1
deallocated. The program logic	1
deallocated. Failure to do	2
(128 or 256 bytes)	1
(128 bit float vectors)	1
(128 vectors of inte-	1
Programmers that have tested	1
Programmers very often underestimate	1
Programmers do, however, often	1
focus the optimization efforts	1
focus is on mathematical	1
focus on the costs	1
definition. This will prevent	1
definition. This tells the	1
definition. Inlining a function	1
track of the performance	1
track of when they	1
track backwards though the	1
condition. In general, the	1
condition. Replacing two comparisons	1
condition. Things that may	1
s3 can be combined	1
s3 = 0, sum;	1
s3 += a[i+3]; }	1
s2 and s3 can	1
s2 = 0, s3	1
s2 += a[i+2]; s3	1
contemporary operating systems are	1
contemporary processors. The cache	1
contemporary 106 CPUs if	1
66 float a, b;	1
66 8.1 How compilers	1
66 8.2 Comparison of	1
probably the most common	1
probably be improved by	1
probably without information about	1
longjmp is used for	1
longjmp in time-critical code.	1
longjmp if possible. Don't	1
2exponent 127 1 fraction	1
2exponent 16383 one fraction	1
2exponent 1023 1 fraction	1
leads to the appropriate	1
leads to a usability	1
leads to suboptimal code.	1
Alignd ( short int	3
improving the code. //	1
improving code that contains	1
improving performance. Stefan Goedecker	1
sizes. The results of	1
sizes. For example: //	1
sizes. Fortunately, the solution	1
....................................................................................................... 19 3.6 Dynamic	1
....................................................................................................... 21 3.10 Graphics	1
....................................................................................................... 150 16 Testing	1
holds the index, i.	1
holds a memory address.	1
holds a precision of	1
competing for the same	1
competing brands of microprocessors	1
competing product is Borland's	1
questions to me. You	1
questions if you cannot	1
questions from everybody. So	1
register, not even temporarily.	1
register, do an addition	1
register, add the constant	1
etc., and if an	1
etc., can be implemented	1
etc., as is commonly	1
ReadTSC as a library	1
ReadTSC function. 154 //	1
ReadTSC listed below in	1
with: // Example 14.12b	1
with: // Example 14.13b	1
with: // Example 7.38b.	1
kernel in the so-called	1
kernel version 2.6.30 and	1
kernel code" in manual	1
CPUs"). This is one	1
CPUs"). This can be	1
CPUs"). Const cast The	1
j; int order(int x);	1
j; float x; for	1
j; ... for (i	1
natural order and there	1
natural parallelism. The gain	1
natural ordering? If you	1
Examples are provided in	1
Examples are image processing,	1
Examples include JavaScript, PHP,	1
(iset >= 2) SelectAddMul_pointer	1
(iset >= 8) SelectAddMul_pointer	1
(iset >= 5) SelectAddMul_pointer	1
F2 and call the	1
F2 that can possibly	1
F2 actually throws an	1
moving the mouse. The	1
moving the mouse. This	1
moving each object separately	1
9.6b. The MOVNTQ instruction	2
9.6b. #include "xmmintrin.h" //	1
-O3 or (requires no	1
-O3 or -Ofast /O3	1
-O3 Interprocedural optimization /Og	1
unusual for the installation	1
unusual for the reinstallation	1
unusual that a user	1
misses, branch mispredictions, floating	1
misses, branch mispredictions, etc.	1
misses, branch misprediction, or	1
Divide by constant =	3
sorted list is the	1
sorted list can be	1
sorted list or a	1
efficiency, then you may	1
efficiency, platform independence, and	1
efficiency, portability and development	1
same. The maximum loop	1
same. This is called	1
same. If the template	1
(STL) is a useful	1
(STL) if the full	1
(STL) which comes with	1
rid of the branch.	1
rid of the GOT	1
rid of all the	1
ms for background jobs.	1
ms for foreground jobs	1
ms by selecting optimize	1
arrays, a and b,	1
arrays, it may be	1
arrays, then it is	1
matrix[r][c] is swapped with	1
matrix[r][c] below the diagonal	2
issue to catching hardware	1
issue an error message	1
issue because an optimizing	1
solve this problem is	1
solve this problem. These	1
solve all the problems	1
since the CPU was	1
since we are assuming	1
since 2004. Can do	1
beyond the scope of	3
readable and not easily	1
readable when you are	1
readable but unfortunately it	1
infinity or NAN (not	1
infinity or NAN (Not	1
infinity or NAN. Avoiding	1
bookkeeping is needed: //	1
bookkeeping in order to	1
bookkeeping depends very much	1
formula in each case.	1
formula into a single	1
formula a[i] = log(b[i])	1
technical problems or performance	1
technical details of instruction	1
technical problems. Some common	1
instr. set AVX instr.	1
instr. set Automatic CPU	1
instr. set SSE4.1 instr.	1
specified on a command	1
specified instruction set. The	1
specified types (See Sutter:	1
organizing the data as	1
organizing the data. A	1
organizing data into classes	1
9.5a on a Pentium	1
9.5a const int SIZE	1
9.5a goes from the	1
false, a || true	1
false, a || !a	1
false, then the second	1
open the possibility for	1
open source compiler for	1
open source. It comes	1
decomposition of the data.	1
decomposition and data decomposition.	1
decomposition here means that	1
measuring the time it	1
measuring the overall performance	1
measuring performance by unit-testing	1
File access Reading or	1
File input/output Graphics and	1
File access................................................................................................................ 20 3.8	1
negligible when the number	1
negligible because there is	1
negligible contribution to the	1
took several minutes to	1
took advantage of the	1
took 50 clock cycles	1
on. Most IDE's (Integrated	1
on. Replace or bypass	1
on. 7.31 Other cases	1
Hyperthreading is Intel's term	1
Hyperthreading Some versions of	1
Hyperthreading ..................................................................................................... 103 11	1
30 // f is	1
30 ms for foreground	1
30 Overflow behaves differently	1
initially points to the	2
initially points to a	1
occur. The reason why	1
occur. In the case	1
occur. See page 78	1
Strings can be manipulated	1
Strings Text strings typically	1
Strings ...................................................................................................................... 96 9.9	1
Preprocessing directives ......................................................................................... 65	1
Preprocessing directives Preprocessing directives	1
Preprocessing directives (everything that	1
utilize the multiple processor	1
utilize the computational power	1
utilize systems with multiple	1
(0,0,0,0,0,0,0,0) __m128i zero =	2
(0,0,0,0,0,0,0,0) Is16vec8 zero(0,0,0,0,0,0,0,0); //	1
38 // Example 7.15a.	1
38 7.11 Type conversions....................................................................................................	1
38 7.10 Arrays .....................................................................................................................	1
reference. This will provoke	1
reference. A const reference	1
reference. Registers are a	1
FUNCNAME SelectAddMul_SSE41 #elif INSTRSET	1
FUNCNAME SelectAddMul_SSE2 #elif INSTRSET	1
FUNCNAME SelectAddMul_AVX2 #endif //	1
history of that branch	1
history of CPU development,	1
history of programming languages	1
CChild2 * p2; p2	1
CChild2 : public CParent<CChild2>	1
CChild2 Object2; CChild1 *	1
bit: // Example 14.23	1
bit: // Example 14.25	1
bit: absvalue = a[i].u[1]	1
forums and newsgroups contain	1
forums on the Internet	1
forums Several internet forums	1
addressing of data. The	2
addressing of data. This	1
1024; int a[size], b[size];	1
1024; int a[size], b[size],	1
1024; struct Sab {int	1
C#, Visual Basic .NET	1
C#, Visual Basic, etc.	1
C#, managed C++, and	1
allocating more space 91	1
allocating when a memory	1
allocating piecewise or re-	1
a+b is calculated first,	1
a+b = b+a a*b	1
a+b = b+a, a*b	1
taken into account when	3
microprocessor. These algorithms are	1
microprocessor. Integer division is	1
microprocessor. Multiplication takes 4	1
argument is that the	1
argument to be an	1
argument does not apply	1
Func1 and Func2 were	1
Func1 when compiling module2.cpp.	1
Func1 (int a[], int	1
Unix-like systems use position-independent	1
Unix-like systems. Mac systems	1
Unix-like platforms. Clang The	1
----- - x-xxx -	1
----- x---- x---- -----	1
----- ~(~a)=a x-xxxxx-- (a&b)|(a&c)	1
2.5 may be changed	1
2.5 Choice of compiler	2
read-only can be shared	1
read-only data sections can	1
read-only data. The disadvantage	1
well-structured code and for	1
well-structured program that is	1
well-structured C++ program are	1
represent the "worst case"	1
represent a known CPU	1
represent a monotonically increasing	1
elsewhere. In this example,	1
elsewhere. Faster than most	1
elsewhere. 13.5 Implementation The	1
micro-op cache (e.g. Sandy	1
micro-op cache. The Core2	1
micro-op cache. Compilers will	1
best. Some common function	1
best. These cases are	1
best. 3.11 Other system	1
returning a composite object,	1
returning a null reference.	1
returning from the function	1
Long double precision is	1
Long double precision takes	1
Long dependency chains in	1
r1; c2 < r2;	1
r1; c1 += TILESIZE)	1
r1; r2 < r1+TILESIZE;	1
CPU- specific functions have	1
CPU- specific optimizations in	1
CPU- specific profiler. For	1
top of loop ;	3
decide to do some	1
decide which programming language	1
decide how advantageous vectorization	1
other. This is the	1
other. See page 51	1
other. See page 88	1
brackets in which the	1
brackets mean use the	1
brackets index, just as	1
2004. No differences were	1
2004. Open Watcom C/C++	1
2004. Can do automatic	1
odd and you unroll	1
odd number then we	1
odd here. The address	1
7.7 unsigned int i;	1
7.7 Function pointers ......................................................................................................	1
7.7 Function pointers Calling	1
Documentation of the OpenMP	1
Documentation for details. Note	1
Documentation License shall automatically	1
prone. The vectorized code	1
prone. A discussion of	1
prone. All these problems	1
compile- time if and	1
compile- time loops or	1
compile- time, but not	1
Global or static storage	1
Global variables are stored	1
Global variables may be	1
lookups for local references.	1
lookups are needed even	1
lookups Max. number of	1
Whole program optimization cannot	1
Whole program optimization Integer	1
Whole program optimization /GL	1
a*b = b*a -	1
a*b = b*a (a+b)+c=a+(b+c)	1
a*b - n.a. !(a	1
linker. The delay on	1
linker. The map file	1
linker. Both code cache	1
security. b & 1	1
security. There are no	1
security. Standard C++ imple-	1
lookup. For example: //	1
lookup. These instructions are	1
lookup. Lookup tables are	1
78 for an explanation.	2
78 Therefore, it is	1
handled in a systematic	1
handled at half speed	1
handled separately: for (r2	1
a[], int * p)	1
a[], int & r)	2
implicitly when copying a	1
implicitly when calculating the	1
implicitly converting a to	1
terminating a thread. You	1
terminating zero and to	2
_WIN32 n.a. MS compiler	1
_WIN32 Linux platform n.a.	1
_WIN32 _WIN32 Linux platform	1
(2n / b) is	1
(2n / b) etc.	1
(2n / b) >>	1
measures the number of	1
measures the speed of	1
measures not only the	1
multiplications. The following example	1
multiplications. How was it	1
multiplications. Subtractions use the	1
intensive may very well	1
intensive program is achieved	1
intensive applications. Some systems	1
moved with a single	1
moved out of the	1
moved out of a	1
ReadTSC() - time1; //	1
ReadTSC() { int dummy[4];	1
ReadTSC() from library asmlib..	1
valid. For example, when	1
valid. For example: //	1
valid. Re-interpreting the type	1
b[size]; // set a	2
b[size]; // ... for	1
Not all code has	1
Not optimized for SSE2	1
Not optimized as good	1
none of the compilers	2
none of the time-consumers	1
"what is the nearest	1
"what works best on	2
Comparing an integer to	1
Comparing two pointers requires	1
Comparing performance of different	1
instructions, but these are	1
instructions, multiple cores, and	1
instructions, where a hardware	1
Microprocessor documentation Intel: "IA-32	1
Microprocessor designers have gone	1
Microprocessor producers keep adding	1
metaprogramming. The next example	1
metaprogramming. Don't panic if	1
metaprogramming. None of the	1
Size of each table	1
Size of each element,	2
metaprogramming, as explained at	1
metaprogramming, but this method	1
metaprogramming, loops are implemented	1
bypass the CPU detection	1
bypass the virtual table	1
bypass the check for	1
output. The assembly output	1
output. The optimized code	1
output. On most compilers	1
........................................................................................... 5 2.1 Choice	1
........................................................................................... 6 2.3 Choice	1
........................................................................................... 139 14.7 Don't	1
numerically largest element in	2
numerically largest element (approximately):	1
expression. The size conversion	1
expression. Example 12.4b shows	1
expression. Assume, for example,	1
.......................................................................................................... 120 13 Making	1
.......................................................................................................... 164 1 Introduction	1
.......................................................................................................... 38 7.10 Arrays	1
InstructionSet() function is available	1
InstructionSet() #include "asmlib.h" //	2
Eliminate branches Remove branch	1
Eliminate jumps Eliminate branches	1
Eliminate jumps Jumps can	1
backup copy of every	1
backup copying without effectively	1
backup features, and current	1
13.6 CPU dispatching in	2
13.6 80.9 512 512	1
Get supported instruction set,	2
Get upper 32 bits	1
throw an exception then	1
throw any exception so	1
throw exceptions throw() throw()	1
More complicated cases cannot	1
More examples of container	1
More details about how	1
---x----- x - x	1
---x----- x--xx---- (a&&b)||(a&&!b)=a x--xx----	1
---x----- x---x---x x-xxx---- a*b*c=a*(b*c)	1
_mm_loadu_si128((__m128i const*)p); } //	2
_mm_loadu_si128((__m128i const*)p);} // Function	1
Before you start to	2
Before starting a new	1
Applications that are not	1
Applications that use large	1
Applications that generate floating	1
25 clock cycles, depending	1
25 7 The efficiency	1
25 Since most development	1
AVX-512 instruction set and	2
AVX-512 instruction set are	1
23 5 Choosing the	1
23 software. This is	1
23 , doublevalue (	1
evict the cache line	1
evict number 1. Number	1
evict number 2, etc.	1
Copying the table takes	1
Copying or clearing arrays	1
Copying constant data from	1
(x = 0; x	2
(x = 2.0; x	1
being out of range	1
being initialized. The dispatcher	1
being said, I must	1
sum, then the first	1
sum, then f is	1
sum, initialize to x^0/0!	1
unrolled to avoid the	1
unrolled loop takes up	1
unrolled double xpow10(double x)	1
slow. If the granularity	1
slow. Today, the 8	1
slow. Value of a	1
StoreVector(aa + i, a);	3
7.11 bool a; float	1
7.11 Type conversions The	1
7.11 Type conversions.................................................................................................... 40	1
market the application program.	1
market is developing so	1
market for many years	1
vectors, and these operations	1
vectors, as is often	1
vectors, but the asmlib	1
resource. The C++ way	1
resource. The CISC instruction	1
resource. Do not use	1
Architecture Software Developer’s Manual",	2
Architecture Programmer’s Manual", Volume	1
7.12 void FuncA (int	1
7.12 Branches and switch	2
limited. There are approximately	1
limited. Example: // Example	1
limited. Dynamic memory allocation	1
11.3 is independent of	1
11.3 const int size	1
11.3 even without the	1
typedef int CriticalFunctionType(int parm1,	1
typedef void FuncType(short int	1
typedef instead of a	1
0x2700 to 0x273F will	1
0x2700 to 0x273F into	1
0x2700 to 0x273F would	1
Replace or bypass the	1
Replace macro by template	1
Replace with: // Example	1
Instead, the following work-around	1
Instead, you can make	1
Instead, I will make	1
frameworks, rather than isolating	1
frameworks, intermediate code, interpreters,	1
frameworks, interpreters, just-in-time compilers,	1
*(p++) is more efficient	1
*(p++) |= 0x20; If	1
*(p++) |= 0x20; 46	1
(Intel CPU only) -O3	1
(Intel CPU only) (Intel	1
(Intel Atom). The following	1
nearby address again before	1
nearby parts of the	1
nearby branches. The algorithms	1
fragmented. This makes data	1
fragmented. This garbage collection	1
fragmented. An alternative is	1
truncation. The missing functions	1
truncation. This is approximately	1
truncation. Efficient conversion from	1
Different compilers behave differently	1
Different kinds of variable	2
logarithm of each factor	1
logarithm would be re-calculated	1
logarithm again, but it	1
Day for signifying one	1
Day == Wednesday ||	1
Day == Friday) {	1
ported to multiple operating	1
ported to systems with	1
ported to another platform.	1
inline. This may enable	1
inline. This will enable	1
inline. Replacing a function	1
big. The compiler is	1
big. In the above	1
big. 7.14 Functions Function	1
deallocation of memory takes	1
deallocation of big memory	1
deallocation and garbage collection	1
(PLT) and a table	1
(PLT) in the following	1
(PLT) that is initialized	1
7.22 short int a[100];	1
7.22 Inheritance An object	1
7.22 Inheritance .............................................................................................................. 54	1
Context switches are more	1
Context switches A context	1
Context switches..................................................................................................... 22 3.15	1
7.23 int i; short	1
7.23 Constructors and destructors	2
services that run in	1
services only when activated	1
services under advanced system	1
7.20 int i; if	1
7.20 Virtual member functions	2
extremely complicated and clumsy,	1
extremely costly to many	1
extremely inefficient, (4) get	1
kb = 8192 bytes,	1
kb size with a	1
kb / 8 =	1
joining the operations: //	1
joining a and b	1
joining identical pieces of	1
decrement operators The pre-increment	1
decrement operators on integer	1
decrement operators. 7.7 Function	1
0x1C. If the program	1
0x1C. There are only	1
0x1C. Reading or writing	1
free. This can be	1
free. These operators and	1
free. Visual Studio can	1
Check that all code	1
Check that index is	1
Check if level-2 cache	1
double, then the code	1
double, then sizeof(S1) would	1
double, bool, enum as	1
periodic pattern can also	1
periodic pattern can be,	1
periodic pattern or if	1
7.27 float x; *(int*)&x	1
7.27 Overloaded operators An	1
7.27 Overloaded operators .............................................................................................	1
7.24 float a; double	1
7.24 Unions A union	1
7.24 Unions .................................................................................................................... 55	1
product is one that	1
product is Borland's now	1
product makes sure that	1
7.25 unsigned int u;	1
7.25 Bitfields Bitfields may	1
7.25 Bitfields ................................................................................................................... 56	1
7.28 class c1 {	1
7.28 Templates A template	1
7.28 Templates...............................................................................................................57 7.29 Threads	1
references, and stack entries	1
references, which can be	1
references, 'this' pointer, common	1
CPUs" for an explanation	2
CPUs" gives more details	1
experience to get used	1
experience before trying the	1
experience unacceptably long response	1
determine the worst-case maximum	1
determine if the processor	1
determine whether it is	1
<typename T, unsigned int	1
<typename T> static inline	1
<typename MyChild> class CParent	1
Generate optimization report /Qopt-report	1
Generate assembly listing /FA	1
Generate map file /Fm	1
certainly a very inefficient	1
certainly more convenient to	1
certainly something that can	1
Devirtualization class C0 {	1
Devirtualization An optimizing compiler	1
Devirtualization ---x----- x -	1
pivot in a Gauss	1
pivot element. The integer	1
pivot search: // Example	1
__declspec( align(16)) __attribute(( aligned(16)))	2
__declspec( noalias) __restrict #pragma	1
mispredictions if the critical	1
mispredictions by making the	1
mispredictions (see page 43).	1
a[100], b; for (i	1
a[100], b, temp; temp	1
a[100], temp; temp =	1
allocations is limited. Dynamic	1
allocations of large memory	1
allocations of sizes 1,	1
necessary, to fit the	1
necessary, by using the	1
necessary, each compiled for	1
9.4 const int NUMROWS	1
9.4 Variables that are	2
float. The type __m128d	1
float. (Both use 32	1
float. Similar operations on	1
1.0f;} The compiler may	1
1.0f;} The advantages of	1
1.0f;} 66 float a,	1
indeed a very contrived	1
indeed of the specified	1
indeed vectorized as intended	1
9.1 show that it	1
9.1 Caching of code	2
(not a number). Different	1
(not member of the	1
(not up to date):	1
built-in code is not	1
built-in code instead of	1
built-in test feature called	1
n. The constant (2n	1
n. You can divide	1
n. But not if	1
complete code examples for	1
complete redesign of the	1
complete redesign of a	1
(x) x x -	1
(x) x (x) x-xx--xx-	1
(x) x-xx--xx- x--x----- --xx-----	1
ecx, 1 eax, 8	1
ecx, DWORD PTR [esp+8]	1
ecx, edx, DWORD PTR	1
modified. This can be	1
modified. This can cause	1
modified. Unlike a pointer	1
folding and constant propagation	2
folding - n.a. a+b	1
expects a GOT entry.	1
expects an immediate response	1
expects immediate responses to	1
Call to virtual function	1
Call critical function a	1
Call critical function through	1
joined into a single	1
joined into one if	1
joined together in order	1
classes, as explained in	1
classes, such as string	1
classes, templates or modules	1
compute a / b	1
compute (FuncRow(i)*columns + FuncCol(i))	1
compute i/2 in ebx	1
interpreting the same bits	2
interpreting or compiling the	1
LIBM libraries are not	1
LIBM library. Only available	1
LIBM Library amd_vrs4_expf amd_vrd2_exp	1
accesses to functions and	1
accesses data members with	1
accesses b through a	1
$B1$2 is the loop	1
$B1$2 ebx ; top	1
$B1$2 label if i	1
copying. The benefits of	1
copying. There are several	1
copying. Security. The vulnerability	1
Volume 1 - 5.	1
Volume 1, 2A, 2B,	1
Volume 2A and 2B.	1
placed in a separate	1
placed in separate modules	1
placed immediately before the	1
spot. Use the call	1
spot. Sometimes, the best	1
spot. Repeating the break	1
variable, for example 32	1
variable, it makes no	1
variable, pointer or member	1
jumping out of a	2
jumping around and less	1
compared to the time	1
compared to 32 bit	1
compared with the time	1
3-dimensional vectors RGB image	1
3-dimensional vectors ....................................................... 120	1
3-dimensional geometry and other	1
x. The compiler is	1
x. This is only	1
x. It is a	1
a. This operation will	1
a. You can take	1
a. I don't think	1
post-increment. The effect is	1
post-increment. There are also	1
post-increment. For example, in	1
sufficient to have just	1
sufficient to make a	1
sufficient for less intensive	1
evicted when we read	1
evicted from the cache	1
evicted before we need	1
flags on certain Intel	1
flags register into the	1
flags stall because the	1
Sum2 and Sum3 in	1
Sum2 and Sum3 are	1
Sum2 and Sum3. Whether	1
(2,2,2,2,2,2,2,2) __m128i two =	2
(2,2,2,2,2,2,2,2) Is16vec8 two(2,2,2,2,2,2,2,2); //	1
[edx] DWORD PTR [eax+400]	1
[edx] DWORD PTR[ecx+eax*4],ebx eax,	1
[edx] adds, not edx	1
7.14 class c1; int	1
7.14 Functions Function calls	1
7.14 Functions ................................................................................................................ 48	1
7.16 float list[100]; memset(list,	1
7.16 Function return types	2
7.17 const int rows	1
7.17 Structures and classes	1
7.17 Structures and classes............................................................................................	1
templates. The powN template	1
templates. Two or more	1
templates. Ready made container	1
7.13 struct abc {int	1
7.13 Loops The efficiency	1
7.13 Loops...................................................................................................................... 45 7.14	1
7.19 int i; float	1
7.19 Class member functions	2
beware of the pitfalls	1
beware that these functions	1
beware that macro parameters	1
7.18 int FuncRow(int); int	1
7.18 Class data members	2
card for other purposes	1
card or integrated in	1
(4) access the data	1
(4) get a compiler	1
elements: #define swapd(x,y) {temp=x;	2
viable solution in such	1
viable compromise when portability	1
7.10 Arrays An array	1
7.10 Arrays ..................................................................................................................... 38	1
_mm_set1_epi16(2); // Roll out	2
templates, as explained on	1
templates, such as list,	1
complexity of modern software,	1
complexity (en.wikipedia.org/wiki/Standard_Template_Library). The objects	1
511 511 2040 38.7	1
511 2040 38.7 512	1
Member pointers In simple	1
Member pointers.......................................................................................................37 7.9 Smart	1
modifying the name in	1
modifying only half of	1
undesired results. Integer operators	1
undesired effects. This effect	1
7.15 Function parameters Function	1
7.15 Function parameters ...............................................................................................	1
symbol interposition is intended	1
symbol interposition feature that	1
problematic because there may	1
problematic because these time	1
invest in ever more	1
invest more efforts in	1
memcpy, at least in	1
memcpy, memmove, memset, or	1
Sum3 in 32-bit Windows	1
Sum3 are doing exactly	1
Pure functions A pure	1
Pure function. __attribute__((const)) (Linux	1
impossible to work for	1
impossible with references. You	1
B1; class B2; class	1
B1; class B2; 54	1
forwarding delay in the	2
storage, but other systems	1
storage, far pointers, and	1
107). The Gnu function	1
107). Agner's vector class	1
64) can improve performance	1
64) % 32 =	1
static. This makes sure	1
static. Example: // Example	1
_M_X64 _M_X64 162 19	1
_M_X64 162 19 Literature	1
CriticalFunction(); ... // Use	1
CriticalFunction(); timediff[i] = ReadTSC()	1
x-xxx---x x - x	1
x-xxx---x x-xxx---x x -	1
shown in the above	1
shown in example 9.6b.	1
lack the necessary functions	1
lack of advanced development	1
a2 * b1 *	1
a2 / b2; This	1
a1 * b2 *	1
a1 / b1; y2	1
16) { b.load(bb+i); c.load(cc+i);	1
16) shows that a	1
debugger. You may replace	1
debugger. However, the code	1
mostly compatible with these.	1
mostly relative references in	1
a) { return a	1
a) { return vector(x	1
ptr x; __asm fistp	1
ptr n; #endif return	1
fastcall functions The keyword	1
fastcall modifier can make	1
accumulators for floating point	1
accumulators if there is	1
aliasing" if you are	1
aliasing" (if valid) can	1
Implementation The CPU dispatch	1
Implementation ..................................................................................................... 126 13.6	1
significantly simply by using	1
significantly just by turning	1
parallelism. The way to	1
parallelism. The gain depends	1
479001600}; if ((unsigned int)n	1
479001600}; ... int i,	1
"Performance Optimization of Numerically	2
type-casted to a pointer	1
type-casted to a wrong	1
x4 = x2 *	1
x4 = x2*x2; double	1
frequency. The core clock	1
frequency. For example, if	1
interpretation or compilation before	1
interpretation on the device	1
(chapter 11) and vector	1
(chapter 12) are more	1
research, not on publicly	1
research, I have developed	1
SIAM 2001. 9.11 Explicit	1
SIAM 2001. Advanced book	1
a[i+1] = Induction; ;	1
a[i+1] = Induction; Induction++;	1
x-xxx---- a-(-b)=a+b a-a =	1
x-xxx---- a*b*c=a*(b*c) a+b+c+d =	1
send data from a	1
send your programming questions	1
string[100], *p = string;	2
SSSE3 a few more	1
SSSE3 _mm_perm_epi8 32 1	1
expressions, but no compiler	1
expressions, even though the	1
CriticalFunctionType * CriticalFunction =	1
CriticalFunctionType CriticalFunction_Dispatch; // Function	1
71). The conclusion is	1
71). In this case	1
ASCII string to lower	1
ASCII form. A disadvantage	1
overlapping or aliasing, but	1
overlapping calculations. The loop	1
computationally intensive may very	1
computationally intensive program is	1
executes a series of	1
executes three to seven	1
window of a debugger.	1
window or makefile. You	1
ten times and stores	1
ten years old. The	1
Structure of 4 floats	1
Structure and class objects	1
jobs. The context switches	1
jobs. For example, one	1
please don't send your	1
please install this important	1
Unions A union is	1
Unions .................................................................................................................... 55 7.25	1
AMD: "Software Optimization Guide	1
AMD: "AMD64 Architecture Programmer’s	1
((a*x+b)*x+c)*x+d x*x*x*x*x*x*x*x = ((x2)	1
((a*x+b)*x+c)*x+d x*x*x*x*x*x*x*x = ((x2)2)2	1
9.2 Cache organization It	1
9.2 Cache organization ...................................................................................................	1
1024 bits is likely	1
1024 bytes, so we	1
programmed. But if the	1
programmed. Therefore, it is	1
Aligned arrays // Define	1
Aligned operands means that	1
past the end of	1
past history of that	1
9.6 Dynamic memory allocation	2
object's class or structure.	1
object's class. Make the	1
b2, y1, y2; y1	1
b2, y1, y2, reciprocal_divisor;	1
partial template specialization is	1
partial flags stall because	1
(a+b)+(c+d) a*b+a*c=a*(b+c) a*x*x*x +	2
(16 or 32 bytes).	1
(16 bits), unless the	1
xor mov $B1$2: mov	1
xor eax,eax. This is	1
again, that most software	1
again, but it would	1
9.9 Access data sequentially	2
resolve any branch misprediction	1
resolve compatibility problems. Software	1
context. The keyword static,	1
context. It is possible	1
(May use a table	2
131. Intel Performance Primitives	1
131. AMD LIBM library.	1
goal is to make	1
goal of 18 software	1
discovered that there are	1
discovered that many common	1
Exp(float x) { float	1
Exp(float x) { __declspec(align(16))	1
9.8 Strings Text strings	1
9.8 Strings ...................................................................................................................... 96	1
_MSC_VER and not __INTEL_COMPILER	1
_MSC_VER // If Microsoft	1
16.3 Worst-case testing Most	1
16.3 Worst-case testing ................................................................................................	1
chance of going either	1
chance that the break	1
manipulated to fake an	1
manipulated with C functions	1
c+b can be reused	1
c+b will generate an	1
override the CPU dispatching	1
override public symbols, but	1
branches, as explained in	1
branches, provided that the	1
applications, but it is	1
applications, but not always	1
developed a test tool	1
developed as C++ compilers.	1
7.29 Threads Threads are	1
7.29 Threads .................................................................................................................. 60	1
CriticalFunction. If your optimization	1
CriticalFunction. You cannot avoid	1
discusses how to make	1
discusses how to overcome	1
#elif INSTRSET == 8	1
#elif INSTRSET == 5	1
7.26 Overloaded functions The	1
7.26 Overloaded functions ..............................................................................................	1
"Instruction tables". There are	1
"Instruction tables". Tips about	1
400 bytes. first byte	1
400 here. Any code	1
invariant code motion A	1
invariant code motion Induction	1
c*x + d =	2
carefully to make sure	1
carefully optimized and fine-tuned	1
CriticalInnerFunction is called. The	1
CriticalInnerFunction () { //	1
a/1=a xxxxxxxxx 0/a=0 ---x---xx	1
a/1=a x-xxx-x-- 0/a=0 ---xx--xx	1
__m128 defines a 128	1
__m128 s; s =	1
operator; and you can	1
operator; you can clear	1
subexpression. A constant can	1
subexpression. For example, b*2.0/3.0	1
freed when the function	1
freed before the function	1
operator, or an over-	1
operator, which can only	1
p->Hello(); } // Non-polymorphic	1
p->Hello(); p = &Object2;	1
CPUs: use the core	1
CPUs: An optimization guide	1
0's when false. The	1
0's gives zero. An	1
chip that can be	1
chip can be a	1
operator. The code for	1
operator. The & operator	1
proceed in a standardized	1
proceed unattended. Uninstallation should	1
CriticalFunction_386(int parm1, int parm2)	2
scientific vector processors. Henry	1
scientific computing, but for	1
biased allows us to	1
biased binary integer, and	1
minor error in the	1
minor increase in develop-	1
screen. There is no	1
screen. However, such applications	1
market. But the cost	1
market. Such a list	1
aligned(16))) Assume pointer is	1
aligned(16))) __declspec( align(16)) __attribute((	1
justified in case of	1
justified for general function	1
exit the loop. The	1
exit may not be	1
cos(x); } z =	1
cos(x); z = y	1
having the same name,	1
having different types. A	1
for-loop or while-loop is	1
for-loop has three clauses:	1
char, short int, float.	1
char, signed or unsigned	1
a/a=1 --------x a/1=a x-xxx-x--	1
a/a=1 ----x---x a/1=a xxxxxxxxx	1
legal issue. See my	1
legal issue, as you	1
resource, such as dynamically	1
resource, especially in 32-bit	1
parallelization. The Gnu, Intel	1
parallelization. Supports vector intrinsics	1
keeping a CPU dispatcher	1
keeping data together. Data	1
sampling: The profiler tells	2
12.5. Vector classes defined	1
12.5. Aligned arrays //	1
reduces the code to:	1
reduces example 15.1a to	1
non-member functions. 80 Unfortunately,	1
non-member function, means that	1
vectorized, because a float	1
vectorized, but the code	1
y=temp;} // Check if	1
y=temp;} int r, c;	1
influences in order to	1
influences are removed, all	1
explains the logic behind	1
explains why bookkeeping is	1
emulate the while loop	1
emulate a 256-bit vector	1
four, we will have	1
four, depending on the	1
believe that the portability	1
believe that software performance	1
stdint.h or inttypes.h is	1
stdint.h char 8 -128	1
elimin., integer Common subexpression	1
elimin., float Register variables,	1
instance. The function code	1
instance. Non-static members of	1
TransposeCopy(double a[SIZE][SIZE], double b[SIZE][SIZE])	2
insufficient information about pointer	1
insufficient amount of RAM,	1
dangers of a relatively	1
dangers to be aware	1
aligned. It is preferred	1
aligned. See page 120	1
external libraries. www.agner.org/optimize/#vectorclass All	1
external clock. This gives	1
"Error: Index out of	2
smmintrin.h (Gnu) AES, PCLMUL	1
smmintrin.h SSE4.2 nmmintrin.h (MS)	1
frameworks. The .NET framework	1
frameworks. This is often	1
Monday, etc. are defined	1
Monday, Tuesday, Wednesday, Thursday,	1
X, 32-bit and 64-bit.	1
X, unless you are	1
GNU General Public License,	1
GNU Free Documentation License	1
127. The Intel compilers	1
127. The calculation of	1
FuncType * SelectAddMul_pointer =	1
FuncType SelectAddMul, SelectAddMul_SSE2, SelectAddMul_SSE41,	1
C1::f } 73 Without	1
C1::f directly without using	1
Splitting up a function	2
Algorithms that are inherently	1
Algorithms that rely heavily	1
-mAVX /arch:AVX /QaxSSE3, etc.	1
-mAVX -axSSE3, etc. (Intel	1
worry about loss of	1
worry much about overflow	1
instruction. The CPU supports	1
instruction. Programmers that have	1
x^2 // x^4 //	1
x^2 float x4 =	1
disabled in the final	1
disabled will crash the	1
CPU-specific and each CPU	1
CPU-specific versions of the	1
8.26b void Func(int a[],	1
8.26b compiled to assembly:	1
preprocessing directives that select	1
preprocessing macro INSTRSET is	1
strides. Therefore, you don't	1
strides. Uncached memory store	1
15. If i is	1
15. C++ is definitely	1
develop and market the	1
develop and publish a	1
Full template specialization for	2
(N & N-1)==0 if	1
(N & (N-1)) return	1
Enable the AVX or	1
Enable exception for floating	1
cases: The CPU dispatcher	1
cases: If part of	1
non-AVX code because of	1
non-AVX code. This can	1
a+(b+c) - n.a. a*b+a*c	1
a+(b+c) - a*b+a*c =	1
mouse. The .NET framework	1
mouse. This task must	1
www.amd.com. 163 Internet forums	1
www.amd.com. Advices on optimization	1
-56 which will generate	1
-56 rather than 200.	1
difficult. The functions must	1
difficult. On the other	1
-msse3 -mssse3 -msse4.1 -mAVX	1
-msse3 /arch:SSE3 -mssse3 /arch:SSSE2	1
(32-bit or 64-bit systems).	1
(32-bit mode): ; Example	1
values. The choice of	1
values. Which of these	1
/arch:SSE2 -msse2 SSE3 instruction	1
/arch:SSE2 -msse2 /arch:SSE2 -msse2	1
Vec8s 16 8 unsigned	1
Vec8s a, b, c;	1
CParent is a template	1
CParent : public CGrandParent	1
Adding the compiler option	1
Adding 1 to 127	1
developer.intel.com. Many advices on	1
developer.intel.com. AMD: "AMD64 Architecture	1
frame- pointer No runtime	1
frame- pointer -fomit- frame-	1
<stdio.h> // define fprintf	1
<stdio.h> #include <asmlib.h> void	1
9.11 Explicit cache control	2
relocations in the code	2
NAN (not a number).	1
NAN (Not A Number)	1
9.10 Cache contentions in	2
2" The dispatching to	1
2" Here CParent is	1
sum; for (int i	1
sum; } Here, each	1
12.10 Conclusion There is	1
12.10 Conclusion .......................................................................................................... 120	1
semaphores, mutexes, etc. is	1
semaphores, mutexes and message	1
Multiplication and division take	1
Multiplication takes 4 -	1
N&(N-1) is 0. The	1
N&(N-1) gives the value	1
assembly: ALIGN 4 PUBLIC	2
regularly. Intel: "Intel® C++	1
regularly. AMD: "Software Optimization	1
vacant then the DLL	1
vacant spaces. This is	1
early implementations of Pascal	1
early planning stage that	1
non-polymorphic functions in the	1
non-polymorphic member functions. The	1
3.3; // Polynomial coefficients	1
3.3; double Table[100]; int	1
users. In some cases,	1
users. Firewalls, virus scanners	1
extern "C" int CriticalFunction	1
extern "C" declaration and	1
heap. The space is	1
heap. The heap manager	1
formats can be expressed	1
formats should be used.	1
ruled out or if	1
ruled out by the	1
reused again and again.	1
reused elsewhere. In this	1
Organize the data with	1
Organize the data into	1
CParent<CChild1> { has the	1
CParent<CChild1> { public: void	1
14.12b and 14.13b works	1
14.12b int list[300]; int	1
types: long long, double.	1
types: char, short int,	1
FDIV bug is a	1
FDIV bug causes floating	1
decimal point is 1.	1
decimal point in your	1
nfac = 1.f; for	1
nfac *= n+1; //	1
connections. Open files and	1
connections. Temporary files that	1
PC. Nevertheless, it is	1
PC. Similarly, we are	1
hacks and direct hardware	1
hacks that violate or	1
24 6 Development process......................................................................................................	1
24 dramatically for very	1
suffer from poor branch	1
suffer from mispredictions. 44	1
throw. It is more	1
throw. In fact, the	1
differently. The link to	1
differently. A negative integer	1
align(16)) __attribute(( aligned(16))) Assume	1
align(16)) __attribute(( aligned(16))) __declspec(	1
element, bits Number of	2
Often, it is sufficient	1
Often, it takes more	1
Replacing a function with	1
Replacing two comparisons by	1
b*x*x + c*x +	2
language". The method is	1
language". While we are	1
that's about the only	1
that's what they are.	1
13.3 Difficult cases In	1
13.3 Difficult cases........................................................................................................ 124	1
inherent performance costs to	1
inherent support for 64-bit	1
-static Generate assembly listing	1
-static /MT 160 /Qparallel	1
ArrayOfStructures[100]; This reordering has	1
ArrayOfStructures[100]; Here, there are	1
13.2 Model-specific dispatching There	1
13.2 Model-specific dispatching ....................................................................................	1
comparison is likely to	1
comparison of doubles by	1
hint and the compiler	1
hint about no pointer	1
13.5 Implementation The CPU	1
13.5 Implementation ..................................................................................................... 126	1
13.4 Test and maintenance	2
13.7 CPU dispatching in	2
code" in manual 5:	1
code" actually implies more	1
course. A branch that	1
course. It is the	1
<dvec.h> // Define vector	2
loop, the if statement	1
loop, for example when	1
number, or no offset	1
number, which is 15	1
case: // Example 7.31a	1
case: // Example 7.45	1
rolling out the loop	2
loop: for (i =	1
loop: // Example 14.13c	1
2.0f; } 115 from	1
2.0f; x.i |= 0x80000000;	1
52. The member functions	1
52. You may choose	1
supporting multiple platforms or	1
supporting multi-threaded software are	1
thrown by F2 and	1
thrown exceptions are indeed	1
invoking the compiler from	1
invoking the overhead of	1
{1, 1, 2, 6,	2
construct an object with	1
construct obscure examples where	1
compiled. This is the	1
compiled. #if directives are	1
transpose(double a[SIZE][SIZE]) { //	2
Checking what the compiler	2
elimination, constant propagation, and	1
elimination, constant propagation, etc.	1
StringLength; for (i =	1
StringLength; i > 0;	1
integration, mixed language 11	1
integration, web application integration,	1
kilobytes at a time.	1
kilobytes Time per element	1
got low priority. Especially	1
got RISC cores, vector	1
locally in the thread	1
locally or remotely. If	1
it, for example if	1
it, it may be	1
32. This is a	1
32. In 64-bit systems	1
minimum value maximum value	1
minimum supported instruction set	1
thread-specific data is to	1
thread-specific data and make	1
a[2]; for (i =	1
a[2]; a[0] = 1;	1
can't be reached with	1
can't have public variables	1
Vec4f polynomial (Vec4f const	1
Vec4f Vec2d Vec8f Vec4d	1
(2) use unsigned integers	1
(2) find the GOT	1
paragraph and manual 3:	1
paragraph described a mechanism	1
remain unchanged. The problem	1
remain locked after the	1
scanners to consume more	1
scanners and other protection	1
calculates the sum of	1
calculates four consecutive terms	1
databases, etc. The efficiency	1
databases, network and other	1
C++". Addison-Wesley, 1996. These	1
C++". Addison-Wesley. Third Edition,	1
2008 version). This wasteful	1
2008 R2 as well	1
/Gy -ffunction- sections SSE	1
/Gy -ffunction- sections /Gy	1
Assuming that the values	1
Assuming that processor model	1
search, is fast enough.	1
search, or even a	1
......................................................................... 128 13.7 CPU	1
......................................................................... 130 14 Specific	1
constructs are costly and	1
constructs Most programmers have	1
screen resolutions, different system	1
screen resolutions, etc. Accessibility	1
Loops The efficiency of	1
Loops with a very	1
Plus2 (int * p)	1
Plus2 (&a); The compiler	1
a*0 = 0 -	2
a*1 = a -	2
"vectorclass.h" // vector class	1
"vectorclass.h" // Define vector	1
b[size], i; ... for	1
b[size], c[size]; float register	1
Table[100]; int x; for	1
Table[100]; int x; const	1
describe some of the	1
describe various ways to	1
GOT. The symbol interposition	1
GOT. Another possibility is	1
dynamic_cast more time-consuming than	1
dynamic_cast operator is used	1
Finding the biggest time	2
120, 720, 5040, 40320,	2
uninitialized or come from	1
uninitialized variables that may	1
77 Pointer aliasing When	1
77 8.4 Obstacles to	1
string. The old C-style	1
string. In the future	1
74 x x x	1
74 8.3 Obstacles to	1
73 and 72 for	1
73 Without optimization, the	1
Object2; CChild1 * p1;	1
Object2; CHello * p;	1
destination both have addresses	1
destination array. But the	1
lookup: // Example 7.29b	1
lookup: // Example 14.2b	1
72 for discussions. Turn	1
72 This may be	1
(Tuesday | Wednesday |	2
b:2; int c:2; };	2
string; int i, StringLength;	1
string; while (*p !=	1
putting the right data	1
putting the smallest members	1
14.14b double a, b;	1
14.14b automatically but only	1
non- standardized details in	1
non- sequential order. If	1
15.1c. We can only	1
15.1c. Calculate integer power,	1
73). It is therefore	1
73). Current compilers are	1
....................................................... 20 3.7 File	1
....................................................... 120 12.10 Conclusion	1
mutexes, etc. is considerable.	1
mutexes, database connections, etc.	1
volatile. The volatile keyword	1
volatile. This prevents the	1
relocation. The DLLs are	1
relocation. All public functions	1
(~a&c) | (b&c) =	1
(~a&c) a&b&c&d = (a&b)&(c&d)	1
90% of the CPU	1
90% chance that the	1
MultiplyBy in this example	1
MultiplyBy (int x) {	1
suited for the project	1
suited for vector operations.	1
Developer’s Manual", Volume 1,	1
Developer’s Manual", Volume 2A	1
y1, y2; y1 =	1
y1, y2, reciprocal_divisor; reciprocal_divisor	1
14.14a with 14.14b automatically	1
14.14a double a, b;	1
settings and different user	1
settings are lost. It	1
Compile for a specific	1
Compile once for each	1
Provoke cache misses by	1
Provoke branch mispredictions by	1
import table and possibly	1
import table or a	1
turns out to be	2
0x4700. These addresses all	1
0x4700. Reading again from	1
x---- ----- ~(~a)=a x-xxxxx--	1
x---- x---- ----- ~(~a)=a	1
Overcoming the drawbacks of	2
a*1=a (-a)*(-b)=a*b a/a=1 ----x---x	1
a*1=a x-xxxxx-x (-a)*(-b)=a*b ---xxx---	1
Take the example: //	1
Take user feedback seriously.	1
shuffling, such as many	1
shuffling, packing, unpacking needed.	1
priorities to different tasks.	1
priorities then the user	1
range"; } else {	1
range"; 134 } else	1
corrections and suggestions for	1
corrections for sign and	1
safe. This safety problem	1
safe. In other words,	1
supported. The calculation of	1
supported. For example, use	1
anonymous object. The compiler	1
anonymous namespace. 3. The	1
pure. This allows common	1
pure. Virtual functions and	1
SSE4.2 string search instructions	1
SSE4.2 nmmintrin.h (MS) smmintrin.h	1
clock; } // Or	1
clock; __cpuid(dummy, 0); DontSkip	1
12.4a where current compilers	1
12.4a so that we	1
matrices, clock cycles per	2
inconsistent and sometimes unacceptably	1
inconsistent results if the	1
bc); // Store the	1
bc); // OR the	1
join all source files	1
join them into one	1
range. The next line	1
range. This may typically	1
c:2; }; char abc;	1
c:2; }; Bitfield x;	1
Value of a will	1
Value of b will	1
CGrandParent { public: void	2
two); // Multiply b	2
-- - - -	1
-- - xx x	1
bypassed by any of	1
bypassed when the virtual	1
drivers, interrupt service routines,	1
drivers, configuration files and	1
-0 } It is	1
-0 (zero with sign	1
accelerator card for other	1
accelerator card. Some systems	1
3.10 Graphics A graphical	1
3.10 Graphics ................................................................................................................. 21	1
3.11 Other system resources	2
increases the size of	1
increases the amount of	1
3.13 Memory access Accessing	1
3.13 Memory access....................................................................................................... 22	1
3.14 Context switches A	1
3.14 Context switches..................................................................................................... 22	1
3.15 Dependency chains Modern	1
3.15 Dependency chains ................................................................................................	1
3.16 Execution unit throughput	2
Sum1 has an implicit	1
Sum1 slightly more efficient	1
a*x*x*x + b*x*x +	2
0x20; If the length	1
0x20; 46 A common	1
TILESIZE // Loop r1	1
TILESIZE = 8; //	1
expression, or first in	1
expression, but none of	1
consumers ................................................................................ 16 3.1	1
consumers 3.1 How much	1
CPU, an insufficient amount	1
CPU, which counts at	1
&Object1; p1->Hello(); CChild2 *	1
&Object1; p->NotPolymorphic(); p->Hello(); p	1
............................................................................. 158 18 Overview	1
............................................................................. 84 9 Optimizing	1
exp(x) for small x	2
programming. The CPU dispatcher	1
programming. 13.3 Difficult cases	1
time1; // This is	1
time1; long long timediff[NumberOfTests];	1
events, for example every	1
events, such as the	1
achieved more efficiently by	1
achieved when none of	1
<emmintrin.h> // Define SSE2	1
<emmintrin.h> static inline int	1
2.8 Overcoming the drawbacks	2
answers to your programming	1
answers in the relevant	1
starting a new software	1
starting and stopping threads.	1
disadvantages: The unrolled loop	1
disadvantages: It is difficult	1
2.3 Choice of operating	2
ahead of time and	1
ahead of time so	1
inserted in the final	1
inserted UnusedFiller in the	1
2.2 Choice of microprocessor	2
/arch:SSE -msse SSE2 instruction	1
/arch:SSE -msse /arch:SSE -msse	1
2.1 Choice of hardware	2
2.0 This method is	1
2.0 / 3.0; The	1
40320, 362880, 3628800, 39916800,	2
Func(int); const int size	2
invalidate the cache. The	1
invalidate each other's caches	1
opposite of register is	1
opposite order of the	1
itself, and the cost	1
itself, during installation of	1
2.7 Choice of user	2
a[1000]; float b[1000]; };	1
a[1000]; F1(a); } else	1
2.6 Choice of function	2
S. Goedecker and A.	1
S. Warren, Jr.: "Hacker's	1
environment block. Thread-local storage	1
environment (IDE) supports multiple	1
F2(b); } } Using	1
F2(b); } } Here	1
handles this code. For	1
handles eight elements at	1
2.4 Choice of programming	2
note that this method	1
note that my optimization	1
others are not. Supports	1
others have done the	1
needs. The search for	1
needs. 9.8 Strings Text	1
sar add mov add	1
sar ebx,1 adds this	1
("internal"))) __attribute__ ((visibility ("internal")))	1
("internal"))) Vectorize #pragma vector	1
8.15a were float instead	1
8.15a struct S1 {double	1
footprint is unreasonably large.	1
footprint than the alternative	1
14.13b int list[300]; int	1
14.13b works only if	1
namespaces. Therefore, you should	1
namespaces. 65 8 Optimizations	1
preventing program errors in	1
preventing illegitimate copying. The	1
Lowest version int CriticalFunction_386(int	2
Saturday = 0x40 };	1
Saturday }; Weekdays Day;	1
a*b+a*c=a*(b+c) a*x*x*x + b*x*x	2
resolutions, different system color	1
resolutions, etc. Accessibility guidelines	1
So the address of	1
So please don't send	1
9.6a const int SIZE	1
9.6a Time per element	1
a*(b+c) - n.a. x*x*x*x*x*x*x*x	1
a*(b+c) - -(-a) =	1
events that are not	1
events as task switches	1
__fastcall. The implicit 'this'	1
__fastcall. Function parameters are	1
a+0 = a -	2
Delays in program execution	1
Delays or glitches in	1
Report on C++ Performance	1
Report on C++ Performance".	1
(bb[i] * cc[i]); }	1
(bb[i] > 0) ?	1
specified. The code will	1
specified. Insert an explicit	1
prototype to tell the	1
prototype CriticalFunctionType CriticalFunction_Dispatch; //	1
39 shows how you	1
39 matrix[i][j] += x;	1
let's look at the	1
let's say that you	1
(Day & (Tuesday |	1
(Day == Tuesday ||	1
visible in the scope	1
visible at all to	1
Kbytes to 2 Mbytes.	1
Kbytes and a level-2	1
proxy is smaller and	1
proxy for the main	1
Microprocessors with the SSE	1
Microprocessors with out-of-order capabilities	1
105. Floating point addition	1
105. 8.7 Checking what	1
recently than to access	1
recently 4 ?Func2@@YAXQAHAAH@Z ENDP	1
creating and deleting the	1
creating and deleting containers.	1
order(i); matrix[j][0] = i;	1
order(i); list[j].a = list[j].b	1
refers to the situation	1
refers to. For example:	1
floppy disk. A big	1
floppy disks and USB	1
underflow. The range of	1
underflow. The fact that	1
37 A compiler has	1
37 7.8 Member pointers.......................................................................................................37	1
36 C++ as 'this'.	1
36 7.7 Function pointers	1
3) << 4) |	1
3) <<6 ); 7.26	1
contrived example, but the	1
contrived examples exist. Therefore	1
Manual on using the	1
Manual 3: "The microarchitecture	1
Excessive use of templates	1
Excessive loop unrolling is	1
FuncA and FuncB, then	1
FuncA (int * p)	1
web application integration, mixed	1
web browsing that previously	1
occur, but the calculation	1
occur, but unfortunately this	1
reorder instructions for the	1
reorder instructions without help	1
microseconds to execute then	1
microseconds as a time	1
Standard C++ imple- mentations	1
Standard Template Library (STL)	1
const_cast operator is used	1
const_cast operator here is	1
though. In some cases	1
though. Some instructions are	1
compiler: unsigned __int64 64-bit	1
compiler: __int64 64 -263	1
y) { if (y)	1
y) { union {	1
/MT -msse3 /arch:SSE3 -mssse3	1
/MT 160 /Qparallel -parallel	1
overwritten, and even worse,	1
overwritten, possibly in a	1
[esp+8] DWORD PTR [edx]	1
[esp+8] eax, eax edx,	1
annoyingly long and irregular	1
annoyingly high for programs	1
list[size]; int i, j;	1
list[size]; ... if (i	1
license Table 12.4. Vector	1
license included in compiler	1
y1 = a1 *	1
y1 = a1 /	1
y2 = a2 *	1
y2 = a2 /	1
swapd(x,y) {temp=x; x=y; y=temp;}	2
int)i < 10) {	1
int)i >= (unsigned int)size)	1
CriticalFunction_SSE2(int parm1, int parm2)	2
GHz then the length	1
GHz CPU. Should we	1
false. The value of	1
false. Likewise, you cannot	1
Multithreading The clock frequency	1
Multithreading works more efficiently	1
New versions are produced	2
CriticalFunctionDispatch(void) { // Returns	1
CriticalFunctionDispatch(void) __asm__ ("CriticalFunction"); typeof(CriticalFunction)	1
methods. The most common	1
methods. If you are	1
became available because the	1
became available. It should	1
if, a level-2 cache	1
if, and only if,	1
computers. At this time,	1
computers. Today, the choice	1
x.abc = A |	1
x.abc = (A &	1
Worst-case testing Most performance	1
Worst-case testing ................................................................................................ 157	1
Operations that are only	1
Operations that are missing	1
named YMM in the	1
named MKL, VML and	1
a*0=0 a*1=a (-a)*(-b)=a*b a/a=1	1
a*0=0 --xxxx-xx a*1=a x-xxxxx-x	1
p2 = &Object2; p2->Hello();	1
p2 having different types.	1
p1 and p2 having	1
p1 = &Object1; p1->Hello();	1
major platforms. However, C++	1
major platforms. Pascal has	1
internet or intranet for	1
internet forums and newsgroups	1
p; int i; p	1
p; p = &Object1;	1
lrintf and lrint. Unfortunately,	1
lrintf (float const x)	1
resulting code will be	1
resulting machine code becomes	1
a[c][r]); // swap elements	1
a[c][r]); void test ()	1
math. Memory copying. There	1
math. Libraries for high	1
2048 bytes = 4	1
2048 230.7 513 513	1
3.5; c = d	1
3.5; Here, the constant	1
DLLs are relocated by	1
DLLs use relocation. The	1
Unix systems allow up	1
Unix applications and the	1
Lookup tables are particular	1
Lookup tables can be	1
differ a lot in	1
differ then you will	1
InstructionSet(); // Set pointer	2
F1() { C1 x;	1
F1() throw(); This allows	1
safety is to store	1
safety problem can be	1
predefined vector classes are	1
predefined vector classes Fortunately,	1
variable-size array with alloca:	1
variable-size arrays with alloca.	1
obj1; C0 * p	1
obj1; p->f(); // Virtual	1
Codes", by S. Goedecker	1
Codes", SIAM 2001. Advanced	1
summarized in table 8.1.	1
summarized below. Intrinsic function	1
small. The number of	1
small. Are objects numbered	1
................................................................................ 16 3.1 How	1
................................................................................ 61 7.31 Other	1
buffer. It should never	1
buffer. Contentions in the	1
list[size], sum = 0;	1
list[size], sum1 = 0,	1
"asmlib.h" // Define function	1
"asmlib.h" // Lowest version	1
ArraySize = 1000; int	1
ArraySize by the value	1
Live range analysis The	1
Live range analysis Join	1
mask); // Store the	1
mask); 110 // AND	1
suffixes are listed in	1
suffixes such as e.g.	1
programmer. There is a	1
programmer. 79 Floating point	1
x-xxxxxx- a*0=0 --xxxx-xx a*1=a	1
x-xxxxxx- x-xxxx-x- x-xxxxxxx xxxxxxxxx	1
name. In the Windows	1
name. #define directives when	1
third-party graphics framework between	1
third-party profilers such as	1
(a+b)+c=a+(b+c) --xx----- (a&&b) ||	1
(a+b)+c=a+(b+c) a+b+c=c+b+a a+b+c+d =	1
audio and video processing,	1
audio or video should	1
arguments are sure to	1
arguments while pointers and	1
infinite loop if powN	1
infinite loop. The effect	1
flow. However, this did	1
flow. Failure to do	1
worse, it can overwrite	1
worse, many software products	1
miss can be expected.	1
miss on a store	1
unsafe code is limited	1
unsafe because serious errors	1
away. It is common	1
away. Note that volatile	1
movements of objects in	2
((x2) 2) 2 -	1
((x2) 2) 2 a+a+a+a=a*4	1
windows, mutexes, database connections,	1
windows, graphic brushes, etc.	1
pressing a key or	1
pressing a button or	1
Factors that make vectorization	2
price, and in most	1
price, compatibility, second source,	1
Jumps can be avoided	1
Jumps between CPU cores.	1
maintaining a new branch	1
maintaining such code is	1
Nevertheless, the bitwise operators	1
Nevertheless, it is possible	1
sound processing Memory and	1
sound processing, and mathematical	1
servers that run many	1
servers should be tested	1
utility. The conclusion is	1
utility. It supports 32-bit	1
executable. SSE2 is the	1
executable. Most compilers offer	1
controlled. The network access	1
controlled. Small hand-held devices	1
literature for more complicated	1
literature on algorithms and	1
512; // number of	2
precautions to account for	1
precautions for speeding up	1
smarter ways of doing	1
smarter ways of organizing	1
2001. 9.11 Explicit cache	1
2001. Advanced book on	1
Current compilers are not	1
Current CPUs have only	1
concentrated on CPU efficiency	1
concentrated on arranging data	1
aa[i] = (bb[i] >	1
aa[i] = bb[i] +	1
null reference to provoke	1
null reference. This will	1
capable of register renaming	1
capable of making two	1
FuncC(i); } This loop	1
FuncC(i); FuncB(i+1); FuncC(i+1); }	1
updating. The change of	1
updating. The update process	1
MOVNTDQ require that the	1
MOVNTDQ _mm_stream_si128 SSE2 Table	1
renaming and doing multiple	1
renaming mechanism works only	1
considering is the D	1
considering whether a particular	1
worthwhile to unroll the	1
worthwhile to invest more	1
a-(-b)=a+b a-a = 0	1
a-(-b)=a+b ---xxx-x- a+0=a x-xxxxxx-	1
f(); }; class C1	1
f(); }; void g()	1
separately. The fallacy of	1
separately. The allocation, deallocation	1
patterns with fixed strides.	1
patterns containing multiple streams	1
93. Avoid the function	1
93. 7.10 Arrays An	1
lowest of the compiled	1
lowest instruction set not	1
EXCEPTION_FLT_OVERFLOW ? EXCEPTION_EXECUTE_HANDLER :	1
EXCEPTION_FLT_OVERFLOW 0xC0000091L void MathLoop()	1
constructor, if any, is	1
constructor, an overloaded assignment	1
syntax: __asm fld qword	1
syntax: __asm ("fldl %1	1
1.2; // everything is	1
1.2; // Mixing float	1
26. The heap space	1
26. Avoid global and	1
parentheses can be calculated	1
parentheses manually. The effect	1
check. It does not	1
check. There are a	1
experiments in order to	1
experiments on seven different	1
................................................................................................. 103 12 Using	1
................................................................................................. 132 14.2 Bounds	1
tables". There are certain	1
tables". Tips about how	1
jl $B1$2 is the	1
jl $B1$3: pop ret	1
computation time is determined	1
computation time. 4 Performance	1
thread-local storage of static	1
thread-local storage p. 28)	1
date. A more realistic	1
date. Mac The libraries	1
physics processor for calculating	1
physics processing unit intended	1
first, then all the	1
first, then d+e, then	1
below) then it may	1
below) 16.1 Using performance	1
eliminated. Loop unrolling also	1
eliminated. Code caching will	1
c.load(cc+i); a = select(b	1
c.load(cc+i); // result =	1
x-xxxxxxx xxxxxxxxx xxxxxxx-x xxxxxxxxx	1
x-xxxxxxx ---x----- x--xx---- (a&&b)||(a&&!b)=a	1
Unrolling the loop by	1
Unrolling a loop becomes	1
hyperthreading. If so, then	1
hyperthreading. On the contrary,	1
bytes, so we can	1
bytes, 4 ways, with	1
(*.lib, *.a) or dynamic	2
irrelevant software installed, a	1
irrelevant within a year	1
careful when swapping the	1
careful optimization. A mixed	1
compression and cryptography (www.intel.com).	1
compression Most compilers include	1
intervals are short. In	1
intervals which may interfere	1
(c2 = r1; c2	1
(c2 = c1; c2	1
immediate response to pressing	1
immediate responses to simple	1
Object1; CChild2 Object2; CChild1	1
Object1; C2 Object2; CHello	1
etc.) have little-endian storage,	1
etc.) inside the loop.	1
64-bit. Supports OpenMP and	1
64-bit. They have not	1
indirect function feature is	1
indirect function" has been	1
(-a==-b)=(a==b) ---xx---- (a+c==b+c)=(a==b) ----x----	1
(-a==-b)=(a==b) ---xx---- (-a>-b)=(a<b) ---xx---x	1
hyperthreading, then try to	1
hyperthreading, but the performance	1
exponent, and the most	1
exponent, and fffff is	1
FuncA(i); } else {	1
FuncA(i); FuncC(i); FuncB(i+1); FuncC(i+1);	1
cross-platform compatibility is not	1
cross-platform portability. Unfortunately, the	1
{temp=x; x=y; y=temp;} //	1
{temp=x; x=y; y=temp;} int	1
decomposition. It is important	1
decomposition. Functional decomposition here	1
parameter: // Example 7.42	1
parameter: template <typename MyChild>	1
determines the program flow	1
determines whether the second	1
(properties) The data members	1
(properties) ............................................................................ 51 7.19	1
ABC = 123; are	1
ABC 123 and static	1
comments about how the	1
comments generated by the	1
..................................................................................................................... 38 7.11 Type	1
..................................................................................................................... 163 20 Copyright	1
profitable to use vectorized	1
profitable (see page 70).	1
behind the program or	1
behind the C++ syntax	1
Technical Report on C++	1
Technical University of Denmark.	1
Neither is it unusual	1
Neither can you assume	1
calculation. In most cases,	1
calculation. However, the out-of-order	1
const)) Assume function does	1
const)) __attribute(( const)) Assume	1
test, but is less	1
test, maintain and verify	1
-ffunction- sections SSE instruction	1
-ffunction- sections /Gy -ffunction-	1
-msse SSE2 instruction set	1
-msse /arch:SSE -msse SSE2	1
Initialize to zero //	1
Initialize loop counter outside	1
indices or by keys	1
indices when you want	1
s0 = 0, s1	1
s0 += a[i]; s1	1
/FA -S - masm=intel	1
/FA -S Generate map	1
marketing of 64-bit software,	1
marketing reasons. This may	1
parm2); // Function prototype	1
parm2); } int main()	1
--xx----- (a&&b) || (a&&c)	1
--xx----- x-xxx---x x-xxx---x x	1
20, columns = 32;	1
20, columns = 50;	1
conflicting with the requirements	1
conflicting considerations of efficiency,	1
20; i += 2)	1
20; i++) { if	1
61 function calls to	1
61 7.31 Other cases	1
looking at a link	1
looking name ?Func@@YAXQAHAAH@Z is	1
coarse-grained parallelism and fine-grained	1
coarse-grained parallelism than with	1
matrix[c][r] at its mirror	1
matrix[c][r] above the diagonal	1
-mssse3 -msse4.1 -mAVX -axSSE3,	1
-mssse3 /arch:SSSE2 -msse4.1 /arch:SSE4.1	1
isolate the most critical	1
isolate the hot spot	1
Let me explain the	1
Let me explain this	1
question. You may choose	1
question. For example, a	1
x^n // sum, initialize	1
x^n } return add_elements(s);	1
treats different brands of	1
treats non-Intel CPUs in	1
topics ......................................................................................... 132 14.1	1
topics 14.1 Use lookup	1
(3) look up the	1
(3) trap integer overflow	1
table: // Example 14.3b	1
table: // Example 14.1b	1
unstable or if the	1
unstable due to interrupts	1
60 The cost of	1
60 7.30 Exceptions and	1
iterations. The advantage of	1
iterations. Here the iteration	1
Join identical branches The	1
Join identical branches Eliminate	1
bb[i] + 2; }	1
bb[i] > 0 is	1
sampling requires a CPU-	1
sampling generates too little	1
(memory address) / (line	1
(memory pooling) than to	1
verifying the functionality of	1
verifying and maintaining a	1
3.6 Dynamic linking and	2
3.4 Automatic updates Many	1
3.4 Automatic updates ....................................................................................................	1
log(b[i]) + log(c[i]); //	1
log(b[i]) + log(c[i]);. This	1
Now, the factor to	1
Now, according to the	1
a+a+a+a=a*4 -(-a)=a - -	1
a+a+a+a=a*4 -(-a)=a --xxxxxx- a-(-b)=a+b	1
doubt how big a	1
doubt obtained with a	1
78). A matrix or	1
78). Adding the compiler	1
v.f are both positive.	1
v.f if both positive	1
manner? If objects are	2
generating overflow. Likewise, it	1
generating denormal numbers in	1
Especially the use of	1
Especially the memory allocation	1
.................................................................................................... 10 2.6 Choice	1
.................................................................................................... 19 3.5 Program	1
3.2 Use a profiler	2
F1(a); } else {	2
Switch between different parts	1
Switch statements are most	1
_mm_set1_epi16(0); // Make a	2
everywhere in the source	1
everywhere by default. Position-independent	1
a&&(b||c) !a && !b	1
a&&(b||c) (a&&!b) || (!a&&b)	1
(a&b) | (~a&c) |	1
(a&b) | (~a&c) a&b&c&d	1
3.3 Program installation The	1
3.3 Program installation ..................................................................................................	1
3.1 How much is	2
randomly one way or	1
randomly around in the	1
Useful for vector operations,	1
Useful when no reasonable	1
3.8 System database It	1
3.8 System database ......................................................................................................	1
3.9 Other databases Many	1
3.9 Other databases .......................................................................................................	1
............................................................................................ 66 8.2 Comparison	1
............................................................................................ 36 7.7 Function	1
mainframe computer. Big supercomputers	1
mainframe computers. Today, the	1
(time before) } printf("\nResults:");	1
(time after) - (time	1
Everything that is said	2
required. The Intel compiler	1
required. See page 73	1
theoretical possibility that such	1
theoretical background is further	1
12.1a. Automatic vectorization const	1
12.1a. Enable the AVX	1
file, is acceptable. 3.6	1
file, especially if the	1
working with sets rather	1
working software users. In	1
pragmas in the code	1
pragmas must be placed	1
use. The installation of	1
use. I am not	1
use, as explained in	1
use, incompatible or error	1
favorable: Small data types:	1
favorable: Larger data types:	1
color settings and different	1
color difference. Newest instruction	1
8192 / 4 =	1
8192 bytes, 4 ways,	1
_mm_cmpgt_epi16(b, zero); // Use	1
_mm_cmpgt_epi16(b, zero); // AND	1
lost. This dilemma can	1
lost. It is not	1
Exceptions and error handling	2
question when efficiency is	1
question without generating overflow.	1
afterwards a BSF (bit	1
afterwards reads or writes	1
Every time a function	1
Every fourth of these	1
denormals-are-zero mode if SSE2	1
denormals-are-zero mode (SSE2): #include	1
declaration. The type of	1
declaration. This is the	1
exceptions: while (i <	1
exceptions: __except (GetExceptionCode() ==	1
read. It is often	1
read. If a template	1
Non-static member functions have	1
Non-static members of the	1
re- allocating when a	1
re- usable library if	1
requiring the same address.	1
requiring many files to	1
{int a; int b;	1
{int a; int b;};	1
branching is done every	1
branching takes time. Dispatch	1
changed. This will allow	1
changed. 7.8 Member pointers	1
belongs to the area	1
belongs to class C1	1
(a&&c) = a&&(b||c) !a	1
(a&&c) || (a&&b&&c) =	1
NumberOfTests = 10; int	1
NumberOfTests times // Time	1
obviously takes time to	1
obviously influenced by the	1
undetected. The principle of	1
undetected. Converting class objects	1
alone in the core.	1
alone compiler when called	1
caller to the called	1
caller through a hidden	1
understanding of the whole	1
understanding of how compilers	1
influence the performance of	1
influence on the efficiency	1
x-xx----- x--x----- ---x----- x---x---x	1
x-xx----- 75 (a&&b) ||	1
Lazy binding can be	1
Lazy binding should therefore	1
Volatile to prevent optimizing	1
Volatile The volatile keyword	1
lock a thread to	1
lock a container for	1
allowed. The code examples	1
allowed. Non-public distribution to	1
today will be mainstream	1
today where cache size	1
(double)(signed int)u; // Faster,	1
(double)(signed int)u; 14.9 Using	1
programmable logic device is	1
programmable logic device than	1
checks. But it is	1
checks. These conversions are	1
mechanisms often disturb the	1
mechanisms explained above. A	1
8.1. The table shows	1
8.1. Comparison of optimizations	1
G values in the	1
G values, and last	1
Align by 16 __declspec(	1
Align arrays and big	1
c) The creation of	1
c) 139 can sometimes	1
&CriticalFunction_386; } // Now	1
&CriticalFunction_386; } int main()	1
(three on CodeGear compiler)	1
(three parameters on CodeGear	1
goto CFALSE; } }	1
goto DTRUE; } }	1
testing. Here, you should	1
testing. Trying to read	1
feature. This includes static	1
feature. All accesses to	1
interposition is intended to	1
interposition feature that allows	1
loads the library through	1
loads the appropriate version	1
*.a) or dynamic link	2
dispatchers are designed to	1
dispatchers up to date.	1
Registers are a scarce	2
Event-based sampling: The profiler	1
Event-based sampling requires a	1
associated with dynamic memory	1
associated with profiling, but	1
time-consumer in the program.	1
time-consumer even for programs	1
mechanism. The CPU dispatch	1
mechanism. See page 43	1
Optimizations in the compiler	2
machines with embedded microcontrollers.	1
machines use just-in-time compilation	1
problem: 1. Relocation. All	1
problem: (1) check for	1
constructors, and any other	1
constructors, copy constructors, and	1
References are useful for	1
References are safer to	1
mutually incompatible. A function	1
mutually incompatible. You may	1
_mm_empty() as shown in	1
_mm_empty() after the 64-bit	1
report that memset is	1
report /Qopt-report -opt-report Table	1
disturbing influences in order	1
disturbing influences are removed,	1
develop- ment in order	1
develop- ment time when	1
negative. The method described	1
negative. The last line	1
facilities, binary trees, hash	1
facilities, easy GUI development,	1
creation of a temporary	1
creation of temporary objects	1
warning for such optimizations	1
warning from the compiler	1
min = 100, max	1
min && i <=	1
14.2 Bounds checking In	1
14.2 Bounds checking ..................................................................................................	1
14.3 Use bitwise operators	2
14.1 Use lookup tables	2
vectorclass manual for details.	1
vectorclass www.agner.org/optimize/#vectorclass. The Intel	1
14.7 Don't mix float	2
debugging. A debugger can	1
debugging. A command-line version	1
Func(int a[], int &	2
(columns * sizeof(float)). Now,	1
(columns * sizeof(float)) =	1
14.5 Integer division Integer	1
14.5 Integer division...................................................................................................... 137	1
defined. The cost of	1
defined. This can cause	1
-msse4.1 -mAVX -axSSE3, etc.	1
-msse4.1 /arch:SSE4.1 -mAVX /arch:AVX	1
x^10 // loop for	1
x^10 // return x^10	1
branches): if (level >=	2
DoThisThreeTimesAWeek(); } 135 The	1
DoThisThreeTimesAWeek(); } By giving	1
-msse2 SSE3 instruction set	1
-msse2 /arch:SSE2 -msse2 SSE3	1
logarithms, exponential functions, trigonometric	2
default. This is less	1
default. Position-independent code is	1
WTL application is generally	1
WTL applications can be	1
_controlfp(0, _EM_OVERFLOW); // if	2
load. The clock frequency	1
load. A light-weight alternative	1
select(b > 0, c	2
framework. The optimized part	1
framework. Obviously, the directly	1
8.6 Optimization directives Some	1
8.6 Optimization directives ..............................................................................................	1
synchronization between the different	1
synchronization between threads, such	1
Without static, the logarithm	1
Without optimization, the compiler	1
millisecond resolution and the	1
millisecond resolution. A much	1
sizeof(S1) = 16 is	1
sizeof(S1) would be 8	1
high-priority threads are areas	1
high-priority thread can possibly	1
development. This unit-testing is	1
development. For example, the	1
push and pop ebx.	1
push mov xor mov	1
Numerically Intensive Codes", by	1
Numerically Intensive Codes", SIAM	1
verify that all code	1
verify than a program	1
us to compare two	1
us to manipulate the	1
searching, and mathematical calculations.	1
searching, or the specific	1
known. This information is	1
known. Example: // Example	1
14.13 System programming ..........................................................................................	1
14.13 System programming Device	1
14.12 Position-independent code Shared	1
14.12 Position-independent code.................................................................................. 148	1
area. The nontemporal write	1
area. Join identical branches	1
14.19 static inline int	1
14.19 below. The function	1
rounding. This is unfortunate	1
rounding. Pointer type conversion	1
column; for (row =	1
column; Do not swap	1
dramatically for very large	1
dramatically by unrolling the	1
148 It is possible	1
148 14.13 System programming	1
8.5 Compiler optimization options	2
Polynomial coefficients // Table	1
Polynomial coefficients double Table[100];	1
temporarily. This is intended	1
temporarily. Using the methods	1
obscure examples where the	1
obscure possibility of overflow.	1
14.1c is copied from	1
14.1c void CriticalInnerFunction ()	1
142 unsigned int one	1
142 14.10 Mathematical functions	1
"assume no pointer aliasing"	2
properly and the memory	1
properly aligned or not.	1
issue. See my blog	1
issue. But it is	1
restarted anyway. Software distributors	1
restarted anyway. Updates to	1
Func2() { int a	1
Func2() { int list[100];	1
x--x----- ---x----- x---x---x x-xxx----	1
x--x----- --xx----- x-xxx---x x-xxx---x	1
PCs. The clock frequency	1
PCs. Therefore, it is	1
8.2 Comparison of different	2
Possible solutions to this	1
Possible solutions are: Avoid	1
IDE's for D are	1
IDE's (Integrated Development Environments)	1
8.3 Obstacles to optimization	2
obtained. If a loop	1
obtained. In the latter	1
C++: An optimization guide	1
C++: Preprocessor directives. For	1
sin(x); } 68 else	1
sin(x); z = y	1
delay. See page 43	1
delay. But if the	1
1.f; for (int n	1
1.f; float nfac =	1
Divisions can sometimes be	1
Divisions take longer time.	1
7.32 Preprocessing directives .........................................................................................	1
7.32 Preprocessing directives Preprocessing	1
largest_index = 0; for	1
largest_index = i; }	1
wide, should be avoided	1
wide, while an int	1
list[i].a and list[i].b. It	1
list[i].a = 1.0; list[i].b	1
model. You may ignore	1
model. Instead, I will	1
7.33 Namespaces........................................................................................................... 65 8	1
7.33 Namespaces There is	1
manipulating floating point variables	2
Dependency chains Modern microprocessors	1
Dependency chains ................................................................................................ 22	1
additions. When used simply	1
additions. Divisions take longer	1
MOVNTPD and MOVNTDQ require	1
MOVNTPD _mm_stream_pd SSE2 Store	1
158 Integer variables can	1
158 18 Overview of	1
A; double Y =	1
A; x.b = B;	1
cycle? In this manual,	1
cycle? ...................................................................................... 16 3.2	1
server. Use large data	1
server. These problems should	1
156 16.3 Worst-case testing	2
fine-tuned for a particular	1
fine-tuned for specific CPU	1
157 17 Optimization in	2
draw the attention of	1
draw each pixel or	1
examples. The table can	1
examples. You cannot expect	1
class: // Example 7.38a.	1
class: class CGrandParent {	1
sharing the same cache	1
sharing the same queue,	1
155 16.2 The pitfalls	1
155 test. You can	1
7.30 Exceptions and error	2
ways, with a line	1
ways, as explained in	1
predicted. The target address	1
predicted. This is no	1
i<n; i++) is the	1
i<n; ++i). But when	1
dividing by 2 (See	1
dividing repeatedly with the	1
complications that make member	1
complications with member pointers	1
AVX, as explained on	1
AVX, AVX2 Mathematical vector	1
7.31 Other cases of	2
redo the calculations in	1
redo the calculation in	1
parallelization of code into	1
parallelization in the code	1
Matrix size Time per	1
Matrix size Total kilobytes	1
.................................................................................. 16 3.3 Program	1
.................................................................................. 55 7.24 Unions	1
a.store(aa+i); } } The	1
a.store(aa+i); } } #if	1
0x7FFFFFFF) { // test	1
0x7FFFFFFF) { // check	1
add, etc. SSSE3 a	1
add, remove or modify	1
fed into the pipeline	1
fed directly to the	1
array, or approximately so.	1
array, which it has	1
AVX. These suffixes are	1
AVX. 5. The loop	1
Alignd(X) X __attribute__((aligned(16))) #endif	1
Alignd(X) __declspec(align(16)) X #else	1
_mm_add_epi16(c, two); // Multiply	2
waits for user input.	1
waits until the first	1
loops, then the transformation	1
loops, etc. Optimizing database	1
Tuesday, Wednesday or Friday	1
Tuesday, Wednesday, Thursday, Friday,	1
loops. 13.1 CPU dispatch	1
loops. Consider the following	1
Increment and decrement operators	1
Increment loop counter and	1
cached as good as	1
cached more efficiently than	1
propagation, and loop-invariant code	1
propagation, etc. Whether you	1
exceeds an acceptable limit,	1
exceeds 64 kbytes. This	1
Wikipedia under CPU cache	1
Wikipedia article on compiler	1
................................................................................................ 22 3.16 Execution	1
................................................................................................ 157 17 Optimization	1
mask. The expression that	1
mask. Poor reproducibility. Delays	1
conclude that most variables	1
conclude this section by	1
shared. You can't have	1
shared. Any writable data	1
relocated by the linker	1
relocated (rebased) once more	1
else. This normally belongs	1
else. System code has	1
FIFO queue should be	1
FIFO manner? If objects	1
Library" and "Integrated Performance	1
Library" contains many functions	1
dealing with in a	1
dealing with this problem:	1
Hello() { cout <<	2
Various development tools for	1
Various graphics function libraries	1
software, it is not	1
software, but it is	1
Overflow may occur in	1
Overflow behaves differently on	1
multiplications and divisions are	1
multiplications only. The following	1
differences were observed between	1
differences due to the	1
2.2, C = 3.3;	2
machine. The best Java	1
machine. The virtual processor	1
containers. If the program	1
containers. See page 90.	1
tree. On older processors,	1
tree. Is searching needed	1
approach to CPU dispatching.	1
approach to error handling.	1
dynamically. The advantages of	1
dynamically. Arrays that are	1
__asm__ (".type CriticalFunction, @gnu_indirect_function");	1
__asm__ ("CriticalFunction"); typeof(CriticalFunction) *	1
difficulties making floating point	2
deleting the object then	1
deleting containers. If the	1
discussion. Integer to float	1
discussion. 7.33 Namespaces There	1
...................................................................................................................... 96 9.9 Access	1
...................................................................................................................... 33 7.5 Booleans...................................................................................................................	1
int) are only slightly	1
int) instead of bool	1
(y) { int a[1000];	1
(y) { F1(a); }	1
purpose, or you may	1
purpose, you must consider	1
algorithms, are not suited	1
algorithms, cannot easily be	1
&CriticalFunction_SSE2; } // Default	1
&CriticalFunction_SSE2; } else {	1
Disp(); class C1 :	1
Disp(); void Hello() {	1
consistent for the function	1
consistent modularity and reusable	1
1.23456. The conclusion to	1
1.23456. But we will	1
v; if (u.i *	1
v; if (u.i >	1
(b, c); // Compare	2
reveal a zigzag course	1
reveal things that can	1
created. There is no	1
created. Far Systems with	1
denormal numbers in case	1
denormal numbers. You may,	1
optional and off by	1
optional commercial license Table	1
op. Intel Core 2	1
op. AMD Opteron K8	1
experiment are given below.	1
experiment where 10 elements	1
Induction++; } } The	1
Induction++; ; point to	1
precisions when the code	1
precisions take no extra	1
Difficult cases In most	1
Difficult cases........................................................................................................ 124 2	1
interpreter for Basic. A	1
interpreter which interprets the	1
(PLT). The memory space	1
(PLT). And whenever a	1
order(int x); const int	1
order(int x); 136 ...	1
digital operation can often	1
digital building blocks such	1
i++){ list[i] = i	1
i++){ list[i] += i	1
0.40 n.a. 1.00 0.35	1
0.40 0.30 4.5 0.82	1
z; a = x	1
z; bool b; if	1
139 can sometimes be	1
139 14.7 Don't mix	1
0.44 0.12 memcpy 16kB	1
0.44 0.40 n.a. 1.00	1
cc); } // Entry	1
cc); } #endif //	1
__GNUC__ and not not	1
__GNUC__ #define pure_function __attribute__((const))	1
covered the address range	1
covered in manual 3:	1
fashioned C style with	1
fashioned C style as	1
alloca. This is a	1
alloca. 9.7 Container classes	1
Efficient caching is therefore	1
Efficient conversion from float	1
spaces for different arrays	1
spaces that are no	1
$B1$1: mov mov mov	1
$B1$1: push mov xor	1
362880, 3628800, 39916800, 479001600};	2
(line size) = (total	1
(line size) % (number	1
column. The access is	1
column. Number 17 will	1
complex, that there is	1
complex, but not the	1
3.7 File access Reading	1
3.7 File access................................................................................................................ 20	1
cheap if they are	1
cheap compiler for 32-bit	1
purity. In many cases	1
purity. For example, compilers	1
0.f, 0.f, 1.f); //	1
0.f, 1.f); // initialize	1
14.23b and 14.30 will	1
14.23b union { double	1
below). The 256-bit YMM	1
below). A variable cannot	1
division, which is slow	1
division, square root and	1
received by an interrupt	1
received data in a	1
degradation of performance on	1
degradation in code caching	1
"override" feature. This includes	1
"override" feature. All accesses	1
11.2b const int size	1
11.2b was an odd	1
matrix[j][0] is calculated internally	1
matrix[j][0] = i; }	1
x--xx---- (a&&b) || (!a&&c)	1
x--xx---- (a&&b)||(a&&!b)=a x--xx---- (a&&b)	1
Sometimes, the best way	1
Sometimes, functions are kept	1
distribute function libraries in	1
distribute all the dynamic	1
"worst case" and "best	1
"worst case" counts. In	1
overdetermined in the sense	1
overdetermined Boolean variables are	1
ms. This delay is	1
ms. If the response	1
thing. Example: // Example	1
thing. An expression with	1
squares: for (r1 =	1
squares: const int TILESIZE	1
MemberPointer is declared. Therefore,	1
MemberPointer is declared. Avoid	1
www.intel.com. (See also page	1
www.intel.com. Manual on using	1
TILESIZE) { for (c1	1
TILESIZE) { // Loop	1
sources. The above code	1
sources. For example, the	1
first-in-last-out fashion. It is	1
first-in-last-out nature of the	1
3628800, 39916800, 479001600}; if	1
3628800, 39916800, 479001600}; ...	1
uncommon for software teachers	1
uncommon for virus scanners	1
coprocessor or graphics accelerator	1
coprocessor might also be	1
23; // add n	1
23; // fractional part	1
82 8.7 Checking what	1
82 Keywords that work	1
relates to security. There	1
relates to security. Standard	1
7.9 Smart pointers A	1
7.9 Smart pointers ..........................................................................................................	1
alignment. See www.agner.org/optimize/cppexamples.zip for	1
alignment. __declspec(align(16)) or __attribute__((aligned(16))).	1
7.5 Booleans The order	1
7.5 Booleans................................................................................................................... 33 7.6	1
deal of programming experience	1
deal of research on	1
binutils version 2.20 or	1
binutils version 2.20, glibc	1
7.6 Pointers and references	2
Specific optimization topics .........................................................................................	1
Specific optimization topics 14.1	1
__attribute__((const)) #else #define pure_function	1
__attribute__((const)) (Linux only). Specifies	1
unnecessary for the user	1
unnecessary functions Some programming	1
b[1000]; }; if (y)	1
b[1000]; F2(b); } }	1
7.3 Floating point variables	2
performing an illegal operation	1
performing software product is	1
once, rather than each	1
once, while the runtime	1
s1 = 0, s2	1
s1 += a[i+1]; s2	1
(called static if), but	1
(called x86) of the	1
84 for (i =	1
84 9 Optimizing memory	1
"C" int CriticalFunction ();	1
"C" declaration and the	1
respects and highly compatible	1
respects relevant to software	1
License license included in	1
License shall automatically come	1
ISO/IEC TR 18015, "Technical	1
ISO/IEC TR18015 Technical Report	1
command-line version of the	1
command-line versions without an	1
i++ are as fast	1
i++ ;checkifi<100 ; repeat	1
137). The second thing	1
137). This also applies	1
template. The powN template	1
template. 57 Templates are	1
General case, N is	1
General Public License, optional	1
container, then a linear	1
container, preferably with contiguous	1
integrated in the CPU	1
integrated development environment (IDE)	1
started. The length of	1
started. It takes longer	1
transposes a matrix and	1
transposes a quadratic matrix,	1
container. STL deque (doubly	1
container. Can the container	1
(*SelectAddMul_pointer)(aa, bb, cc); }	2
crash the program. 16.2	1
crash on old operating	1
1.1, B = 2.2,	2
reserve the amount of	1
reserve resources for other	1
Older operating systems lack	1
Older CPUs with execution	1
deleted. Smart pointers are	1
deleted. User work that	1
Asmlib Gnu 64 bit	1
Asmlib My own function	1
Both the executable file	1
Both code cache use	1
&Object2; p->Hello(); } //	1
&Object2; p2->Hello(); // Writes	1
a:4; int b:2; int	2
(-a)*(-b)=a*b a/a=1 ----x---x a/1=a	1
(-a)*(-b)=a*b ---xxx--- a/a=1 --------x	1
left for transferring additional	1
left out if exceptions	1
c2++) { swapd(a[r2][c2],a[c2][r2]); }	2
Nested loops are predicted	2
ipow faster than pow	1
ipow (double x, unsigned	1
comparison, which is fast.	1
comparison, bit operations and	1
produced regularly. Intel: "Intel®	1
produced regularly. AMD: "Software	1
NotPolymorphic(); virtual void Disp();	1
NotPolymorphic(); }; // Any	1
a*b+a*c = a*(b+c) -	2
11.1a to 11.1b automatically,	1
11.1a float a, b,	1
support, and the program	1
support, then call _mm256_zeroupper()	1
forget to make the	1
forget to delete the	1
inverted bit-mask: bc =	1
inverted mask. The expression	1
11.1b float a, b,	1
11.1b automatically, although it	1
80. The keyword static,	1
80. The difference lies	1
i. The size of	1
i. This index must	1
worked well in tests	1
worked sufficiently fast on	1
needed: // Example 7.40c	1
needed: // Example 7.44	1
Introduction This manual is	1
Introduction ....................................................................................................................... 3 1.1	1
i+=3){ list[i] = 0;	1
i+=3){ list[i] =0; list[i+1]	1
PUBLIC ?Func@@YAXQAHAAH@Z ?Func@@YAXQAHAAH@Z PROCNEAR	1
PUBLIC ?Func@@YAXQAHAAH@Z ?Func@@YAXQAHAAH@Z PROC	1
-(-a)=a - - x	1
-(-a)=a --xxxxxx- a-(-b)=a+b ---xxx-x-	1
"IA-32 Intel Architecture Software	2
loaded, the loader calls	1
loaded, but waits until	1
(a&&b&&c) = a&&(b||c) (a&&!b)	1
(a&&b&&c) = a&&b (a&&b)	1
a+0=a a*0=0 a*1=a (-a)*(-b)=a*b	1
a+0=a x-xxxxxx- a*0=0 --xxxx-xx	1
7.15b below shows. It	1
7.15b SafeArray <float, 100>	1
grows by only 50%	1
grows during program execution	1
0. The constant N1	1
0. The division is	1
r2++) { for (c2	2
index, just as a	1
index, i. This index	1
time-consumers are discussed in	1
time-consumers mentioned in the	1
enough. A hash table	1
enough. For example, some	1
720, 5040, 40320, 362880,	2
tedious and the code	1
tedious indeed. It is	1
correctly. The speed test	1
correctly. A code branch	1
flexible, but quite inefficient	1
flexible, well tested, and	1
ARRAYSIZE = 100; float	1
ARRAYSIZE && list[i] >	1
annotation in the assembly	1
annotation option if you	1
respectively. (In 64-bit mode,	1
respectively. Increment and decrement	1
1.1 The costs of	2
43). The Boolean operations	1
43). There is no	1
^= 0x80000000; // flip	1
^= 0x80000000; because this	1
1's is unchanged, while	1
1's when bb[i] >	1
hexadecimal numbers because all	1
hexadecimal numbers, we have	1
u, v; if (u.i	2
extending the sign-bit if	1
extending with zero-bits if	1
^, ~ are useful	1
^, ~, <<, >>	1
systematic and well thought-through	1
systematic manner to make	1
forces the compiler to	1
forces the variable to	1
rolled out by 4	1
rolled out by 2.	1
__attribute__ ((visibility ("internal"))) __attribute__	1
__attribute__ ((visibility ("internal"))) Vectorize	1
Java, use dynamic memory	1
Java, C#, Visual Basic,	1
ivdep Assume function is	1
ivdep __restrict #pragma ivdep	1
Gnu. It is expected	1
Gnu. There is a	1
recursion must always end	1
recursion template<> class powN<true,1>	1
^a = 0 a	1
^a = 0 -	1
algebra, it is possible	1
algebra, we may write:	1
management and garbage collection.	1
management and garbage collection,	1
lots of data. Use	1
lots of things you	1
163 20 Copyright notice	1
163 Internet forums Several	1
projects, it is recommended	1
projects, it is sufficient	1
160 19 Literature .....................................................................................................................	1
160 /Qparallel -parallel -openmp	1
(This is faster than	1
(This eliminates the need	1
Mac. The Gnu compiler	1
Mac. Supports parallel processing,	1
chip. Such units can	1
chip. Such hybrid solutions	1
wrapped into a class	2
perfectly on a Pentium	1
perfectly varies between 9	1
zero); // Use mask	1
zero); // AND each	1
added? If search facilities	2
Addison-Wesley, 1996. These two	1
Addison-Wesley, 2003. Contains many	1
counter, which is calculated	1
counter, comparing the loop	1
modifier can make function	1
modifier will be stored	1
-Ofast /O3 -O3 Interprocedural	1
-Ofast -mveclibabi -fopenmp /Qopenmp	1
test. You can use	1
test. disable power-save options	1
respond to a command	1
respond quickly to keyboard	1
Intensive Codes", by S.	1
Intensive Codes", SIAM 2001.	1
planning phase in order	1
planning stage that a	1
C2 : public CHello	1
C2 Object2; CHello *	1
R value in one	1
R values first, then	1
release version of object	1
release version with all	1
fraction. The sign is	1
fraction. For example, to	1
Friday is set in	1
Friday = 0x20, Saturday	1
textbooks recommend that every	1
textbooks recommend object oriented	1
slower. Many compilers have	1
slower. Another disadvantage is	1
9.7 Container classes Whenever	1
9.7 Container classes .....................................................................................................	1
c1; int c1::*MemberPointer; Here,	1
c1; c2 < c1+TILESIZE;	1
compilers, system database, and	1
compilers, etc., as is	1
subtracting 1 from -128	1
subtracting n from the	1
Returns a pointer to	1
Returns time stamp counter	1
insight can lead to	1
insight you gain by	1
a*b=b*a x n.a. x	1
a*b=b*a a+b+c=a+(b+c) (a+b)+c=a+(b+c) --xx-----	1
r1+TILESIZE; r2++) { for	2
0/a = 0 -	1
0/a = 0 because	1
hope that such feature	1
hope that future compilers	1
Portability C++ is fully	1
Portability note: This example	1
compilers). The best performance	1
compilers). The representation of	1
Catch floating point overflow	1
Catch exceptions in this	1
99% of the time	2
"; // call polymorphic	1
"; Disp(); class C1	1
Sab {int a; int	1
Sab ab[size]; int i;	1
contribution to the total	2
distinction between the latency	1
distinction between leaf functions	1
Update induction variable Y	1
Update induction variable Z	1
Supported compilers Intel, Microsoft	1
Supported operating systems Windows,	1
ment in order to	1
ment time when performance	1
typeof(CriticalFunction) * CriticalFunctionDispatch(void) {	1
typeof(CriticalFunction) * CriticalFunctionDispatch(void) __asm__	1
ones that are available	1
ones mentioned in table	1
busy doing the spell	1
busy concentrating on important	1
optimally on any brand	1
optimally aligned. See page	1
Fast function calling. __fastcall	1
Fast versions of common	1
funny things with the	1
funny looking name ?Func@@YAXQAHAAH@Z	1
queries is beyond the	1
queries can often be	1
saying that it doesn't	1
saying please install this	1
normal. This happens when	1
normal. 157 17 Optimization	1
1" // Writes "Hello	2
updated. It is tempting	1
updated. Most copy protection	1
clumsy and tedious. The	1
clumsy AND-OR construction in	1
int)u; // Faster, but	1
int)u; 14.9 Using integer	1
trivial programming work automatically.	1
trivial tasks such as	1
a[SIZE][SIZE]) { // function	1
a[SIZE][SIZE]) { // Define	1
x64 141 #include <emmintrin.h>	1
x64 (Visual Studio 2005).	1
systems). 28 Dynamic memory	1
systems). 42 If you	1
wasted on software that	1
wasted on runtime dispatch	1
Public distribution and mirroring	1
Public License, optional commercial	1
dummy elements at the	1
dummy element to list	1
symbolic link to the	1
symbolic link. Use different	1
fetched and decoded in	1
fetched from the cache	1
0x40 bytes from address	1
0x40 }; Weekdays Day;	1
(a&b)|(a&c) = a&(b|c) -	1
(a&b)|(a&c) = a&(b|c) x-xxxx--x	1
relocation, but only self-	1
relocation, especially in 32-bit	1
(The Microsoft compiler supports	1
(The PGI compiler supports	1
Mixing float and double	1
Mixing object files from	1
decides which function to	1
decides whether to repeat	1
<xmmintrin.h> _mm_setcsr(_mm_getcsr() | 0x8040);	1
<xmmintrin.h> _MM_SET_FLUSH_ZERO_MODE(_MM_FLUSH_ZERO_ON); It is	1
Func1(x) + 1.; }	1
Func1(x) * Func1(x) +	1
5040, 40320, 362880, 3628800,	2
ability to define function	1
ability to override public	1
3, 5 and 9.	1
3, 4, 6, 9	1
3.12 Network access Some	1
3.12 Network access ......................................................................................................	1
123 and static const	1
123 correspond to any	1
provoke an error message	1
provoke error // Return	1
VectorC A commercial compiler	1
VectorC v. 2.1.7, 2004.	1
processes. The data section	1
processes. The profiler measures	1
((visibility ("internal"))) __attribute__ ((visibility	1
((visibility ("internal"))) Vectorize #pragma	1
stronger for level-2 cache	1
stronger when they are	1
accessible from other modules.	1
accessible from compilers that	1
reusable and well- tested	1
reusable classes. Security The	1
procedures for installation and	1
procedures are inefficient. If	1
!(a < b) =	1
!(a || b) a	1
Overview of compiler options	1
Overview of compiler options.......................................................................................	1
ammintrin.h AMD XOP ammintrin.h	1
ammintrin.h (MS) xopintrin.h (Gnu)	1
sequences of code. The	1
sequences of operations. A	1
stop the program in	1
stop the thread. The	1
expansions of the register	1
expansions and Newton-Raphson iterations.	1
bit. The fact that	1
bit. We can tell	1
Conclusion There is a	1
Conclusion .......................................................................................................... 120 13	1
linking. The file http://www.agner.org/optimize/asmlib.zip	1
linking. A dynamic library	1
Free Documentation License shall	1
Free trial versions are	1
bottlenecks is to put	1
bottlenecks can lead to	1
interrupts and task switches;	1
interrupts at certain events,	1
legacy code, specific preferences	1
legacy software. It may	1
segment by using the	1
segment then it is	1
__unix__ __linux__ x86 platform	1
__unix__ __linux__ __unix__ __linux__	1
attempts to set seconds	1
attempts to translate these	1
Code that is compiled	1
Code caching will be	1
Day; if (Day &	1
Day; if (Day ==	1
swapd(a[r2][c2],a[c2][r2]); } } }	2
bb, cc); } //	1
bb, cc); } #endif	1
power. There are various	1
power. Connecting several standard	1
consumer to many hard	1
consumer if it involves	1
parenthesis around the constant	1
parenthesis around such a	1
Security The most serious	1
Security software that is	1
limit, then you should	1
limit, etc. In most	1
~ for NOT. Instead,	1
~ are useful for	1
swapd(a[r][c], a[c][r]); // swap	1
swapd(a[r][c], a[c][r]); void test	1
Single precision is good	1
Single precision division, square	1
0.28 strlen 128 bytes	1
0.28 0.22 memcpy 16kB	1
Booleans The order of	1
Booleans as output can	1
0.24 n.a. 1.00 0.25	1
0.24 0.25 0.24 n.a.	1
Caching of code and	2
interfere with any function	1
interfere with real time	1
-fomit- frame- pointer No	1
-fomit- frame- pointer -fomit-	1
0.25 0.28 0.22 memcpy	1
0.25 0.24 n.a. 1.00	1
_mm_mullo_epi16 (b, c); //	2
FMA4 instruction set. This	1
FMA4 fma4intrin.h (Gnu) all	1
distribution to a limited	1
distribution and mirroring is	1
>> can test or	1
>> n with a	1
do, at least in	1
do, however, often write	1
appropriate. 8. Avoid branches	1
appropriate. Compiler-specific keywords Fast	1
Please skip the following	1
Please note that my	1
Network access Some application	1
Network access ...................................................................................................... 21	1
__int64 64-bit Linux: unsigned	1
__int64 64 -263 263-1	1
mispredictions, floating point exceptions,	1
mispredictions, etc. These counters	1
rows; i++) for (j	1
rows; i++) { j	1
together. The link order	1
together. Data members of	1
organize the code in	1
organize data to optimize	1
bitfield is less efficient	1
bitfield by the use	1
15.1b. Calculate integer power	1
15.1b. Branches are implemented	1
sees the constant 8	1
sees a relative reference	1
Interpreted code is very	1
Interpreted languages are out	1
treat a variable or	1
treat non-Intel CPUs in	1
a[SIZE][SIZE], double b[SIZE][SIZE]) {	2
(a<b && b<c &&	1
(a<b && b<c) Multiply	1
processor). Integer division by	1
processor). Optimizing compilers will	1
occurred. // Reset floating	1
occurred. This makes it	1
corresponding instruction set. If	1
corresponding bitwise operators &,	1
memset(a, 0, sizeof(a)); //	1
memset(a, 0, sizeof(a)); }	1
m;} int a, b;	1
m;} template <int m>	1
recovering or for issuing	1
recovering from error conditions	1
Sunday, Monday, etc. are	1
Sunday, Monday, Tuesday, Wednesday,	1
incompatible. A function library	1
incompatible. You may make	1
2;} // add 2	1
2;} int a; Plus2	1
fast, compact, and simple	1
fast, -fp- model fast=2	1
University of Denmark. Copyright	1
University courses in programming	1
log, and logarithms take	1
log, exp, sin, etc.	1
begins with #) are	1
begins at the label	1
14.26 does not check	1
14.26 union { float	1
14.27 union { float	1
14.27 assumes that we	1
somewhat more complicated because	1
somewhat less efficiently when	1
predictable. It may be	1
predictable. For example: //	1
subtraction, multiplication, etc. is	1
subtraction, comparison, bit operations	1
14.23 page 143. The	1
14.23 union { float	1
slight degradation in code	1
slight imprecision in some	1
unit. For example, it	1
unit. Various graphics function	1
direct access to hardware	1
direct hardware access. Available	1
generic version that is	1
generic branch, which is	1
unit, but this unit	1
unit, either on a	1
invalid. The heap manager	1
invalid. Boolean variables are	1
heavily on table lookup	1
heavily loaded. 21 3.13	1
self- relative addresses in	1
self- relative addresses. Therefore,	1
log2 a global const	1
log2 = log(2.0); ...	1
counters. A performance monitor	1
counters. My test tool	1
speed, memory economy and	1
speed, memory economy, cache	1
(!a&&c) = a ?	1
(!a&&c) || (b&&c) =	1
[] array index operator	1
[] operator will detect	1
122. The code becomes	1
122. The Intel compiler	1
messages to the user.	1
messages saying please install	1
x[]); void F3(bool y)	1
x[]); void F2(float x[]);	1
only) -O3 or (requires	1
only) (Intel CPU only)	1
although it appears to	1
although slightly less efficiently.	1
primitive programming style that	1
primitive operations in the	1
Goedecker and Adolfy Hoisie:	1
Goedecker and A. Hoisie,	1
Model-specific dispatching There may	1
Model-specific dispatching .................................................................................... 124	1
-fno-rtti Assume no pointer	1
-fno-rtti /GR- -fno-rtti Assume	1
initialization, or if the	1
initialization, condition, and increment.	1
largest_abs = 0; int	1
largest_abs = absvalue; largest_index	1
implementations. However, these languages	1
implementations. 7.22 Inheritance An	1
24, 120, 720, 5040,	2
studying the bottlenecks can	1
studying a piece of	1
87). There is no	1
87). Data caching is	1
contentions. See page 87	1
contentions. Use simple method.	1
SafeArray { protected: T	1
SafeArray <float, 100> list;	1
58 If it is	1
58 shows an example	1
increasingly important. A virtual	1
increasingly blurred as the	1
accurate and reproducible as	1
accurate for the purpose	1
efforts in optimizing library	1
efforts on the time	1
starts. The user may	1
starts. The disadvantage is	1
i/2+r. The instructions mov	1
i/2+r. The next instruction	1
reader has a good	1
reader what is happening.	1
usability, program compactness, and	1
usability, but I think	1
template<> class powN<true,0> {	1
template<> class powN<true,1> {	1
low-level C language as	1
low-level optimizations. Most C++	1
available: // Example 7.6.	1
available: // Example 12.4c.	1
_controlfp_s(&dummy, 0, _EM_OVERFLOW); //	2
mangled function name ;	1
mangled function name ;startofFunc	1
Transforming serial code for	2
contend for the same	2
collector at inconvenient times.	1
collector which is likely	1
int)n < 4) {	1
int)n < 13) {	1
Far storage, far pointers,	1
Far Systems with segmented	1
factorials: static const int	1
factorials: const int FactorialTable[13]	1
........................................................................................ 53 7.21 Runtime	1
........................................................................................ 109 12.5 Using	1
compares the array pointer	1
compares eax with 100	1
shows. The best way	1
shows. It is accessed	1
By giving each constant	1
By Agner Fog. Technical	1
certainty that the operands	1
certainty which version of	1
1-bit in binary representation	1
1-bit removed. If N	1
Or it might be	1
Or #include <ia32intrin.h> etc.	1
Programs that produce streaming	1
Programs using such a	1
operation, which is very	1
operation, which is much	1
closed. The same method	1
closed. The file will	1
source. It comes with	1
source. Supports all x86	1
:1;//signbit }; struct Sdouble	1
:1;//signbit }; struct Slongdouble	1
avoided, if possible, and	1
avoided, there are various	1
book on optimization of	1
book "Performance Optimization of	1
avoided. The disadvantage is	1
avoided. 37 A compiler	1
EMMS } const int	1
EMMS instruction before any	1
immediately before the code	1
immediately before the loop	1
sizeof(a)); // copy a	1
sizeof(a)); } int Size()	1
105). If the AVX	1
105). Using the SSE2	1
usage in kernel code"	1
usage convention says that	1
fix the thread to	1
fix the problem and	1
b[SIZE][SIZE]) { int r,	2
press or mouse move.	1
press break while the	1
sorting and searching, or	1
sorting algorithms, are not	1
(*.dll, *.so). The mechanism	1
(*.dll, *.so). There are	1
1.00 0.25 0.28 0.22	1
1.00 0.35 0.29 0.28	1
, longdoublevalue ( 1)sign	1
, doublevalue ( 1)sign	1
efficiently. This method is	1
efficiently. It is therefore	1
word static is removed	1
word processor the user	1
B2 { public: int	1
B2 b2; int c;	1
10.1 Hyperthreading Some versions	1
10.1 Hyperthreading ..................................................................................................... 103	1
Converting an integer to	1
Converting class objects Conversions	1
matrix. For example, a	1
matrix. My experimental results	1
B; for (x =	1
B; x.c = C;	1
divisions. It is recommended	1
divisions. Example: // Example	1
chains, especially loop-carried dependency	1
chains, namely the two	1
coprocessors is beyond the	1
coprocessors to take care	1
x.a = A; x.b	1
x.a = y.a +	1
effect. GOT and PLT	1
effect. Which method you	1
keyboard and mouse inputs	1
keyboard or mouse input.	1
39916800, 479001600}; if ((unsigned	1
39916800, 479001600}; ... int	1
Approximate exp(x) for small	2
Table[x] = A*x*x +	1
Table[x] = Y; Y	1
restriction on x. It	1
restriction from a pointer.	1
x.c = C; Assuming	1
x.c = y.c +	1
misleading results or fail	1
misleading reports of which	1
#ifdef _MSC_VER // If	1
#ifdef __GNUC__ #define pure_function	1
.................................................................................................. 18 3.4 Automatic	1
.................................................................................................. 134 14.3 Use	1
Sum of a list	1
Sum of a list,	1
x.b = B; x.c	1
x.b = y.b +	1
CPUs". A branch instruction	1
CPUs". 9.3 Functions that	1
shr add sar add	1
shr ebx,31 copies the	1
each. The critical stride	1
each. The type __m128	1
0/a=0 ---x---xx (-a==-b)=(a==b) ---xx----	1
0/a=0 ---xx--xx (-a==-b)=(a==b) ---xx----	1
replacing a function call	1
replacing an integer variable	1
1.0f + b *	1
1.0f : 2.5f; If	1
manual, but you should	1
manual, I am using	1
involve the loading of	1
involve a high overhead	1
Optimize for speed /O2	1
Optimize function #pragma optimize(...)	1
list[i]; This has a	1
list[i]; sum2 += list[i+1];}	1
initialize to x^0/0! //	1
initialize sum for(inti=0;i<16;i+=4){ //Loopby4	1
117 A C++ implementation	1
117 12.7 Mathematical functions	1
previously in the code.	1
previously required a PC.	1
113 Number of simultaneous	1
113 12.6 Transforming serial	1
root and mathematical functions	2
statistics, and the "Intel	1
statistics, signal processing and	1
times, one for the	1
times, even for simple	1
obstacle of possible pointer	1
obstacle to vectorization. The	1
Fog. Technical University of	1
Fog. Public distribution and	1
12.8 Aligning dynamically allocated	2
IDE with many of	1
IDE on some systems.	1
12.9 Aligning RGB video	2
removing the call to	1
removing superfluous code, but	1
setup may look like	1
setup but slow or	1
_LP64 Windows platform _WIN32	1
_LP64 _WIN64 _LP64 Windows	1
type, a pointer, a	1
type, but you cannot	1
b.load(bb+i); // Load eight	1
b.load(bb+i); c.load(cc+i); a =	1
factorials so that we	1
factorials don't depend on	1
subroutine for the critical	1
subroutine if it is	1
later. The AVX instruction	1
later. Example: // Example	1
12.4 Using intrinsic functions	2
12.5 Using vector classes	2
manipulations of floating point	1
manipulations on integer expressions	1
leaks and other common	1
leaks if you forget	1
says that the behavior	1
says that a function	1
12.6 Transforming serial code	2
140). The SSE2 instruction	1
140). Mathematical functions must	1
12.7 Mathematical functions for	2
52 or class is	1
52 , longdoublevalue (	1
obey any specific calling	1
obey certain rules about	1
72. It is therefore	1
72. You have to	1
b*a - n.a. (a+b)+c	1
b*a (a+b)+c=a+(b+c) a+b+c=c+b+a a+b+c+d	1
95 and 120 for	1
95 not needed. You	1
12.1 AVX instruction set	2
time-critical code. 7.32 Preprocessing	1
time-critical part of the	1
12.3 Automatic vectorization .........................................................................................	1
12.3 Automatic vectorization Good	1
universal solution is best	1
universal algorithm (e.g. Quine–McCluskey	1
Suppl. SSE3 instr. set	1
Suppl. SSE3 tmmintrin.h SSE4.1	1
crash. See page 122	1
crash. Furthermore, it is	1
a+b+c+d = (a+b)+(c+d) a*b+a*c=a*(b+c)	2
99 read from the	1
99 10 Multithreading.............................................................................................................. 101	1
Remove branch that is	1
Remove right-most 1-bit in	1
interpreters, just-in-time compilers, system	1
interpreters, just-in-time compilers, etc.,	1
9. Avoid table lookup	1
9. Multiplications are done	1
any, is usually called	1
any, must be called	1
thread-safe function should never	1
thread-safe functions. A thread-safe	1
F3(bool y) { if	1
F3(bool y) { union	1
exclusive access by each	1
exclusive mode, and an	1
9.2. All these instructions	1
9.2. Cache control instructions.	1
NumberOfTests; i++) { //	1
NumberOfTests; i++) { time1	1
stay in the same	1
stay on until you	1
extension of vector register	1
extension to the x86	1
"best case" counts that	1
"best case" values. Which	1
functions) has no negative	1
functions) /Gy -ffunction- sections	1
repeated until the residual	1
repeated 1024/4 = 256	1
FactorialTable[13] = {1, 1,	2
Friday) in example 14.7b	1
Friday) { DoThisThreeTimesAWeek(); }	1
function: // Example 14.20	1
function: (static_cast<MyChild*>(this))->Disp(); } };	1
8.21 is indeed a	1
8.21 void Func1 (int	1
&CriticalFunction_AVX; } if (level	1
&CriticalFunction_AVX; } else if	1
105 The vector operations	1
105 12.1 AVX instruction	1
interpret the bits of	1
interpret that string as	1
Writing a = OneOrTwo5[b!=0];	1
Writing past the end	1
bug is a minor	1
bug causes floating point	1
Compare each element in	2
x=y; y=temp;} // Check	1
x=y; y=temp;} int r,	1
better, you may make	1
better, make your own	1
flip the sign bit	1
flip sign bit of	1
float's when the SSE2	1
float's fits into a	1
minutes to write the	1
minutes to start up,	1
109 } It is	1
109 12.5 Using vector	1
(a+1) * (a+1); c	1
(a+1) / 4; The	1
reasons, the preferred language	1
reasons, but part of	1
better: store the reciprocal	1
better: -Ofast -mveclibabi -fopenmp	1
method, it is clear	1
method, but it doesn't	1
whose address is in	1
whose distance in memory	1
delete, and often excessively	1
delete, or malloc and	1
accessed, and this error	1
accessed, it is necessary	1
a&(b|c) - n.a. -	1
a&(b|c) x-xxxx--x (a|b)&(a|c) =	1
assigning a new physical	1
assigning different priorities to	1
10% of the time.	2
Mostly obsolete. Microprocessor documentation	1
Mostly obsolete. Rick Booth:	1
4: "Instruction tables". There	1
4: "Instruction tables". Tips	1
4; The compiler may	1
4; Register variables The	1
have. The developers may	1
have. In some cases	1
relieving the const restriction	1
relieving a syntax restriction,	1
10, columns = 8;	1
10, 12 or 16	1
ENDP + esp ebx	1
ENDP ecx, 1 eax,	1
incremented to 5 by	1
incremented every second by	1
48 Use macros instead	1
48 7.15 Function parameters	1
Tuesday = 4, Wednesday	1
Tuesday || Day ==	1
internally as a member	1
internally as (int)&matrix[0][0] +	1
fourth of these cache	1
fourth value to make	1
tips on advanced C++	1
tips on improving performance.	1
shared_ptr than for auto_ptr.	1
shared_ptr allows multiple pointers	1
BSD. The Windows version	1
BSD. If a function	1
effort. 7.21 Runtime type	1
effort. Square blocking and	1
today. You may choose	1
today. But this language	1
Put the function or	1
Put in an unused	1
CriticalFunction_AVX(int parm1, int parm2)	2
(r2 = r1; r2	1
(r2 = r1+1; r2	1
writing: 103 // Example	1
writing: __declspec(align(64)) int BigArray[1024];	1
B2; class D :	1
B2; 54 class D	1
overall performance of a	1
overall computation time is	1
Structures and classes Nowadays,	1
Structures and classes............................................................................................ 51	1
executables. This method can	1
executables. Make sure to	1
inherently parallel because it	1
inherently serial, such as	1
me. You will not	1
me. My vector class	1
non-virtual member function, provided	1
non-virtual functions. Avoid virtual	1
safer. It may catch	1
safer. Type casting of	1
b+c = 100000001.23456. The	1
b+c will be rounded	1
__linux__ x86 platform _M_IX86	1
__linux__ __unix__ __linux__ x86	1
-32768 32767 int16_t int	1
b+a a*b = b*a	1
factorials, but this is	1
convenience - there is	1
231. This extra cost	1
pow(x,10); } The pow	1
companies often fail to	1
dominate in the future.	1
preferences for the IDE,	1
optimize("a",on). Specifies that pointer	1
optimize(...) Fastcall function __fastcall	1
x---x---x x-xxx---- a*b*c=a*(b*c) a+b+c+d	1
16383 one fraction 2	1
extensions. If a profiling	1
today, then it may	1
14.5b if ((unsigned int)(i	1
14.5a const int min	1
otherwise. In difficult cases	1
//Loopby4 s += xxn	1
b2); y1 = a1	1
1./3628800., 1./39916800., 1./4.790016E8, 1./6.22702E9,	1
niche in scientific computing,	1
10) { ... Conversions	1
fistp dword ptr n;	1
SetThreadAffinityMask, in Linux, sched_setaffinity).	1
common, and there is	1
(low numbers mean good	1
common. Even some of	1
segments (32-bit or 64-bit	1
Darwin8 g++ v 4.0.1.	1
108 You may look	1
compact, and simple to	1
102 also useful to	1
namespace. 3. The Gnu	1
update, or update automatically	1
similarity between the operating	1
106 CPUs if the	1
function) should be hidden	1
"move constructor" to transfer	1
function" has been introduced	1
Friday, Saturday }; Weekdays	1
bits), unless the SSE4.1	1
Correction for the FDIV	1
vulnerability of software with	1
reinstallation work to take	1
ignoring the higher bits.	1
sums } This loop	1
N-1)==0 if N is	1
1./6., 1./24., 1./120., 1./720.,	1
{x = a; y	1
Rather than comparing i	1
code-based methods or require	1
N+1 supports at least	1
512-bit ZMM registers by	1
7.6. Set flush-to-zero and	1
circumvent operating system standards.	1
---x---xx (-a==-b)=(a==b) ---xx---- (a+c==b+c)=(a==b)	1
blog. Here, you can	1
OpenMP. www.openmp.org. Documentation of	1
Includes many functions for	1
$B2$2 ; Induction++; ;	1
effects. This effect can	1
Delight". Addison-Wesley, 2003. Contains	1
AND-operations in just one	1
precompiled code. The history	1
typo in a hand-	1
51). The order in	1
Included with Intel C++	1
Updates to the operating	1
'@' and '$' are	1
(methods) Each time a	1
count. The method of	1
masm=intel /FA -S Generate	1
warn against overkill. Don't	1
warm up the CPU	1
noticed that i can	1
constructs........................................................................ 26 7.1 Different	1
a<<b<<c = a<<(b+c) -	1
leak. An even worse	1
utility for modifying the	1
clumsy, as you will	1
16-byte instructions MOVNTPS, MOVNTPD	1
zeroes. Example: // Example	1
caveats. We can change	1
$B1$2:. This is just	1
repagination are running in	1
a[i+2] ; compare with	1
recognizes it as a	1
recognized in 64-bit mode.	1
cleans up the stack.	1
(bitwise and) will cut	1
portability. Unfortunately, the cross-platform	1
independently. The CPU will	1
9.5b void transpose(double a[SIZE][SIZE])	1
answer questions from everybody.	1
(Standard Template Library) and	1
13.2. CPU dispatching in	1
adds, not edx but	1
objconv or a similar	1
purpose: Contain one or	1
limitations to what the	1
x8*x2; return x10; }	1
limitation). 14.11 Static versus	1
speculatively executing instructions during	1
disassembly window of a	1
(en.wikipedia.org/wiki/L2_cache). The details of	1
attempt is made to	1
0+1.23456 = 1.23456. But	1
before) } printf("\nResults:"); for	1
blocks. A method with	1
timingtest.h from www.agner.org/optimize/testp.zip or	1
C1::Disp() or C2::Disp() is	1
predictor. On other processors,	1
128. These lines are	1
accurate, however, and it	1
Misaligned data. Extra data	1
FAQ for the newsgroup	1
before. This is faster	1
Xnu project. Some of	1
initialized. The dispatcher function	1
so). A template parameter	1
Remember, therefore, always to	1
/fp:fast=2 -fp-model fast, -fp-	1
/MT). In Linux and	1
MKL). Works with all	1
B1 { public: B2	1
CParent::Hello() has multiple instances	1
user-defined function is pure.	1
spots, but for studying	1
B. In order to	1
exploiting fine-grained parallelism. The	1
sets). Here, / means	1
lost at the time	1
i+1; The compiler may	1
terminated. The purpose is	1
burden is the calculation	1
(a&&!b) || (!a&&b) =	1
SafeArray: // Example 7.15b	1
Is8vec16 Vec16c 8 16	1
weakness or bottleneck, it	1
imple- mentations have no	1
Yeppp. Open source library.	1
nested function calls in	1
source) { _mm_stream_pi((__m64*)dest, *(__m64*)&source);	1
1994. Mostly obsolete. Rick	1
side effects or if	1
ample resources. For example,	1
(MMX), 128 bits (XMM),	1
1/50 of the time	1
/openmp /MT -msse3 /arch:SSE3	1
forgot to tell the	1
clauses are separated by	1
reproducibility. Delays in program	1
-abs(x);. There are a	1
x-xxx - xx(-)x- -	1
timediff[i] = ReadTSC() -	1
Be sure not to	1
for(inti=0;i<16;i+=4){ //Loopby4 s +=	1
message. It is recommended	1
coordination with other subtasks	1
distant future. 12.3 Automatic	1
Sunday = 1, Monday	1
restore ebx from stack	1
47 Most compilers will	1
1996. These two books	1
www.agner.org/optimize. Copyright conditions are	1
row++) for (column =	1
resume after exceptions: while	1
x-xxxxx-- (a&b)|(a&c) = a&(b|c)	1
areas. Data that are	1
qword ptr x; __asm	1
Repeat NumberOfTests times //	1
/EHs- No stack frame	1
union: // Example 9.2b	1
(12.4e) with automatic CPU	1
steals resources from a	1
(add with carry) instructions	1
moved, which may happen	1
moved. A binary tree	1
areas, and there will	1
longdoublevalue ( 1)sign 2exponent	1
unconventional manner by returning	1
*const_cast<int*>(&x) += 2;} //	1
(option -fno-pic). 64 bit	1
x-xxxxx-x (-a)*(-b)=a*b ---xxx--- a/a=1	1
Handles to windows, graphic	1
strange and unexpected behaviors.	1
invalid, and by avoiding	1
_mm_stream_si128 SSE2 Table 9.2.	1
/Gy, Linux: -ffunction-sections) which	1
(there is one set	1
sqrt and pow at	1
b.y + c.y +	1
SSE. Several function libraries	1
bits: // Example 14.29	1
264-1 uint64_t Table 7.1.	1
generality. The most important	1
sin(0.8); The sin function	1
esp+12 and loaded into	1
bounds-checking to an array	1
owns the allocated object,	1
i--, x++) factorial *=	1
versa. But most of	1
body. A function is	1
CString uses new and	1
58.7 168.3 Table 9.3.	1
Prevent optimizing away cpuid	1
"express" edition is available	1
(en.wikipedia.org/wiki/Standard_Template_Library). The objects stored	1
zero: // Example 14.24	1
*(int*)&x |= 0x80000000; //	1
-fno-pic). 64 bit systems	1
tread can take care	1
rows. Let's look at	1
saturated. This can be	1
rows, not the columns.	1
uncaught overflow condition will	1
macro, but the method	1
virtualization. The time when	1
seek information elsewhere and	1
macro. If you want	1
constructed. All non-static variables	1
data, including local data	1
FuncB (int & r)	1
limits the CPU brand.	1
xx4(x4); // x^4 F32vec4	1
precious resource for many	1
15h Processors". www.amd.com. Advices	1
installed, a lot of	1
installed. The installation process	1
point: // Example 14.22b	1
IA-32/Intel64, 2009. Gnu C++	1
_mm_perm_epi8 32 1 byte	1
min) <= (unsigned int)(max	1
LLVM is a new	1
7.40a struct Bitfield {	1
7.40b union Bitfield {	1
7.40c x.abc = (A	1
(FuncRow(i)*columns + FuncCol(i)) *	1
(Darwin) are part of	1
see, it is possible	1
importance of structured and	1
comparable to a clock	1
interpretation. The program code	1
x∙xn-1, and each value	1
rarely. The above code	1
optimize("a", on) __restrict __restrict	1
neither faster nor slower	1
correctly whether vectorization will	1
sets) (line size) =	1
libraries........................................................................................ 12 2.7 Choice	1
mind. In some cases	1
sets, cache size, etc.	1
dot in the function	1
a2*b1) / (b1*b2); The	1
mispredicted. A branch that	1
Day. Note the difference	1
mispredicted, which causes a	1
Good compilers such as	1
after) - (time before)	1
OneOrTwo5[2] = {1.0f, 2.5f};	1
intermediates, loop counters, function	1
incremented. See page 31	1
incremented, while in the	1
here's an explanation. Please	1
insufficient. The user expects	1
she is busy concentrating	1
not-too-big upper limit can	1
evictions and other resource	1
bit, the exponent, and	1
Prefetch PREFETCH _mm_prefetch SSE	1
core). The counters will	1
noalias) __restrict #pragma ivdep	1
transposition of different size	1
other's caches and cause	1
below, on page 15.	1
illegitimate copying. The benefits	1
legitimate backup copying without	1
121 13 Making critical	1
architecture of the software.	1
renamed instances of the	1
unacceptable to the user	1
hardware-related details depend on	1
12, last byte at	1
12) are more useful	1
"More Effective C++". Addison-Wesley,	1
"Effective C++". Addison-Wesley. Third	1
Dispatcher void SelectAddMul_dispatch(short int	1
Boost collection contains well-tested	1
ebx,31 copies the sign	1
matters. Problems with invalid	1
<ia32intrin.h> etc. // Returns	1
finish. 3.8 System database	1
inappropriate CPU dispatch methods.	1
0: printf("Alpha"); break; case	1
IA-32 Architectures Optimization Reference	1
x87 style floating point	1
a+b+c=a+(b+c) (a+b)+c=a+(b+c) --xx----- (a&&b)	1
6.0f; Constant folding and	1
brackets. However, most compilers	1
NULL. There should of	1
b*(2.0/3.0) unless you put	1
.a), but not dynamic	1
tolerance may be so	1
Processor memcpy 16kB aligned	1
Files on remote or	1
compactness, and execution time.	1
(partial) template specialization. This	1
Abrash: "Zen of code	1
T+1 to T+6, and	1
0] in this case	1
Edition, 2005; and "More	1
14.7b is converted by	1
Otherwise the program will	1
suggested improvements). // Example	1
14.3a int n; switch	1
14.3b int n; static	1
(DLL) which is called	1
SelectAddMul_SSE41 #elif INSTRSET ==	1
thenaandbcannot use the same	1
Hat). PathScale C++ v.	1
int32_t long long or	1
issuing an error message.	1
unchanged across a call	1
Deallocation has no cost	1
initiative whenever it is	1
bloat and complexity (en.wikipedia.org/wiki/Standard_Template_Library).	1
Division, square root and	1
Gives a more clear	1
C- style type-casting with	1
boolb=0; static const float	1
C# and avoids many	1
(0); and the second	1
acceptable limit, then you	1
FuncB, then FuncC. Unrolling	1
removed. If N is	1
trigger the error condition.	1
basic understanding of how	1
j++) 39 matrix[i][j] +=	1
once................................... 135 14.4 Integer	1
statements, as explained on	1
compiling. This prevents it	1
frustration and waste of	1
2-3 clock cycles if	1
prone to even allocate	1
switches..................................................................................................... 22 3.15 Dependency	1
deeper into the technical	1
b)) even though the	1
less. Fortunately, all compilers	1
"function". Multiple calls to	1
Max. number of elements	1
operator[] (unsigned int if	1
enabled: // Example 14.21.	1
owns. A destructor is	1
wrapper classes with destructors	1
161 32 bit platform	1
162 19 Literature Other	1
be, for example, to	1
algebra) require other access	1
be. The distinctions between	1
Re-do the calculation in	1
algebra. For example, a	1
slices. This will make	1
transformation of example 15.1b	1
x^8 // x^10 //	1
2.11 ifunc branch). This	1
power-save options in the	1
situations: The stack unwinding	1
balance between these considerations.	1
0.35 0.29 0.28 strlen	1
over. Virtualization is becoming	1
over- loaded type casting	1
a<c) = (a<b &&	1
a1/b1 + a2/b2; Here	1
"memory" ); #else //	1
2009. Gnu C++ v.	1
situations, and which reductions	1
vendor string. In the	1
list; // Make array	1
Non-polymorphic functions go here	1
investment. A redesign can	1
MOVNTPS, MOVNTPD and MOVNTDQ	1
(80 bits). The advantages	1
matrix[NUMROWS][NUMCOLUMNS]; int row, column;	1
149 All code that	1
x);} void SelectAddMul(short int	1
cc[i]+2 is AND'ed with	1
Iu32vec2 64 1 int64_t	1
Iu32vec4 Vec4ui 64 2	1
time1 = ReadTSC(); CriticalFunction();	1
plug-ins that add functionality	1
Vec32c unsigned char short	1
interval, for example i	1
time? If the number	1
&SelectAddMul_AVX2; (iset >= 5)	1
i7 processor with four	1
kit (SDK or PSDK).	1
i) { // Safe	1
(Vec4f const & x)	1
transitions between the two	1
Usually it takes only	1
a[size]; unsigned int absvalue,	1
................................................................................................... 87 9.3 Functions	1
x?" or "how many	1
separating the flags register	1
(the instruction set has	1
g() { C1 obj1;	1
technology, and microprocessor microarchitecture.	1
800 bytes smaller. Structure	1
tolerated. PGI C++ compiler	1
Gbytes. This large memory	1
p1; p1 = &Object1;	1
CriticalFunctionType(int parm1, int parm2);	1
deleted, copied or transferred	1
a/1 = a -	1
Yet, D is compiled	1
-263 263-1 int64_t 29	1
assigned previously in the	1
functional decomposition and data	1
2eee 1.fffff, where is	1
human readable and not	1
plug-in to Microsoft Visual	1
_mm_setcsr(_mm_getcsr() | 0x8040); See	1
2-20, but this is	1
yet as well developed	1
Newton-Raphson iterations. Here the	1
regarded as a valuable	1
pixel or line separately	1
affinity mask. Poor reproducibility.	1
PROCNEAR ; parameter 1:	1
119). The AMD math	1
stack). ecx now contains	1
ago, the recommendation was	1
reuse the same array	1
Beginners are advised to	1
Error: lowest instruction set	1
pool, as explained above.	1
reordered, inlined, or optimized	1
doublevalue ( 1)sign 2exponent	1
(IPP). Works with all	1
hand. Low-level languages are	1
hand- written table may	1
|) instead of the	1
standardization of programming languages,	1
Patches should be easily	1
object-oriented programming, modularity, reusability	1
WriteFile if the handle	1
link. Use different executables.	1
strategies........................................................................................ 122 13.2 Model-specific	1
monitoring options. CPU vendors	1
printf("Beta"); break; case 2:	1
re-use a container than	1
dead code if no	1
Core2 processor performs better	1
meaning. 2. Put the	1
meaning, then you can	1
2014-08-07. Contents 1 Introduction	1
(int)&matrix[0][0] + j *	1
Safe [] array index	1
i*12, because the size	1
__thread or __declspec(thread). Such	1
(BTB). Contentions in the	1
meanings depending on the	1
capabilities. Here is a	1
paragraph. The target of	1
Sum2(S3 * p) {return	1
18015, "Technical Report on	1
alignments and different sizes	1
status: _fpreset(); _controlfp_s(&dummy, 0,	1
Including the appropriate header	1
millisecond. The profiler counts	1
list[100], *temp; for (temp	1
benchmark performance of competing	1
ifbit=1 bitofn // return	1
f(x) or g(x) is	1
floatvalue ( 1)sign 2exponent	1
Inlining a function is	1
remains zero in the	1
worst- case conditions. For	1
titles. Literature on code	1
11.2a const int size	1
/GR– -fno-rtti /GR- -fno-rtti	1
~C1(); }; void F1()	1
(vector const & a)	1
initial value of i	1
optimize/#vectorclass Include file dvec.h	1
powN<true,N/2>::p(x); } }; //	1
accumulators. Current CPUs have	1
22. Avoid long dependency	1
addressed relative to the	1
F0() { try {	1
OS, etc.) have little-endian	1
vmlsExp4 vmldExp2 Intel SVML	1
-mcmodel=large, but this will	1
+127. An integer overflow	1
precision: // Example 14.18b	1
223 to a floating	1
x[1] = b; c	1
Adolfy Hoisie: "Performance Optimization	1
64; // number of	1
products fail to recognize	1
dvec.h vectorclass.h Supported compilers	1
(.dll or .so). There	1
stages before they are	1
InstructionSet().The following example shows	1
64. Each cache line	1
sticks may not be	1
Parallelization by OpenMP directives	1
covers 64 consecutive bytes	1
die. See www.gnu.org/copyleft/fdl.html. 164	1
153. A profiler is	1
65535 uint16_t unsigned int	1
/Qopt-report -opt-report Table 18.2.	1
low-priority thread steals resources	1
Vectorization with alignment problem	1
Profile-guided optimization Whole program	1
destructors. The copy constructors	1
Locked mutexes. Open database	1
independence, and easy development.	1
libraries............................................................................ 146 14.12 Position-independent	1
fine-tuning, testing, verifying and	1
exits. For example, if	1
exits, when in fact	1
mangling are explained in	1
utilities in 2010. This	1
cases........................................................................................................ 124 2 13.4	1
alleviated in the 64-bit	1
decimals, for example, you	1
cell for different matrix	1
transfers ownership of the	1
list[j].b + list[j].c; }	1
list[j].a = list[j].b +	1
12.4a. Loop with branch	1
12.4a, depending on how	1
example,a * 16is calculated	1
obeyed. Copy protection. Some	1
sufficient, and the caching	1
product. It is good	1
restores the value of	1
2011). Instead, the following	1
serial, such as most	1
restored before the function	1
managed C++, and other	1
Disadvantages are: Long double	1
real-time speed. Delays or	1
1./40320., 1./362880., 1./3628800., 1./39916800.,	1
exceeding that of yesterday's	1
(a+c==b+c)=(a==b) ----x---- !(a<b)=(a>=b) (a<b	1
18.2. Compiler directives and	1
click becomes inconsistent and	1
1.23456, y; y =	1
download updates through the	1
/Qopenmp -m32 -m64 -static	1
technique is illustrated in	1
de-allocation of memory with	1
x<<3, which is faster.	1
optimizer. Borland/CodeGear/Embarcadero C++ builder	1
division). The object pointed	1
monotonically increasing function of	1
top-of-stack index. Are objects	1
configurations with the same	1
off. It is important	1
Vec8ui Vec4q Vec4uq Vec4f	1
2.20 or later //	1
2.23 0.95 0.6 1.19	1
std.org/jtc1/sc22/wg21/docs/TR18015.pdf. OpenMP. www.openmp.org. Documentation	1
relocate, but these address	1
advised to seek information	1
button or moving the	1
positions in the vectors.	1
did not improve the	1
Vec8us 32 4 int	1
<excpt.h> #include <float.h> #include	1
minimal difference between the	1
Library, available from www.intel.com.	1
Systems with segmented memory,	1
more. Many software applications	1
telling the user to	1
unexpected behaviors. Arrays are	1
feasible. Interference from other	1
x2*x2; double x8 =	1
Mathcad (v. 15.0) is	1
-mveclibabi=acml. Agner's vector class	1
friendly compiler with many	1
running, and a slow	1
targets is small. The	1
exit. Calling exit may	1
switching. This cost is	1
alternatives: Make the function	1
operations............................................................................................... 105 12.1 AVX	1
27). The maximum number	1
................................................................................... 81 8.6 Optimization	1
log(c[i]); // Increment loop	1
assignment, as a function	1
assignment. shared_ptr allows multiple	1
diagnose. It is the	1
8.9b int SomeFunction (int	1
15.1c). 16 Testing speed	1
vector(float a, float b)	1
c;}; abc * p;	1
8.9a int SomeFunction (int	1
sets........................... 122 13.1 CPU	1
Integrates into the Microsoft	1
AddTwo(int * __restrict aa,	1
Violation of array bounds	1
evenly between the different	1
identified, then it may	1
simultaneous lookups Max. number	1
incrementing a loop counter,	1
imprecise or simply zero.	1
Technology Journal Vol. 11,	1
-100, b = 100,	1
p->f() goes to C0::f	1
DontSkip = dummy[0]; clock	1
1./2., 1./6., 1./24., 1./120.,	1
blend instruction if the	1
e + f; The	1
flexibility of the STL	1
SelectAddMul_SSE2, SelectAddMul_SSE41, SelectAddMul_AVX2, SelectAddMul_dispatch;	1
Greek[4] = { "Alpha",	1
Windows: __rdtsc()). The time	1
wealth of advanced features	1
correlated with preceding branches	1
independently of other tasks	1
Output array element }	1
T, unsigned int N>	1
T> static inline T	1
SelectAddMul, SelectAddMul_SSE2, SelectAddMul_SSE41, SelectAddMul_AVX2,	1
throw()specification is useful for	1
asa << 4, anda	1
themselves. But implementing a	1
ARRAYSIZE. Another example: //	1
electrical connections rather than	1
A2 = A +	1
"=m"(n) : "m"(x) :	1
A. Hoisie, SIAM 2001.	1
(IDE) supports multiple programming	1
TR 18015, "Technical Report	1
Numbers in the table	1
amounts of memory will	1
fld qword ptr x;	1
Calculating the difference between	1
(v. 15.0) is using	1
polygon or bitmap than	1
~(~a)=a x-xxxxx-- (a&b)|(a&c) =	1
/vms Fastcall functions /Gr	1
sample more data than	1
everybody. So please don't	1
unwise to use it.	1
systems"). An application with	1
looses ownership of the	1
p2->Hello(); // Writes "Hello	1
8.23b. Calculate polynomial with	1
d); Now the two	1
144 The above examples	1
circuits consisting of digital	1
14.1b int factorial (int	1
143 if (u.i &	1
14.1a int factorial (int	1
ecx+eax*4. The result ebx	1
Reinterpret cast The reinterpret_cast	1
max = 110; int	1
77) shows which reductions	1
theory. Advice on how	1
constructor" to transfer ownership	1
14, with some changes	1
Number) if an overflow	1
grow in the future.	1
Pointers, references, and stack	1
Unpredictable branches that select	1
QueryPerformanceCounter functions for millisecond	1
workload between multiple CPU	1
u[0]. 14.10 Mathematical functions	1
class). If the same	1
seeing an increasing number	1
distributors are often abusing	1
2B, and 3A and	1
(Red Hat). PathScale C++	1
optimally. The speed for	1
optimally, or from knowing	1
view. This instruction set	1
competition. Processors with multiple	1
8.42n, 2004. Open Watcom	1
group books 1994. Mostly	1
thank the many people	1
www.openmp.org. Documentation of the	1
interesting because it makes	1
~a&~b=~(a|b) --xxxx--- a &	1
;eax=addressofa ;edx=addressinr ; ecx	1
"static" or "__attribute__((visibility ("hidden")))".	1
0x800 apart. I will	1
subtract this value from	1
works, here's an explanation.	1
@gnu_indirect_function"); // Make the	1
optimizations, as explained below.	1
matrixes. Algorithms that are	1
speeds. If I write	1
tmmintrin.h SSE4.1 smmintrin.h SSE4.2	1
{}; void xplus2() {	1
forgets that the system	1
7. If the arrays	1
integer: // Example 15.1b.	1
module2.cpp. The simplest way	1
last: // Example 7.35b	1
14.0 80.8 65 65	1
SelectAddMul_AVX2, SelectAddMul_dispatch; // Define	1
Choose the strongest optimization	1
list[j].c; } Here, we	1
r.a + r.b;} The	1
places). Some compilers have	1
Linux) 4. Align arrays	1
decrementing a pointer does	1
Accessibility guidelines should be	1
constructors. A class doesn't	1
x10 = x8*x2; return	1
Generic version CriticalFunction =	1
F64vec4 Table 12.5. Vector	1
system-independent, in another module.	1
DynamicArray[i] = WhateverFunction(i); //	1
cross-module optimizations when interprocedural	1
therefore, always to specify	1
FuncCol(i)) * sizeof(float) in	1
requesting a map file	1
locally. Access to remote	1
8.3a float parabola (float	1
12.4c. Same example, vectorized	1
a+b=0, and then 0+1.23456	1
"Software Optimization Guide for	1
listing. Use the "generate	1
eax. The loop initialisation	1
game or animation. It	1
polynomial(x) = 2.5*x^2 -	1
cc[i]); } 109 }	1
Time-based sampling: The profiler	1
uninstallation of programs should	1
a+b=b+a a*b=b*a a+b+c=a+(b+c) (a+b)+c=a+(b+c)	1
remaining bits represent a	1
u.d is negative or	1
branch). This feature uses	1
conversions.................................................................................................... 40 7.12 Branches	1
forbids the user to	1
107. A disadvantage of	1
Walking through a linked	1
(1985). This standard is	1
de-allocated. This is the	1
.................................................................................................................. 60 7.30 Exceptions	1
/O3 -O3 Interprocedural optimization	1
dispatching: 1. How much	1
dispatching, then it is	1
C++0x support. Make a	1
(b1*b2); The trick of	1
1./1.30767E12, 1./2.09227E13}; float x2	1
*temp; for (temp =	1
segmented memory, such as	1
integral number of vectors.	1
compiler). Fastcall functions are	1
Weighing the above advantages	1
workaround methods depend on	1
Users should get a	1
Problems with invalid pointers	1
-m32 -m64 -static /MT	1
bool, enum as well	1
branch, which is the	1
/arch:SSE4.1 -mAVX /arch:AVX /QaxSSE3,	1
performance: The first time	1
editions). Do not turn	1
[ecx+eax*4]. This is all	1
Borland/CodeGear/Embarcadero C++ builder Has	1
easier. I have done	1
1000. The loop in	1
ready made containers is	1
studied do not make	1
0.666666666666666666667; This is actually	1
A2; // Table //	1
commpage. These functions are	1
uses. There are also	1
powN<true,0> { public: static	1
0x3700, 0x3F00 and 0x4700.	1
matrix[row][column] = row +	1
performance). Aligned operands means	1
describes how this works	1
{2.6f, 1.5f}; a =	1
non-sequentially because it may	1
1% goes to actually	1
errors; make sure allocated	1
1) y *= x;	1
(typically 64) can improve	1
hackers often have exploited.	1
errors, and some tips	1
formula: (set) = (memory	1
Certainly not! 250 μs	1
occupies a space in	1
multi-threading, e.g. Intel Math	1
"xmmintrin.h" // header for	1
occupied throughout the whole	1
experimental results in table	1
condition: // Example 7.32b	1
runtime). The following techniques	1
c1, c2; double temp;	1
Dr Dobbs Journal, 2002).	1
switching to protected mode	1
formulas in this example	1
trace with a debugger.	1
Single-Instruction-Multiple-Data (SIMD) operations. The	1
condition, and increment. The	1
protected: T a[N]; public:	1
zigzag course that reflects	1
topic, see my free	1
complaints should be regarded	1
(XMM), 256 bits (YMM),	1
local: 1. Add the	1
20. The fact that	1
D, Pascal, Fortran and	1
throw(A,B,C) to tell explicitly	1
fills up the loop	1
local. This makes it	1
precise floating point calculations.	1
Predefined macros Compiler identification	1
local, and use the	1
column-wise. Assume now that	1
__intel_cpu_features_init_x() does the same	1
stall because the CPU	1
=0; list[i+1] = 1;	1
accelerators The choice of	1
Addison-Wesley. Third Edition, 2005;	1
absvalue = a[i].u[1] *	1
eax,0. The loop body	1
dword ptr n; #endif	1
ger or double) /arch:SSE2	1
recommendations are based on	1
decomposition, we should preferably	1
targets. A switch statement	1
undesired. Example: // Example	1
bytes). This has a	1
Turn on the option	1
12.6. Function with vector	1
7.32b. A for-loop has	1
VTune, for AMD CPUs	1
[1.0, 2.0) by setting	1
if), but no compile-	1
referencing it twice. You	1
VTune; AMD's profiler is	1
stupid things. Looking at	1
worrying too much about	1
storing. The standard solution	1
...................................................................... 32 7.4 Enums	1
7.29b floata; boolb=0; static	1
"Hacker's Delight". Addison-Wesley, 2003.	1
Storage on the stack	1
Unsigned is faster than	1
blurred as the standard	1
7.29a float a; bool	1
dummy; double a[arraysize], b[arraysize],	1
eliminating the if-branch in	1
FatalAppExitA(0,"Array index out of	1
emulating the so-called Java	1
satisfies the user's needs.	1
(int)n - 2, x	1
with, e.g. the option	1
appropriately. Users should get	1
168.5 513 513 58.7	1
x10; } // x^2	1
168.3 Table 9.3. Time	1
streaming audio or video	1
(2.5f * x -	1
commas and semicolons in	1
reciprocal_divisor = 1. /	1
usual object file format.	1
?Func2@@YAXQAHAAH@Z ENDP ecx, 1	1
<float.h> #include <math.h> #define	1
temp++ actually adds 16	1
doing. See the end	1
unreasonably large. 156 16.3	1
popularity when a genuine	1
(rebased) once more by	1
ja $B2$3: ret ALIGN	1
(YMM), and soon also	1
2.0) by setting the	1
dates back to around	1
Called directly // Writes	1
(-a)*(-b) = a*b -	1
row, column; for (row	1
position above the diagonal.	1
constructor. A default constructor	1
2B. There are hundreds	1
number). Different compilers behave	1
(0, 2, 4, etc.).	1
78. Assume no pointer	1
decimals of the fraction.	1
executables for 32-bit and	1
among the most frequent	1
Installing a second application	1
largest_abs) { largest_abs =	1
8.15b. The integer representation	1
towards zero, rather than	1
b[i]*c[i], though this only	1
Compiler-specific keywords Fast function	1
maintained for the sake	1
efficient: // Example 7.18	1
LoadVectorA(void const * p)	1
c[arraysize]; // Enable exception	1
performance, it is also	1
sensible balance between these	1
Interprocedural optimization /Og Whole	1
Assembly name Intrinsic function	1
powN<true,N> { public: static	1
a+b+c = a+(b+c) -	1
compelling security reason for	1
profile. It may be	1
cumbersome to use for	1
403 int ReadB() {return	1
pmmintrin.h Suppl. SSE3 tmmintrin.h	1
experience. Occasionally, the clock	1
executable: a debug version	1
vector). The first generation	1
Environments) have facilities for	1
machines? Possible solutions to	1
those who want to	1
a[i].u[1] * 2; //	1
scheme should be weighed	1
IDE, for debugging facilities,	1
(N-1)) return powN<(N1&(N1-1))==0,N1>::p(x) *	1
investigating performance problems. The	1
novector to tell the	1
110; int i; ...	1
spaces. This is called	1
signaling the availability of	1
passed as parameters to	1
<pmmintrin.h> // SSE3 required	1
sub-vector. A long dependency	1
IEEE standard 754 (1985).	1
(|) works even if	1
expensive, while the type	1
N-1 is inferior. A	1
dominating and there are	1
fastcall)) __fastcall Noncached write	1
interrupted. Now it is	1
17.4 129 129 130	1
script languages, it is	1
lookup[b]; If a bool	1
const*)p);} // Function to	1
Vec16uc 16 8 short	1
xxn(x4, x2*x, x2, x);	1
i/2; } } The	1
According to the standards	1
microarchitecture. A higher level	1
team projects, it is	1
abs(v.f) } The multiplication	1
(".type CriticalFunction, @gnu_indirect_function"); //	1
one-man projects, it is	1
vectorization............................................................. 117 12.7 Mathematical	1
None of the compilers	1
MAX(a,b) (a > b	1
buffer, branch pattern history,	1
roughly estimate that the	1
pow(x,n) As we can	1
<<6 ); 7.26 Overloaded	1
arrays: // Example 12.4a.	1
Processors". www.amd.com. Advices on	1
Instrumentation: The compiler inserts	1
i&15 is guaranteed to	1
("hidden")))". A more complicated	1
buffers for storing text	1
_mm256_i64gather_pd unlimited 8 bytes	1
twice. You can avoid	1
(2013) both 32-bit and	1
capability to reduce various	1
_endthread() cleans up the	1
2.5*x^2 - 8*x +	1
__debugbreak();. If you run	1
system- specific parts of	1
calls, if there are	1
fine- tune the code	1
asmlib, which is available	1
aiming at explaining the	1
found, then it is	1
subtask before coordination with	1
lrint. Unfortunately, these functions	1
c[i]); } } //	1
231-1 int32_t long long	1
serves as entry point.	1
latencies are listed in	1
audience for educational purposes	1
ced functions) /Gy -ffunction-	1
full. This may require	1
if. This is a	1
bloat. It is common	1
radical solution of making	1
Putting simple variables into	1
absence of such checks	1
FuncB(i); } FuncC(i); }	1
solving the problem is	1
programmers' time, but also	1
Four typical uses of	1
(a+b). This can save	1
objects? It may not	1
y. The purpose of	1
violations, invalid pointers, etc.	1
processor) when the XMM	1
sourcebook for fast 32-bit	1
horizontal add, etc. SSSE3	1
comparison. On big endian	1
broken up. The two	1
*)alloca(n * sizeof(float)); //	1
spell-checking and repagination are	1
int)size) { cout <<	1
7.34a. Use macro as	1
SSE). The YMM registers	1
CPU-type is already known	1
communicating between threads. The	1
even-numbered logical processors (0,	1
meaning for member functions.	1
a<<(b+c) - n.a. -	1
mixes float and double	1
encryption algorithms, cannot easily	1
tried to make the	1
coef[16] = { //	1
fallacy of measuring performance	1
referenced from any other	1
0xC0000091L void MathLoop() {	1
formalism. The splitting of	1
underflow: // Example 7.5.	1
mark end of procedure	1
sub-vectors that fit the	1
polymorphism. It is sometimes	1
__assume_aligned directive to tell	1
polymorphism, which is more	1
polymorphism: // Example 7.43a.	1
menus of a graphical	1
(Microsoft, Intel) know that	1
f, x, y; x	1
date): Microsoft Visual studio	1
Examples: // Example 14.10	1
MOVNTPS _mm_stream_ps SSE Store	1
lacks the self-explaining menus	1
arranged in regular patterns	1
(c+d) before it has	1
pushed on the stack	1
USB sticks may not	1
brand, family and model	1
(b+c) can be avoided	1
"frame pointer". The standard	1
Sdouble { unsigned int	1
tested, and very useful	1
Sum3(S3 & r) {return	1
duration. The best way	1
lifetime of your software.	1
temp++) { temp->a =	1
14.13c int list[301]; int	1
consecutively? If objects are	1
14.13a int list[300]; int	1
fill up the queue	1
8.15b struct S1 {double	1
_mm_i64gather_pd unlimited 8 bytes	1
finally (4) access the	1
hybrid solutions are now	1
Func1(list, &list[8]); } Here,	1
workday or more. Many	1
instantiated at compile time.	1
flaws in the CPU	1
pointers). An optimizing compiler	1
file" option for the	1
IntegerPower<10>(x); } 152 If	1
tested: Microsoft C++ Compiler	1
analyzing program performance and	1
S2 { public: int	1
S3 { public: int	1
(a+b)+c = a+(b+c) -	1
{1.1, 0.3, -2.0, 4.4,	1
elements, as follows: Type	1
(static_cast<MyChild*>(this))->Disp(); } }; //	1
cross- compiled on a	1
GetLogicalProcessorInformation in Windows) to	1
it). This can be	1
substantial. This gain in	1
A*x*x + B*x +	1
AES, PCLMUL wmmintrin.h AVX	1
u < 231 then	1
driver. A call to	1
combined. For example: //	1
disadvantages. The original method	1
loose the ability to	1
Processors with multiple cores	1
investing in a big	1
arguments. This closely follows	1
www.agner.org/optimize/asmlib.zip contains various functions	1
Round to nearest integer	1
reductions. Algebraic reduction is	1
kludgy. The few clock	1
sched_setaffinity). The program should	1
answer. Beginners are advised	1
out-of- order calculation capabilities.	1
r1, r2, c1, c2;	1
GUI development, database integration,	1
fence instructions, but these	1
eee is the exponent,	1
(Scalar means not a	1
Omitting the standard stack	1
nine, even though it	1
$B2$2: mov mov 2:8+esp	1
7.10b char a =	1
d.y; Fortunately, most compilers	1
7.10a bool a, b;	1
randomness in order to	1
thread, and only if	1
development", Addison- Wesley 1997.	1
selected. Compiler has insufficient	1
BigArray[1024] __attribute__((aligned(64))); // Linux	1
shortly. The following examples	1
latencies, throughputs and micro-operation	1
perspective of usability. This	1
latencies. 8.5 Compiler optimization	1
<<, >> can test	1
FuncRow(int); int FuncCol(int); const	1
versions: class CChild1 :	1
1.0E8, c = 1.23456,	1
12.4c is quite tedious	1
"Intel® C++ Compiler Documentation".	1
illogical that the compiler	1
Programmer’s Manual", Volume 1	1
AND-OR construction in example	1
(short int)i; This conversion	1
!b) rather than the	1
versions, each carefully optimized	1
microcontrollers. I am not	1
-b to a <	1
-a > -b to	1
_mm_prefetch SSE Store 4	1
12.4. Vector class libraries	1
MyChild> class CParent :	1
bb[size] ); Alignd (	1
building blocks such as	1
universal, flexible, well tested,	1
pool all the objects	1
&list[100] is (int)(&list[100]) =	1
Entry to dispatched function	1
add_elements(__m128 const & x)	1
Returning objects of a	1
++i). But when the	1
NUMROWS = 100, NUMCOLUMNS	1
(s0+s1)+(s2+s3); Now s0, s1,	1
Primitives (IPP). Works with	1
narrow range then a	1
12.4e. Same example, using	1
DLL's (dynamically linked libraries	1
"Moving blocks of data",	1
sqaure: for (r2 =	1
&SelectAddMul_dispatch; // Dispatcher void	1
mutexes. Open database connections.	1
move. It is unacceptable	1
nfac; xn *= x;	1
detecting errors that seldom	1
move, depending on the	1
"Inner Loops: A sourcebook	1
distinct tasks. A critical	1
(a&b)&(c&d) a ^0 =	1
License, optional commercial license	1
core, but it requires	1
string, wstring or CString	1
0.82 0.59 0.27 strlen	1
heading You can subtract	1
60. In the case	1
Prefetching data The prefetch	1
vectorization, such as Gnu,	1
position. Windows DLLs use	1
0.89 0.40 0.30 4.5	1
ahead. It is less	1
15] += 1.0f; This	1
scanner that scans all	1
logic. Some guidelines are	1
ifunc branch). This feature	1
/Gr Function level linking	1
n∙(n-1)!. If we want	1
Transposing a matrix is	1
controlling the order in	1
shared_ptr. auto_ptr has the	1
databases. The operating system	1
trying the techniques in	1
multitasking environment, between different	1
(27 - 80 clock	1
(20 - 45 clock	1
(total cache size) /	1
8.5b a += 2;	1
/GL --combine -fwhole- program	1
8.5a void Plus2 (int	1
it) load into memory	1
strategies It is quite	1
requested. See page 45.	1
delayed for several seconds	1
List[i]++; Here, the compiler	1
you. Optimized function libraries	1
assumes that we know	1
variable: // Example 7.26b	1
2003. Contains many bit	1
assumed that the reader	1
builder. Not optimized for	1
! and the corresponding	1
nowadays stress the importance	1
Templates...............................................................................................................57 7.29 Threads ..................................................................................................................	1
OneOrTwo5[b!=0] as OneOrTwo5[(b!=0) ?	1
maps etc. It is	1
9.10, then the nontemporal	1
steps. All source files	1
Updating mechanisms often disturb	1
-axAVX. This will make	1
inverting the sign bit:	1
(int)(&list[100]) = (int)(&list[0]) +	1
_mm_or_si128(c2, bc); // Store	1
ebx,eax / shr ebx,31	1
specialization. This is how	1
specialization, not with a	1
improved. 3.2 Use a	1
Fortran. These directives are	1
Meyers: "Effective C++". Addison-Wesley.	1
(a1*b2 + a2*b1) /	1
evaluated, because the result	1
OneOrTwo5[b!=0]; will also work,	1
x(0) {}; void xplus2()	1
vmldExp2 Intel SVML v.10.3	1
rounded to 100000000. When	1
Truncation is slow. Value	1
1.2345; Change this to:	1
duration compared with the	1
pointers: The trick violates	1
_mm. These functions are	1
Wikibooks. The following list	1
switches; so that it	1
interleave the two formulas	1
27 The number of	1
0.57 0.44 0.12 memcpy	1
0); DontSkip = dummy[0];	1
Eclipse when compiling for	1
real time applications. Remember	1
B*x + C; }	1
2002). In some cases,	1
"generate map file" option	1
true/false Loopunrolling x-xxxx--x Profile-guided	1
detected until 10 -	1
supercomputers with massively parallel	1
initializing pointers to zero,	1
mirrored in the level-1	1
matrix[FuncRow(i)][FuncCol(i)] += x; Here,	1
Implicit type conversion //	1
underestimate this time lag.	1
rule. Splitting up a	1
Installation problems. The procedures	1
undocumented. 2.7 Choice of	1
bitmap than to draw	1
0x7FFFFF) | 0x3F800000; //	1
2A and 2B. There	1
valuable source of information	1
type-casting. It is used,	1
bases, but there is	1
redirects it to the	1
(SSE2): #include <xmmintrin.h> _mm_setcsr(_mm_getcsr()	1
severe delays if the	1
member. This pointer is	1
vectors) /arch:SSE -msse /arch:SSE	1
mentally flawed approach to	1
connect them. The hardware	1
bility of the programmer	1
n+1; // Approximate exp(x)	1
Sutter: A Pragmatic Look	1
primitive, but efficient, way	1
transposing and copying different	1
computer, including the profiler	1
closest to the truth	1
print out results printf("\n%2i	1
evaluation of the operands	1
foreground jobs and 10	1
only). Specifies a function	1
obtain, such as eliminating	1
investigated by the methods	1
power, loop unrolled double	1
(handle != INVALID_HANDLE_VALUE &&	1
11.1 for IA-32/Intel64, 2009.	1
Constructor // Initialize to	1
11.6 64 64 32	1
media such as floppy	1
benefits of a copy	1
11.8 127 127 126	1
powN<(N & N-1)==0,N>::p(x); }	1
bias of the Intel	1
utilized appropriately. Users should	1
MKL relies on the	1
263-1 int64_t 29 64-bit	1
F64vec2 F32vec8 F64vec4 Table	1
language", section 17.9: "Moving	1
X. 14.13 System programming	1
(remove unreferen- ced functions)	1
X" is simply not	1
developing so fast that	1
aligned, and make sure	1
2.0/3.0 than to calculate	1
7.31b char string[100], *p	1
7.31a char string[100], *p	1
powN<true,N-N1>::p(x); #undef N1 }	1
Language Runtime, CLR, to	1
noticeable. The following example	1
gigabytes of data. The	1
>>= 1; } return	1
103) will be able	1
learning process where the	1
7.43b. Compile-time polymorphism with	1
links. 20 Copyright notice	1
UnusedFiller; }; int order(int	1
50-50 chance of going	1
know). The code can	1
overview of the problem	1
supposed to call the	1
14.4b if ((unsigned int)i	1
15.1a. Calculate x to	1
Mbytes. There may also	1
interactive programs because the	1
version). This wasteful behavior	1
bitofn // return y	1
happens. This is the	1
error-prone. The program has	1
article on compiler optimization.	1
entries. This may improve	1
risky. The returned pointer	1
built with another compiler.	1
Members of parent and	1
majority of end user's	1
build code for the	1
(multithreaded) /arch:AVX /openmp /MT	1
int)(i - min) <=	1
justifies the relatively small	1
8.13a int i, a[100],	1
8.13b int i, a[100],	1
~, <<, >> can	1
wheel. The containers in	1
come. Even big software	1
(gcc v. 4.5.2, July	1
self-explaining menus of a	1
actively invalidate the cache.	1
2.5}; return list[x]; }	1
a.x, y + a.y);}	1
weigh the advantages over	1
resource-hungry applications to perform	1
zero-bits if unsigned. This	1
reorganized in such a	1
(a&~b)|(~a&b)=a^b --------- ~a ^	1
__try { // Main	1
minimizing memory fragmentation. Bounds	1
relation to execution time.	1
b[r][c]; } } }	1
enum, const, or #define	1
8.21, you could calculate	1
14.15b if (a *	1
fine then it is	1
Usability for Nerds at	1
CPU-dispatching (see page 122)	1
double) /arch:SSE2 -msse2 /arch:SSE2	1
main, but also when	1
truly represent a known	1
allocation, deallocation and garbage	1
seen, is certainly a	1
(MFC). A competing product	1
sprintf, etc. But beware	1
double: // Example 14.23b	1
CriticalFunction, @gnu_indirect_function"); // Make	1
reorganize: // Example 15.1c.	1
convoluted template metaprogramming is.	1
b[i]; c[i] = temp	1
.R. for AVX. These	1
restrictions. A GNU Free	1
copyrighted by Agner Fog.	1
network. Various development tools	1
arraysize; i++) { //	1
express any algorithm with	1
cheaper and more efficient	1
re-allocation is needed. Objects	1
de-referenced in order to	1
Web systems should be	1
restart the computer while	1
(dynamically linked libraries or	1
(j = 0; j	1
clearing arrays It may	1
auto_ptr. Smart pointers can	1
Non-strict floating point -ffast-math	1
List[ArraySize]; ... for (int	1
experiments. Contentions in the	1
acceptable. 3.6 Dynamic linking	1
*(++p) because in the	1
Vec4uq Vec4f Vec2d Vec8f	1
Modulo by a constant	1
improvements). // Example 8.26b	1
vectorize, or #pragma novector	1
doubles by comparing bits	1
so, then you can	1
Compile-time polymorphism with templates	1
weekdays. The maximum number	1
price GNU General Public	1
PSDK). Supports the OpenMP	1
Noncached write #pragma vector	1
printf(Greek[n]); } The declaration	1
Unlike a pointer or	1
interface, another thread can	1
(MKL v. 7.2). This	1
response. It is the	1
MFC application. The development	1
supported"); return; } //	1
misprediction, or long dependency	1
loader. 2. Position-independent code.	1
(1./1.2345) at compile time	1
array[++i] because in the	1
Func1(int x) { return	1
responses to simple actions	1
offering profiling tools that	1
Programming in the way	1
First-In-Last- Out (FILO) basis	1
Inserting your own profiling	1
(10000 / 64) %	1
cpuid // Read time	1
16.2. The measured time	1
Advice on how to	1
a+a+a+a = a*4 -	1
PTR[ecx+eax*4],ebx eax, 1 eax,	1
mode): ; Example 8.26a	1
{1.0f, 2.5f}; a =	1
kludgy that it may	1
clauses: initialization, condition, and	1
throughout the whole program	1
x8 = x4*x4; double	1
eliminates the need for	1
straightforward. The MASM assembly	1
create a new one.	1
non-const reference, a const	1
dropping the graphical user	1
Studio. This tool can	1
SSE4A ammintrin.h AMD XOP	1
friend function or operator	1
inlining, common subexpression elimination,	1
linking, as explained in	1
12.2, the optimized code	1
unnecessarily wasteful in the	1
caught by the operating	1
structure), the microprocessor doesn't	1
checked before storing. The	1
a[i+1]; s2 += a[i+2];	1
(true) { a =	1
107), OpenMP and automatic	1
122) for the latest	1
62. If the critical	1
source, and the availability	1
96. 14.5 Integer division	1
coded. If the software	1
further. The first thing	1
Branch/loop function vectorized: void	1
key? If the key	1
sizeof(float)); // (Some compilers	1
x-xxx-x-- 0/a=0 ---xx--xx (-a==-b)=(a==b)	1
xx x x- x	1
key. Do objects have	1
Menus, buttons, dialog boxes,	1
conform to the standard	1
sizeof(float)). Now, the factor	1
password. The log on	1
Linked lists and other	1
classes): // Example 12.9b.	1
compilers............................................................................. 74 8.3 Obstacles	1
transition from AVX code	1
(3 - 10 clock	1
Copy protection. Some copy	1
10.1.020. Functions _intel_fast_memcpy and	1
TR18015 Technical Report on	1
happening. It is possible	1
keys within a limited	1
assignment operator, or an	1
Namespaces........................................................................................................... 65 8 Optimizations	1
alternatingly several times in	1
e, f, x, y;	1
2005. Codeplay VectorC v.	1
_mm_malloc and _mm_free. A	1
exit(), abort(), _endthread(), etc.	1
sizeof(list)); A multidimensional array	1
hand-held devices are becoming	1
a;} float parabola (float	1
5.82 (Embarcadero/CodeGear/Borland C++ Builder	1
year or two. Often,	1
ex xn n 0	1
1./720., 1./5040., 1./40320., 1./362880.,	1
throughputs and micro-operation breakdowns	1
for(i=i_div_3=0; i<300; i+=3,i_div_3++){ list[i]	1
meta- programming is so	1
CFALSE; } } 34	1
CFALSE: c = 0;	1
Except for the simplest	1
Include file dvec.h vectorclass.h	1
entirely inside one function,	1
(&ArraySize) is taken. A	1
form. A disadvantage of	1
cut off the binary	1
developed. A CPU dispatch	1
frequency, as explained on	1
lineage of software that	1
nor slower than truncation	1
x*x + 1; }	1
error-handling function that simply	1
correspondence between function names	1
areas where speed is	1
occasionally predict that the	1
forms a long dependency	1
reusability and systematization of	1
141. Applications that generate	1
First-In-First-Out or First-In-Last-Out access,	1
old-fashioned. Development in C++	1
n;} This code will	1
u[1] by u[0]. 14.10	1
indication of which optimizations	1
x*8 is replaced by	1
complicated. If the total	1
block, but this memory	1
ended queue) allocates one	1
-msse2, -mavx, etc. for	1
strongest optimization option available.	1
remember that your code	1
Keep often used functions	1
Memory-hungry applications force the	1
sizeof operator. The code	1
server in full use	1
affects other parts of	1
decision at different times:	1
0.75 0.18 0.11 1.21	1
0.77 0.89 0.40 0.30	1
Nothing in the calculation	1
<bool IsPowerOf2, int N>	1
staircase function of the	1
?: operator here is	1
economy and small code	1
1./8.71782E10, 1./1.30767E12, 1./2.09227E13}; float	1
ipow(x,10); // used for	1
packing, unpacking needed. Predictable	1
Contains many bit manipulation	1
attribute which can be	1
E-book Usability for Nerds	1
(int)d; // Truncation is	1
7.2. Alignment of data	1
s1, s2 and s3	1
_intel_fast_memcpy and __intel_new_strlen in	1
graphic brushes, etc. Locked	1
vectors........................................................................ 119 12.8 Aligning	1
9.1a int Func(int); const	1
9.1b int Func(int); const	1
absvalue, largest_abs = 0;	1
mathimf.h that come with	1
GetTickCount or QueryPerformanceCounter functions	1
registers; see page 122.	1
(.lib or .a), but	1
2'nd order polynomial: //	1
verifying, debugging and maintaining	1
lesson we can learn	1
forward access to a	1
original, poorly designed program.	1
translate these addresses to	1
Occasionally, the clock counts	1
improvements. Making too many	1
absvalue; largest_index = i;	1
position-independent, makes a PLT	1
conditional move, depending on	1
9.1. Time for transposition	1
frame, saving and restoring	1
frame" or "frame pointer".	1
int8_t short int in	1
104). The table of	1
Vec8f Vec4d 16 16	1
Vec8i Vec8ui Vec4q Vec4uq	1
x^3, x^4 F32vec4 xx4(x4);	1
.................................................................................... 124 13.3 Difficult	1
1.5f : 2.6f; The	1
--combine -fwhole- program /Qipo	1
_mm256_i32gather_epi32 unlimited 4 bytes	1
__declspec(noalias) or __restrict or	1
unequally can become a	1
(b&c) = (a&b) |	1
.exe file, is acceptable.	1
printf("Gamma"); break; case 3:	1
polynomial: // Example 8.23a.	1
commas. There should be	1
popped from the stack	1
engineering principles to use.	1
polynomial. Scheduling A compiler	1
burdensome position-independent code and	1
trial versions are available	1
contiguous. The code becomes	1
................................................................. 107 12.2 AVX-512	1
thinks "what works best	1
_mm_load_ps(coef+i); // s +=	1
maintenance. However, this is	1
downloaded program updates should	1
(*CriticalFunction)(parm1, parm2); } int	1
b1; y2 = a2	1
explaining the relative efficiency	1
(ArraySize) is constant and	1
prepared for several iterations	1
iterators that are used	1
implies more than it	1
200. Next, we are	1
safety, you may store	1
(a|b)&(a|c) = a|(b&c) x-xxxx--x	1
2006 (Red Hat). PathScale	1
2007 (www.intel.com/technology/itj/). 10.1 Hyperthreading	1
2004 - 2014. Last	1
53). No general statement	1
ready-made profiler. This does	1
Detect supported instruction set	1
GetPrivateProfileString and WritePrivateProfileString to	1
vector::reserve with a prediction	1
CParent<CChild2> { public: void	1
storage............................................................................. 26 7.2 Integers	1
query certain operating system	1
7.33b const int size	1
delete). 88 Object oriented	1
compose a bitfield by	1
prototype: void F1() throw();	1
fragmentation. Bounds checking is	1
OK, however, to pass	1
sorting, searching, and mathematical	1
y2; y1 = a1	1
fatal errors if they	1
scarcity of registers. This	1
Rick Booth: "Inner Loops:	1
MOVNTI _mm_stream_si32 SSE2 Store	1
-100+100+100 = 100. Now,	1
classes............................................................................................ 51 7.18 Class	1
initializer lists, switch statement	1
(www.intel.com). If you are	1
1./362880., 1./3628800., 1./39916800., 1./4.790016E8,	1
non-zero, and therefore count	1
initializes x to 0	1
g(x) is calculated twice	1
discover that there are	1
-2.0 55 In this	1
93). All common implementations	1
(release version) in the	1
publicly available information. They	1
optimized, using assembly language	1
discrete icon signaling the	1
-opt-report Table 18.2. Compiler	1
unsatisfied with the performance	1
safe, of course. It	1
entries use 64 bits	1
other, then put the	1
seemingly simultaneously. If the	1
imported pointer, but this	1
standardized. It is not	1
compensate for the difference	1
maintain and verify than	1
sin. Pointer elimination A	1
sin, etc. Overriding the	1
rightmost 1-bit removed. If	1
............................................................................... 8 2.5 Choice	1
insertion of a new	1
object: (1) get its	1
instead. The Gnu libraries	1
saved. Any other allocated	1
_mm_andnot_si128(mask, bc); // OR	1
8.11b int SomeFunction (int	1
8.11a int SomeFunction (int	1
(Integrated Development Environments) have	1
opposite). 9.10 Cache contentions	1
"AMD64 Architecture Programmer’s Manual",	1
0x20, Saturday = 0x40	1
DTRUE: d = 1;	1
DTRUE; } } else	1
exchange data or pointers	1
supposedly is system-independent, in	1
digits. The exponent is	1
44. The dispatching mechanism	1
digits, so the value	1
www.agner.org/optimize/#vectorclass All these libraries	1
(absvalue > largest_abs) {	1
8.23b has two loop-carried	1
defined(__GNUC__) // 32-bit Linux,	1
excuse that "we don't	1
SelectAddMul_SSE2 #elif INSTRSET ==	1
system-specific. In order to	1
Predictable branches that can	1
Later models had the	1
www.agner.org/ optimize/#vectorclass Include file	1
factors. The way to	1
operators). The same argument	1
(b&&c) = a ?	1
35 This is optimal	1
34 else { CFALSE:	1
'?', '@' and '$'	1
-2.0, 4.4, 2.5}; return	1
int)a / 10; //	1
holding the pointer. These	1
module, and to put	1
Running multiple threads on	1
hint, but it can	1
system-specific graphical interface calls.	1
instrset_detect(); 116 // Set	1
remotely. If frequent updates	1
distributions of Linux, BSD	1
Loops: A sourcebook for	1
"we don't support processor	1
little-known alternative to using	1
Hoisie: "Performance Optimization of	1
InstructionSet(): // Example 13.1	1
decryption, data compression Most	1
crystal ball reveals that	1
resolution. A much higher	1
absent in a use	1
Similarly, we are seeing	1
name, regardless of scope	1
(approximately): if (absvalue >	1
reset or goes into	1
disassembly, probably without information	1
ordering? If you need	1
arranging data in order	1
hints as pragmas in	1
functionality. This will be	1
decoded in several stages	1
a<<b<<c=a<<(b+c) x-xxx--xx a |	1
__intel_cpu_feature_indicator where each bit	1
Vol. 11, Iss. 4,	1
unchanged. The problem with	1
unchanged, while the expression	1
tag on a program	1
Or, if protection against	1
Combining the Borland compiler	1
fetch the variable from	1
(c1 = 0; c1	1
reserved for dynamic allocation.	1
balanced mix of additions	1
convenient. It is easier	1
(when vector operations are	1
effectively preventing illegitimate copying.	1
specification. The empty throw()specification	1
high. It may be	1
native floating point execution	1
rendering graphics on the	1
First-In-First- Out (FIFO) basis	1
line: static inline void	1
dilemma can be solved	1
(b*c)/d, it can happen	1
propagate through the calculations	1
varies between 9 and	1
line, because the threads	1
framework........................................................................... 14 2.8 Overcoming	1
floats: float * DynamicArray	1
timediff[NumberOfTests]; for (i =	1
floats. The same applies	1
22). 159 18 Overview	1
Place non-polymorphic functions in	1
abc; }; Bitfield x;	1
ambiguous and may produce	1
models. However, we must	1
correspond to any known	1
_mm_permutevar_ps 4 4 bytes	1
7.38b. Alternative to multiple	1
Y; Y += Z;	1
BigArray[1024]; // Windows syntax	1
3B. developer.intel.com. AMD: "AMD64	1
steps to access a	1
looping through a linear	1
Func1(2); ... } If	1
flawed approach to CPU	1
about. Function inlining The	1
pop-up messages saying please	1
signifying one of the	1
renaming. The CPU can	1
manually, but if we	1
<malloc.h> void SomeFunction (int	1
spell checking. Any task	1
sequential, and you cannot	1
&list[0]; temp < &list[100];	1
(Not A Number) if	1
day be implemented in	1
complications. A double is	1
least, it can be	1
VTune and AMD CodeAnalyst.	1
__vrs4_expf __vrd2_exp AMD LIBM	1
x-xx----x x-xxxxxx- x-xxxx-x- x-xxxxxxx	1
identifies any hot spots	1
--------x a/1=a x-xxx-x-- 0/a=0	1
a|(b&c) x-xxxx--x ~a&~b=~(a|b) --xxxx---	1
double's of 8 bytes	1
lists. A linked list	1
lists, switch statement jump	1
programmed in a hardware	1
most. The opposite of	1
Print heading You can	1
designers have gone to	1
Try to allocate more	1
contiguously in the memory.	1
8.1b float parabola (float	1
x,y coordinates // default	1
8.1a float square (float	1
-fno-strict-overflow. You may deviate	1
usable library if possible.	1
Reset floating point status:	1
likelihood that certain parts	1
fixed-size array is made	1
dependent. The stack unwinding	1
right-most 1-bit in binary	1
--------- ~a ^ ~b	1
143. The trick will	1
||). The bitwise operators	1
facilitate porting between platforms,	1
2007. PGI C++ v.	1
12.9b. Taylor series, vectorized	1
esp+8 and esp+12 and	1
...................................... 88 9.5 Alignment	1
economy, cache efficiency and	1
lately. Vector class library	1
structures: // Example 9.1a	1
row-wise, then the mirror	1
lookup-table static. Example: //	1
reached with a 32-bit	1
8.16 float a, b,	1
__rdtsc()). The time stamp	1
(GOT). These table lookups	1
8.17 char a =	1
8.18 float a =	1
Sequential forward access to	1
may, in addition, set	1
multithreading. 7.30 Exceptions and	1
7.43 on page 58	1
7.42 int Multiply (int	1
renewed. Context switches are	1
7.45 // Portability note:	1
7.44 class C1 {	1
7.4. Signed and unsigned	1
two(2,2,2,2,2,2,2,2); // Roll out	1
while-loop is also a	1
Compiled languages include C,	1
1/n! 1., 1./2., 1./6.,	1
378.7 168.5 513 513	1
counting clock cycles at	1
"\nError: Instruction set SSE2	1
neutralize each other. This	1
x.i |= 0x80000000; //	1
38.1 97 Table 9.1.	1
38.7 512 512 2048	1
"__attribute__((visibility("hidden")))". Use whole program	1
animations is of course	1
Manual". developer.intel.com. Many advices	1
demonstration purposes. Available from	1
cards, etc. Use an	1
1./6.22702E9, 1./8.71782E10, 1./1.30767E12, 1./2.09227E13};	1
hand and insert the	1
caller, and so on.	1
32, 64, ...). We	1
provokes an error. //	1
operand. Likewise, if the	1
memory-hungry software in two	1
provoked here in a	1
32; float matrix[rows][columns]; int	1
WhateverFunction(i); // ... }	1
unavoidable. It may be	1
apparently has no effect.	1
DLL. Another alternative worth	1
_mm_stream_ps SSE Store 16	1
perform poorly for the	1
mark_end; This solution is	1
96). Virtual functions in	1
x^1, x^2, x^3, x^4	1
-ftrapv, but this is	1
libircmt.lib. Function names are	1
1.2345); The compiler will	1
repetitive. The simplest case	1
(n) { case 0:	1
consumers. Choose the strongest	1
request for inlining a	1
N: #define N1 (N	1
"Alpha", "Beta", "Gamma", "Delta"	1
(be aware of possible	1
artificially changed to the	1
animation. It is possible	1
cons of using classes.	1
tolerance. The time it	1
0x3F00 and 0x4700. These	1
17is calculated as(a <<	1
reputation. The compactness of	1
Iu8vec8 16 4 short	1
(/Oa). The easiest way	1
saturated addition, fast approximate	1
offsets). Example: // Example	1
$B1$2: mov shr add	1
knowledge of the C++	1
list[i].b = 2.0; }	1
stub. If different versions	1
Espresso) that can reduce	1
Guide for AMD Family	1
"Integrated Performance Primitives". These	1
T+6, and the whole	1
examples: strlen function. The	1
bear in mind, that	1
log(2.0) is only calculated	1
andnot(a,a) = 0 -	1
12.8a. Sum of a	1
0x7FFFFFFF; // set sign	1
-mavx, etc. for Linux)	1
"__attribute__((visibility ("hidden")))". A more	1
2:8+esp eax, edx, ecx,	1
c2, mask); // Store	1
anything, you have to	1
pulses since the CPU	1
disappears when running in	1
requests for elements in	1
reliable. Event-based sampling: The	1
Typically it should save	1
constructing the object on	1
Non-public distribution to a	1
GB, but not in	1
writable data section needs	1
c2; double temp; //	1
inttypes.h is available then	1
attempting to write the	1
Debugging. The profiler inserts	1
indexes, working with sets	1
--xxxxxx- a-(-b)=a+b ---xxx-x- a+0=a	1
preprocessor can do because	1
enters the market for	1
July 2011). Instead, the	1
lookup[2] = {2.6f, 1.5f};	1
Surprisingly, we end up	1
because, in most cases,	1
jeopardizing safety, you may	1
draws a whole polygon	1
UNIX shell script. Interpreted	1
_mm256_permutevar_ps 4 4 bytes	1
'$' are allowed in	1
exist. Therefore the compiler	1
9.3. Time for transposing	1
freely without any cost	1
taking cache effects into	1
values: // Example 14.28	1
zation by multiple threads	1
(4096). This will make	1
process...................................................................................................... 25 7 The	1
values, and last all	1
maximum, saturated addition, fast	1
discussions about code optimization.	1
#define, const or typedef	1
_fpreset(); _controlfp_s(&dummy, 0, _EM_OVERFLOW);	1
observed between the optimization	1
15.1d to 15.1c as	1
package, including all runtime	1
piecewise or re- allocating	1
division: Integer division by	1
unused. This removed the	1
ab[size]; int i; ...	1
steal the user's time.	1
array[i++] is more efficient	1
FPGAs. The difference between	1
x^n/n! xxn *= xx4;	1
access................................................................................................................ 20 3.8 System	1
OMF format. Alternatively, make	1
nicely into the vector	1
finishes in a short	1
keyword: // Example 14.1c	1
keyword, for floating 26	1
2GHz A clock cycle	1
cryptography (www.intel.com). If you	1
Professional and Enterprise editions).	1
keyword. The CodeGear compiler	1
strcpy, strcat, strlen, sprintf,	1
7.35b struct S1 {	1
7.35a struct S1 {	1
plain old data file	1
_MM_SET_FLUSH_ZERO_MODE(_MM_FLUSH_ZERO_ON); It is strongly	1
_mm_stream_si32 SSE2 Store 8	1
GB. When considering whether	1
advisable to make it	1
mentations have no checking	1
_mm_i32gather_ps unlimited 4 bytes	1
100000001.23456. The float type	1
9.6b 64 64 14.0	1
processors). It has excellent	1
weighed against the costs	1
/arch:SSE2. The compiler will	1
2009). Intel C++ Compiler	1
UnusedFiller in the structure	1
flaws: The best possible	1
Booleans................................................................................................................... 33 7.6 Pointers	1
notion of a "function".	1
Atom). The following example	1
kbytes. This is quite	1
Intel) know that standard	1
comparison: // Example 14.4b	1
Intel. See Intel Technology	1
FreeBSD and Open BSD	1
somewhat. The AVX2 instruction	1
set: // Example 12.4b.	1
SelectAddMul_dispatch(short int aa[], short	1
<intrin.h> long long ReadTSC()	1
reduced. This may be	1
Avoiding the cost of	1
reporting here: return *(T*)0;	1
profiling, but it often	1
profiling. When a hot	1
numbered consecutively? If objects	1
phase in order to	1
(b1 * b2); y1	1
builder Has an IDE	1
Uncached memory store An	1
responsi- bility of the	1
thought about the possibility	1
(SVML). This is supplied	1
xx(-)x- - x-xxxx--x x-xxxx--x	1
8.23a. Loop to make	1
indexed in a non-sequential	1
event-counters do. This results	1
often. This is necessary	1
Microcontrollers used in small	1
genuine compiler became available.	1
calculate. If there is	1
modularity, reusability and systematization	1
modularity. For example, it	1
localize the first byte	1
optimize, and reading the	1
Instead of returning a	1
Repeating the break a	1
Fine-grained parallelism is the	1
script. Interpreted code is	1
28) The threads have	1
work, 133 although slightly	1
28, the cache will	1
calculated. Therefore, it is	1
"FDIV bug". The FDIV	1
3.1, 2007. PGI C++	1
slower, especially when the	1
reciprocal: // Example 14.14a	1
__attribute__((fastcall)). The fastcall modifier	1
cc[size] ); // Function	1
fistpl %0 " :	1
VML and SVML. The	1
Bridge) because it is	1
mmintrin.h SSE xmmintrin.h SSE2	1
long, double. Misaligned data.	1
wastes several clock cycles	1
inexact if b and	1
odd-sized vector data. The	1
1./4.790016E8, 1./6.22702E9, 1./8.71782E10, 1./1.30767E12,	1
thread-like scheduling in an	1
T+5, then it can	1
Itanium systems. The Intel	1
Relocation. All pointers and	1
brands, and one that	1
2056 38.1 97 Table	1
NUMROWS; row++) for (column	1
Lists of instruction latencies,	1
module2.cpp int Func2() {	1
12.8b. Sum of a	1
0.29 0.28 strlen 128	1
14.18c double a, b;	1
xmmintrin.h SSE2 emmintrin.h SSE3	1
blocking: int r1, r2,	1
0.27 strlen 128 bytes	1
0.22 memcpy 16kB unaligned	1
((C & 3) <<6	1
((B & 3) <<	1
Func(a[i]); } The data	1
creates or modifies many	1
work-around can be used:	1
results, which may be	1
log) inside the critical	1
a*b*c=a*(b*c) a+b+c+d = (a+b)+(c+d)	1
non-vector library. 119 The	1
recycled? There is a	1
carry) instructions where the	1
OS. See page 128	1
FactorialTable in example 14.1c	1
timediff[i]); } The code	1
can. It is therefore	1
JNZ). This solution can	1
chain, especially on the	1
to) the time stamp	1
!(a<b)=(a>=b) (a<b && b<c	1
134. The table should	1
shows, the method of	1
feeds a branch into	1
1.0) { ... Here,	1
improvements in microprocessor hardware	1
introduced in Linux and	1
Hence, it is hardly	1
x86) of the standard	1
8.2a double a, b;	1
8.2b a = b	1
alternately FuncA and FuncB,	1
routines and device drivers	1
billions of times before	1
1.09 1.25 1.61 n.a.	1
x4∙xn-4. There is no	1
103), but the compiler	1
1980 where RAM memory	1
14.7b, we are in	1
14.7b. Testing multiple conditions	1
Ignoring virtualization. The time	1
affected by __fastcall. The	1
x.d = y.d +	1
x.f = 2.0f; x.i	1
7.9b char a =	1
7.9a bool a, b,	1
identical. For example, for	1
somewhere in F1? Then	1
!b = !(a ||	1
bus is saturated. This	1
(FIFO) basis then use	1
practice, of course, because	1
8.24 can be implemented	1
8.25 void Func ()	1
disassembler. Note that the	1
&&, ||, ! and	1
8.20 module1.cpp int Func1(int	1
(critical stride) = (number	1
8.22 #ifdef __GNUC__ #define	1
smart. They can detect	1
12.9a. Taylor series float	1
SSE2, preferably 32 for	1
r.b;} The three functions	1
Multiplying by a power	1
post-increment operator i++ are	1
bugs, compatibility problems, usability	1
C1::f. But an optimizing	1
F32vec8 F64vec4 Table 12.5.	1
Will be called only	1
overkill. Don't use an	1
8.3b a = 5.0f;	1
ordinary procedure linkage table	1
paying the performance costs.	1
Journal Vol. 11, Iss.	1
-1.0E8, b = 1.0E8,	1
imprecision in some rare	1
provide the best optimization	1
in-between the floating point	1
__intel_cpu_feature_indicator_x. You can bypass	1
recovery information for function	1
(WTL). A WTL application	1
2.8. Asmlib: v. 2.00.	1
indicates a specific CPU	1
46 A common situation	1
(WTL): // Example 7.43b.	1
44 In some cases	1
decision. 13.4 Test and	1
42 If you access	1
indicated by the caller	1
workstations and scientific vector	1
41 Float to integer	1
230.7 513 513 2056	1
faster, except perhaps for	1
(cc[i] + 2) :	1
85 ; eax =	1
/Qipo -ipo No exception	1
indeed. It is possible	1
a[1] = 2; Unfortunately,	1
6); Or, if protection	1
hackers. It is necessary	1
exact. Multiple divisions can	1
(row = 0; row	1
friendly. It is free	1
predictable, then it is	1
(OnIdle in Windows MFC).	1
abusing the update mechanism	1
Leaf functions are more	1
"Delta" }; if ((unsigned	1
0x10, Friday = 0x20,	1
................................................................................................................ 48 7.15 Function	1
C2::Disp() is done at	1
sleep mode. See the	1
(SIMD) operations. The total	1
if-else structure), the microprocessor	1
(); __asm__ (".type CriticalFunction,	1
feeding an array of	1
----x---x a/1=a xxxxxxxxx 0/a=0	1
violate or circumvent operating	1
34. In some cases	1
1.19 13 Asmlib Gnu	1
(a&&b)||(a&&!b)=a x--xx---- (a&&b) ||	1
mathe- matical applications. But	1
VHDL or Verilog. Common	1
postponed until the program	1
rise to some extra	1
u[2]} a[size]; unsigned int	1
browsing that previously required	1
counter: // Example 7.31b	1
0.3, -2.0, 4.4, 2.5};	1
Henry S. Warren, Jr.:	1
encounter another problem. The	1
Bit-fields of sizes other	1
unacceptable. Each of the	1
live-ranges do not overlap	1
0.30 4.5 0.82 0.59	1
Serialize // Prevent optimizing	1
Reference Manual". developer.intel.com. Many	1
consuming, especially if there	1
problems, usability problems and	1
(GOT) in order to	1
0.38 0.44 0.40 n.a.	1
----x---- !(a<b)=(a>=b) (a<b &&	1
created, deleted, copied or	1
transpose(matrix); } } }	1
contention. You may skip	1
powN<(N1&(N1-1))==0,N1>::p(x) * powN<true,N-N1>::p(x); #undef	1
(r1 = 0; r1	1
wrapping the vectors into	1
omitted, of course, if	1
p->a + p->b;} int	1
newer. The CPU family	1
consisting of digital building	1
estimated calculation time of	1
Underestimating the cost of	1
edx. Furthermore, this solution	1
Z. Each dependency chain	1
Architectures Optimization Reference Manual".	1
hide them for the	1
specification to F1 only	1
decoding and perhaps };	1
abort(), _endthread(), etc. then	1
others. While some of	1
Z; Z += A2;	1
memory................................................................. 120 12.9 Aligning	1
considered. A realistic performance	1
general. Assume that a	1
7.38a. Multiple inheritance class	1
hundreds of different intrinsic	1
Func2(double x) { return	1
studio 2008, v. 9.0	1
reinvent the wheel. The	1
yesterday's big mainframe computers.	1
4.5.2, July 2011). Instead,	1
NEAR ; parameter 1:	1
CodeGear, Codeplay and Watcom	1
http://www.agner.org/optimize/asmlib.zip contains complete code	1
compiler) integer parameters are	1
2040 38.7 512 512	1
7.43a. Runtime polymorphism with	1
recursive templates. The powN	1
Trying to read the	1
29. Each cache line	1
returning. F1 is prevented	1
sizeof(b)); 47 Most compilers	1
scheduler. This can be	1
summarizes the different integer	1
(b*c) overflows, even if	1
prints an appropriate error	1
optimization", Coriolis group books	1
(2.0f); b = a	1
list[i & 15] +=	1
pow(x,N) where N is	1
[eax+400] DWORD PTR [eax],	1
-156. Surprisingly, we end	1
speeded up significantly just	1
y.d + 4.; };	1
used: // Example 13.2.	1
m. The advantage of	1
m) { return x	1
y.a + 1.; x.b	1
y.b + 2.; x.c	1
y.c + 3.; x.d	1
Coriolis group books 1994.	1
...). We can make	1
m> int MultiplyBy (int	1
...)) { ... Here	1
oldest Pentium CPUs which	1
correspondingly two different types	1
excellent support for inline	1
(float)i; f = float(i);	1
grandparent class: class CGrandParent	1
Vec4q Vec4uq Vec4f Vec2d	1
ebx,1 adds this to	1
(u.i[1] < 0) {	1
simplicity. But a sorted	1
Actually, only the code	1
geometry and other odd-sized	1
Vec4i 32 4 unsigned	1
saves time for the	1
aliased #pragma optimize("a", on)	1
Vec4d 16 16 32	1
(MS Visual Studio 2008	1
scheduling in an application	1
PowerPC). We can make	1
guarantee that all destructors	1
Virtualization is becoming increasingly	1
algorithm. The choice of	1
compete for the same	1
searches of the kind:	1
both, while the expression	1
writes. If the cache	1
p->member is equally fast	1
confirmed this by measuring	1
hence higher speed. In	1
EXCEPTION_CONTINUE_SEARCH) { // Floating	1
14.21. // Only for	1
versatile. Fortran is also	1
systematization of the software	1
footprint. If, for example,	1
memcpy: // Example 7.33b	1
summing up the factors	1
ports, etc. of only	1
Assume, for example, that	1
ultimate solution would be	1
organized. Floating point comparisons	1
parsing are provided in	1
© 2004 - 2014.	1
official C standard says	1
fragmentation of the code	1
construction in example 12.4b	1
modified, if necessary, to	1
40% more time to	1
9.0 CodeGear Borland bcc,	1
suppress. GOT and PLT	1
reflected, first and foremost,	1
137, respectively. Increment and	1
terminates the program before	1
26). Variables stored on	1
perfectly. As explained above,	1
16.4 65 65 33	1
-fwhole- program /Qipo -ipo	1
terminated and the user	1
. The value is	1
backwards. Copying or clearing	1
"Gamma", "Delta" }; if	1
often, but such expressions	1
history, etc. may have	1
c1() : x(0) {};	1
integer-to-float conversion takes more	1
arraysize = 1000; unsigned	1
Vec16us Vec8i Vec8ui Vec4q	1
---xxx-x- a+0=a x-xxxxxx- a*0=0	1
subexpressions, and induction variables	1
unreferenced functions. It is	1
non-recursing template specialization, not	1
puts the programmer in	1
15.0) is using a	1
identifier names. We can	1
gained remarkably in popularity	1
stage that a detailed	1
i++,i2+=2.0f)a[i]=i2; 41 Float to	1
(byte code). The source	1
asmlib.. // or from	1
combining multiple .cpp files	1
scope. A macro will	1
selecting optimize performance for	1
............................................................. 96 9.11 Explicit	1
connections, etc. The C++	1
(temp = &list[0]; temp	1
added. This method is	1
Namespaces There is no	1
merge the multiple data	1
142). 30 Overflow behaves	1
flush and fence instructions,	1
ASP and UNIX shell	1
documented. The examples in	1
standards. Such schemes are	1
pointers.......................................................................................................37 7.9 Smart pointers	1
correctness must be found	1
(rather than pointers to	1
(zero with sign bit	1
CriticalFunction_Dispatch(int parm1, int parm2)	1
BTB can cause branch	1
profile-guided optimization. This works	1
PROC NEAR ; parameter	1
0x3FF unsigned int sign	1
7.32a double x, n,	1
(*p != 0) *(p++)	1
issues, and I believe	1
coding rules apply as	1
F2(float x[]); void F3(bool	1
options....................................................................................... 160 19 Literature	1
0x3FFF unsigned int sign	1
$B1$3: pop ret ALIGN	1
0.0; // copy a	1
rewritten with the use	1
mutexes and message systems.	1
_mm256_i64gather_epi32 unlimited 8 bytes	1
attack for hackers. It	1
clock. This gives a	1
exp, sin, etc. Overriding	1
rights. Software should use	1
fluctuating and it may	1
combine the multiple .cpp	1
b<c && a<c) =	1
incur a large delay	1
included. Combining the Borland	1
compiler-specific. You cannot expect	1
security, but may be	1
reinterpret_cast operator is used	1
CPU-dispatcher that checks whether	1
1.5f; is efficient when	1
Sum1, Sum2 and Sum3	1
(*.ini files). 20 3.9	1
returned. There is no	1
1.25 1.61 n.a. 2.23	1
1.21 0.57 0.44 0.12	1
(also called properties) are	1
mechanisms. Modern microprocessors are	1
Warren, Jr.: "Hacker's Delight".	1
matrix[i][j] += x; This	1
pass a pointer or	1
mechanisms, and some of	1
Constantfolding xxxxxxxxx Codeplay Watcom	1
&CriticalFunction_Dispatch; // Lowest version	1
traditionally considered a software	1
Database queries can often	1
upon the double. Another	1
isolated into a separate	1
thorough analysis of the	1
EXCEPTION_EXECUTE_HANDLER : EXCEPTION_CONTINUE_SEARCH) {	1
isolates the least significant	1
ball reveals that similar	1
intrin.h (MS) x86intrin.h (Gnu)	1
Convert to unsigned for	1
pow, log, exp, sin,	1
denominator can even be	1
int)(max - min)) {	1
pattern, while Pentium 4	1
of. Big runtime frameworks.	1
Float to integer conversion	1
Sort the array after	1
excessively so. These containers	1
inlined, or optimized away.	1
1024/4 = 256 times	1
max) { ... can	1
/QaxAVX or -axAVX. This	1
delaying process is used	1
/Ox -O3 or -Ofast	1
/Oy -fomit- frame- pointer	1
reorganize the code so	1
intranet for automatic updates,	1
v.i * 2) {	1
(2,2,2,2), and store the	1
directly: Library exp function	1
INVALID_HANDLE_VALUE && WriteFile(handle, ...))	1
(Embarcadero/CodeGear/Borland C++ Builder 5,	1
/Oa -fno-alias Non-strict floating	1
/Og Whole program optimization	1
54. It is recommended	1
micro-operation breakdowns for Intel,	1
||, ! and the	1
Bit vector algebra reductions:	1
inputs. Let's take the	1
infinity, and this value	1
infinity. A typical implementation	1
utilizing its out-of- order	1
solution, but it increases	1
Larger data types: long	1
criticized for code bloat	1
PathScale. 2. Use the	1
reduction. For example, a	1
label. It uses ebx	1
despite the extra function	1
/O2 or /Ox -O3	1
reinstall a software package	1
framework, during start of	1
SSE3. // (This is	1
situation, but the programmer	1
modulo. For example, if	1
5.0f; b = 6.0f;	1
a[0] = 1; a[1]	1
hard-to-find errors, and some	1
new. The purpose of	1
/fp:fast /fp:fast=2 -fp-model fast,	1
adjusted if you change	1
dominating. At least, it	1
discriminating between CPU brands	1
36. There may be	1
Contents 1 Introduction .......................................................................................................................	1
Asmlib: v. 2.00. Intel	1
zero-terminated ASCII string to	1
pipelined, as explained above,	1
polymorphous class? This chapter	1
_mm_free. A more general	1
discovers that it has	1
_mm_stream_pd SSE2 Store 16	1
streams with different strides.	1
_mm_stream_pi SSE Store 16	1
2.20, glibc version 2.11	1
intervals. Some programs search	1
81). 77 Pointer aliasing	1
cycles). Floating point division	1
16is calculated asa <<	1
non-constant references require a	1
taken. A const pointer	1
irregular response times. It	1
extracts the functions that	1
taken, i.e. if there	1
games and animations is	1
lrint(d); // Rounding is	1
Is32vec4 Vec4i 32 4	1
Is32vec2 32 64 Iu32vec2	1
microcontrollers: Smaller microcontrollers have	1
(other than log) inside	1
-ipo No exception handling	1
x[]) { int b,	1
a[arraysize], b[arraysize], c[arraysize]; //	1
printf("Delta"); break; } This	1
1.2 in this example	1
ends the recursion template<>	1
quickly to keyboard or	1
restriction, but it doesn't	1
email and web browsing	1
(Windows, Linux, BSD, Intel-based	1
i*sizeof(S1). This is a	1
end. The reason for	1
147 14.12 Position-independent code	1
packed into a vector	1
0x2F00, 0x3700, 0x3F00 and	1
(Windows: /Gy, Linux: -ffunction-sections)	1
(!a&&b) = a XOR	1
temp2. Modern CPUs are	1
edition is available for	1
stride, as explained on	1
stride. Variables whose distance	1
stride) = (number of	1
temporarily lock a container	1
teachers to recommend that	1
stopping threads. Don't put	1
0x2C so that the	1
(CGrandParent) contains any non-polymorphic	1
caches. Typically, there is	1
positive. It will fail	1
Booth: "Inner Loops: A	1
Libraries for high precision	1
Because the C++ template	1
Find numerically largest element	1
2016. The same coding	1
!(!a)=a x-xxxxxxx ---x----- x--xx----	1
NAN. Avoiding the cost	1
Interrupt service routines and	1
platform-independent and compact. The	1
strcat, strlen, sprintf, etc.	1
(bit scan forward) instruction	1
required, but in example	1
numerical data is more	1
characters '?', '@' and	1
made) then it is	1
matrices. An efficient solution	1
Thursday, Friday, Saturday };	1
counterparts. In general, you	1
90. 15 Metaprogramming Metaprogramming	1
double..................................................................................... 140 14.8 Conversions	1
(Of course there is	1
language...................................................... 14 3 Finding	1
64). You may save	1
STL. Some STL templates,	1
matters: Division by a	1
0= 0 - n.a.	1
advance, because a fixed	1
operators............................................................................... 29 7.3 Floating	1
84). The compiler can	1
(Visual Studio 2005). Borland	1
13.1. Instruction sets A	1
new/delete or malloc/free should	1
14.22b unsigned int u;	1
14.22a unsigned int u;	1
technological point of view.	1
matters, which few programs	1
interprets the intermediate code	1
Run multiple processes or	1
vectorizing mathematical code. There	1
400, last byte at	1
www.open- std.org/jtc1/sc22/wg21/docs/TR18015.pdf. OpenMP. www.openmp.org.	1
15.1d. Integer power using	1
Taking the logarithm of	1
reloaded eight times because	1
features: The code section	1
Nerds at Wikibooks. The	1
user-written code with automatic	1
59 third generations classes	1
amd_vrd2_exp Agner's vector class	1
5; to int x	1
clearly better. The loop	1
-fno-alias Non-strict floating point	1
ingenious things to make	1
57 Templates are efficient	1
denominator: // Example 14.16b	1
Func1(double) pure_function ; double	1
later) instruction set is	1
Denmark. Copyright © 2004	1
StoreNTD(double * dest, double	1
(Both use 32 bits	1
5, 2009). Intel C++	1
two: // Example 11.2b	1
14.18a float a, b;	1
14.18b float a, b;	1
53. 7.24 Unions A	1
two, b * c);	1
Slongdouble { unsigned int	1
9.2b void F3(bool y)	1
9.2a void F1(int x[]);	1
Much of the advice	1
evicted. Don't mix nontemporal	1
advertise new versions of	1
(-a>-b)=(a<b) ---xx---x Divide by	1
short. In Windows, you	1
45. This may be	1
1./39916800., 1./4.790016E8, 1./6.22702E9, 1./8.71782E10,	1
occurrences of ArraySize by	1
Connecting several standard PC's	1
134) return FactorialTable[n]; //	1
12.1a, the compiler can	1
memset, or mathematical functions	1
destroyed. In 50 simple	1
have: // Example 12.8b.	1
memset: // Example 7.16	1
etc.). Older operating systems	1
9.2, such as flush	1
things. Looking at the	1
limitation and other flaws	1
8.24. Integer constant const	1
attacks and other abuse	1
7.32b double x, n,	1
undocumented Intel library function	1
surely rely on is	1
-1. The bitwise AND	1
met: the object is	1
shut down and restarted	1
sections. 3.3 Program installation	1
behaviors. Arrays are often	1
Very poor performance for	1
assembly-like intrinsic functions, inline	1
Addison- Wesley 1997. Mostly	1
following: 130 Compile for	1
difference, let's say that	1
bottleneck. Organize the data	1
sequence. If you know	1
__declspec(__align(64)) double matrix[SIZE][SIZE]; transpose(matrix);	1
rounds a floating point	1
expansions. Programmers do, however,	1
temp1 and temp2. Modern	1
0x40) % 0x20 =	1
temp. The compiler doesn't	1
printf("\nResults:"); for (i =	1
Low-level languages are good	1
0x0F) | ((B &	1
........................................................................... 54 7.22 Inheritance	1
powN<true,N/2>::p(x) * powN<true,N/2>::p(x); }	1
version) in the debugger	1
memcpy(b, a, sizeof(b)); 47	1
b[arraysize], c[arraysize]; // Enable	1
truth depends on whether	1
ADX instructions for high	1
ADC (add with carry)	1
realize that such devices	1
Contain one or multiple	1
objects, respectively (MS Visual	1
I64vec2 Vec2q 64 2	1
mitigated by making critical	1
-axSSE3, etc. (Intel CPU	1
objects) are possible only	1
2015 or 2016. The	1
r+i/2 could be calculated	1
lag. Thinking in terms	1
tedious. The code becomes	1
design. The ultimate solution	1
design, it is possible	1
scratch. This would not	1
0.63 0.75 0.18 0.11	1
---xxx--- a/a=1 --------x a/1=a	1
Programmable logic devices A	1
producer will try to	1
says. A code that	1
-ffunction-sections) which allows the	1
re-allocated every time it	1
nn ifbit=1 bitofn //	1
DEC, JNZ). This solution	1
whereas 64-bit Linux, BSD	1
Faster, but risk of	1
(Linux only). Specifies a	1
ns = 250 μs	1
Effective C++". Addison-Wesley, 1996.	1
XOP ammintrin.h (MS) xopintrin.h	1
XOR b Bit vector	1
stand alone compiler when	1
-fp-model fast, -fp- model	1
class? This chapter is	1
free) causes the memory	1
1./2.09227E13}; float x2 =	1
135). This extra check	1
caching, but it took	1
fprintf // define function	1
Sum3. Whether you want	1
block: 62 __try {	1
clients that depend on	1
1.4, 2005. Codeplay VectorC	1
column++) matrix[row][column] = row	1
occurred anywhere in the	1
tool. 7 The efficiency	1
iterator in some cases,	1
illegal operation that crashes	1
8.6a int a, b,	1
8.6b int a, b,	1
zip file of every	1
7.15a. Array with bounds	1
33% when the CPUID	1
signed. Be sure not	1
signed, or by extending	1
7.5. Set flush-to-zero mode	1
s0, s1, s2 and	1
remarkably in popularity when	1
Today (2013) both 32-bit	1
great lengths to reduce	1
files). 20 3.9 Other	1
/QaxSSE3, etc. -msse3 -mssse3	1
(www.agner.org/optimize/testp.zip). A particularly useful	1
everything, which is quite	1
Security. The vulnerability of	1
standard. An implementation of	1
methods: Instrumentation: The compiler	1
respectively (MS Visual Studio	1
v.10.3 & later __svml_expf4	1
v.10.2 & earlier vmlsExp4	1
tiling. This technique is	1
doubles: union {double d;	1
Next, we are adding	1
alternative. The theoretical background	1
Library) and other container	1
lea $B2$2: mov mov	1
StoreVectorA(void * d, __m128i	1
emphasized that the compilers	1
*.so) that belong to	1
en.wikipedia.org/wiki/Compiler_optimization. ISO/IEC TR 18015,	1
wmmintrin.h AVX immintrin.h AMD	1
flip-flops, multiplexers, arithmetic units,	1
Microsoft's .NET framework are	1
(/FAs or -fsource-asm). This	1
standards for the C++	1
140. Avoid conversions between	1
for(i=0,i2=0; i<100; i++,i2+=2.0f)a[i]=i2; 41	1
(Division is slow, you	1
i<301; i+=3){ list[i] =	1
valid) can possibly improve	1
CPU’s. Another function __intel_cpu_features_init_x()	1
ab[i].b = Func(ab[i].a); }	1
forwards, not backwards. Copying	1
elimination. The method in	1
unreliable. They sometimes give	1
port to different platforms	1
Currently includes optimized versions	1
cheap, in relation to	1
Library. The multiple CPU	1
(www.intel.com/technology/itj/). 10.1 Hyperthreading Some	1
timing, assembly language programming,	1
520 and leave the	1
properties) are always stored	1
result, true (1) or	1
reply about investigation of	1
14.17b double a1, a2,	1
52; // fractional part	1
costless in terms of	1
penalty. Branches are relatively	1
fetching, decoding and perhaps	1
afterwards. The clock counts	1
123; are equally efficient	1
groups of four (or	1
_mm_load_si128((__m128i const*)p); } //	1
sent me corrections and	1
(less than 65 bytes	1
_mm_exp_ps _mm_exp_pd AMD Core	1
noticeable but not long	1
_mm_exp_pd AMD Core Math	1
Step (1) is not	1
__declspec(cpu_dispatch(...)). See the Intel	1
c[size]; float register temp;	1
bb[i]*cc[i] is AND'ed with	1
memset(list, 0, sizeof(list)); A	1
broader perspective of usability.	1
NUMCOLUMNS; column++) matrix[row][column] =	1
semicolons in a loop	1
toggle multiple bits with	1
14.7a. Testing multiple conditions	1
Today's microprocessors have vector	1
holes of unused bytes	1
12.1. Vector classes defined	1
Therefore the compiler is	1
output, which is useful	1
i=0; has been translated	1
session. But lazy binding	1
algorithm, then you need	1
2014. Last updated 2014-08-07.	1
a[i+2]; s3 += a[i+3];	1
anda * 17is calculated	1
deviate from the above	1
Background services. Many services	1
"instrset_detect.cpp" // instrset_detect function	1
12.1b to 12.1a. Enable	1
_mm_add_epi16(a,b). Two libraries of	1
EXCLUSIVE OR operator (^)	1
8.26b: ; Example 8.26b	1
list[16]; int i; ...	1
formalism that requires several	1
full-size execution units. The	1
graceful way. You may	1
changes. A branch that	1
(ATL) and Windows Template	1
-parallel -openmp -static Generate	1
n++) { sum +=	1
(Examples can be found	1
Friday)) { DoThisThreeTimesAWeek(); }	1
relaxed floating point precision.	1
and) will cut off	1
Family 15h Processors". www.amd.com.	1
fprintf(stderr, "\nError: Instruction set	1
16.1. This code works	1
handle. Waiting for user	1
Uses debug version of	1
modifies many strings. In	1
specifically for the CPU	1
controversies over the C99	1
F1(int x[]); void F2(float	1
representation, except in the	1
Thus, we will calculate	1
http://www.agner.org/optimize/ - vectorclass www.agner.org/optimize/#vectorclass.	1
80.9 512 512 378.7	1
80.8 65 65 13.6	1
intelligible way by wrapping	1
computational power of the	1
__attribute__((aligned(16))). Specifies alignment of	1
measurement. If time is	1
obscured in optimized programs.	1
considerations. It is discussed	1
dictates that an object	1
crashes the program. The	1
83 called faster than	1
Look at Exception Specifications,	1
17.9: "Moving blocks of	1
multiplexers, arithmetic units, etc.	1
next. The carry bit	1
representations in two different	1
deallocate the space explicitly	1
_mm_store_si128((__m128i *)d, x); }	1
completely. For example: //	1
different. 64-bit Windows allows	1
succeeded in applying the	1
little-endian storage, but other	1
chapter. Using the out-of-order	1
Vec16c 8 16 unsigned	1
125 for this function,	1
14.16a double y, a1,	1
if-branch in example 7.30b.	1
mainly on my study	1
132. Unfortunately, table lookup	1
size_t is 32 bits	1
FILO manner? If objects	1
Higher inputs give overflow	1
86 add add cmp	1
coordinates // default constructor	1
b2 * reciprocal_divisor; y2	1
b1 * reciprocal_divisor; 14.7	1
"Macro loops" chapter in	1
b. But in more	1
VIA. The next section	1
happened to be possible.	1
Polymorphism is one of	1
32-62. This can be	1
motion. See page 78.	1
(www.boost.org). The "Intel Math	1
(seconds < 5) {	1
continue in dispatched version	1
Intel/x86-compatible microprocessors. The function	1
7.26b float a[100]; int	1
Journal, 2002). In some	1
(parallel composer) This compiler	1
7.26a float a[100]; int	1
possibilities for optimization. For	1
subtasks is necessary. 101	1
bottleneck, it is likely	1
analysis. If the program	1
speed.............................................................................................................. 153 16.1 Using	1
difference. Newest instruction set	1
nmmintrin.h (MS) smmintrin.h (Gnu)	1
const, or #define makes	1
SVML. The IPP library	1
non-object oriented programs. If	1
catching hardware exceptions. The	1
F1(); } catch (...)	1
used). You may use	1
2.6.30 and later. The	1
contentions, as explained on	1
causing return addresses to	1
StoreNTD(&a[c][r], b[r][c]); } }	1
F1. However, if F1	1
("fldl %1 \n fistpl	1
8.19. Devirtualization class C0	1
micro- processors have to	1
15.1b, and in this	1
module1.cpp int Func1(int x)	1
memory-intensive functions such as	1
F1? Then we are	1
account. You can calculate	1
project. Some of the	1
project, it is important	1
recoverable and non-recoverable errors;	1
3.x. These systems use	1
checking, as illustrated in	1
checking. Any task that	1
8.10b a = b;	1
8.10a if (true) {	1
yet. Supports both AMD	1
0.59 0.27 strlen 128	1
DontSkip; long long clock;	1
(&a); The compiler may	1
During the history of	1
---xx---x Divide by constant	1
view the software development	1
discontinued Object Windows Library	1
Address calculation is more	1
virtually no cost to	1
satisfactory. The following considerations	1
87. This will happen	1
-fp- model fast=2 Simple	1
.................................................................... 155 16.2 The	1
fetching a cache line	1
i2; for(i=0,i2=0; i<100; i++,i2+=2.0f)a[i]=i2;	1
zero(0,0,0,0,0,0,0,0); // Make a	1
card. Some systems also	1
Func1, while other compilers	1
convention says that a	1
(OWL). Several graphical interface	1
<, <=, > and	1
<. The result of	1
PHP, ASP and UNIX	1
non-reduced expression better explains	1
level. My recommendation for	1
released when the object	1
address: // Example 7.27	1
Enterprise editions). Do not	1
Vec2uq 8 32 char	1
statements............................................................................. 43 7.13 Loops......................................................................................................................	1
Mac, BSD Instruction set	1
www.agner.org/optimize/testp.zip. This tool is	1
CString. This is safe	1
receive new relevant information.	1
Mac: Darwin8 g++ v	1
expanded like a macro	1
solutions. Patches should be	1
solutions, depending on what	1
(a+1); c = (a+1)	1
7.30b int i; 45	1
7.30a int i; for	1
return; } // continue	1
published by Intel have	1
GetProcessAffinityMask in Windows). There	1
reinstalled and user settings	1
emulated processors and FPGA	1
map. Do objects have	1
/Qparallel -parallel -openmp -static	1
fffff is the binary	1
Basic, etc. But program	1
OneOrTwo5[b & 1]; Here,	1
Basic. A compiler for	1
fastest. The typical way	1
square(x) + 1.0f;} The	1
fastest: // Example 7.17	1
max(T const & a,	1
late. You should therefore	1
<float, 100> list; //	1
closer to the CPU	1
static_cast operator does the	1
performance/price ratio. The CISC	1
improvement in performance if	1
runtime, if only you	1
x^2, x^3, x^4 F32vec4	1
set). We can shift	1
corresponds to 16 lines	1
icon signaling the availability	1
3"); or __debugbreak();. If	1
1.61 n.a. 2.23 0.95	1
38). Is the size	1
__attribute__((aligned(16))) #endif const int	1
Documentation". Included with Intel	1
connection with reading the	1
satisfactorily on a non-Intel	1
(SDK or PSDK). Supports	1
alloca: // Example 9.3	1
Linear arrays are faster	1
list[301]; int i; for(i=0;	1
code.................................................................................. 148 14.13 System	1
Server 2008 R2 as	1
Comments All of these	1
synchronizing and communicating between	1
redesigning a program may	1
alloca, because it is	1
brushes, etc. Locked mutexes.	1
_mm_cvtss_si32(_mm_load_ss(&x));} static inline int	1
mind, that many users	1
addressing. In 32-bit Linux	1
Optimized function libraries for	1
multi-threaded software are available	1
7.3. Explain volatile volatile	1
Fog The present manual	1
;edx=addressinr ; ecx =	1
//=DeltaY // Store result	1
Similar operations on all	1
Alignment? Some applications require	1
startup code and main()	1
1.5f}; a = lookup[b];	1
doesn’t. The undocumented Intel	1
7.39 union { float	1
12.8a to 12.8b automatically	1
12.8b automatically and vectorize	1
"how many elements are	1
7.35 page 52. You	1
7.37 class S3 {	1
#) are costless in	1
connections rather than sequences	1
7.36 class S2 {	1
MAX(f(x), g(x)); In this	1
add_horizontal) static inline float	1
violates the strict aliasing	1
8*x + 2 return	1
www.agner.org/optimize and the FAQ	1
write: y = c	1
exploited. A good way	1
closely follows the mathematical	1
foremost, in the choice	1
remedy is memory pooling.	1
dependent and therefore not	1
c1::*MemberPointer; Here, the compiler	1
i--) *(p++) |= 0x20;	1
list[i].b. It can also	1
removable media such as	1
ignore, then the solution	1
atomic. It doesn't prevent	1
5). As soon as	1
87) is likely to	1
distributed. The intermediate code	1
degrades performance for the	1
Explain volatile volatile int	1
(VML, MKL). Works with	1
IsPowerOf2, int N> class	1
Func(ab[i].a); } There will	1
(NetBurst) CPU is designed	1
understands only the simplest	1
6! The speed on	1
ArraySize; i++) List[i]++; Here,	1
poorly. It is not	1
habit, it is true	1
log(2.0); ... } Here,	1
M processor may be	1
period and by the	1
flexibility, while execution speed,	1
fashion. It is used	1
3A and 3B. developer.intel.com.	1
CPU-time in library functions,	1
62 __try { //	1
CLR, to produce binary	1
0.95 0.6 1.19 13	1
exponent: // Example 14.26	1
operands: minimum, maximum, saturated	1
67 The maximum number	1
68 else { y	1
69 } else {	1
details). The Intel compiler	1
4.0.1. Gnu: Glibc v.	1
DLLs, configuration files, resource	1
Incrementing or decrementing a	1
conversion. The constructor or	1
browsers, different platforms, different	1
50; float matrix[rows][columns]; int	1
unrealistic that you can	1
identification. Such schemes cause	1
500 clock cycles. You	1
between. It is difficult	1
consult the general literature	1
iteration. This allows it	1
event, the clock counts	1
helpful for later maintenance.	1
costs. The time it	1
protocols and standardized file	1
instead: // Example 12.6.	1
(char, short int) are	1
moderately well. Supports three	1
aa, int * __restrict	1
overflows, even if a,	1
12.3. Intrinsic functions for	1
brutally interrupted. Now it	1
sign(i) ; shift right	1
occur: if (SIZE >	1
bcc, v. 5.5 Mac:	1
#undef N1 } };	1
1.fffff, where is the	1
"Technical Report on C++	1
converts a zero-terminated ASCII	1
sizeof(float)) = 8 *	1
Sfloat { unsigned int	1
erroneously called with IsPowerOf2	1
Subtractions use the same	1
Builder 5, 2009). Intel	1
as(a << 4) +	1
shifts one place to	1
intrinsics and automatic vectorization	1
$B2$3: ret ALIGN ;	1
Vec2d Vec8f Vec4d 16	1
breakdown. Many copy protection	1
subtasks, but it is	1
y?" then you may	1
driver involves the overhead	1
producers keep adding new	1
Vec2q 64 2 uint64_t	1
parts: one for constants	1
Is8vec8 8 8 unsigned	1
prototypes for each version	1
manuals: 1. Optimizing software	1
(int)(&list[0]) + 100*16, and	1
If, for example, you	1
breakdowns for Intel, AMD	1
minimize the amount of	1
uint16_t unsigned int in	1
32767 int16_t int in	1
parts, for example if	1
IPP library does not	1
courses in programming nowadays	1
fma4intrin.h (Gnu) all intrin.h	1
all, it will often	1
bodies above, it is	1
eax,1 is the loop	1
Loading data into a	1
(SIZE > 256 &&	1
Michael Abrash: "Zen of	1
actions like a key	1
risking to insert an	1
sign, eee is the	1
MathLoop() { const int	1
heuristic guidelines. Most caches	1
(n!) as an example.	1
root, RGB color difference.	1
GOT, and finally (4)	1
7.2). This library has	1
130. It is often	1
ameliorated by using nontemporal	1
installed can take several	1
Gauss elimination. The method	1
blog for details. The	1
Dobbs Journal, 2002). In	1
fundamental laws of algebra.	1
[eax+4], ecx 86 add	1
dest, double const &	1
("CriticalFunction"); typeof(CriticalFunction) * CriticalFunctionDispatch(void)	1
Change this to: //	1
scheduled in a separate	1
-fwrapv or -fno-strict-overflow. You	1
conversions. It does the	1
educational purposes is allowed.	1
state. This penalty should	1
i/2 in ebx ;	1
__vrd2_exp AMD LIBM Library	1
traffic and a server	1
address) / (line size)	1
Compatibility problems. All software	1
conversions: // Example 7.19	1
confined to a narrow	1
glitches in the output	1
funda- mentally flawed approach	1
matrix[SIZE][SIZE]; transpose(matrix); } }	1
FUNCNAME(short int aa[], short	1
matrix[c][r]. // Example 9.5a	1
__declspec(align(64)) int BigArray[1024]; //	1
\n fistpl %0 "	1
MultiplyBy<8>(10); a and b	1
accept expressions as arguments	1
suggestions for my optimization	1
Since most development methods	1
impacts on program performance.	1
(with new or malloc)	1
Your measurement code should	1
learn from this is	1
compatibility, second source, and	1
c1+TILESIZE; c2++) { swapd(a[r2][c2],a[c2][r2]);	1
slice are quite costly	1
division...................................................................................................... 137 14.6 Floating	1
_mm_shuffle_epi8 16 1 byte	1
__svml_expf4 __svml_exp2 Intel SVML	1
Complicated code is a	1
temp->b = 2.0; }	1
list[x]; } The advantage	1
temp->a = 1.0; temp->b	1
subexpressions that contain pure	1
(addition, multiplication, etc.) inside	1
guess, that compiler makers	1
12.1b. Vectorization with alignment	1
12.1b, the compiler cannot	1
&SelectAddMul_SSE2; // Error: lowest	1
imprecisions should be allowed	1
(Intel) #include <pmmintrin.h> //	1
__svml_exp2 Intel SVML +	1
hardware. Porting such an	1
followed by an EMMS	1
SelectAddMul_dispatch; // Define function	1
branches: one for the	1
prior to SSE4.1 and	1
a+1;. The compiler can	1
(but not in some	1
__intel_cpu_features_init() sets the variable	1
low-power CPUs (Intel Atom).	1
list[i+1];} sum1 += sum2;	1
IsProcessorFeaturePresent in Windows). Alternatively,	1
names, one global and	1
satisfied. The conditions that	1
distinctions between RISC and	1
i+=3,i_div_3++){ list[i] += i_div_3;	1
relocation at load time.	1
hours to install automatic	1
b+a, a*b = b*a	1
satisfied: 1. Use a	1
neverthe- less be possible	1
list[] = {1.1, 0.3,	1
clause. Comparing an integer	1
expandable, but it is	1
754 (1985). This standard	1
x2*x, x2, x); //	1
Should we try to	1
deprecated. This is because	1
porting between platforms, it	1
amd_vrs4_expf amd_vrd2_exp Agner's vector	1
hour. Neither is it	1
discriminates between CPU brands,	1
applying the various optimization	1
has. Assuming that processor	1
1023 1 fraction 2	1
Waiting for user input.	1
classes: // Example 12.4d.	1
p1->Hello(); CChild2 * p2;	1
_mm_blendv_epi8(bc, c2, mask); //	1
8.12a int i, a[2];	1
8.12b int a[2]; a[0]	1
CriticalFunction_Dispatch; // Function pointer	1
(Compile without the Common	1
Frequent context switches can	1
isolating a single function.	1
strongly recommended to set	1
manageable and easier to	1
include: Memory allocated with	1
totaling up to fourteen	1
(5) make the overflow	1
(MOVNT) are designed to	1
.NET, which is implemented	1
column-wise manner where the	1
exception-safe code Assume that	1
spends most of its	1
4.5 0.82 0.59 0.27	1
Size() { return N;	1
Sizes of different integer	1
4.; }; // Make	1
website. 5 Choosing the	1
buttons, dialog boxes, etc.	1
9.5a: 98 int r,	1
call, and the time	1
....................................................................... 77 8.4 Obstacles	1
1./5040., 1./40320., 1./362880., 1./3628800.,	1
ReadB() {return b;} };	1
printf("\n%2i %10I64i", i, timediff[i]);	1
7.1. Sizes of different	1
elements? If the container	1
(if valid) can possibly	1
caused by random events	1
x.f; // will give	1
---xx--xx (-a==-b)=(a==b) ---xx---- (-a>-b)=(a<b)	1
XOP, AMD only _mm_permutevar_ps	1
First-In-Last-Out access, sort and	1
sizeof(float) in order to	1
Hardware updating. The change	1
tricks Michael Abrash: "Zen	1
a= a a &	1
a: // Example 9.6b.	1
directory as the .exe	1
"Beta", "Gamma", "Delta" };	1
(b*2.0)/3.0 rather than as	1
(doubly ended queue) allocates	1
CriticalFunction(b, c); ... return	1
unreferen- ced functions) /Gy	1
scalar (Scalar means not	1
57). It is possible	1
63; // fractional part	1
Scott Meyers: "Effective C++".	1
delays. The easiest way	1
Read time You can	1
paralleli- zation by multiple	1
uint8_t unsigned short int	1
opportunities for parallelization in	1
Thursday = 0x10, Friday	1
_mm_i32gather_epi32 unlimited 4 bytes	1
gone to great lengths	1
aliasing, but the compiler	1
add_elements(s); // add the	1
Dispatcher. Will be called	1
void. Returning objects of	1
worse kind of error	1
((a+b)+c)+d. This is a	1
Classes (MFC). A competing	1
strlen, sprintf, etc. But	1
Constructor-style type casting //	1
correctness. It is therefore	1
miss. But if the	1
higher-priority thread running in	1
services. Many services that	1
library). The D language	1
[esp+4] DWORD PTR [esp+8]	1
N; } T &	1
DynamicArray = (float *)alloca(n	1
_mm_hadd_ps(x, x); s =	1
N) { // Array	1
design of small microcontrollers:	1
(depending on the processor)	1
obvious. See the compiler	1
obvious, then it may	1
FuncType(short int aa[], short	1
(1. / 1.2345); The	1
freely. The loop counter	1
x-xx--xx- x--x----- --xx----- x-xxx---x	1
b[r][c]); } } }	1
option) better: -Ofast -mveclibabi	1
replacements for switch statements	1
Performance". www.open- std.org/jtc1/sc22/wg21/docs/TR18015.pdf. OpenMP.	1
handler, even if no	1
increment. The three clauses	1
segmentation of the memory	1
integers: // Example 14.27	1
-openmp -static Generate assembly	1
behaviour is implementation dependent.	1
XOR'ing it with 1:	1
RTTI then turn it	1
divisor. In this case	1
a.y);} vector a, b,	1
r1+1; r2 < r1+TILESIZE;	1
increments seconds. A safer	1
handlers for cleaning up	1
references: If the Intel	1
composer) This compiler does	1
2-dimensional vector 56 public:	1
-128, and subtracting 1	1
//=A*x*x+B*x+C //=DeltaY // Store	1
applications: The cost of	1
/Fa for assembly output.	1
unrecoverable error without using	1
Things that may need	1
/Fm Generate optimization report	1
texts they point to	1
redesign. Some software development	1
0x3F800000; // Now 1.0	1
-fpic. This will generate	1
research on CPU dispatching	1
servicing. A command received	1
__cpuid(dummy, 0); DontSkip =	1
rows/columns in matrix 96	1
p->NotPolymorphic(); p->Hello(); p =	1
Hoisie, SIAM 2001. 9.11	1
e.g.: // Example 12.1b.	1
destroys any memory block	1
deque (doubly ended queue)	1
knows that it can	1
2010. This feature is	1
80x86 / x64 (Visual	1
restoring registers, and possibly	1
a2/b2; Here we can	1
_mm_cvtss_f32(s); } // Approximate	1
-read_only_relocs suppress. GOT and	1
newsgroups contain useful discussions	1
12.4b, rewritten with the	1
12.4b. Vectorized with SSE2	1
(rarely 64). You may	1
10000, then we have	1
b[0], a[1], b[1], ...	1
72). The compiler cannot	1
dimensions of the array	1
v 4.0.1. Gnu: Glibc	1
y2, reciprocal_divisor; reciprocal_divisor =	1
lightweight processors with low	1
;alignby4 ; mangled function	1
Coarse time measurement. If	1
vectorized: void SelectAddMul(short int	1
influenced by the requirements	1
5.5 Mac: Darwin8 g++	1
swapping. Software developers typically	1
breaking out of F1	1
Cannot optimize across modules	1
libmmt.lib and the header	1
speeding up 64-bit shared	1
;a ;r ; unused	1
_finite()) and redo the	1
Functional decomposition here means	1
ratio. The CISC instruction	1
unattended. Uninstallation should also	1
reflect this or for	1
;r ; unused label	1
2.5f}; a = OneOrTwo5[b	1
61. It is recommended	1
-m64 -static /MT 160	1
concentrating on important work.	1
(& and |) instead	1
preference is for C++	1
&list[8]); } Here, it	1
(6 integer and 8	1
(0 < 5) {}	1
(YMM) if the AVX	1
12.4d. Same example, using	1
process, and the destructor	1
best-case conditions. All disturbing	1
d.x; a.y = b.y	1
a+b=b+a, a*b=b*a x n.a.	1
(8 float or double	1
(A & 0x0F) |	1
(C << 6); Or,	1
developer may choose to	1
(B << 4) |	1
PREFETCH _mm_prefetch SSE Store	1
mangling. The characters '?',	1
susceptible to problems of	1
Stefan Goedecker and Adolfy	1
(SSE): #include <xmmintrin.h> _MM_SET_FLUSH_ZERO_MODE(_MM_FLUSH_ZERO_ON);	1
inte- ger or double)	1
/arch:SSE3 -mssse3 /arch:SSSE2 -msse4.1	1
sum. The trick is	1
ReadB needs to code	1
Verilog. Common devices are	1
inferior. A model with	1
dimension may preferably be	1
party security software. Background	1
Advices on optimization of	1
reporting. For example, in	1
wired for a specific	1
14.12a int list[300]; int	1
refresh the screen. There	1
inequality sign must be	1
Ready made container class	1
types. A disadvantage is	1
!a; can be optimized	1
defined(__unix__) || defined(__GNUC__) //	1
destructor, if any, must	1
destructor. A function that	1
wires that connect them.	1
_mm_clflush intrinsic function. Provoke	1
sizes? It is possible	1
SelectAddMul example (12.4e) with	1
--xxxx-xx a*1=a x-xxxxx-x (-a)*(-b)=a*b	1
Loops...................................................................................................................... 45 7.14 Functions	1
iset = instrset_detect(); 116	1
beginning. ret returns from	1
adhere to certain programming	1
__rdtsc(); return clock; }	1
3.0; The compiler will	1
Calculations in a loop	1
loop- carried dependency chain	1
i++)a[i]=2*i; The conversion of	1
non-recoverable errors; make sure	1
side-effects and its return	1
Looking at the compiler	1
loop? Certainly not! 250	1
Glibc v. 2.7, 2.8.	1
C1, so it can	1
written. This worked sufficiently	1
Partial template specialization for	1
a[] which will change	1
modularity and reusable classes.	1
properly. Many CPU dispatchers	1
fast=2 Simple member pointers	1
aa[size] ); // Make	1
throws an exception. Therefore,	1
feed into the pipeline.	1
former case x can	1
bug". The FDIV bug	1
considerably. Another serious burden	1
feel that a particular	1
relate to CPU-intensive code.	1
b++; will make the	1
well-known languages. My preference	1
6. If arrays are	1
antivirus program that scans	1
sizes, and they can	1
pipeline. If the wrong	1
" : "=m"(n) :	1
gates, flip-flops, multiplexers, arithmetic	1
games. Such a coprocessor	1
FactorialTable[n]; // Table lookup	1
Newer processors are sometimes	1
IntegerPower (double x) {	1
158. This manual is	1
'>') are not permissible	1
18.1. Command line options	1
obsolete within the lifetime	1
15.1c, but none of	1
prediction). 149 All code	1
-231 231-1 int32_t long	1
information, such as supported	1
a*b*c*2. It is quite	1
nagging pop-up messages saying	1
threads? Container classes are	1
7.22. // Example 7.22	1
www.yeppp.info And here is	1
&list[100]; temp++) { temp->a	1
Intel/MASM syntax: __asm fld	1
Keywords that work on	1
requires, of course, that	1
workplace and the system	1
risky because it involves	1
"standard stack frame" or	1
cached, but several hundred	1
p->f(); // Virtual call	1
checking). An error message	1
search: // Example 14.30	1
instrset_detect function // Function	1
measure. This is because	1
concentrate the optimization effort	1
double's. It is almost	1
Inlined functions have a	1
a*4 - n.a. -(-a)	1
this). Use rounding instead	1
x2; // x^4 //	1
Runtime, CLR, to produce	1
multiplications, which can take	1
That being said, I	1
reach element number 16	1
x2, x); // x^1,	1
76 Boolean XMM (vector)	1
75 (a&&b) || (!a&&c)	1
832 256 16 16	1
job, but it may	1
job. You have to	1
71 The compilers I	1
70 Induction variables An	1
www.openmp.org and the compiler	1
down. Remember to insert	1
79 Floating point induction	1
CPLDs and FPGAs. The	1
coincides with the beginning	1
8.14b int i, a[100],	1
press. 19 Avoid an	1
8.14a int i, a[100];	1
bit-mask which is all	1
worried about this condition.	1
"m"(x) : "memory" );	1
sign-bit if the integer	1
7.33a const int size	1
stupid. Some common compilers	1
pooling. It is more	1
pooling) than to allocate	1
shares the resources of	1
modular. The so-called objects	1
forward) instruction to localize	1
advantages: The i<20 loop	1
WritePrivateProfileString to read and	1
2005). Borland C++ 5.82	1
try, catch, and throw.	1
multiply-and-add Table 13.1. Instruction	1
only, then the effect	1
triangle is handled separately:	1
x-xxxx-x- x-xxxxxxx xxxxxxxxx xxxxxxx-x	1
Rounding is fast. Value	1
Quine–McCluskey or Espresso) that	1
n-1 multiplications, which can	1
laws of algebra. For	1
x^0/0! // n factorial	1
semicolons, while multiple statements	1
(/arch:SSE2, /arch:AVX etc. for	1
float(i); f = static_cast<float>(i);	1
decimals. It is recommended	1
not! 250 μs is	1
together...................................... 88 9.4 Variables	1
(live ranges) do not	1
-ffast-math /fp:fast /fp:fast=2 -fp-model	1
managing a memory heap.	1
Sum1() {return a +	1
rare. Testing for the	1
responded to at a	1
-100 to -56 which	1
2.; x.c = y.c	1
pre-calculated table. Even better:	1
a+b+c=c+b+a a+b+c+d = (a+b)+(c+d)	1
devirtualization (see page 73)	1
invoked with automatic vectorization.	1
128- bit vector registers	1
9.5b. // Example 9.5b	1
printer or other device	1
Uninstallation should also proceed	1
Half size execution units.	1
Important features 80386 32	1
Func2 were in the	1
say that you want	1
12.3a, for example, you	1
......................... 142 14.10 Mathematical	1
reads. The same can	1
1./120., 1./720., 1./5040., 1./40320.,	1
unions rather than type	1
Pascal, Fortran and several	1
namely the two induction	1
structure, data flow and	1
Multidimensional arrays should be	1
'this'. We can therefore	1
AVX2, or two 128-	1
<asmlib.h> void CriticalFunction(); ...	1
16-bit, 32-bit and 64-bit	1
u.i[1] ^= 0x80000000; because	1
much. Excessive loop unrolling	1
(eax) which contains the	1
on) __restrict __restrict __declspec(	1
attention of software programmers	1
level- 1 cache. This	1
maintainability of C++ projects	1
f=i; f = (float)i;	1
0x7F unsigned int sign	1
relying on the microprocessor	1
setup. on Intel CPUs:	1
Monday = 2, Tuesday	1
n'th degree polynomial of	1
"Register usage in kernel	1
a&b&c&d = (a&b)&(c&d) a	1
clause are separated by	1
ignored if the goal	1
union, as in example	1
i<20 loop control branch	1
<=, > and >=	1
relational operators (e.g. '>')	1
*x; double x4 =	1
Primitives" library contains many	1
finds the numerically largest	1
false: // Example 8.10a	1
square: // Example 8.1b	1
protection. Some copy protection	1
iterative in nature, it	1
objects), resource files, configuration	1
tricky. I have used	1
opposite: Don't put something	1
for-loop: i++; } }	1
complication that the same	1
++b; the compiler will	1
square. // This triangle	1
SelectAddMul_SSE41, SelectAddMul_AVX2, SelectAddMul_dispatch; //	1
strategy for saving a	1
AND'ing it with 2n	1
xplus2() { The effect	1
X?" rather than "what	1
Specifications, Dr Dobbs Journal,	1
million times less than	1
(new and delete). 88	1
reason. A program with	1
reason, you can use	1
-fopenmp /Qopenmp -m32 -m64	1
squares and handle one	1
Best-case testing is useful	1
investigation of the problems	1
disguise. Enums are exactly	1
route. This mechanism is	1
small, then it is	1
compactness of the code	1
overhead. Example: // Example	1
//=2*A //=A*x*x+B*x+C //=DeltaY //	1
2.6f; The ?: operator	1
%10I64i", i, timediff[i]); }	1
point-to-integer conversions in the	1
set?". A list of	1
loop-branch is usually predicted	1
vector(x + a.x, y	1
8.8b double x, y;	1
Encryption, decryption, data compression	1
8.8a double x, y,	1
~b = a ^	1
Firewalls, virus scanners and	1
x-xxx--xx a | 0	1
100*16, and temp++ actually	1
Newest instruction set available,	1
normalized, if possible, so	1
MFC). This method may	1
.............................................................................. 65 7.32 Preprocessing	1
widely different priority in	1
re-calculated every time Func	1
advise of using powers	1
Multithreaded programs must use	1
year. Ignoring virtualization. The	1
Insert an explicit CPU	1
Reducible expressions also occur	1
vector() {} vector(float a,	1
decades ago, the recommendation	1
decreased when the work	1
CPU.............................................................................81 8.5 Compiler optimization	1
(*CriticalFunction)(b, c); ... return	1
12.7. Vector class code	1
patterns. This can cause	1
publish a function library	1
definitions when used for	1
Multiply(10,8); b = MultiplyBy<8>(10);	1
"undefined". This allows the	1
separately: for (r2 =	1
[ecx+eax*4],ebx stores this result	1
std::unexpected() function in case	1
b.x + c.x +	1
people. I simply don't	1
(GetExceptionCode() == EXCEPTION_FLT_OVERFLOW ?	1
-mveclibabi=svml. This library has	1
a[c][r] = b[r][c]; }	1
uninitialized, if pointer arithmetic	1
jumps, calls and branches	1
places. Constant folding and	1
computing, but for most	1
stress the importance of	1
Iu8vec16 Vec16uc 16 8	1
b[1], ... then you	1
strictness is required. See	1
2.1. Comparing performance of	1
alignment, bytes bool 1	1
2.00. Intel C++ compiler,	1
around. Adding 1 to	1
Why is template metaprogramming	1
access....................................................................................................... 22 3.14 Context	1
arraysize) { // Catch	1
casting. Linked lists and	1
casting, but also safer.	1
violations and invalid pointers.	1
-mveclibabi -fopenmp /Qopenmp -m32	1
malloc. Handles to windows,	1
Last updated 2014-08-07. Contents	1
malloc) is necessarily accessed	1
*(__m64*)&source); // MOVNTQ _mm_empty();	1
231 then convert it	1
interval. A hash map	1
removed, all resources are	1
Func() { S1 x,	1
interval: // Example 14.5a	1
question: Put in an	1
r2; c2++) { swapd(a[r2][c2],a[c2][r2]);	1
violation, integer overflow, and	1
incremental or iterative in	1
admittedly very kludgy. The	1
application- specific instructions that	1
collect the functions that	1
PC's, workstations and scientific	1
"position-independent code" actually implies	1
application, while dynamic linking	1
spots. The test should	1
list.Size(); i++) { //	1
essential task of the	1
r2, c1, c2; double	1
xx-xx--x- reciprocal Boolean algebra	1
mirroring is not allowed.	1
"function level linking" if	1
identified. My test tool	1
g(x)); In this example,	1
Time- consuming library functions	1
originally designed by Intel	1
8*1024/64 = 128. These	1
--xxxx--- a & a=	1
(using Intel vector classes):	1
series: ex xn n	1
3.; x.d = y.d	1
v.i) { // u.f	1
select_gt(b, zero, c +	1
Prototype for the common	1
String constants and floating	1
IsPowerOf2 = false where	1
glibc version 2.11 ifunc	1
pros and cons of	1
matical applications. But we	1
............................................................................ 51 7.19 Class	1
stored? If the total	1
tends to make the	1
leftmost column to the	1
Gnu). Other compilers need	1
series, vectorized #include <dvec.h>	1
series. The exponential function	1
(ZMM). Vector operations are	1
Command line options relevant	1
2.1.7, 2004. No differences	1
Square blocking and similar	1
DelayFiveSeconds function will wait	1
tortuous and convoluted template	1
.......................................................... 107 12.3 Automatic	1
boxes, etc. should be	1
s); return _mm_cvtss_f32(s); }	1
yes License license included	1
dialog boxes, etc. should	1
integer). All intermediate results	1
~. The Boolean operators	1
~(~a) = a -	1
matrix, i.e. each element	1
xxxxxxx-x xxxxxxxxx x-xxx---- a-(-b)=a+b	1
Those who are satisfied	1
file) should be made	1
predictions in the different	1
value, n. But not	1
x[0] = a; b	1
_mm_stream_pi((__m64*)dest, *(__m64*)&source); // MOVNTQ	1
OneOrTwo5[(b!=0) ? 1 :	1
fake an Intel Pentium	1
(XMM) if the SSE2	1
logically distinct tasks. A	1
vendors are offering profiling	1
constant, unless the address	1
i[2]; } u; if	1
analyze all pointers and	1
accomplished by doing the	1
catch, and throw. It	1
2005; and "More Effective	1
PCLMUL wmmintrin.h AVX immintrin.h	1
wherever appropriate to give	1
criteria or lists of	1
.............................................................................................................. 54 7.23 Constructors	1
++i and the post-increment	1
repeatedly with the same	1
sqrt, pow and log	1
__restrict__, if supported by	1
raising an exception in	1
vectorclass.h Supported compilers Intel,	1
section. 12.5 Using vector	1
section, but it will	1
unfavorable, unless the value	1
114 #include <dvec.h> //	1
................................................................................................................... 56 7.26 Overloaded	1
hasn't thought about the	1
1.f); // initialize sum	1
emmintrin.h SSE3 pmmintrin.h Suppl.	1
optimal, though. In some	1
occurrence is rare. Testing	1
testing, verifying and maintaining	1
row. The same advice	1
(methods)......................................................................... 53 7.20 Virtual	1
self-styled hacks and direct	1
ia32intrin.h _mm_exp_ps _mm_exp_pd AMD	1
N-1)==0,N>::p(x); } // Use	1
minute if the network	1
develop. It is easy	1
Declare the function inline.	1
exact time consumption as	1
RAM, a lot of	1
circumstances around the hot	1
powN<true,1> { public: static	1
NOT. Instead, you can	1
(0x2710 / 0x40) %	1
_mm_i64gather_epi32 unlimited 8 bytes	1
Embarcadero Comes with the	1
lower; and the amount	1
table-based methods with little	1
(a*b*c)+(c*b*a) to a*b*c*2. It	1
97 Table 9.1. Time	1
pow(x,10) with only four	1
AMD's profiler is called	1
data", where it is	1
92 DynamicArray[i] = WhateverFunction(i);	1
allowing two data members	1
Tips about how to	1
vice versa. But most	1
generators. In general, it	1
x4*x4; double x10 =	1
tested. The reason is	1
c.x + d.x; a.y	1
c.y + d.y; Fortunately,	1
activates critical application- specific	1
back, where n is	1
activated by the user.	1
Scheduling A compiler may	1
7.34b. Replace macro by	1
Vectorize #pragma vector always	1
comments, in green. It	1
variables: // Example 8.23b.	1
80386 32 bit mode	1
14.16b double y, a1,	1
note: This example is	1
Requires binutils version 2.20	1
Pentium-II or later instruction	1
Borland's now discontinued Object	1
xx4; // next four	1
__except (GetExceptionCode() == EXCEPTION_FLT_OVERFLOW	1
rounding, but neither faster	1
issue, as you can	1
superfluous code, but there	1
b*2.0/3.0 will be calculated	1
mainstream next year. Ignoring	1
_mm_hadd_ps(s, s); return _mm_cvtss_f32(s);	1
Perl. Several modern programming	1
14.17a double a1, a2,	1
15.1c? We took advantage	1
discussions. Turn on the	1
unwinding. All functions have	1
("int 3"); or __debugbreak();.	1
relax floating point precision	1
higher) is enabled. Volatile	1
;checkifi<100 ; repeat loop	1
dealt with in assembly	1
((x2)2)2 a+a+a+a=a*4 -(-a)=a -	1
language: An optimization guide	1
dummy[4]; volatile int DontSkip;	1
model, which quite likely	1
exist for all major	1
14.15a if (a >	1
(without member functions) has	1
Loopunrolling x-xxxx--x Profile-guided optimization	1
wrong, but it is	1
makers assume that floating	1
textbook on test theory.	1
15; // exponent +	1
leaks. It is the	1
large. 156 16.3 Worst-case	1
Poor reproducibility. Delays in	1
159 18 Overview of	1
154 // Print heading	1
/GR- -fno-rtti Assume no	1
152 If you want	1
entry. You can avoid	1
inlining. Reducible expressions also	1
Object1.Hello(), though future compilers	1
151 15.1c automatically, and	1
thought-through approach to error	1
vectorize. The pragmas must	1
suggests methods for avoiding	1
normally. There are various	1
_mm256_i32gather_ps unlimited 4 bytes	1
Multithreading.............................................................................................................. 101 10.1 Hyperthreading	1
_endthread(), etc. then there	1
ranges) do not overlap.	1
analogous to example 15.1b	1
summation variables sum1 and	1
system......................................................................................... 6 2.4 Choice	1
statement: // Example 8.9b	1
happy to receive new	1
systems" for details on	1
Gnu/AT&T syntax: __asm ("fldl	1
Device drivers, interrupt service	1
mainframes, and between simple	1
device. Any language that	1
loops" chapter in manual	1
www.agner.org/optimize/#vectorclass. The Intel vector	1
%1 \n fistpl %0	1
sort and search facilities,	1
floata; boolb=0; static const	1
updates. Automatic updating of	1
updates, remote help files,	1
(b[i] * c[i]); }	1
level-3 cache. If the	1
14.00 for 80x86 /	1
Few compilers are able	1
detects an error can	1
_alloca) for (int i	1
anywhere in the calculations.	1
B1, public B2 {	1
importantly, it requires an	1
................................................................................................................. 21 3.11 Other	1
a[1], b[1], ... then	1
0.5 ns = 250	1
Feature bloat. It is	1
0.6 1.19 13 Asmlib	1
mask, and bb[i]*cc[i] is	1
list[ARRAYSIZE]; if (i <	1
Is16vec4 16 4 unsigned	1
Details about instruction latencies	1
JavaScript, PHP, ASP and	1
NUMCOLUMNS = 100; int	1
eight) points with the	1
First you compile the	1
losing precision. The compilers	1
ReadTSC(); CriticalFunction(); timediff[i] =	1
cores: Define multiple threads	1
makers. 4. Instruction tables:	1
panic if you don't	1
sin function is defined	1
rebooted. To prevent this	1
WritePrivateProfileString, which opens and	1
(...) { ... }	1
abuse is extremely costly	1
place. This can be	1
FuncCol(int); const int rows	1
%. Conversion to floating	1
Const cast The const_cast	1
abs(u.f) > abs(v.f) }	1
tables: Lists of instruction	1
13) { // Bounds	1
Interference from other processes.	1
times: Dispatch on every	1
min)) { ... There	1
conflicts. But if a	1
133 although slightly less	1
complicated? Because the C++	1
131 Note that these	1
<math.h> #define EXCEPTION_FLT_OVERFLOW 0xC0000091L	1
Application programmers rarely program	1
people who have sent	1
disks and USB sticks	1
Further details are given	1
single-thread speed. In this	1
collection, as mentioned above.	1
138 A similar method	1
tables. The static data	1
%0 " : "=m"(n)	1
tables, and virtual function	1
superior performance/price ratio. The	1
powerful. The high priority	1
newsgroup comp.lang.asm.x86 for some	1
activate a particular part	1
C2, then we can	1
massively parallel vector processing	1
unique key. Do objects	1
multithreading that we have	1
unlikely that the end	1
pending instructions in the	1
a[0], b[0], a[1], b[1],	1
kb. This corresponds to	1
kb, 8 ways. The	1
practice to test each	1
(RTTI). See page 54.	1
(RTTI), which affects other	1
www.agner.org/optimize/testp.zip or get ReadTSC	1
.................................................................................................................... 55 7.25 Bitfields	1
ease of development are	1
resized in the event	1
Pro instruction set makes	1
unpredictably at inconvenient times.	1
................................... 141 14.9 Using	1
Internal references to data	1
comparisons. The solution a	1
trap integer overflow with	1
overridden in Linux and	1
Vec4ui 64 2 int64_t	1
sub-expressions. Why is template	1
addresses, or if pointers	1
opinions on which imprecisions	1
microprocessors, different alignments and	1
individually. Example: // Example	1
p->b;} int Sum3(S3 &	1
initialisation i=0; has been	1
matters rather than the	1
tune the code to	1
18.3. Predefined macros Compiler	1
doubled for this task	1
categories: File input/output Graphics	1
routines, system core and	1
usability. This is not	1
0x8040); See page 145	1
couple of things that	1
Parameter transfer is more	1
huge). Far storage, far	1
13.1, Requires binutils version	1
Of course, this works	1
131) shows a way	1
recompile it. I am	1
Main loop for calculations:	1
MKL, VML and SVML.	1
log(c[i]);. This would double	1
said, I must warn	1
ways). If a program	1
tests, the Intel compiler	1
trees, hash maps etc.	1
template: // Example 7.34b.	1
bits). The advantages of	1
FactorialTable[b]; ... } }	1
Thin clients that depend	1
_mm_cvtsd_si32(_mm_load_sd(&x));} The code in	1
int)i; This conversion takes	1
tried. The Microsoft, Intel	1
Windows) to determine if	1
needed? A matrix or	1
2A, 2B, and 3A	1
follows. The first generation	1
static_cast<float>(i); // Implicit type	1
respect. 7.15 Function parameters	1
bulky and difficult to	1
light-weight alternative is the	1
kilobyte is 1024 bytes,	1
correction for the "FDIV	1
supports. An inferior version	1
supports, rather than its	1
104 } Microprocessors with	1
5-10% for some CPU-intensive	1
0.5ns. 2GHz A clock	1
profitable. On the other	1
255 uint8_t unsigned short	1
MASM assembly language has	1
150. Using templates for	1
directly, or use the	1
directly. The reason for	1
argue that it is	1
planned solutions. Patches should	1
capability: // Example 11.1a	1
destination, but don't count	1
shell script. Interpreted code	1
.so). There is no	1
range"); or better, make	1
reversed if c <	1
4.4, 2.5}; return list[x];	1
reflecting it at the	1
scanf. Violation of array	1
isolation have been unsatisfied	1
limiting factors for the	1
(signed) address. The linker	1
exceptions, etc. Event-based sampling	1
measurements: warm up the	1
1.0 <= u.f <	1
YMM) which can be	1
Covers PC's, workstations and	1
Wednesday, Thursday, Friday, Saturday	1
(XMM or YMM) which	1
Iu16vec4 32 2 2	1
patch. 131 Note that	1
1., 1./2., 1./6., 1./24.,	1
met then it is	1
xopintrin.h (Gnu) AMD FMA4	1
FuncC(i+1); } This has	1
^0 = a a	1
C99 standard. An implementation	1
Iu16vec8 Vec8us 32 4	1
x86intrin.h (Gnu) Table 12.2.	1
unpacking needed. Predictable branches	1
-fsource-asm). This option makes	1
seriously. User complaints should	1
__attribute__((aligned(64))); // Linux syntax	1
clash with another dynamic	1
nature of the stack.	1
if(!(a || b)) even	1
requirement. Useful when no	1
Advanced book on optimization	1
propagated through a series	1
C0::f or C1::f. But	1
I64vec1 8 16 char	1
(CParent<>) contains any member	1
dilemma. You may prefer	1
High precision math. Libraries	1
Gnu: Glibc v. 2.7,	1
API's. Memory swapping. Software	1
workaround. Supports all x86	1
4.1.0, 2006 (Red Hat).	1
_mm_empty(); // EMMS }	1
parallel: Using multiple CPUs	1
our estimate is correct	1
8.0f) * x +	1
considerable. If two threads	1
pointer". The standard stack	1
"Zen of code optimization",	1
parameters). The this pointer	1
debate about which software	1
Pragmatic Look at Exception	1
Multiplications are done implicitly	1
(1,2,3,4), and store the	1
146). In the cases	1
green. It takes some	1
candidates for register variables	1
Preprocessor directives. For example	1
Out-of-order execution (chapter 11)	1
he or she is	1
thousands of people. I	1
menu click becomes inconsistent	1
chapter, I have described	1
shuffling can sometimes take	1
a&&b (a&&b) || (a&&c)	1
arithmetics and pointer type	1
Vec32uc Vec16s Vec16us Vec8i	1
Move the conversions out	1
if(!a && !b) rather	1
(column = 0; column	1
gives: // Example 7.30b	1
100000000. When we add	1
formats. Comments All of	1
Iss. 4, 2007 (www.intel.com/technology/itj/).	1
incomplete information about the	1
printf("Alpha"); break; case 1:	1
generations classes contain the	1
costless. It is simply	1
guidelines. Most caches are	1
knowing that the objects	1
7.43b is admittedly very	1
18, then the &	1
Thinking in terms of	1
Relocation is done by	1
Typical candidates for register	1
int16_t int in 16-bit	1
shall automatically come into	1
p2; p2 = &Object2;	1
SafeArray() { memset(a, 0,	1
closes the file for	1
uint32_t unsigned long long	1
2.5f; If we assume	1
breakpoints at every function	1
favor of Intel CPUs	1
g++ v 4.0.1. Gnu:	1
....................................................................................................................... 3 1.1 The	1
frustrated by unacceptably long	1
2.7, 2.8. Asmlib: v.	1
a[i+3]; } sum =	1
columns. Every fourth of	1
a[N]; public: SafeArray() {	1
Overriding the Intel CPU	1
columns; j++) 39 matrix[i][j]	1
a.x = b.x +	1
a.y = b.y +	1
conversion, shuffling, packing, unpacking	1
responsible for creating and	1
i++; } } }	1
throw(); This allows the	1
i++. cmp eax, 100	1
tools, rather than by	1
precedence, not only when	1
__intel_cpu_features_init_x(). In other cases,	1
(Some compilers use the	1
well- tested library modules	1
a=a*2; to return a+1;.	1
interrupt, e.g. every millisecond.	1
7.1-4, 2008. Digital Mars	1
truncation, and % means	1
old. The CPU market	1
232-1 uint32_t unsigned long	1
API. In some cases,	1
__m128d defines a 128	1
Wesley 1997. Mostly obsolete.	1
73) automatically then it	1
73. Runtime polymorphism is	1
s(0.f, 0.f, 0.f, 1.f);	1
Active Template Library (ATL)	1
subset, giving access to	1
remedies against this problem:	1
resultant code will be	1
sequence, where r is	1
safely assume that the	1
1]; Here, I have	1
kind: "what is the	1
environment, between different threads	1
point). There are also	1
(everything that begins with	1
2008, v. 9.0 CodeGear	1
bb) { for (int	1
2008. Digital Mars Compiler	1
intrinsics, automatic vectorization (see	1
intrinsics. Digital Mars This	1
layer of a third-party	1
(FILO) basis then use	1
linking" if available. See	1
14.2a float a; int	1
14.2b float a; int	1
FuncC. Unrolling the loop	1
similarly sets the variable	1
R2 as well as	1
apart. I will call	1
FMA3 floating point multiply-and-add	1
clarity of the program	1
these, it is important	1
these. The CodeGear, Codeplay	1
Porting such an application	1
wasted. The consequence is	1
memmove, memset, or mathematical	1
[esp+12] ; edx =	1
reserving memory in advance.	1
tempting to fine- tune	1
levels of cache for	1
DelayFiveSeconds() { seconds =	1
mimic the behavior of	1
Third Edition, 2005; and	1
identifying hot spots in	1
disagree with this rule.	1
AQtime, Intel VTune and	1
14.29 union { float	1
14.24 union { float	1
14.25 union { float	1
Vectors of 256-bit size	1
reciprocal, fast approximate reciprocal	1
14.20 double d =	1
14.21 is faster than	1
adapt to the new	1
unrelated to each other	1
unit- test because the	1
SelectAddMul_AVX2 #endif // SSE2	1
1.6; int a, b;	1
fighting with the problems	1
__intel_new_strlen in library libircmt.lib.	1
ARM platforms and various	1
a[i]. Note how efficient	1
at, rather than the	1
overwrite the return address	1
seconds. A safer implementation	1
399 int b; //	1
immintrin.h AMD SSE4A ammintrin.h	1
BSF (bit scan forward)	1
seconds; // incremented every	1
1.2f; // Example 14.18c	1
intended, while the Borland	1
makefile. You can check	1
strings. In most cases,	1
supply such a framework	1
queue. It is more	1
queue, list, database, or	1
from), function parameters, local	1
distinguishing between the number	1
queue) allocates one memory	1
comp.lang.asm.x86 for some links.	1
9.1b. On the contrary,	1
cc[]); // function prototypes	1
Coarse-grained parallelism refers to	1
term for running multiple	1
wstring or CString uses	1
symbols, but this feature	1
consequences. I once made	1
activating the very time-consuming	1
sum2; If the microprocessor	1
minimized. For example, if	1
inserted, one by one,	1
*(T*)0; } // No	1
7.30b. The loop control	1
vary dynamically and that	1
14.4a const int size	1
exceed 2 Gbytes. This	1
WriteFile(handle, ...)) { ...	1
&SelectAddMul_SSE41; (iset >= 2)	1
11, Iss. 4, 2007	1
allocated. If the final	1
11. Using the vector	1
minimized if the number	1
alias, if appropriate. 8.	1
115 from bb into	1
Atom processors, but is	1
100> list; // Make	1
116 // Set function	1
111 } You have	1
110 // AND each	1
around, (3) trap integer	1
112 Vectorized table lookup	1
-Wstrict-overflow=2, or (5) make	1
FuncB(i+1); FuncC(i+1); } This	1
minimum, maximum, saturated addition,	1
118 12.7 Mathematical functions	1
11; // exponent +	1
constant: Unsigned is faster	1
Jr.: "Hacker's Delight". Addison-Wesley,	1
70). The programmer does	1
(&) and the EXCLUSIVE	1
list[300] = 0; 14.6	1
(&& and ||). The	1
Default version return &CriticalFunction_386;	1
locked after the program	1
1./24., 1./120., 1./720., 1./5040.,	1
executed, cache misses, branch	1
annoying. We may decide	1
94 Are objects accessed	1
91 step by step.	1
9; } Induction variables	1
98 int r, c;	1
platform, but also supports	1
exiting the {} brackets	1
rare cases of floating	1
occupying a cache line.	1
_mm_and_si128(c2, mask); 110 //	1
getting them into the	1
Linux). Threads are useful	1
7.41a class vector {	1
7.41b a.x = b.x	1
Zero can be represented	1
endl; // Output array	1
0x20 = 0x1C. Reading	1
[eax], ecx DWORD PTR	1
Alternative to multiple inheritance	1
NOT on a variable	1
reports of which functions	1
registration database in the	1
error; and make appropriate	1
calling. __fastcall or __attribute__((fastcall)).	1
(arrays can also be	1
__declspec(thread). Such variables have	1
2.5; // Use signed	1
granularity is too fine	1
&= 0x7FFFFFFF; // set	1
accessed. Pointer arithmetic A	1
BIOS setup. on Intel	1
quadratic matrix, i.e. each	1
d+e, then c is	1
re-loaded from memory a	1
2.5, which is double.	1
writeable data. Therefore, the	1
malloc/free should be avoided	1
(single precision requires only	1
"Gnu indirect function" has	1
eax,eax. This is a	1
nature, it is important	1
/arch:SSSE2 -msse4.1 /arch:SSE4.1 -mAVX	1
27. An array can	1
1997. Mostly obsolete. Microprocessor	1
Nowadays, programming textbooks recommend	1
Sandy Bridge) because it	1
Primitives". These function libraries	1
;startofFunc ; a ;	1
meaningless event counts for	1
--- - ----- x----	1
disturb the users with	1
task-specific part of the	1
Temporary files that need	1
'1' is not included	1
dummy[0]; clock = __rdtsc();	1
replaces the PLT entry	1
a+1; b = temp	1
reproducible. Such events as	1
incredibly stupid things. Looking	1
Efficiency Accessing a variable	1
Re-interpreting the type of	1
inheritance. There may be	1
inheritance, virtual functions, and	1
Future processors will support	1
sub-vector before it has	1
(^) may give inconsistent	1
incurred on all non-static	1
b<c) Multiply by constant	1
Foundation Classes (MFC). A	1
volumes in this series	1
12.2. Header files for	1
